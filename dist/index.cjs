"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AbstractCharacterInformation: () => AbstractCharacterInformation,
  AbstractContactInformations: () => AbstractContactInformations,
  AbstractFightDispellableEffect: () => AbstractFightDispellableEffect,
  AbstractFightTeamInformations: () => AbstractFightTeamInformations,
  AbstractGameActionFightTargetedAbilityMessage: () => AbstractGameActionFightTargetedAbilityMessage,
  AbstractGameActionMessage: () => AbstractGameActionMessage,
  AbstractGameActionWithAckMessage: () => AbstractGameActionWithAckMessage,
  AbstractPartyEventMessage: () => AbstractPartyEventMessage,
  AbstractPartyMemberInFightMessage: () => AbstractPartyMemberInFightMessage,
  AbstractPartyMessage: () => AbstractPartyMessage,
  AbstractPlayerSearchInformation: () => AbstractPlayerSearchInformation,
  AbstractSocialGroupInfos: () => AbstractSocialGroupInfos,
  AbstractTaxCollectorListMessage: () => AbstractTaxCollectorListMessage,
  AccessoryPreviewErrorEnum: () => AccessoryPreviewErrorEnum,
  AccessoryPreviewErrorMessage: () => AccessoryPreviewErrorMessage,
  AccessoryPreviewMessage: () => AccessoryPreviewMessage,
  AccessoryPreviewRequestMessage: () => AccessoryPreviewRequestMessage,
  AccountCapabilitiesMessage: () => AccountCapabilitiesMessage,
  AccountHouseInformations: () => AccountHouseInformations,
  AccountHouseMessage: () => AccountHouseMessage,
  AccountInformationsUpdateMessage: () => AccountInformationsUpdateMessage,
  AccountLinkRequiredMessage: () => AccountLinkRequiredMessage,
  AccountLoggingKickedMessage: () => AccountLoggingKickedMessage,
  AccountTagInformation: () => AccountTagInformation,
  Achievement: () => Achievement,
  AchievementAchieved: () => AchievementAchieved,
  AchievementAchievedRewardable: () => AchievementAchievedRewardable,
  AchievementAlmostFinishedDetailedListMessage: () => AchievementAlmostFinishedDetailedListMessage,
  AchievementAlmostFinishedDetailedListRequestMessage: () => AchievementAlmostFinishedDetailedListRequestMessage,
  AchievementDetailedListMessage: () => AchievementDetailedListMessage,
  AchievementDetailedListRequestMessage: () => AchievementDetailedListRequestMessage,
  AchievementDetailsMessage: () => AchievementDetailsMessage,
  AchievementDetailsRequestMessage: () => AchievementDetailsRequestMessage,
  AchievementFinishedInformationMessage: () => AchievementFinishedInformationMessage,
  AchievementFinishedMessage: () => AchievementFinishedMessage,
  AchievementListMessage: () => AchievementListMessage,
  AchievementObjective: () => AchievementObjective,
  AchievementRewardErrorMessage: () => AchievementRewardErrorMessage,
  AchievementRewardRequestMessage: () => AchievementRewardRequestMessage,
  AchievementRewardSuccessMessage: () => AchievementRewardSuccessMessage,
  AchievementStartedObjective: () => AchievementStartedObjective,
  AcquaintanceAddedMessage: () => AcquaintanceAddedMessage,
  AcquaintanceInformation: () => AcquaintanceInformation,
  AcquaintanceOnlineInformation: () => AcquaintanceOnlineInformation,
  AcquaintanceSearchErrorMessage: () => AcquaintanceSearchErrorMessage,
  AcquaintanceSearchMessage: () => AcquaintanceSearchMessage,
  AcquaintanceServerListMessage: () => AcquaintanceServerListMessage,
  AcquaintancesGetListMessage: () => AcquaintancesGetListMessage,
  AcquaintancesListMessage: () => AcquaintancesListMessage,
  ActivityHideRequestMessage: () => ActivityHideRequestMessage,
  ActivityLockRequestMessage: () => ActivityLockRequestMessage,
  ActivitySuggestionsMessage: () => ActivitySuggestionsMessage,
  ActivitySuggestionsRequestMessage: () => ActivitySuggestionsRequestMessage,
  ActorAlignmentInformations: () => ActorAlignmentInformations,
  ActorExtendedAlignmentInformations: () => ActorExtendedAlignmentInformations,
  ActorOrientation: () => ActorOrientation,
  ActorRestrictionsInformations: () => ActorRestrictionsInformations,
  AdditionalTaxCollectorInformations: () => AdditionalTaxCollectorInformations,
  AdminCommandMessage: () => AdminCommandMessage,
  AdminQuietCommandMessage: () => AdminQuietCommandMessage,
  AggressableStatusEnum: () => AggressableStatusEnum,
  AlignmentRankUpdateMessage: () => AlignmentRankUpdateMessage,
  AlignmentSideEnum: () => AlignmentSideEnum,
  AlignmentWarEffortDonatePreviewMessage: () => AlignmentWarEffortDonatePreviewMessage,
  AlignmentWarEffortDonateRequestMessage: () => AlignmentWarEffortDonateRequestMessage,
  AlignmentWarEffortDonationResultEnum: () => AlignmentWarEffortDonationResultEnum,
  AlignmentWarEffortDonationResultMessage: () => AlignmentWarEffortDonationResultMessage,
  AlignmentWarEffortInformation: () => AlignmentWarEffortInformation,
  AlignmentWarEffortProgressionMessage: () => AlignmentWarEffortProgressionMessage,
  AlignmentWarEffortProgressionRequestMessage: () => AlignmentWarEffortProgressionRequestMessage,
  AllianceBulletinMessage: () => AllianceBulletinMessage,
  AllianceBulletinSetErrorMessage: () => AllianceBulletinSetErrorMessage,
  AllianceBulletinSetRequestMessage: () => AllianceBulletinSetRequestMessage,
  AllianceChangeGuildRightsMessage: () => AllianceChangeGuildRightsMessage,
  AllianceCreationResultMessage: () => AllianceCreationResultMessage,
  AllianceCreationStartedMessage: () => AllianceCreationStartedMessage,
  AllianceCreationValidMessage: () => AllianceCreationValidMessage,
  AllianceFactSheetInformations: () => AllianceFactSheetInformations,
  AllianceFactsErrorMessage: () => AllianceFactsErrorMessage,
  AllianceFactsMessage: () => AllianceFactsMessage,
  AllianceFactsRequestMessage: () => AllianceFactsRequestMessage,
  AllianceGuildLeavingMessage: () => AllianceGuildLeavingMessage,
  AllianceInformations: () => AllianceInformations,
  AllianceInsiderInfoMessage: () => AllianceInsiderInfoMessage,
  AllianceInsiderInfoRequestMessage: () => AllianceInsiderInfoRequestMessage,
  AllianceInsiderPrismInformation: () => AllianceInsiderPrismInformation,
  AllianceInvitationAnswerMessage: () => AllianceInvitationAnswerMessage,
  AllianceInvitationMessage: () => AllianceInvitationMessage,
  AllianceInvitationStateRecrutedMessage: () => AllianceInvitationStateRecrutedMessage,
  AllianceInvitationStateRecruterMessage: () => AllianceInvitationStateRecruterMessage,
  AllianceInvitedMessage: () => AllianceInvitedMessage,
  AllianceJoinedMessage: () => AllianceJoinedMessage,
  AllianceKickRequestMessage: () => AllianceKickRequestMessage,
  AllianceLeftMessage: () => AllianceLeftMessage,
  AllianceListMessage: () => AllianceListMessage,
  AllianceMembershipMessage: () => AllianceMembershipMessage,
  AllianceModificationEmblemValidMessage: () => AllianceModificationEmblemValidMessage,
  AllianceModificationNameAndTagValidMessage: () => AllianceModificationNameAndTagValidMessage,
  AllianceModificationStartedMessage: () => AllianceModificationStartedMessage,
  AllianceModificationValidMessage: () => AllianceModificationValidMessage,
  AllianceMotdMessage: () => AllianceMotdMessage,
  AllianceMotdSetErrorMessage: () => AllianceMotdSetErrorMessage,
  AllianceMotdSetRequestMessage: () => AllianceMotdSetRequestMessage,
  AlliancePartialListMessage: () => AlliancePartialListMessage,
  AlliancePrismDialogQuestionMessage: () => AlliancePrismDialogQuestionMessage,
  AlliancePrismInformation: () => AlliancePrismInformation,
  AlliancePrismModuleTypeEnum: () => AlliancePrismModuleTypeEnum,
  AllianceRightsBitEnum: () => AllianceRightsBitEnum,
  AllianceTaxCollectorDialogQuestionExtendedMessage: () => AllianceTaxCollectorDialogQuestionExtendedMessage,
  AllianceVersatileInfoListMessage: () => AllianceVersatileInfoListMessage,
  AllianceVersatileInformations: () => AllianceVersatileInformations,
  AlliancedGuildFactSheetInformations: () => AlliancedGuildFactSheetInformations,
  AlmanachCalendarDateMessage: () => AlmanachCalendarDateMessage,
  AlreadyConnectedMessage: () => AlreadyConnectedMessage,
  AlternativeMonstersInGroupLightInformations: () => AlternativeMonstersInGroupLightInformations,
  AnomalyStateMessage: () => AnomalyStateMessage,
  AnomalySubareaInformation: () => AnomalySubareaInformation,
  AnomalySubareaInformationRequestMessage: () => AnomalySubareaInformationRequestMessage,
  AnomalySubareaInformationResponseMessage: () => AnomalySubareaInformationResponseMessage,
  ApplicationPlayerInformation: () => ApplicationPlayerInformation,
  AreaFightModificatorUpdateMessage: () => AreaFightModificatorUpdateMessage,
  ArenaFighterIdleMessage: () => ArenaFighterIdleMessage,
  ArenaFighterLeaveMessage: () => ArenaFighterLeaveMessage,
  ArenaLeagueRanking: () => ArenaLeagueRanking,
  ArenaRankInfos: () => ArenaRankInfos,
  ArenaRanking: () => ArenaRanking,
  AtlasPointInformationsMessage: () => AtlasPointInformationsMessage,
  AtlasPointsInformations: () => AtlasPointsInformations,
  AuthenticationTicketAcceptedMessage: () => AuthenticationTicketAcceptedMessage,
  AuthenticationTicketMessage: () => AuthenticationTicketMessage,
  AuthenticationTicketRefusedMessage: () => AuthenticationTicketRefusedMessage,
  BaseSpawnMonsterInformation: () => BaseSpawnMonsterInformation,
  BasicAckMessage: () => BasicAckMessage,
  BasicAllianceInformations: () => BasicAllianceInformations,
  BasicCharactersListMessage: () => BasicCharactersListMessage,
  BasicDateMessage: () => BasicDateMessage,
  BasicGuildInformations: () => BasicGuildInformations,
  BasicLatencyStatsMessage: () => BasicLatencyStatsMessage,
  BasicLatencyStatsRequestMessage: () => BasicLatencyStatsRequestMessage,
  BasicNamedAllianceInformations: () => BasicNamedAllianceInformations,
  BasicNoOperationMessage: () => BasicNoOperationMessage,
  BasicPingMessage: () => BasicPingMessage,
  BasicPongMessage: () => BasicPongMessage,
  BasicStatMessage: () => BasicStatMessage,
  BasicStatWithDataMessage: () => BasicStatWithDataMessage,
  BasicTimeMessage: () => BasicTimeMessage,
  BasicWhoAmIRequestMessage: () => BasicWhoAmIRequestMessage,
  BasicWhoIsMessage: () => BasicWhoIsMessage,
  BasicWhoIsNoMatchMessage: () => BasicWhoIsNoMatchMessage,
  BasicWhoIsRequestMessage: () => BasicWhoIsRequestMessage,
  BidActionEnum: () => BidActionEnum,
  BidCancellationEnum: () => BidCancellationEnum,
  BidExchangerObjectInfo: () => BidExchangerObjectInfo,
  BidValidationEnum: () => BidValidationEnum,
  BoostableCharacteristicEnum: () => BoostableCharacteristicEnum,
  BreachBonusMessage: () => BreachBonusMessage,
  BreachBranch: () => BreachBranch,
  BreachBranchesMessage: () => BreachBranchesMessage,
  BreachBudgetMessage: () => BreachBudgetMessage,
  BreachCharactersMessage: () => BreachCharactersMessage,
  BreachEnterMessage: () => BreachEnterMessage,
  BreachExitRequestMessage: () => BreachExitRequestMessage,
  BreachExitResponseMessage: () => BreachExitResponseMessage,
  BreachGameFightEndMessage: () => BreachGameFightEndMessage,
  BreachInvitationAnswerMessage: () => BreachInvitationAnswerMessage,
  BreachInvitationCloseMessage: () => BreachInvitationCloseMessage,
  BreachInvitationOfferMessage: () => BreachInvitationOfferMessage,
  BreachInvitationRequestMessage: () => BreachInvitationRequestMessage,
  BreachInvitationResponseMessage: () => BreachInvitationResponseMessage,
  BreachKickRequestMessage: () => BreachKickRequestMessage,
  BreachKickResponseMessage: () => BreachKickResponseMessage,
  BreachReward: () => BreachReward,
  BreachRewardBoughtMessage: () => BreachRewardBoughtMessage,
  BreachRewardBuyMessage: () => BreachRewardBuyMessage,
  BreachRewardLockEnum: () => BreachRewardLockEnum,
  BreachRewardsMessage: () => BreachRewardsMessage,
  BreachRoomLockedMessage: () => BreachRoomLockedMessage,
  BreachRoomUnlockEnum: () => BreachRoomUnlockEnum,
  BreachRoomUnlockRequestMessage: () => BreachRoomUnlockRequestMessage,
  BreachRoomUnlockResultMessage: () => BreachRoomUnlockResultMessage,
  BreachSavedMessage: () => BreachSavedMessage,
  BreachStateMessage: () => BreachStateMessage,
  BreachTeleportRequestMessage: () => BreachTeleportRequestMessage,
  BreachTeleportResponseMessage: () => BreachTeleportResponseMessage,
  BreedEnum: () => BreedEnum,
  BufferInformation: () => BufferInformation,
  BuildTypeEnum: () => BuildTypeEnum,
  BulletinMessage: () => BulletinMessage,
  ChallengeFightJoinRefusedMessage: () => ChallengeFightJoinRefusedMessage,
  ChallengeInfoMessage: () => ChallengeInfoMessage,
  ChallengeResultMessage: () => ChallengeResultMessage,
  ChallengeTargetUpdateMessage: () => ChallengeTargetUpdateMessage,
  ChallengeTargetsListMessage: () => ChallengeTargetsListMessage,
  ChallengeTargetsListRequestMessage: () => ChallengeTargetsListRequestMessage,
  ChangeHavenBagRoomRequestMessage: () => ChangeHavenBagRoomRequestMessage,
  ChangeMapMessage: () => ChangeMapMessage,
  ChangeThemeRequestMessage: () => ChangeThemeRequestMessage,
  ChannelEnablingChangeMessage: () => ChannelEnablingChangeMessage,
  ChannelEnablingMessage: () => ChannelEnablingMessage,
  CharacterAlignmentWarEffortProgressionMessage: () => CharacterAlignmentWarEffortProgressionMessage,
  CharacterAlignmentWarEffortProgressionRequestMessage: () => CharacterAlignmentWarEffortProgressionRequestMessage,
  CharacterBaseInformations: () => CharacterBaseInformations,
  CharacterBasicMinimalInformations: () => CharacterBasicMinimalInformations,
  CharacterCanBeCreatedRequestMessage: () => CharacterCanBeCreatedRequestMessage,
  CharacterCanBeCreatedResultMessage: () => CharacterCanBeCreatedResultMessage,
  CharacterCapabilitiesMessage: () => CharacterCapabilitiesMessage,
  CharacterCharacteristic: () => CharacterCharacteristic,
  CharacterCharacteristicDetailed: () => CharacterCharacteristicDetailed,
  CharacterCharacteristicForPreset: () => CharacterCharacteristicForPreset,
  CharacterCharacteristicValue: () => CharacterCharacteristicValue,
  CharacterCharacteristics: () => CharacterCharacteristics,
  CharacterCharacteristicsInformations: () => CharacterCharacteristicsInformations,
  CharacterCreationRequestMessage: () => CharacterCreationRequestMessage,
  CharacterCreationResultEnum: () => CharacterCreationResultEnum,
  CharacterCreationResultMessage: () => CharacterCreationResultMessage,
  CharacterDeletionErrorEnum: () => CharacterDeletionErrorEnum,
  CharacterDeletionErrorMessage: () => CharacterDeletionErrorMessage,
  CharacterDeletionRequestMessage: () => CharacterDeletionRequestMessage,
  CharacterExperienceGainMessage: () => CharacterExperienceGainMessage,
  CharacterFirstSelectionMessage: () => CharacterFirstSelectionMessage,
  CharacterHardcoreOrEpicInformations: () => CharacterHardcoreOrEpicInformations,
  CharacterInventoryPositionEnum: () => CharacterInventoryPositionEnum,
  CharacterLevelUpInformationMessage: () => CharacterLevelUpInformationMessage,
  CharacterLevelUpMessage: () => CharacterLevelUpMessage,
  CharacterLoadingCompleteMessage: () => CharacterLoadingCompleteMessage,
  CharacterMinimalAllianceInformations: () => CharacterMinimalAllianceInformations,
  CharacterMinimalGuildInformations: () => CharacterMinimalGuildInformations,
  CharacterMinimalGuildPublicInformations: () => CharacterMinimalGuildPublicInformations,
  CharacterMinimalInformations: () => CharacterMinimalInformations,
  CharacterMinimalPlusLookAndGradeInformations: () => CharacterMinimalPlusLookAndGradeInformations,
  CharacterMinimalPlusLookInformations: () => CharacterMinimalPlusLookInformations,
  CharacterNameSuggestionFailureMessage: () => CharacterNameSuggestionFailureMessage,
  CharacterNameSuggestionRequestMessage: () => CharacterNameSuggestionRequestMessage,
  CharacterNameSuggestionSuccessMessage: () => CharacterNameSuggestionSuccessMessage,
  CharacterRemodelingEnum: () => CharacterRemodelingEnum,
  CharacterRemodelingInformation: () => CharacterRemodelingInformation,
  CharacterReplayRequestMessage: () => CharacterReplayRequestMessage,
  CharacterReplayWithRemodelRequestMessage: () => CharacterReplayWithRemodelRequestMessage,
  CharacterSelectedErrorMessage: () => CharacterSelectedErrorMessage,
  CharacterSelectedForceMessage: () => CharacterSelectedForceMessage,
  CharacterSelectedForceReadyMessage: () => CharacterSelectedForceReadyMessage,
  CharacterSelectedSuccessMessage: () => CharacterSelectedSuccessMessage,
  CharacterSelectionMessage: () => CharacterSelectionMessage,
  CharacterSelectionWithRemodelMessage: () => CharacterSelectionWithRemodelMessage,
  CharacterSpellModification: () => CharacterSpellModification,
  CharacterSpellModificationTypeEnum: () => CharacterSpellModificationTypeEnum,
  CharacterStatsListMessage: () => CharacterStatsListMessage,
  CharacterToRemodelInformations: () => CharacterToRemodelInformations,
  CharacterUsableCharacteristicDetailed: () => CharacterUsableCharacteristicDetailed,
  CharactersListErrorMessage: () => CharactersListErrorMessage,
  CharactersListMessage: () => CharactersListMessage,
  CharactersListRequestMessage: () => CharactersListRequestMessage,
  CharactersListWithRemodelingMessage: () => CharactersListWithRemodelingMessage,
  ChatAbstractClientMessage: () => ChatAbstractClientMessage,
  ChatAbstractServerMessage: () => ChatAbstractServerMessage,
  ChatActivableChannelsEnum: () => ChatActivableChannelsEnum,
  ChatAdminServerMessage: () => ChatAdminServerMessage,
  ChatChannelsMultiEnum: () => ChatChannelsMultiEnum,
  ChatClientMultiMessage: () => ChatClientMultiMessage,
  ChatClientMultiWithObjectMessage: () => ChatClientMultiWithObjectMessage,
  ChatClientPrivateMessage: () => ChatClientPrivateMessage,
  ChatClientPrivateWithObjectMessage: () => ChatClientPrivateWithObjectMessage,
  ChatCommunityChannelCommunityMessage: () => ChatCommunityChannelCommunityMessage,
  ChatCommunityChannelSetCommunityRequestMessage: () => ChatCommunityChannelSetCommunityRequestMessage,
  ChatErrorEnum: () => ChatErrorEnum,
  ChatErrorMessage: () => ChatErrorMessage,
  ChatKolizeumServerMessage: () => ChatKolizeumServerMessage,
  ChatServerCopyMessage: () => ChatServerCopyMessage,
  ChatServerCopyWithObjectMessage: () => ChatServerCopyWithObjectMessage,
  ChatServerMessage: () => ChatServerMessage,
  ChatServerWithObjectMessage: () => ChatServerWithObjectMessage,
  ChatSmileyExtraPackListMessage: () => ChatSmileyExtraPackListMessage,
  ChatSmileyMessage: () => ChatSmileyMessage,
  ChatSmileyRequestMessage: () => ChatSmileyRequestMessage,
  CheckFileMessage: () => CheckFileMessage,
  CheckFileRequestMessage: () => CheckFileRequestMessage,
  CheckIntegrityMessage: () => CheckIntegrityMessage,
  CinematicMessage: () => CinematicMessage,
  ClientKeyMessage: () => ClientKeyMessage,
  ClientUIOpenedByObjectMessage: () => ClientUIOpenedByObjectMessage,
  ClientUIOpenedMessage: () => ClientUIOpenedMessage,
  ClientUITypeEnum: () => ClientUITypeEnum,
  ClientYouAreDrunkMessage: () => ClientYouAreDrunkMessage,
  CloseHavenBagFurnitureSequenceRequestMessage: () => CloseHavenBagFurnitureSequenceRequestMessage,
  CompassResetMessage: () => CompassResetMessage,
  CompassTypeEnum: () => CompassTypeEnum,
  CompassUpdateMessage: () => CompassUpdateMessage,
  CompassUpdatePartyMemberMessage: () => CompassUpdatePartyMemberMessage,
  CompassUpdatePvpSeekMessage: () => CompassUpdatePvpSeekMessage,
  ConsoleCommandsListMessage: () => ConsoleCommandsListMessage,
  ConsoleMessage: () => ConsoleMessage,
  ConsoleMessageTypeEnum: () => ConsoleMessageTypeEnum,
  ContactAddFailureMessage: () => ContactAddFailureMessage,
  ContactLookErrorMessage: () => ContactLookErrorMessage,
  ContactLookMessage: () => ContactLookMessage,
  ContactLookRequestByIdMessage: () => ContactLookRequestByIdMessage,
  ContactLookRequestByNameMessage: () => ContactLookRequestByNameMessage,
  ContactLookRequestMessage: () => ContactLookRequestMessage,
  CraftResultEnum: () => CraftResultEnum,
  CredentialsAcknowledgementMessage: () => CredentialsAcknowledgementMessage,
  CurrentMapInstanceMessage: () => CurrentMapInstanceMessage,
  CurrentMapMessage: () => CurrentMapMessage,
  CurrentServerStatusUpdateMessage: () => CurrentServerStatusUpdateMessage,
  DebtInformation: () => DebtInformation,
  DebtsDeleteMessage: () => DebtsDeleteMessage,
  DebtsUpdateMessage: () => DebtsUpdateMessage,
  DebugClearHighlightCellsMessage: () => DebugClearHighlightCellsMessage,
  DebugHighlightCellsMessage: () => DebugHighlightCellsMessage,
  DebugInClientMessage: () => DebugInClientMessage,
  DebugLevelEnum: () => DebugLevelEnum,
  DecraftResultMessage: () => DecraftResultMessage,
  DecraftedItemStackInfo: () => DecraftedItemStackInfo,
  DelayedActionTypeEnum: () => DelayedActionTypeEnum,
  DialogTypeEnum: () => DialogTypeEnum,
  DiceRollRequestMessage: () => DiceRollRequestMessage,
  DisplayNumericalValuePaddockMessage: () => DisplayNumericalValuePaddockMessage,
  DocumentReadingBeginMessage: () => DocumentReadingBeginMessage,
  DofusMessage: () => DofusMessage,
  DofusType: () => DofusType,
  DumpedEntityStatsMessage: () => DumpedEntityStatsMessage,
  DungeonKeyRingMessage: () => DungeonKeyRingMessage,
  DungeonKeyRingUpdateMessage: () => DungeonKeyRingUpdateMessage,
  DungeonPartyFinderAvailableDungeonsMessage: () => DungeonPartyFinderAvailableDungeonsMessage,
  DungeonPartyFinderAvailableDungeonsRequestMessage: () => DungeonPartyFinderAvailableDungeonsRequestMessage,
  DungeonPartyFinderListenErrorMessage: () => DungeonPartyFinderListenErrorMessage,
  DungeonPartyFinderListenRequestMessage: () => DungeonPartyFinderListenRequestMessage,
  DungeonPartyFinderPlayer: () => DungeonPartyFinderPlayer,
  DungeonPartyFinderRegisterErrorMessage: () => DungeonPartyFinderRegisterErrorMessage,
  DungeonPartyFinderRegisterRequestMessage: () => DungeonPartyFinderRegisterRequestMessage,
  DungeonPartyFinderRegisterSuccessMessage: () => DungeonPartyFinderRegisterSuccessMessage,
  DungeonPartyFinderRoomContentMessage: () => DungeonPartyFinderRoomContentMessage,
  DungeonPartyFinderRoomContentUpdateMessage: () => DungeonPartyFinderRoomContentUpdateMessage,
  EditHavenBagCancelRequestMessage: () => EditHavenBagCancelRequestMessage,
  EditHavenBagFinishedMessage: () => EditHavenBagFinishedMessage,
  EditHavenBagRequestMessage: () => EditHavenBagRequestMessage,
  EditHavenBagStartMessage: () => EditHavenBagStartMessage,
  EmoteAddMessage: () => EmoteAddMessage,
  EmoteListMessage: () => EmoteListMessage,
  EmotePlayAbstractMessage: () => EmotePlayAbstractMessage,
  EmotePlayErrorMessage: () => EmotePlayErrorMessage,
  EmotePlayMassiveMessage: () => EmotePlayMassiveMessage,
  EmotePlayMessage: () => EmotePlayMessage,
  EmotePlayRequestMessage: () => EmotePlayRequestMessage,
  EmoteRemoveMessage: () => EmoteRemoveMessage,
  EnabledChannelsMessage: () => EnabledChannelsMessage,
  EnterHavenBagRequestMessage: () => EnterHavenBagRequestMessage,
  EntitiesInformationMessage: () => EntitiesInformationMessage,
  EntitiesPreset: () => EntitiesPreset,
  EntityDispositionInformations: () => EntityDispositionInformations,
  EntityInformation: () => EntityInformation,
  EntityInformationMessage: () => EntityInformationMessage,
  EntityLook: () => EntityLook,
  EntityMovementInformations: () => EntityMovementInformations,
  EntityTalkMessage: () => EntityTalkMessage,
  ErrorMapNotFoundMessage: () => ErrorMapNotFoundMessage,
  EvolutiveObjectRecycleResultMessage: () => EvolutiveObjectRecycleResultMessage,
  ExchangeAcceptMessage: () => ExchangeAcceptMessage,
  ExchangeBidHouseBuyMessage: () => ExchangeBidHouseBuyMessage,
  ExchangeBidHouseBuyResultMessage: () => ExchangeBidHouseBuyResultMessage,
  ExchangeBidHouseGenericItemAddedMessage: () => ExchangeBidHouseGenericItemAddedMessage,
  ExchangeBidHouseGenericItemRemovedMessage: () => ExchangeBidHouseGenericItemRemovedMessage,
  ExchangeBidHouseInListAddedMessage: () => ExchangeBidHouseInListAddedMessage,
  ExchangeBidHouseInListRemovedMessage: () => ExchangeBidHouseInListRemovedMessage,
  ExchangeBidHouseInListUpdatedMessage: () => ExchangeBidHouseInListUpdatedMessage,
  ExchangeBidHouseItemAddOkMessage: () => ExchangeBidHouseItemAddOkMessage,
  ExchangeBidHouseItemRemoveOkMessage: () => ExchangeBidHouseItemRemoveOkMessage,
  ExchangeBidHouseListMessage: () => ExchangeBidHouseListMessage,
  ExchangeBidHousePriceMessage: () => ExchangeBidHousePriceMessage,
  ExchangeBidHouseSearchMessage: () => ExchangeBidHouseSearchMessage,
  ExchangeBidHouseTypeMessage: () => ExchangeBidHouseTypeMessage,
  ExchangeBidHouseUnsoldItemsMessage: () => ExchangeBidHouseUnsoldItemsMessage,
  ExchangeBidPriceForSellerMessage: () => ExchangeBidPriceForSellerMessage,
  ExchangeBidPriceMessage: () => ExchangeBidPriceMessage,
  ExchangeBidSearchOkMessage: () => ExchangeBidSearchOkMessage,
  ExchangeBuyMessage: () => ExchangeBuyMessage,
  ExchangeBuyOkMessage: () => ExchangeBuyOkMessage,
  ExchangeCraftCountModifiedMessage: () => ExchangeCraftCountModifiedMessage,
  ExchangeCraftCountRequestMessage: () => ExchangeCraftCountRequestMessage,
  ExchangeCraftPaymentModificationRequestMessage: () => ExchangeCraftPaymentModificationRequestMessage,
  ExchangeCraftPaymentModifiedMessage: () => ExchangeCraftPaymentModifiedMessage,
  ExchangeCraftResultMagicWithObjectDescMessage: () => ExchangeCraftResultMagicWithObjectDescMessage,
  ExchangeCraftResultMessage: () => ExchangeCraftResultMessage,
  ExchangeCraftResultWithObjectDescMessage: () => ExchangeCraftResultWithObjectDescMessage,
  ExchangeCraftResultWithObjectIdMessage: () => ExchangeCraftResultWithObjectIdMessage,
  ExchangeCrafterJobLevelupMessage: () => ExchangeCrafterJobLevelupMessage,
  ExchangeErrorEnum: () => ExchangeErrorEnum,
  ExchangeErrorMessage: () => ExchangeErrorMessage,
  ExchangeGuildTaxCollectorGetMessage: () => ExchangeGuildTaxCollectorGetMessage,
  ExchangeHandleMountStableTypeEnum: () => ExchangeHandleMountStableTypeEnum,
  ExchangeHandleMountsMessage: () => ExchangeHandleMountsMessage,
  ExchangeIsReadyMessage: () => ExchangeIsReadyMessage,
  ExchangeItemAutoCraftStopedMessage: () => ExchangeItemAutoCraftStopedMessage,
  ExchangeKamaModifiedMessage: () => ExchangeKamaModifiedMessage,
  ExchangeLeaveMessage: () => ExchangeLeaveMessage,
  ExchangeMoneyMovementInformationMessage: () => ExchangeMoneyMovementInformationMessage,
  ExchangeMountFreeFromPaddockMessage: () => ExchangeMountFreeFromPaddockMessage,
  ExchangeMountStableErrorMessage: () => ExchangeMountStableErrorMessage,
  ExchangeMountSterilizeFromPaddockMessage: () => ExchangeMountSterilizeFromPaddockMessage,
  ExchangeMountsPaddockAddMessage: () => ExchangeMountsPaddockAddMessage,
  ExchangeMountsPaddockRemoveMessage: () => ExchangeMountsPaddockRemoveMessage,
  ExchangeMountsStableAddMessage: () => ExchangeMountsStableAddMessage,
  ExchangeMountsStableBornAddMessage: () => ExchangeMountsStableBornAddMessage,
  ExchangeMountsStableRemoveMessage: () => ExchangeMountsStableRemoveMessage,
  ExchangeMountsTakenFromPaddockMessage: () => ExchangeMountsTakenFromPaddockMessage,
  ExchangeMultiCraftCrafterCanUseHisRessourcesMessage: () => ExchangeMultiCraftCrafterCanUseHisRessourcesMessage,
  ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage: () => ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage,
  ExchangeObjectAddedMessage: () => ExchangeObjectAddedMessage,
  ExchangeObjectMessage: () => ExchangeObjectMessage,
  ExchangeObjectModifiedInBagMessage: () => ExchangeObjectModifiedInBagMessage,
  ExchangeObjectModifiedMessage: () => ExchangeObjectModifiedMessage,
  ExchangeObjectModifyPricedMessage: () => ExchangeObjectModifyPricedMessage,
  ExchangeObjectMoveKamaMessage: () => ExchangeObjectMoveKamaMessage,
  ExchangeObjectMoveMessage: () => ExchangeObjectMoveMessage,
  ExchangeObjectMovePricedMessage: () => ExchangeObjectMovePricedMessage,
  ExchangeObjectPutInBagMessage: () => ExchangeObjectPutInBagMessage,
  ExchangeObjectRemovedFromBagMessage: () => ExchangeObjectRemovedFromBagMessage,
  ExchangeObjectRemovedMessage: () => ExchangeObjectRemovedMessage,
  ExchangeObjectTransfertAllFromInvMessage: () => ExchangeObjectTransfertAllFromInvMessage,
  ExchangeObjectTransfertAllToInvMessage: () => ExchangeObjectTransfertAllToInvMessage,
  ExchangeObjectTransfertExistingFromInvMessage: () => ExchangeObjectTransfertExistingFromInvMessage,
  ExchangeObjectTransfertExistingToInvMessage: () => ExchangeObjectTransfertExistingToInvMessage,
  ExchangeObjectTransfertListFromInvMessage: () => ExchangeObjectTransfertListFromInvMessage,
  ExchangeObjectTransfertListToInvMessage: () => ExchangeObjectTransfertListToInvMessage,
  ExchangeObjectTransfertListWithQuantityToInvMessage: () => ExchangeObjectTransfertListWithQuantityToInvMessage,
  ExchangeObjectUseInWorkshopMessage: () => ExchangeObjectUseInWorkshopMessage,
  ExchangeObjectsAddedMessage: () => ExchangeObjectsAddedMessage,
  ExchangeObjectsModifiedMessage: () => ExchangeObjectsModifiedMessage,
  ExchangeObjectsRemovedMessage: () => ExchangeObjectsRemovedMessage,
  ExchangeOfflineSoldItemsMessage: () => ExchangeOfflineSoldItemsMessage,
  ExchangeOkMultiCraftMessage: () => ExchangeOkMultiCraftMessage,
  ExchangeOnHumanVendorRequestMessage: () => ExchangeOnHumanVendorRequestMessage,
  ExchangePlayerMultiCraftRequestMessage: () => ExchangePlayerMultiCraftRequestMessage,
  ExchangePlayerRequestMessage: () => ExchangePlayerRequestMessage,
  ExchangePodsModifiedMessage: () => ExchangePodsModifiedMessage,
  ExchangeReadyMessage: () => ExchangeReadyMessage,
  ExchangeReplayStopMessage: () => ExchangeReplayStopMessage,
  ExchangeReplayStopReasonEnum: () => ExchangeReplayStopReasonEnum,
  ExchangeReplyTaxVendorMessage: () => ExchangeReplyTaxVendorMessage,
  ExchangeRequestMessage: () => ExchangeRequestMessage,
  ExchangeRequestOnMountStockMessage: () => ExchangeRequestOnMountStockMessage,
  ExchangeRequestOnShopStockMessage: () => ExchangeRequestOnShopStockMessage,
  ExchangeRequestOnTaxCollectorMessage: () => ExchangeRequestOnTaxCollectorMessage,
  ExchangeRequestedMessage: () => ExchangeRequestedMessage,
  ExchangeRequestedTradeMessage: () => ExchangeRequestedTradeMessage,
  ExchangeSellMessage: () => ExchangeSellMessage,
  ExchangeSellOkMessage: () => ExchangeSellOkMessage,
  ExchangeSetCraftRecipeMessage: () => ExchangeSetCraftRecipeMessage,
  ExchangeShopStockMovementRemovedMessage: () => ExchangeShopStockMovementRemovedMessage,
  ExchangeShopStockMovementUpdatedMessage: () => ExchangeShopStockMovementUpdatedMessage,
  ExchangeShopStockMultiMovementRemovedMessage: () => ExchangeShopStockMultiMovementRemovedMessage,
  ExchangeShopStockMultiMovementUpdatedMessage: () => ExchangeShopStockMultiMovementUpdatedMessage,
  ExchangeShopStockStartedMessage: () => ExchangeShopStockStartedMessage,
  ExchangeShowVendorTaxMessage: () => ExchangeShowVendorTaxMessage,
  ExchangeStartAsVendorMessage: () => ExchangeStartAsVendorMessage,
  ExchangeStartOkCraftMessage: () => ExchangeStartOkCraftMessage,
  ExchangeStartOkCraftWithInformationMessage: () => ExchangeStartOkCraftWithInformationMessage,
  ExchangeStartOkEvolutiveObjectRecycleTradeMessage: () => ExchangeStartOkEvolutiveObjectRecycleTradeMessage,
  ExchangeStartOkHumanVendorMessage: () => ExchangeStartOkHumanVendorMessage,
  ExchangeStartOkJobIndexMessage: () => ExchangeStartOkJobIndexMessage,
  ExchangeStartOkMountMessage: () => ExchangeStartOkMountMessage,
  ExchangeStartOkMountWithOutPaddockMessage: () => ExchangeStartOkMountWithOutPaddockMessage,
  ExchangeStartOkMulticraftCrafterMessage: () => ExchangeStartOkMulticraftCrafterMessage,
  ExchangeStartOkMulticraftCustomerMessage: () => ExchangeStartOkMulticraftCustomerMessage,
  ExchangeStartOkNpcShopMessage: () => ExchangeStartOkNpcShopMessage,
  ExchangeStartOkNpcTradeMessage: () => ExchangeStartOkNpcTradeMessage,
  ExchangeStartOkRecycleTradeMessage: () => ExchangeStartOkRecycleTradeMessage,
  ExchangeStartOkRunesTradeMessage: () => ExchangeStartOkRunesTradeMessage,
  ExchangeStartedBidBuyerMessage: () => ExchangeStartedBidBuyerMessage,
  ExchangeStartedBidSellerMessage: () => ExchangeStartedBidSellerMessage,
  ExchangeStartedMessage: () => ExchangeStartedMessage,
  ExchangeStartedMountStockMessage: () => ExchangeStartedMountStockMessage,
  ExchangeStartedTaxCollectorShopMessage: () => ExchangeStartedTaxCollectorShopMessage,
  ExchangeStartedWithPodsMessage: () => ExchangeStartedWithPodsMessage,
  ExchangeStartedWithStorageMessage: () => ExchangeStartedWithStorageMessage,
  ExchangeStoppedMessage: () => ExchangeStoppedMessage,
  ExchangeTypeEnum: () => ExchangeTypeEnum,
  ExchangeTypesExchangerDescriptionForUserMessage: () => ExchangeTypesExchangerDescriptionForUserMessage,
  ExchangeTypesItemsExchangerDescriptionForUserMessage: () => ExchangeTypesItemsExchangerDescriptionForUserMessage,
  ExchangeWaitingResultMessage: () => ExchangeWaitingResultMessage,
  ExchangeWeightMessage: () => ExchangeWeightMessage,
  ExitHavenBagRequestMessage: () => ExitHavenBagRequestMessage,
  ExtendedBreachBranch: () => ExtendedBreachBranch,
  ExtendedLockedBreachBranch: () => ExtendedLockedBreachBranch,
  FightAllianceTeamInformations: () => FightAllianceTeamInformations,
  FightCommonInformations: () => FightCommonInformations,
  FightDispellableEffectExtendedInformations: () => FightDispellableEffectExtendedInformations,
  FightDispellableEnum: () => FightDispellableEnum,
  FightEntityDispositionInformations: () => FightEntityDispositionInformations,
  FightExternalInformations: () => FightExternalInformations,
  FightLoot: () => FightLoot,
  FightOptionsEnum: () => FightOptionsEnum,
  FightOptionsInformations: () => FightOptionsInformations,
  FightOutcomeEnum: () => FightOutcomeEnum,
  FightResultAdditionalData: () => FightResultAdditionalData,
  FightResultExperienceData: () => FightResultExperienceData,
  FightResultFighterListEntry: () => FightResultFighterListEntry,
  FightResultListEntry: () => FightResultListEntry,
  FightResultMutantListEntry: () => FightResultMutantListEntry,
  FightResultPlayerListEntry: () => FightResultPlayerListEntry,
  FightResultPvpData: () => FightResultPvpData,
  FightResultTaxCollectorListEntry: () => FightResultTaxCollectorListEntry,
  FightSpellCastCriticalEnum: () => FightSpellCastCriticalEnum,
  FightStartingPositions: () => FightStartingPositions,
  FightTeamInformations: () => FightTeamInformations,
  FightTeamLightInformations: () => FightTeamLightInformations,
  FightTeamMemberCharacterInformations: () => FightTeamMemberCharacterInformations,
  FightTeamMemberEntityInformation: () => FightTeamMemberEntityInformation,
  FightTeamMemberInformations: () => FightTeamMemberInformations,
  FightTeamMemberMonsterInformations: () => FightTeamMemberMonsterInformations,
  FightTeamMemberTaxCollectorInformations: () => FightTeamMemberTaxCollectorInformations,
  FightTeamMemberWithAllianceCharacterInformations: () => FightTeamMemberWithAllianceCharacterInformations,
  FightTemporaryBoostEffect: () => FightTemporaryBoostEffect,
  FightTemporaryBoostStateEffect: () => FightTemporaryBoostStateEffect,
  FightTemporaryBoostWeaponDamagesEffect: () => FightTemporaryBoostWeaponDamagesEffect,
  FightTemporarySpellBoostEffect: () => FightTemporarySpellBoostEffect,
  FightTemporarySpellImmunityEffect: () => FightTemporarySpellImmunityEffect,
  FightTriggeredEffect: () => FightTriggeredEffect,
  FightTypeEnum: () => FightTypeEnum,
  FighterRefusedReasonEnum: () => FighterRefusedReasonEnum,
  FighterStatsListMessage: () => FighterStatsListMessage,
  FinishMoveInformations: () => FinishMoveInformations,
  FinishMoveListMessage: () => FinishMoveListMessage,
  FinishMoveListRequestMessage: () => FinishMoveListRequestMessage,
  FinishMoveSetRequestMessage: () => FinishMoveSetRequestMessage,
  FocusedExchangeReadyMessage: () => FocusedExchangeReadyMessage,
  FollowQuestObjectiveRequestMessage: () => FollowQuestObjectiveRequestMessage,
  FollowedQuestsMessage: () => FollowedQuestsMessage,
  ForgettableSpellClientActionEnum: () => ForgettableSpellClientActionEnum,
  ForgettableSpellClientActionMessage: () => ForgettableSpellClientActionMessage,
  ForgettableSpellDeleteMessage: () => ForgettableSpellDeleteMessage,
  ForgettableSpellEquipmentSlotsMessage: () => ForgettableSpellEquipmentSlotsMessage,
  ForgettableSpellItem: () => ForgettableSpellItem,
  ForgettableSpellListActionEnum: () => ForgettableSpellListActionEnum,
  ForgettableSpellListUpdateMessage: () => ForgettableSpellListUpdateMessage,
  ForgettableSpellsPreset: () => ForgettableSpellsPreset,
  FriendAddFailureMessage: () => FriendAddFailureMessage,
  FriendAddRequestMessage: () => FriendAddRequestMessage,
  FriendAddedMessage: () => FriendAddedMessage,
  FriendDeleteRequestMessage: () => FriendDeleteRequestMessage,
  FriendDeleteResultMessage: () => FriendDeleteResultMessage,
  FriendGuildSetWarnOnAchievementCompleteMessage: () => FriendGuildSetWarnOnAchievementCompleteMessage,
  FriendGuildWarnOnAchievementCompleteStateMessage: () => FriendGuildWarnOnAchievementCompleteStateMessage,
  FriendInformations: () => FriendInformations,
  FriendJoinRequestMessage: () => FriendJoinRequestMessage,
  FriendOnlineInformations: () => FriendOnlineInformations,
  FriendSetStatusShareMessage: () => FriendSetStatusShareMessage,
  FriendSetWarnOnConnectionMessage: () => FriendSetWarnOnConnectionMessage,
  FriendSetWarnOnLevelGainMessage: () => FriendSetWarnOnLevelGainMessage,
  FriendSpouseFollowWithCompassRequestMessage: () => FriendSpouseFollowWithCompassRequestMessage,
  FriendSpouseInformations: () => FriendSpouseInformations,
  FriendSpouseJoinRequestMessage: () => FriendSpouseJoinRequestMessage,
  FriendSpouseOnlineInformations: () => FriendSpouseOnlineInformations,
  FriendStatusShareStateMessage: () => FriendStatusShareStateMessage,
  FriendUpdateMessage: () => FriendUpdateMessage,
  FriendWarnOnConnectionStateMessage: () => FriendWarnOnConnectionStateMessage,
  FriendWarnOnLevelGainStateMessage: () => FriendWarnOnLevelGainStateMessage,
  FriendsGetListMessage: () => FriendsGetListMessage,
  FriendsListMessage: () => FriendsListMessage,
  FullStatsPreset: () => FullStatsPreset,
  GameActionAcknowledgementMessage: () => GameActionAcknowledgementMessage,
  GameActionFightActivateGlyphTrapMessage: () => GameActionFightActivateGlyphTrapMessage,
  GameActionFightCarryCharacterMessage: () => GameActionFightCarryCharacterMessage,
  GameActionFightCastOnTargetRequestMessage: () => GameActionFightCastOnTargetRequestMessage,
  GameActionFightCastRequestMessage: () => GameActionFightCastRequestMessage,
  GameActionFightChangeLookMessage: () => GameActionFightChangeLookMessage,
  GameActionFightCloseCombatMessage: () => GameActionFightCloseCombatMessage,
  GameActionFightDeathMessage: () => GameActionFightDeathMessage,
  GameActionFightDispellEffectMessage: () => GameActionFightDispellEffectMessage,
  GameActionFightDispellMessage: () => GameActionFightDispellMessage,
  GameActionFightDispellSpellMessage: () => GameActionFightDispellSpellMessage,
  GameActionFightDispellableEffectMessage: () => GameActionFightDispellableEffectMessage,
  GameActionFightDodgePointLossMessage: () => GameActionFightDodgePointLossMessage,
  GameActionFightDropCharacterMessage: () => GameActionFightDropCharacterMessage,
  GameActionFightExchangePositionsMessage: () => GameActionFightExchangePositionsMessage,
  GameActionFightInvisibilityMessage: () => GameActionFightInvisibilityMessage,
  GameActionFightInvisibilityStateEnum: () => GameActionFightInvisibilityStateEnum,
  GameActionFightInvisibleDetectedMessage: () => GameActionFightInvisibleDetectedMessage,
  GameActionFightKillMessage: () => GameActionFightKillMessage,
  GameActionFightLifeAndShieldPointsLostMessage: () => GameActionFightLifeAndShieldPointsLostMessage,
  GameActionFightLifePointsGainMessage: () => GameActionFightLifePointsGainMessage,
  GameActionFightLifePointsLostMessage: () => GameActionFightLifePointsLostMessage,
  GameActionFightMarkCellsMessage: () => GameActionFightMarkCellsMessage,
  GameActionFightModifyEffectsDurationMessage: () => GameActionFightModifyEffectsDurationMessage,
  GameActionFightMultipleSummonMessage: () => GameActionFightMultipleSummonMessage,
  GameActionFightNoSpellCastMessage: () => GameActionFightNoSpellCastMessage,
  GameActionFightPointsVariationMessage: () => GameActionFightPointsVariationMessage,
  GameActionFightReduceDamagesMessage: () => GameActionFightReduceDamagesMessage,
  GameActionFightReflectDamagesMessage: () => GameActionFightReflectDamagesMessage,
  GameActionFightReflectSpellMessage: () => GameActionFightReflectSpellMessage,
  GameActionFightSlideMessage: () => GameActionFightSlideMessage,
  GameActionFightSpellCastMessage: () => GameActionFightSpellCastMessage,
  GameActionFightSpellCooldownVariationMessage: () => GameActionFightSpellCooldownVariationMessage,
  GameActionFightSpellImmunityMessage: () => GameActionFightSpellImmunityMessage,
  GameActionFightStealKamaMessage: () => GameActionFightStealKamaMessage,
  GameActionFightSummonMessage: () => GameActionFightSummonMessage,
  GameActionFightTackledMessage: () => GameActionFightTackledMessage,
  GameActionFightTeleportOnSameMapMessage: () => GameActionFightTeleportOnSameMapMessage,
  GameActionFightThrowCharacterMessage: () => GameActionFightThrowCharacterMessage,
  GameActionFightTriggerEffectMessage: () => GameActionFightTriggerEffectMessage,
  GameActionFightTriggerGlyphTrapMessage: () => GameActionFightTriggerGlyphTrapMessage,
  GameActionFightUnmarkCellsMessage: () => GameActionFightUnmarkCellsMessage,
  GameActionFightVanishMessage: () => GameActionFightVanishMessage,
  GameActionMark: () => GameActionMark,
  GameActionMarkCellsTypeEnum: () => GameActionMarkCellsTypeEnum,
  GameActionMarkedCell: () => GameActionMarkedCell,
  GameActionNoopMessage: () => GameActionNoopMessage,
  GameActionSpamMessage: () => GameActionSpamMessage,
  GameActionUpdateEffectTriggerCountMessage: () => GameActionUpdateEffectTriggerCountMessage,
  GameCautiousMapMovementMessage: () => GameCautiousMapMovementMessage,
  GameCautiousMapMovementRequestMessage: () => GameCautiousMapMovementRequestMessage,
  GameContextActorInformations: () => GameContextActorInformations,
  GameContextActorPositionInformations: () => GameContextActorPositionInformations,
  GameContextBasicSpawnInformation: () => GameContextBasicSpawnInformation,
  GameContextCreateErrorMessage: () => GameContextCreateErrorMessage,
  GameContextCreateMessage: () => GameContextCreateMessage,
  GameContextCreateRequestMessage: () => GameContextCreateRequestMessage,
  GameContextDestroyMessage: () => GameContextDestroyMessage,
  GameContextEnum: () => GameContextEnum,
  GameContextKickMessage: () => GameContextKickMessage,
  GameContextMoveElementMessage: () => GameContextMoveElementMessage,
  GameContextMoveMultipleElementsMessage: () => GameContextMoveMultipleElementsMessage,
  GameContextQuitMessage: () => GameContextQuitMessage,
  GameContextReadyMessage: () => GameContextReadyMessage,
  GameContextRefreshEntityLookMessage: () => GameContextRefreshEntityLookMessage,
  GameContextRemoveElementMessage: () => GameContextRemoveElementMessage,
  GameContextRemoveElementWithEventMessage: () => GameContextRemoveElementWithEventMessage,
  GameContextRemoveMultipleElementsMessage: () => GameContextRemoveMultipleElementsMessage,
  GameContextRemoveMultipleElementsWithEventsMessage: () => GameContextRemoveMultipleElementsWithEventsMessage,
  GameContextSummonsInformation: () => GameContextSummonsInformation,
  GameDataPaddockObjectAddMessage: () => GameDataPaddockObjectAddMessage,
  GameDataPaddockObjectListAddMessage: () => GameDataPaddockObjectListAddMessage,
  GameDataPaddockObjectRemoveMessage: () => GameDataPaddockObjectRemoveMessage,
  GameDataPlayFarmObjectAnimationMessage: () => GameDataPlayFarmObjectAnimationMessage,
  GameEntitiesDispositionMessage: () => GameEntitiesDispositionMessage,
  GameEntityDispositionErrorMessage: () => GameEntityDispositionErrorMessage,
  GameEntityDispositionMessage: () => GameEntityDispositionMessage,
  GameFightAIInformations: () => GameFightAIInformations,
  GameFightCharacterInformations: () => GameFightCharacterInformations,
  GameFightCharacteristics: () => GameFightCharacteristics,
  GameFightEffectTriggerCount: () => GameFightEffectTriggerCount,
  GameFightEndMessage: () => GameFightEndMessage,
  GameFightEntityInformation: () => GameFightEntityInformation,
  GameFightFighterEntityLightInformation: () => GameFightFighterEntityLightInformation,
  GameFightFighterInformations: () => GameFightFighterInformations,
  GameFightFighterLightInformations: () => GameFightFighterLightInformations,
  GameFightFighterMonsterLightInformations: () => GameFightFighterMonsterLightInformations,
  GameFightFighterNamedInformations: () => GameFightFighterNamedInformations,
  GameFightFighterNamedLightInformations: () => GameFightFighterNamedLightInformations,
  GameFightFighterTaxCollectorLightInformations: () => GameFightFighterTaxCollectorLightInformations,
  GameFightHumanReadyStateMessage: () => GameFightHumanReadyStateMessage,
  GameFightJoinMessage: () => GameFightJoinMessage,
  GameFightJoinRequestMessage: () => GameFightJoinRequestMessage,
  GameFightLeaveMessage: () => GameFightLeaveMessage,
  GameFightMonsterInformations: () => GameFightMonsterInformations,
  GameFightMonsterWithAlignmentInformations: () => GameFightMonsterWithAlignmentInformations,
  GameFightMutantInformations: () => GameFightMutantInformations,
  GameFightNewRoundMessage: () => GameFightNewRoundMessage,
  GameFightNewWaveMessage: () => GameFightNewWaveMessage,
  GameFightOptionStateUpdateMessage: () => GameFightOptionStateUpdateMessage,
  GameFightOptionToggleMessage: () => GameFightOptionToggleMessage,
  GameFightPauseMessage: () => GameFightPauseMessage,
  GameFightPlacementPositionRequestMessage: () => GameFightPlacementPositionRequestMessage,
  GameFightPlacementPossiblePositionsMessage: () => GameFightPlacementPossiblePositionsMessage,
  GameFightPlacementSwapPositionsAcceptMessage: () => GameFightPlacementSwapPositionsAcceptMessage,
  GameFightPlacementSwapPositionsCancelMessage: () => GameFightPlacementSwapPositionsCancelMessage,
  GameFightPlacementSwapPositionsCancelledMessage: () => GameFightPlacementSwapPositionsCancelledMessage,
  GameFightPlacementSwapPositionsErrorMessage: () => GameFightPlacementSwapPositionsErrorMessage,
  GameFightPlacementSwapPositionsMessage: () => GameFightPlacementSwapPositionsMessage,
  GameFightPlacementSwapPositionsOfferMessage: () => GameFightPlacementSwapPositionsOfferMessage,
  GameFightPlacementSwapPositionsRequestMessage: () => GameFightPlacementSwapPositionsRequestMessage,
  GameFightReadyMessage: () => GameFightReadyMessage,
  GameFightRefreshFighterMessage: () => GameFightRefreshFighterMessage,
  GameFightRemoveTeamMemberMessage: () => GameFightRemoveTeamMemberMessage,
  GameFightResumeMessage: () => GameFightResumeMessage,
  GameFightResumeSlaveInfo: () => GameFightResumeSlaveInfo,
  GameFightResumeWithSlavesMessage: () => GameFightResumeWithSlavesMessage,
  GameFightShowFighterMessage: () => GameFightShowFighterMessage,
  GameFightShowFighterRandomStaticPoseMessage: () => GameFightShowFighterRandomStaticPoseMessage,
  GameFightSpectateMessage: () => GameFightSpectateMessage,
  GameFightSpectatePlayerRequestMessage: () => GameFightSpectatePlayerRequestMessage,
  GameFightSpectatorJoinMessage: () => GameFightSpectatorJoinMessage,
  GameFightSpellCooldown: () => GameFightSpellCooldown,
  GameFightStartMessage: () => GameFightStartMessage,
  GameFightStartingMessage: () => GameFightStartingMessage,
  GameFightSynchronizeMessage: () => GameFightSynchronizeMessage,
  GameFightTaxCollectorInformations: () => GameFightTaxCollectorInformations,
  GameFightTurnEndMessage: () => GameFightTurnEndMessage,
  GameFightTurnFinishMessage: () => GameFightTurnFinishMessage,
  GameFightTurnListMessage: () => GameFightTurnListMessage,
  GameFightTurnReadyMessage: () => GameFightTurnReadyMessage,
  GameFightTurnReadyRequestMessage: () => GameFightTurnReadyRequestMessage,
  GameFightTurnResumeMessage: () => GameFightTurnResumeMessage,
  GameFightTurnStartMessage: () => GameFightTurnStartMessage,
  GameFightTurnStartPlayingMessage: () => GameFightTurnStartPlayingMessage,
  GameFightUpdateTeamMessage: () => GameFightUpdateTeamMessage,
  GameHierarchyEnum: () => GameHierarchyEnum,
  GameMapChangeOrientationMessage: () => GameMapChangeOrientationMessage,
  GameMapChangeOrientationRequestMessage: () => GameMapChangeOrientationRequestMessage,
  GameMapChangeOrientationsMessage: () => GameMapChangeOrientationsMessage,
  GameMapMovementCancelMessage: () => GameMapMovementCancelMessage,
  GameMapMovementConfirmMessage: () => GameMapMovementConfirmMessage,
  GameMapMovementMessage: () => GameMapMovementMessage,
  GameMapMovementRequestMessage: () => GameMapMovementRequestMessage,
  GameMapNoMovementMessage: () => GameMapNoMovementMessage,
  GameMapSpeedMovementMessage: () => GameMapSpeedMovementMessage,
  GameRefreshMonsterBoostsMessage: () => GameRefreshMonsterBoostsMessage,
  GameRolePlayActorInformations: () => GameRolePlayActorInformations,
  GameRolePlayAggressionMessage: () => GameRolePlayAggressionMessage,
  GameRolePlayArenaFightAnswerMessage: () => GameRolePlayArenaFightAnswerMessage,
  GameRolePlayArenaFightPropositionMessage: () => GameRolePlayArenaFightPropositionMessage,
  GameRolePlayArenaFighterStatusMessage: () => GameRolePlayArenaFighterStatusMessage,
  GameRolePlayArenaInvitationCandidatesAnswerMessage: () => GameRolePlayArenaInvitationCandidatesAnswerMessage,
  GameRolePlayArenaLeagueRewardsMessage: () => GameRolePlayArenaLeagueRewardsMessage,
  GameRolePlayArenaPlayerBehavioursMessage: () => GameRolePlayArenaPlayerBehavioursMessage,
  GameRolePlayArenaRegisterMessage: () => GameRolePlayArenaRegisterMessage,
  GameRolePlayArenaRegistrationStatusMessage: () => GameRolePlayArenaRegistrationStatusMessage,
  GameRolePlayArenaRegistrationWarningMessage: () => GameRolePlayArenaRegistrationWarningMessage,
  GameRolePlayArenaSwitchToFightServerMessage: () => GameRolePlayArenaSwitchToFightServerMessage,
  GameRolePlayArenaSwitchToGameServerMessage: () => GameRolePlayArenaSwitchToGameServerMessage,
  GameRolePlayArenaUnregisterMessage: () => GameRolePlayArenaUnregisterMessage,
  GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage: () => GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage,
  GameRolePlayArenaUpdatePlayerInfosMessage: () => GameRolePlayArenaUpdatePlayerInfosMessage,
  GameRolePlayAttackMonsterRequestMessage: () => GameRolePlayAttackMonsterRequestMessage,
  GameRolePlayCharacterInformations: () => GameRolePlayCharacterInformations,
  GameRolePlayDelayedActionFinishedMessage: () => GameRolePlayDelayedActionFinishedMessage,
  GameRolePlayDelayedActionMessage: () => GameRolePlayDelayedActionMessage,
  GameRolePlayDelayedObjectUseMessage: () => GameRolePlayDelayedObjectUseMessage,
  GameRolePlayFightRequestCanceledMessage: () => GameRolePlayFightRequestCanceledMessage,
  GameRolePlayFreeSoulRequestMessage: () => GameRolePlayFreeSoulRequestMessage,
  GameRolePlayGameOverMessage: () => GameRolePlayGameOverMessage,
  GameRolePlayGroupMonsterInformations: () => GameRolePlayGroupMonsterInformations,
  GameRolePlayGroupMonsterWaveInformations: () => GameRolePlayGroupMonsterWaveInformations,
  GameRolePlayHumanoidInformations: () => GameRolePlayHumanoidInformations,
  GameRolePlayMerchantInformations: () => GameRolePlayMerchantInformations,
  GameRolePlayMonsterAngryAtPlayerMessage: () => GameRolePlayMonsterAngryAtPlayerMessage,
  GameRolePlayMonsterNotAngryAtPlayerMessage: () => GameRolePlayMonsterNotAngryAtPlayerMessage,
  GameRolePlayMountInformations: () => GameRolePlayMountInformations,
  GameRolePlayMutantInformations: () => GameRolePlayMutantInformations,
  GameRolePlayNamedActorInformations: () => GameRolePlayNamedActorInformations,
  GameRolePlayNpcInformations: () => GameRolePlayNpcInformations,
  GameRolePlayNpcQuestFlag: () => GameRolePlayNpcQuestFlag,
  GameRolePlayNpcWithQuestInformations: () => GameRolePlayNpcWithQuestInformations,
  GameRolePlayPlayerFightFriendlyAnswerMessage: () => GameRolePlayPlayerFightFriendlyAnswerMessage,
  GameRolePlayPlayerFightFriendlyAnsweredMessage: () => GameRolePlayPlayerFightFriendlyAnsweredMessage,
  GameRolePlayPlayerFightFriendlyRequestedMessage: () => GameRolePlayPlayerFightFriendlyRequestedMessage,
  GameRolePlayPlayerFightRequestMessage: () => GameRolePlayPlayerFightRequestMessage,
  GameRolePlayPlayerLifeStatusMessage: () => GameRolePlayPlayerLifeStatusMessage,
  GameRolePlayPortalInformations: () => GameRolePlayPortalInformations,
  GameRolePlayPrismInformations: () => GameRolePlayPrismInformations,
  GameRolePlayRemoveChallengeMessage: () => GameRolePlayRemoveChallengeMessage,
  GameRolePlayShowActorMessage: () => GameRolePlayShowActorMessage,
  GameRolePlayShowActorWithEventMessage: () => GameRolePlayShowActorWithEventMessage,
  GameRolePlayShowChallengeMessage: () => GameRolePlayShowChallengeMessage,
  GameRolePlayShowMultipleActorsMessage: () => GameRolePlayShowMultipleActorsMessage,
  GameRolePlaySpellAnimMessage: () => GameRolePlaySpellAnimMessage,
  GameRolePlayTaxCollectorFightRequestMessage: () => GameRolePlayTaxCollectorFightRequestMessage,
  GameRolePlayTaxCollectorInformations: () => GameRolePlayTaxCollectorInformations,
  GameRolePlayTreasureHintInformations: () => GameRolePlayTreasureHintInformations,
  GameServerInformations: () => GameServerInformations,
  GameServerTypeEnum: () => GameServerTypeEnum,
  GoldAddedMessage: () => GoldAddedMessage,
  GoldItem: () => GoldItem,
  GroupMonsterStaticInformations: () => GroupMonsterStaticInformations,
  GroupMonsterStaticInformationsWithAlternatives: () => GroupMonsterStaticInformationsWithAlternatives,
  GuestLimitationMessage: () => GuestLimitationMessage,
  GuestModeMessage: () => GuestModeMessage,
  GuidedModeQuitRequestMessage: () => GuidedModeQuitRequestMessage,
  GuidedModeReturnRequestMessage: () => GuidedModeReturnRequestMessage,
  GuildApplicationAnswerMessage: () => GuildApplicationAnswerMessage,
  GuildApplicationDeletedMessage: () => GuildApplicationDeletedMessage,
  GuildApplicationInformation: () => GuildApplicationInformation,
  GuildApplicationIsAnsweredMessage: () => GuildApplicationIsAnsweredMessage,
  GuildApplicationListenMessage: () => GuildApplicationListenMessage,
  GuildApplicationReceivedMessage: () => GuildApplicationReceivedMessage,
  GuildApplicationStateEnum: () => GuildApplicationStateEnum,
  GuildBulletinMessage: () => GuildBulletinMessage,
  GuildBulletinSetErrorMessage: () => GuildBulletinSetErrorMessage,
  GuildBulletinSetRequestMessage: () => GuildBulletinSetRequestMessage,
  GuildChangeMemberParametersMessage: () => GuildChangeMemberParametersMessage,
  GuildCharacsUpgradeRequestMessage: () => GuildCharacsUpgradeRequestMessage,
  GuildCreationResultMessage: () => GuildCreationResultMessage,
  GuildCreationStartedMessage: () => GuildCreationStartedMessage,
  GuildCreationValidMessage: () => GuildCreationValidMessage,
  GuildDeleteApplicationRequestMessage: () => GuildDeleteApplicationRequestMessage,
  GuildEmblem: () => GuildEmblem,
  GuildFactSheetInformations: () => GuildFactSheetInformations,
  GuildFactsErrorMessage: () => GuildFactsErrorMessage,
  GuildFactsMessage: () => GuildFactsMessage,
  GuildFactsRequestMessage: () => GuildFactsRequestMessage,
  GuildFightJoinRequestMessage: () => GuildFightJoinRequestMessage,
  GuildFightLeaveRequestMessage: () => GuildFightLeaveRequestMessage,
  GuildFightPlayersEnemiesListMessage: () => GuildFightPlayersEnemiesListMessage,
  GuildFightPlayersEnemyRemoveMessage: () => GuildFightPlayersEnemyRemoveMessage,
  GuildFightPlayersHelpersJoinMessage: () => GuildFightPlayersHelpersJoinMessage,
  GuildFightPlayersHelpersLeaveMessage: () => GuildFightPlayersHelpersLeaveMessage,
  GuildFightTakePlaceRequestMessage: () => GuildFightTakePlaceRequestMessage,
  GuildGetInformationsMessage: () => GuildGetInformationsMessage,
  GuildGetPlayerApplicationMessage: () => GuildGetPlayerApplicationMessage,
  GuildHouseRemoveMessage: () => GuildHouseRemoveMessage,
  GuildHouseUpdateInformationMessage: () => GuildHouseUpdateInformationMessage,
  GuildHousesInformationMessage: () => GuildHousesInformationMessage,
  GuildInAllianceFactsMessage: () => GuildInAllianceFactsMessage,
  GuildInAllianceInformations: () => GuildInAllianceInformations,
  GuildInAllianceVersatileInformations: () => GuildInAllianceVersatileInformations,
  GuildInformations: () => GuildInformations,
  GuildInformationsGeneralMessage: () => GuildInformationsGeneralMessage,
  GuildInformationsMemberUpdateMessage: () => GuildInformationsMemberUpdateMessage,
  GuildInformationsMembersMessage: () => GuildInformationsMembersMessage,
  GuildInformationsPaddocksMessage: () => GuildInformationsPaddocksMessage,
  GuildInformationsTypeEnum: () => GuildInformationsTypeEnum,
  GuildInfosUpgradeMessage: () => GuildInfosUpgradeMessage,
  GuildInsiderFactSheetInformations: () => GuildInsiderFactSheetInformations,
  GuildInvitationAnswerMessage: () => GuildInvitationAnswerMessage,
  GuildInvitationMessage: () => GuildInvitationMessage,
  GuildInvitationSearchMessage: () => GuildInvitationSearchMessage,
  GuildInvitationStateRecrutedMessage: () => GuildInvitationStateRecrutedMessage,
  GuildInvitationStateRecruterMessage: () => GuildInvitationStateRecruterMessage,
  GuildInvitedMessage: () => GuildInvitedMessage,
  GuildJoinAutomaticallyRequestMessage: () => GuildJoinAutomaticallyRequestMessage,
  GuildJoinedMessage: () => GuildJoinedMessage,
  GuildKickRequestMessage: () => GuildKickRequestMessage,
  GuildLeftMessage: () => GuildLeftMessage,
  GuildLevelUpMessage: () => GuildLevelUpMessage,
  GuildListApplicationAnswerMessage: () => GuildListApplicationAnswerMessage,
  GuildListApplicationModifiedMessage: () => GuildListApplicationModifiedMessage,
  GuildListApplicationRequestMessage: () => GuildListApplicationRequestMessage,
  GuildListMessage: () => GuildListMessage,
  GuildMember: () => GuildMember,
  GuildMemberLeavingMessage: () => GuildMemberLeavingMessage,
  GuildMemberOnlineStatusMessage: () => GuildMemberOnlineStatusMessage,
  GuildMemberSetWarnOnConnectionMessage: () => GuildMemberSetWarnOnConnectionMessage,
  GuildMemberWarnOnConnectionStateMessage: () => GuildMemberWarnOnConnectionStateMessage,
  GuildMembershipMessage: () => GuildMembershipMessage,
  GuildModificationEmblemValidMessage: () => GuildModificationEmblemValidMessage,
  GuildModificationNameValidMessage: () => GuildModificationNameValidMessage,
  GuildModificationStartedMessage: () => GuildModificationStartedMessage,
  GuildModificationValidMessage: () => GuildModificationValidMessage,
  GuildMotdMessage: () => GuildMotdMessage,
  GuildMotdSetErrorMessage: () => GuildMotdSetErrorMessage,
  GuildMotdSetRequestMessage: () => GuildMotdSetRequestMessage,
  GuildPaddockBoughtMessage: () => GuildPaddockBoughtMessage,
  GuildPaddockRemovedMessage: () => GuildPaddockRemovedMessage,
  GuildPaddockTeleportRequestMessage: () => GuildPaddockTeleportRequestMessage,
  GuildPlayerApplicationAbstractMessage: () => GuildPlayerApplicationAbstractMessage,
  GuildPlayerApplicationInformationMessage: () => GuildPlayerApplicationInformationMessage,
  GuildPlayerNoApplicationInformationMessage: () => GuildPlayerNoApplicationInformationMessage,
  GuildRecruitmentInformation: () => GuildRecruitmentInformation,
  GuildRecruitmentInvalidateMessage: () => GuildRecruitmentInvalidateMessage,
  GuildRecruitmentTypeEnum: () => GuildRecruitmentTypeEnum,
  GuildRightsBitEnum: () => GuildRightsBitEnum,
  GuildSpellUpgradeRequestMessage: () => GuildSpellUpgradeRequestMessage,
  GuildSubmitApplicationMessage: () => GuildSubmitApplicationMessage,
  GuildSummaryMessage: () => GuildSummaryMessage,
  GuildSummaryRequestMessage: () => GuildSummaryRequestMessage,
  GuildSummarySortEnum: () => GuildSummarySortEnum,
  GuildUpdateApplicationMessage: () => GuildUpdateApplicationMessage,
  GuildVersatileInfoListMessage: () => GuildVersatileInfoListMessage,
  GuildVersatileInformations: () => GuildVersatileInformations,
  HaapiApiKeyMessage: () => HaapiApiKeyMessage,
  HaapiApiKeyRequestMessage: () => HaapiApiKeyRequestMessage,
  HaapiAuthErrorMessage: () => HaapiAuthErrorMessage,
  HaapiAuthTypeEnum: () => HaapiAuthTypeEnum,
  HaapiBufferListMessage: () => HaapiBufferListMessage,
  HaapiBufferListRequestMessage: () => HaapiBufferListRequestMessage,
  HaapiBuyValidationMessage: () => HaapiBuyValidationMessage,
  HaapiCancelBidRequestMessage: () => HaapiCancelBidRequestMessage,
  HaapiConfirmationMessage: () => HaapiConfirmationMessage,
  HaapiConfirmationRequestMessage: () => HaapiConfirmationRequestMessage,
  HaapiConsumeBufferRequestMessage: () => HaapiConsumeBufferRequestMessage,
  HaapiSessionMessage: () => HaapiSessionMessage,
  HaapiSessionTypeEnum: () => HaapiSessionTypeEnum,
  HaapiShopApiKeyMessage: () => HaapiShopApiKeyMessage,
  HaapiShopApiKeyRequestMessage: () => HaapiShopApiKeyRequestMessage,
  HaapiTokenMessage: () => HaapiTokenMessage,
  HaapiTokenRequestMessage: () => HaapiTokenRequestMessage,
  HaapiValidationMessage: () => HaapiValidationMessage,
  HaapiValidationRequestMessage: () => HaapiValidationRequestMessage,
  HavenBagDailyLoteryErrorEnum: () => HavenBagDailyLoteryErrorEnum,
  HavenBagDailyLoteryMessage: () => HavenBagDailyLoteryMessage,
  HavenBagFurnitureInformation: () => HavenBagFurnitureInformation,
  HavenBagFurnituresMessage: () => HavenBagFurnituresMessage,
  HavenBagFurnituresRequestMessage: () => HavenBagFurnituresRequestMessage,
  HavenBagPackListMessage: () => HavenBagPackListMessage,
  HavenBagPermissionsUpdateMessage: () => HavenBagPermissionsUpdateMessage,
  HavenBagPermissionsUpdateRequestMessage: () => HavenBagPermissionsUpdateRequestMessage,
  HavenBagRoomActionEnum: () => HavenBagRoomActionEnum,
  HavenBagRoomPreviewInformation: () => HavenBagRoomPreviewInformation,
  HavenBagRoomUpdateMessage: () => HavenBagRoomUpdateMessage,
  HavenBagShareBitEnum: () => HavenBagShareBitEnum,
  HelloConnectMessage: () => HelloConnectMessage,
  HelloGameMessage: () => HelloGameMessage,
  HouseBuyRequestMessage: () => HouseBuyRequestMessage,
  HouseBuyResultMessage: () => HouseBuyResultMessage,
  HouseGuildNoneMessage: () => HouseGuildNoneMessage,
  HouseGuildRightsMessage: () => HouseGuildRightsMessage,
  HouseGuildRightsViewMessage: () => HouseGuildRightsViewMessage,
  HouseGuildShareRequestMessage: () => HouseGuildShareRequestMessage,
  HouseGuildedInformations: () => HouseGuildedInformations,
  HouseInformations: () => HouseInformations,
  HouseInformationsForGuild: () => HouseInformationsForGuild,
  HouseInformationsForSell: () => HouseInformationsForSell,
  HouseInformationsInside: () => HouseInformationsInside,
  HouseInstanceInformations: () => HouseInstanceInformations,
  HouseKickIndoorMerchantRequestMessage: () => HouseKickIndoorMerchantRequestMessage,
  HouseKickRequestMessage: () => HouseKickRequestMessage,
  HouseLockFromInsideRequestMessage: () => HouseLockFromInsideRequestMessage,
  HouseOnMapInformations: () => HouseOnMapInformations,
  HousePropertiesMessage: () => HousePropertiesMessage,
  HouseSellFromInsideRequestMessage: () => HouseSellFromInsideRequestMessage,
  HouseSellRequestMessage: () => HouseSellRequestMessage,
  HouseSellingUpdateMessage: () => HouseSellingUpdateMessage,
  HouseTeleportRequestMessage: () => HouseTeleportRequestMessage,
  HouseToSellFilterMessage: () => HouseToSellFilterMessage,
  HouseToSellListMessage: () => HouseToSellListMessage,
  HouseToSellListRequestMessage: () => HouseToSellListRequestMessage,
  HumanInformations: () => HumanInformations,
  HumanOption: () => HumanOption,
  HumanOptionAlliance: () => HumanOptionAlliance,
  HumanOptionEmote: () => HumanOptionEmote,
  HumanOptionFollowers: () => HumanOptionFollowers,
  HumanOptionGuild: () => HumanOptionGuild,
  HumanOptionObjectUse: () => HumanOptionObjectUse,
  HumanOptionOrnament: () => HumanOptionOrnament,
  HumanOptionSkillUse: () => HumanOptionSkillUse,
  HumanOptionTitle: () => HumanOptionTitle,
  IconNamedPreset: () => IconNamedPreset,
  IconNamedPresetSaveRequestMessage: () => IconNamedPresetSaveRequestMessage,
  IconPresetSaveRequestMessage: () => IconPresetSaveRequestMessage,
  IdentificationAccountForceMessage: () => IdentificationAccountForceMessage,
  IdentificationFailedBannedMessage: () => IdentificationFailedBannedMessage,
  IdentificationFailedForBadVersionMessage: () => IdentificationFailedForBadVersionMessage,
  IdentificationFailedMessage: () => IdentificationFailedMessage,
  IdentificationFailureReasonEnum: () => IdentificationFailureReasonEnum,
  IdentificationMessage: () => IdentificationMessage,
  IdentificationSuccessMessage: () => IdentificationSuccessMessage,
  IdentificationSuccessWithLoginTokenMessage: () => IdentificationSuccessWithLoginTokenMessage,
  IdentifiedEntityDispositionInformations: () => IdentifiedEntityDispositionInformations,
  Idol: () => Idol,
  IdolFightPreparationUpdateMessage: () => IdolFightPreparationUpdateMessage,
  IdolListMessage: () => IdolListMessage,
  IdolPartyLostMessage: () => IdolPartyLostMessage,
  IdolPartyRefreshMessage: () => IdolPartyRefreshMessage,
  IdolPartyRegisterRequestMessage: () => IdolPartyRegisterRequestMessage,
  IdolSelectErrorMessage: () => IdolSelectErrorMessage,
  IdolSelectRequestMessage: () => IdolSelectRequestMessage,
  IdolSelectedMessage: () => IdolSelectedMessage,
  IdolsPreset: () => IdolsPreset,
  IdolsPresetSaveRequestMessage: () => IdolsPresetSaveRequestMessage,
  IgnoredAddFailureMessage: () => IgnoredAddFailureMessage,
  IgnoredAddRequestMessage: () => IgnoredAddRequestMessage,
  IgnoredAddedMessage: () => IgnoredAddedMessage,
  IgnoredDeleteRequestMessage: () => IgnoredDeleteRequestMessage,
  IgnoredDeleteResultMessage: () => IgnoredDeleteResultMessage,
  IgnoredGetListMessage: () => IgnoredGetListMessage,
  IgnoredInformations: () => IgnoredInformations,
  IgnoredListMessage: () => IgnoredListMessage,
  IgnoredOnlineInformations: () => IgnoredOnlineInformations,
  IndexedEntityLook: () => IndexedEntityLook,
  InteractiveElement: () => InteractiveElement,
  InteractiveElementNamedSkill: () => InteractiveElementNamedSkill,
  InteractiveElementSkill: () => InteractiveElementSkill,
  InteractiveElementUpdatedMessage: () => InteractiveElementUpdatedMessage,
  InteractiveElementWithAgeBonus: () => InteractiveElementWithAgeBonus,
  InteractiveMapUpdateMessage: () => InteractiveMapUpdateMessage,
  InteractiveUseEndedMessage: () => InteractiveUseEndedMessage,
  InteractiveUseErrorMessage: () => InteractiveUseErrorMessage,
  InteractiveUseRequestMessage: () => InteractiveUseRequestMessage,
  InteractiveUseWithParamRequestMessage: () => InteractiveUseWithParamRequestMessage,
  InteractiveUsedMessage: () => InteractiveUsedMessage,
  InvalidPresetsMessage: () => InvalidPresetsMessage,
  InventoryContentMessage: () => InventoryContentMessage,
  InventoryWeightMessage: () => InventoryWeightMessage,
  InviteInHavenBagClosedMessage: () => InviteInHavenBagClosedMessage,
  InviteInHavenBagMessage: () => InviteInHavenBagMessage,
  InviteInHavenBagOfferMessage: () => InviteInHavenBagOfferMessage,
  Item: () => Item,
  ItemDurability: () => ItemDurability,
  ItemForPreset: () => ItemForPreset,
  ItemForPresetUpdateMessage: () => ItemForPresetUpdateMessage,
  ItemNoMoreAvailableMessage: () => ItemNoMoreAvailableMessage,
  ItemsPreset: () => ItemsPreset,
  JobAllowMultiCraftRequestMessage: () => JobAllowMultiCraftRequestMessage,
  JobBookSubscribeRequestMessage: () => JobBookSubscribeRequestMessage,
  JobBookSubscription: () => JobBookSubscription,
  JobBookSubscriptionMessage: () => JobBookSubscriptionMessage,
  JobCrafterDirectoryAddMessage: () => JobCrafterDirectoryAddMessage,
  JobCrafterDirectoryDefineSettingsMessage: () => JobCrafterDirectoryDefineSettingsMessage,
  JobCrafterDirectoryEntryJobInfo: () => JobCrafterDirectoryEntryJobInfo,
  JobCrafterDirectoryEntryMessage: () => JobCrafterDirectoryEntryMessage,
  JobCrafterDirectoryEntryPlayerInfo: () => JobCrafterDirectoryEntryPlayerInfo,
  JobCrafterDirectoryEntryRequestMessage: () => JobCrafterDirectoryEntryRequestMessage,
  JobCrafterDirectoryListEntry: () => JobCrafterDirectoryListEntry,
  JobCrafterDirectoryListMessage: () => JobCrafterDirectoryListMessage,
  JobCrafterDirectoryListRequestMessage: () => JobCrafterDirectoryListRequestMessage,
  JobCrafterDirectoryRemoveMessage: () => JobCrafterDirectoryRemoveMessage,
  JobCrafterDirectorySettings: () => JobCrafterDirectorySettings,
  JobCrafterDirectorySettingsMessage: () => JobCrafterDirectorySettingsMessage,
  JobDescription: () => JobDescription,
  JobDescriptionMessage: () => JobDescriptionMessage,
  JobExperience: () => JobExperience,
  JobExperienceMultiUpdateMessage: () => JobExperienceMultiUpdateMessage,
  JobExperienceOtherPlayerUpdateMessage: () => JobExperienceOtherPlayerUpdateMessage,
  JobExperienceUpdateMessage: () => JobExperienceUpdateMessage,
  JobLevelUpMessage: () => JobLevelUpMessage,
  JobMultiCraftAvailableSkillsMessage: () => JobMultiCraftAvailableSkillsMessage,
  KamaDebtInformation: () => KamaDebtInformation,
  KamasUpdateMessage: () => KamasUpdateMessage,
  KickHavenBagRequestMessage: () => KickHavenBagRequestMessage,
  KnownZaapListMessage: () => KnownZaapListMessage,
  KohUpdateMessage: () => KohUpdateMessage,
  LeagueFriendInformations: () => LeagueFriendInformations,
  LeaveDialogMessage: () => LeaveDialogMessage,
  LeaveDialogRequestMessage: () => LeaveDialogRequestMessage,
  LifePointsRegenBeginMessage: () => LifePointsRegenBeginMessage,
  LifePointsRegenEndMessage: () => LifePointsRegenEndMessage,
  ListAddFailureEnum: () => ListAddFailureEnum,
  ListMapNpcsQuestStatusUpdateMessage: () => ListMapNpcsQuestStatusUpdateMessage,
  LivingObjectChangeSkinRequestMessage: () => LivingObjectChangeSkinRequestMessage,
  LivingObjectDissociateMessage: () => LivingObjectDissociateMessage,
  LivingObjectMessageMessage: () => LivingObjectMessageMessage,
  LivingObjectMessageRequestMessage: () => LivingObjectMessageRequestMessage,
  LocalizedChatSmileyMessage: () => LocalizedChatSmileyMessage,
  LockableChangeCodeMessage: () => LockableChangeCodeMessage,
  LockableCodeResultMessage: () => LockableCodeResultMessage,
  LockableResultEnum: () => LockableResultEnum,
  LockableShowCodeDialogMessage: () => LockableShowCodeDialogMessage,
  LockableStateUpdateAbstractMessage: () => LockableStateUpdateAbstractMessage,
  LockableStateUpdateHouseDoorMessage: () => LockableStateUpdateHouseDoorMessage,
  LockableStateUpdateStorageMessage: () => LockableStateUpdateStorageMessage,
  LockableUseCodeMessage: () => LockableUseCodeMessage,
  LoginQueueStatusMessage: () => LoginQueueStatusMessage,
  MapComplementaryInformationsAnomalyMessage: () => MapComplementaryInformationsAnomalyMessage,
  MapComplementaryInformationsBreachMessage: () => MapComplementaryInformationsBreachMessage,
  MapComplementaryInformationsDataInHavenBagMessage: () => MapComplementaryInformationsDataInHavenBagMessage,
  MapComplementaryInformationsDataInHouseMessage: () => MapComplementaryInformationsDataInHouseMessage,
  MapComplementaryInformationsDataMessage: () => MapComplementaryInformationsDataMessage,
  MapComplementaryInformationsWithCoordsMessage: () => MapComplementaryInformationsWithCoordsMessage,
  MapCoordinates: () => MapCoordinates,
  MapCoordinatesAndId: () => MapCoordinatesAndId,
  MapCoordinatesExtended: () => MapCoordinatesExtended,
  MapFightCountMessage: () => MapFightCountMessage,
  MapFightStartPositionsUpdateMessage: () => MapFightStartPositionsUpdateMessage,
  MapInformationsRequestMessage: () => MapInformationsRequestMessage,
  MapNpcQuestInfo: () => MapNpcQuestInfo,
  MapObstacle: () => MapObstacle,
  MapObstacleStateEnum: () => MapObstacleStateEnum,
  MapObstacleUpdateMessage: () => MapObstacleUpdateMessage,
  MapRewardRateMessage: () => MapRewardRateMessage,
  MapRunningFightDetailsExtendedMessage: () => MapRunningFightDetailsExtendedMessage,
  MapRunningFightDetailsMessage: () => MapRunningFightDetailsMessage,
  MapRunningFightDetailsRequestMessage: () => MapRunningFightDetailsRequestMessage,
  MapRunningFightListMessage: () => MapRunningFightListMessage,
  MapRunningFightListRequestMessage: () => MapRunningFightListRequestMessage,
  MigratedServerListMessage: () => MigratedServerListMessage,
  MimicryObjectAssociatedMessage: () => MimicryObjectAssociatedMessage,
  MimicryObjectEraseRequestMessage: () => MimicryObjectEraseRequestMessage,
  MimicryObjectErrorMessage: () => MimicryObjectErrorMessage,
  MimicryObjectFeedAndAssociateRequestMessage: () => MimicryObjectFeedAndAssociateRequestMessage,
  MimicryObjectPreviewMessage: () => MimicryObjectPreviewMessage,
  MonsterBoosts: () => MonsterBoosts,
  MonsterInGroupInformations: () => MonsterInGroupInformations,
  MonsterInGroupLightInformations: () => MonsterInGroupLightInformations,
  MoodSmileyRequestMessage: () => MoodSmileyRequestMessage,
  MoodSmileyResultMessage: () => MoodSmileyResultMessage,
  MoodSmileyUpdateMessage: () => MoodSmileyUpdateMessage,
  MountCharacteristicEnum: () => MountCharacteristicEnum,
  MountClientData: () => MountClientData,
  MountDataErrorMessage: () => MountDataErrorMessage,
  MountDataMessage: () => MountDataMessage,
  MountEmoteIconUsedOkMessage: () => MountEmoteIconUsedOkMessage,
  MountEquipedErrorEnum: () => MountEquipedErrorEnum,
  MountEquipedErrorMessage: () => MountEquipedErrorMessage,
  MountFeedRequestMessage: () => MountFeedRequestMessage,
  MountHarnessColorsUpdateRequestMessage: () => MountHarnessColorsUpdateRequestMessage,
  MountHarnessDissociateRequestMessage: () => MountHarnessDissociateRequestMessage,
  MountInformationInPaddockRequestMessage: () => MountInformationInPaddockRequestMessage,
  MountInformationRequestMessage: () => MountInformationRequestMessage,
  MountInformationsForPaddock: () => MountInformationsForPaddock,
  MountReleaseRequestMessage: () => MountReleaseRequestMessage,
  MountReleasedMessage: () => MountReleasedMessage,
  MountRenameRequestMessage: () => MountRenameRequestMessage,
  MountRenamedMessage: () => MountRenamedMessage,
  MountRidingMessage: () => MountRidingMessage,
  MountSetMessage: () => MountSetMessage,
  MountSetXpRatioRequestMessage: () => MountSetXpRatioRequestMessage,
  MountSterilizeRequestMessage: () => MountSterilizeRequestMessage,
  MountSterilizedMessage: () => MountSterilizedMessage,
  MountToggleRidingRequestMessage: () => MountToggleRidingRequestMessage,
  MountUnSetMessage: () => MountUnSetMessage,
  MountXpRatioMessage: () => MountXpRatioMessage,
  NamedPartyTeam: () => NamedPartyTeam,
  NamedPartyTeamWithOutcome: () => NamedPartyTeamWithOutcome,
  NetworkDataContainerMessage: () => NetworkDataContainerMessage,
  NetworkMessage: () => NetworkMessage,
  NicknameAcceptedMessage: () => NicknameAcceptedMessage,
  NicknameChoiceRequestMessage: () => NicknameChoiceRequestMessage,
  NicknameErrorEnum: () => NicknameErrorEnum,
  NicknameRefusedMessage: () => NicknameRefusedMessage,
  NicknameRegistrationMessage: () => NicknameRegistrationMessage,
  NotificationByServerMessage: () => NotificationByServerMessage,
  NotificationListMessage: () => NotificationListMessage,
  NotificationResetMessage: () => NotificationResetMessage,
  NotificationUpdateFlagMessage: () => NotificationUpdateFlagMessage,
  NpcDialogCreationMessage: () => NpcDialogCreationMessage,
  NpcDialogQuestionMessage: () => NpcDialogQuestionMessage,
  NpcDialogReplyMessage: () => NpcDialogReplyMessage,
  NpcGenericActionFailureMessage: () => NpcGenericActionFailureMessage,
  NpcGenericActionRequestMessage: () => NpcGenericActionRequestMessage,
  NumericWhoIsMessage: () => NumericWhoIsMessage,
  NumericWhoIsRequestMessage: () => NumericWhoIsRequestMessage,
  ObjectAddedMessage: () => ObjectAddedMessage,
  ObjectAveragePricesErrorMessage: () => ObjectAveragePricesErrorMessage,
  ObjectAveragePricesGetMessage: () => ObjectAveragePricesGetMessage,
  ObjectAveragePricesMessage: () => ObjectAveragePricesMessage,
  ObjectDeleteMessage: () => ObjectDeleteMessage,
  ObjectDeletedMessage: () => ObjectDeletedMessage,
  ObjectDropMessage: () => ObjectDropMessage,
  ObjectEffect: () => ObjectEffect,
  ObjectEffectCreature: () => ObjectEffectCreature,
  ObjectEffectDate: () => ObjectEffectDate,
  ObjectEffectDice: () => ObjectEffectDice,
  ObjectEffectDuration: () => ObjectEffectDuration,
  ObjectEffectInteger: () => ObjectEffectInteger,
  ObjectEffectLadder: () => ObjectEffectLadder,
  ObjectEffectMinMax: () => ObjectEffectMinMax,
  ObjectEffectMount: () => ObjectEffectMount,
  ObjectEffectString: () => ObjectEffectString,
  ObjectEffects: () => ObjectEffects,
  ObjectErrorEnum: () => ObjectErrorEnum,
  ObjectErrorMessage: () => ObjectErrorMessage,
  ObjectFeedMessage: () => ObjectFeedMessage,
  ObjectGroundAddedMessage: () => ObjectGroundAddedMessage,
  ObjectGroundListAddedMessage: () => ObjectGroundListAddedMessage,
  ObjectGroundRemovedMessage: () => ObjectGroundRemovedMessage,
  ObjectGroundRemovedMultipleMessage: () => ObjectGroundRemovedMultipleMessage,
  ObjectItem: () => ObjectItem,
  ObjectItemGenericQuantity: () => ObjectItemGenericQuantity,
  ObjectItemInRolePlay: () => ObjectItemInRolePlay,
  ObjectItemInformationWithQuantity: () => ObjectItemInformationWithQuantity,
  ObjectItemMinimalInformation: () => ObjectItemMinimalInformation,
  ObjectItemNotInContainer: () => ObjectItemNotInContainer,
  ObjectItemQuantity: () => ObjectItemQuantity,
  ObjectItemQuantityPriceDateEffects: () => ObjectItemQuantityPriceDateEffects,
  ObjectItemToSell: () => ObjectItemToSell,
  ObjectItemToSellInBid: () => ObjectItemToSellInBid,
  ObjectItemToSellInHumanVendorShop: () => ObjectItemToSellInHumanVendorShop,
  ObjectItemToSellInNpcShop: () => ObjectItemToSellInNpcShop,
  ObjectJobAddedMessage: () => ObjectJobAddedMessage,
  ObjectModifiedMessage: () => ObjectModifiedMessage,
  ObjectMovementMessage: () => ObjectMovementMessage,
  ObjectQuantityMessage: () => ObjectQuantityMessage,
  ObjectSetPositionMessage: () => ObjectSetPositionMessage,
  ObjectUseMessage: () => ObjectUseMessage,
  ObjectUseMultipleMessage: () => ObjectUseMultipleMessage,
  ObjectUseOnCellMessage: () => ObjectUseOnCellMessage,
  ObjectUseOnCharacterMessage: () => ObjectUseOnCharacterMessage,
  ObjectsAddedMessage: () => ObjectsAddedMessage,
  ObjectsDeletedMessage: () => ObjectsDeletedMessage,
  ObjectsQuantityMessage: () => ObjectsQuantityMessage,
  ObtainedItemMessage: () => ObtainedItemMessage,
  ObtainedItemWithBonusMessage: () => ObtainedItemWithBonusMessage,
  OnConnectionEventMessage: () => OnConnectionEventMessage,
  OpenHavenBagFurnitureSequenceRequestMessage: () => OpenHavenBagFurnitureSequenceRequestMessage,
  OrnamentGainedMessage: () => OrnamentGainedMessage,
  OrnamentLostMessage: () => OrnamentLostMessage,
  OrnamentSelectErrorMessage: () => OrnamentSelectErrorMessage,
  OrnamentSelectRequestMessage: () => OrnamentSelectRequestMessage,
  OrnamentSelectedMessage: () => OrnamentSelectedMessage,
  PaddockBuyRequestMessage: () => PaddockBuyRequestMessage,
  PaddockBuyResultMessage: () => PaddockBuyResultMessage,
  PaddockBuyableInformations: () => PaddockBuyableInformations,
  PaddockContentInformations: () => PaddockContentInformations,
  PaddockGuildedInformations: () => PaddockGuildedInformations,
  PaddockInformations: () => PaddockInformations,
  PaddockInformationsForSell: () => PaddockInformationsForSell,
  PaddockInstancesInformations: () => PaddockInstancesInformations,
  PaddockItem: () => PaddockItem,
  PaddockMoveItemRequestMessage: () => PaddockMoveItemRequestMessage,
  PaddockPropertiesMessage: () => PaddockPropertiesMessage,
  PaddockRemoveItemRequestMessage: () => PaddockRemoveItemRequestMessage,
  PaddockSellBuyDialogMessage: () => PaddockSellBuyDialogMessage,
  PaddockSellRequestMessage: () => PaddockSellRequestMessage,
  PaddockToSellFilterMessage: () => PaddockToSellFilterMessage,
  PaddockToSellListMessage: () => PaddockToSellListMessage,
  PaddockToSellListRequestMessage: () => PaddockToSellListRequestMessage,
  PaginationAnswerAbstractMessage: () => PaginationAnswerAbstractMessage,
  PaginationRequestAbstractMessage: () => PaginationRequestAbstractMessage,
  PartyAbdicateThroneMessage: () => PartyAbdicateThroneMessage,
  PartyAcceptInvitationMessage: () => PartyAcceptInvitationMessage,
  PartyCancelInvitationMessage: () => PartyCancelInvitationMessage,
  PartyCancelInvitationNotificationMessage: () => PartyCancelInvitationNotificationMessage,
  PartyCannotJoinErrorMessage: () => PartyCannotJoinErrorMessage,
  PartyDeletedMessage: () => PartyDeletedMessage,
  PartyEntityBaseInformation: () => PartyEntityBaseInformation,
  PartyEntityMemberInformation: () => PartyEntityMemberInformation,
  PartyEntityUpdateLightMessage: () => PartyEntityUpdateLightMessage,
  PartyFollowMemberRequestMessage: () => PartyFollowMemberRequestMessage,
  PartyFollowStatusUpdateMessage: () => PartyFollowStatusUpdateMessage,
  PartyFollowThisMemberRequestMessage: () => PartyFollowThisMemberRequestMessage,
  PartyGuestInformations: () => PartyGuestInformations,
  PartyIdol: () => PartyIdol,
  PartyInvitationArenaRequestMessage: () => PartyInvitationArenaRequestMessage,
  PartyInvitationCancelledForGuestMessage: () => PartyInvitationCancelledForGuestMessage,
  PartyInvitationDetailsMessage: () => PartyInvitationDetailsMessage,
  PartyInvitationDetailsRequestMessage: () => PartyInvitationDetailsRequestMessage,
  PartyInvitationDungeonDetailsMessage: () => PartyInvitationDungeonDetailsMessage,
  PartyInvitationDungeonMessage: () => PartyInvitationDungeonMessage,
  PartyInvitationDungeonRequestMessage: () => PartyInvitationDungeonRequestMessage,
  PartyInvitationMemberInformations: () => PartyInvitationMemberInformations,
  PartyInvitationMessage: () => PartyInvitationMessage,
  PartyInvitationRequestMessage: () => PartyInvitationRequestMessage,
  PartyJoinErrorEnum: () => PartyJoinErrorEnum,
  PartyJoinMessage: () => PartyJoinMessage,
  PartyKickRequestMessage: () => PartyKickRequestMessage,
  PartyKickedByMessage: () => PartyKickedByMessage,
  PartyLeaderUpdateMessage: () => PartyLeaderUpdateMessage,
  PartyLeaveMessage: () => PartyLeaveMessage,
  PartyLeaveRequestMessage: () => PartyLeaveRequestMessage,
  PartyLocateMembersMessage: () => PartyLocateMembersMessage,
  PartyLocateMembersRequestMessage: () => PartyLocateMembersRequestMessage,
  PartyLoyaltyStatusMessage: () => PartyLoyaltyStatusMessage,
  PartyMemberArenaInformations: () => PartyMemberArenaInformations,
  PartyMemberEjectedMessage: () => PartyMemberEjectedMessage,
  PartyMemberGeoPosition: () => PartyMemberGeoPosition,
  PartyMemberInBreachFightMessage: () => PartyMemberInBreachFightMessage,
  PartyMemberInStandardFightMessage: () => PartyMemberInStandardFightMessage,
  PartyMemberInformations: () => PartyMemberInformations,
  PartyMemberRemoveMessage: () => PartyMemberRemoveMessage,
  PartyModifiableStatusMessage: () => PartyModifiableStatusMessage,
  PartyNameErrorEnum: () => PartyNameErrorEnum,
  PartyNameSetErrorMessage: () => PartyNameSetErrorMessage,
  PartyNameSetRequestMessage: () => PartyNameSetRequestMessage,
  PartyNameUpdateMessage: () => PartyNameUpdateMessage,
  PartyNewGuestMessage: () => PartyNewGuestMessage,
  PartyNewMemberMessage: () => PartyNewMemberMessage,
  PartyPledgeLoyaltyRequestMessage: () => PartyPledgeLoyaltyRequestMessage,
  PartyRefuseInvitationMessage: () => PartyRefuseInvitationMessage,
  PartyRefuseInvitationNotificationMessage: () => PartyRefuseInvitationNotificationMessage,
  PartyRestrictedMessage: () => PartyRestrictedMessage,
  PartyStopFollowRequestMessage: () => PartyStopFollowRequestMessage,
  PartyTypeEnum: () => PartyTypeEnum,
  PartyUpdateLightMessage: () => PartyUpdateLightMessage,
  PartyUpdateMessage: () => PartyUpdateMessage,
  PauseDialogMessage: () => PauseDialogMessage,
  PlayableBreedEnum: () => PlayableBreedEnum,
  PlayerLifeStatusEnum: () => PlayerLifeStatusEnum,
  PlayerSearchCharacterNameInformation: () => PlayerSearchCharacterNameInformation,
  PlayerSearchTagInformation: () => PlayerSearchTagInformation,
  PlayerStateEnum: () => PlayerStateEnum,
  PlayerStatus: () => PlayerStatus,
  PlayerStatusEnum: () => PlayerStatusEnum,
  PlayerStatusExtended: () => PlayerStatusExtended,
  PlayerStatusUpdateErrorMessage: () => PlayerStatusUpdateErrorMessage,
  PlayerStatusUpdateMessage: () => PlayerStatusUpdateMessage,
  PlayerStatusUpdateRequestMessage: () => PlayerStatusUpdateRequestMessage,
  PopupWarningCloseRequestMessage: () => PopupWarningCloseRequestMessage,
  PopupWarningClosedMessage: () => PopupWarningClosedMessage,
  PopupWarningMessage: () => PopupWarningMessage,
  PortalDialogCreationMessage: () => PortalDialogCreationMessage,
  PortalInformation: () => PortalInformation,
  PortalUseRequestMessage: () => PortalUseRequestMessage,
  Preset: () => Preset,
  PresetDeleteRequestMessage: () => PresetDeleteRequestMessage,
  PresetDeleteResultEnum: () => PresetDeleteResultEnum,
  PresetDeleteResultMessage: () => PresetDeleteResultMessage,
  PresetSaveErrorMessage: () => PresetSaveErrorMessage,
  PresetSaveResultEnum: () => PresetSaveResultEnum,
  PresetSavedMessage: () => PresetSavedMessage,
  PresetUseRequestMessage: () => PresetUseRequestMessage,
  PresetUseResultEnum: () => PresetUseResultEnum,
  PresetUseResultMessage: () => PresetUseResultMessage,
  PresetUseResultWithMissingIdsMessage: () => PresetUseResultWithMissingIdsMessage,
  PresetsContainerPreset: () => PresetsContainerPreset,
  PresetsMessage: () => PresetsMessage,
  PrismAttackRequestMessage: () => PrismAttackRequestMessage,
  PrismFightAddedMessage: () => PrismFightAddedMessage,
  PrismFightAttackerAddMessage: () => PrismFightAttackerAddMessage,
  PrismFightAttackerRemoveMessage: () => PrismFightAttackerRemoveMessage,
  PrismFightDefenderAddMessage: () => PrismFightDefenderAddMessage,
  PrismFightDefenderLeaveMessage: () => PrismFightDefenderLeaveMessage,
  PrismFightJoinLeaveRequestMessage: () => PrismFightJoinLeaveRequestMessage,
  PrismFightRemovedMessage: () => PrismFightRemovedMessage,
  PrismFightStateUpdateMessage: () => PrismFightStateUpdateMessage,
  PrismFightSwapRequestMessage: () => PrismFightSwapRequestMessage,
  PrismFightersInformation: () => PrismFightersInformation,
  PrismGeolocalizedInformation: () => PrismGeolocalizedInformation,
  PrismInfoCloseMessage: () => PrismInfoCloseMessage,
  PrismInfoInValidMessage: () => PrismInfoInValidMessage,
  PrismInfoJoinLeaveRequestMessage: () => PrismInfoJoinLeaveRequestMessage,
  PrismInformation: () => PrismInformation,
  PrismListenEnum: () => PrismListenEnum,
  PrismModuleExchangeRequestMessage: () => PrismModuleExchangeRequestMessage,
  PrismSetSabotagedRefusedMessage: () => PrismSetSabotagedRefusedMessage,
  PrismSetSabotagedRefusedReasonEnum: () => PrismSetSabotagedRefusedReasonEnum,
  PrismSetSabotagedRequestMessage: () => PrismSetSabotagedRequestMessage,
  PrismSettingsErrorMessage: () => PrismSettingsErrorMessage,
  PrismSettingsRequestMessage: () => PrismSettingsRequestMessage,
  PrismStateEnum: () => PrismStateEnum,
  PrismSubareaEmptyInfo: () => PrismSubareaEmptyInfo,
  PrismUseRequestMessage: () => PrismUseRequestMessage,
  PrismsInfoValidMessage: () => PrismsInfoValidMessage,
  PrismsListMessage: () => PrismsListMessage,
  PrismsListRegisterMessage: () => PrismsListRegisterMessage,
  PrismsListUpdateMessage: () => PrismsListUpdateMessage,
  ProtectedEntityWaitingForHelpInfo: () => ProtectedEntityWaitingForHelpInfo,
  ProtocolRequired: () => ProtocolRequired,
  PurchasableDialogMessage: () => PurchasableDialogMessage,
  PvpArenaStepEnum: () => PvpArenaStepEnum,
  PvpArenaTypeEnum: () => PvpArenaTypeEnum,
  QuestActiveDetailedInformations: () => QuestActiveDetailedInformations,
  QuestActiveInformations: () => QuestActiveInformations,
  QuestListMessage: () => QuestListMessage,
  QuestListRequestMessage: () => QuestListRequestMessage,
  QuestObjectiveInformations: () => QuestObjectiveInformations,
  QuestObjectiveInformationsWithCompletion: () => QuestObjectiveInformationsWithCompletion,
  QuestObjectiveValidatedMessage: () => QuestObjectiveValidatedMessage,
  QuestObjectiveValidationMessage: () => QuestObjectiveValidationMessage,
  QuestStartRequestMessage: () => QuestStartRequestMessage,
  QuestStartedMessage: () => QuestStartedMessage,
  QuestStepInfoMessage: () => QuestStepInfoMessage,
  QuestStepInfoRequestMessage: () => QuestStepInfoRequestMessage,
  QuestStepStartedMessage: () => QuestStepStartedMessage,
  QuestStepValidatedMessage: () => QuestStepValidatedMessage,
  QuestValidatedMessage: () => QuestValidatedMessage,
  QueueStatusMessage: () => QueueStatusMessage,
  RawDataMessage: () => RawDataMessage,
  RecruitmentInformationMessage: () => RecruitmentInformationMessage,
  RecycleResultMessage: () => RecycleResultMessage,
  RecycledItem: () => RecycledItem,
  RefreshCharacterStatsMessage: () => RefreshCharacterStatsMessage,
  RefreshFollowedQuestsOrderRequestMessage: () => RefreshFollowedQuestsOrderRequestMessage,
  ReloginTokenRequestMessage: () => ReloginTokenRequestMessage,
  ReloginTokenStatusMessage: () => ReloginTokenStatusMessage,
  RemodelingInformation: () => RemodelingInformation,
  ResetCharacterStatsRequestMessage: () => ResetCharacterStatsRequestMessage,
  SavablePresetTypeEnum: () => SavablePresetTypeEnum,
  SelectedServerDataExtendedMessage: () => SelectedServerDataExtendedMessage,
  SelectedServerDataMessage: () => SelectedServerDataMessage,
  SelectedServerRefusedMessage: () => SelectedServerRefusedMessage,
  SellerBuyerDescriptor: () => SellerBuyerDescriptor,
  SequenceEndMessage: () => SequenceEndMessage,
  SequenceNumberMessage: () => SequenceNumberMessage,
  SequenceNumberRequestMessage: () => SequenceNumberRequestMessage,
  SequenceStartMessage: () => SequenceStartMessage,
  ServerCompletionEnum: () => ServerCompletionEnum,
  ServerConnectionErrorEnum: () => ServerConnectionErrorEnum,
  ServerExperienceModificatorMessage: () => ServerExperienceModificatorMessage,
  ServerOptionalFeaturesMessage: () => ServerOptionalFeaturesMessage,
  ServerSelectionMessage: () => ServerSelectionMessage,
  ServerSessionConstant: () => ServerSessionConstant,
  ServerSessionConstantInteger: () => ServerSessionConstantInteger,
  ServerSessionConstantLong: () => ServerSessionConstantLong,
  ServerSessionConstantString: () => ServerSessionConstantString,
  ServerSessionConstantsMessage: () => ServerSessionConstantsMessage,
  ServerSettingsMessage: () => ServerSettingsMessage,
  ServerStatusEnum: () => ServerStatusEnum,
  ServerStatusUpdateMessage: () => ServerStatusUpdateMessage,
  ServersListMessage: () => ServersListMessage,
  SetCharacterRestrictionsMessage: () => SetCharacterRestrictionsMessage,
  SetEnableAVARequestMessage: () => SetEnableAVARequestMessage,
  SetEnablePVPRequestMessage: () => SetEnablePVPRequestMessage,
  SetUpdateMessage: () => SetUpdateMessage,
  Shortcut: () => Shortcut,
  ShortcutBarAddErrorMessage: () => ShortcutBarAddErrorMessage,
  ShortcutBarAddRequestMessage: () => ShortcutBarAddRequestMessage,
  ShortcutBarContentMessage: () => ShortcutBarContentMessage,
  ShortcutBarEnum: () => ShortcutBarEnum,
  ShortcutBarRefreshMessage: () => ShortcutBarRefreshMessage,
  ShortcutBarRemoveErrorMessage: () => ShortcutBarRemoveErrorMessage,
  ShortcutBarRemoveRequestMessage: () => ShortcutBarRemoveRequestMessage,
  ShortcutBarRemovedMessage: () => ShortcutBarRemovedMessage,
  ShortcutBarReplacedMessage: () => ShortcutBarReplacedMessage,
  ShortcutBarSwapErrorMessage: () => ShortcutBarSwapErrorMessage,
  ShortcutBarSwapRequestMessage: () => ShortcutBarSwapRequestMessage,
  ShortcutEmote: () => ShortcutEmote,
  ShortcutEntitiesPreset: () => ShortcutEntitiesPreset,
  ShortcutObject: () => ShortcutObject,
  ShortcutObjectIdolsPreset: () => ShortcutObjectIdolsPreset,
  ShortcutObjectItem: () => ShortcutObjectItem,
  ShortcutObjectPreset: () => ShortcutObjectPreset,
  ShortcutSmiley: () => ShortcutSmiley,
  ShortcutSpell: () => ShortcutSpell,
  ShowCellMessage: () => ShowCellMessage,
  ShowCellRequestMessage: () => ShowCellRequestMessage,
  ShowCellSpectatorMessage: () => ShowCellSpectatorMessage,
  SimpleCharacterCharacteristicForPreset: () => SimpleCharacterCharacteristicForPreset,
  SkillActionDescription: () => SkillActionDescription,
  SkillActionDescriptionCollect: () => SkillActionDescriptionCollect,
  SkillActionDescriptionCraft: () => SkillActionDescriptionCraft,
  SkillActionDescriptionTimed: () => SkillActionDescriptionTimed,
  SlaveNoLongerControledMessage: () => SlaveNoLongerControledMessage,
  SlaveSwitchContextMessage: () => SlaveSwitchContextMessage,
  SocialContactCategoryEnum: () => SocialContactCategoryEnum,
  SocialGroupCreationResultEnum: () => SocialGroupCreationResultEnum,
  SocialGroupInvitationStateEnum: () => SocialGroupInvitationStateEnum,
  SocialNoticeErrorEnum: () => SocialNoticeErrorEnum,
  SocialNoticeMessage: () => SocialNoticeMessage,
  SocialNoticeSetErrorMessage: () => SocialNoticeSetErrorMessage,
  SocialNoticeSetRequestMessage: () => SocialNoticeSetRequestMessage,
  SpawnCharacterInformation: () => SpawnCharacterInformation,
  SpawnCompanionInformation: () => SpawnCompanionInformation,
  SpawnInformation: () => SpawnInformation,
  SpawnMonsterInformation: () => SpawnMonsterInformation,
  SpawnScaledMonsterInformation: () => SpawnScaledMonsterInformation,
  SpellForPreset: () => SpellForPreset,
  SpellItem: () => SpellItem,
  SpellListMessage: () => SpellListMessage,
  SpellVariantActivationMessage: () => SpellVariantActivationMessage,
  SpellVariantActivationRequestMessage: () => SpellVariantActivationRequestMessage,
  SpellsPreset: () => SpellsPreset,
  SpouseGetInformationsMessage: () => SpouseGetInformationsMessage,
  SpouseInformationsMessage: () => SpouseInformationsMessage,
  SpouseStatusMessage: () => SpouseStatusMessage,
  StartupActionAddMessage: () => StartupActionAddMessage,
  StartupActionAddObject: () => StartupActionAddObject,
  StartupActionFinishedMessage: () => StartupActionFinishedMessage,
  StartupActionsAllAttributionMessage: () => StartupActionsAllAttributionMessage,
  StartupActionsExecuteMessage: () => StartupActionsExecuteMessage,
  StartupActionsListMessage: () => StartupActionsListMessage,
  StartupActionsObjetAttributionMessage: () => StartupActionsObjetAttributionMessage,
  StatedElement: () => StatedElement,
  StatedElementUpdatedMessage: () => StatedElementUpdatedMessage,
  StatedMapUpdateMessage: () => StatedMapUpdateMessage,
  StatisticData: () => StatisticData,
  StatisticDataBoolean: () => StatisticDataBoolean,
  StatisticDataByte: () => StatisticDataByte,
  StatisticDataInt: () => StatisticDataInt,
  StatisticDataShort: () => StatisticDataShort,
  StatisticDataString: () => StatisticDataString,
  StatsPreset: () => StatsPreset,
  StatsUpgradeRequestMessage: () => StatsUpgradeRequestMessage,
  StatsUpgradeResultEnum: () => StatsUpgradeResultEnum,
  StatsUpgradeResultMessage: () => StatsUpgradeResultMessage,
  StopToListenRunningFightRequestMessage: () => StopToListenRunningFightRequestMessage,
  StorageInventoryContentMessage: () => StorageInventoryContentMessage,
  StorageKamasUpdateMessage: () => StorageKamasUpdateMessage,
  StorageObjectRemoveMessage: () => StorageObjectRemoveMessage,
  StorageObjectUpdateMessage: () => StorageObjectUpdateMessage,
  StorageObjectsRemoveMessage: () => StorageObjectsRemoveMessage,
  StorageObjectsUpdateMessage: () => StorageObjectsUpdateMessage,
  SubEntity: () => SubEntity,
  SubEntityBindingPointCategoryEnum: () => SubEntityBindingPointCategoryEnum,
  SubscriptionLimitationMessage: () => SubscriptionLimitationMessage,
  SubscriptionRequiredEnum: () => SubscriptionRequiredEnum,
  SubscriptionZoneMessage: () => SubscriptionZoneMessage,
  SymbioticObjectAssociateRequestMessage: () => SymbioticObjectAssociateRequestMessage,
  SymbioticObjectAssociatedMessage: () => SymbioticObjectAssociatedMessage,
  SymbioticObjectErrorMessage: () => SymbioticObjectErrorMessage,
  SystemMessageDisplayMessage: () => SystemMessageDisplayMessage,
  TaxCollectorAttackedMessage: () => TaxCollectorAttackedMessage,
  TaxCollectorAttackedResultMessage: () => TaxCollectorAttackedResultMessage,
  TaxCollectorBasicInformations: () => TaxCollectorBasicInformations,
  TaxCollectorComplementaryInformations: () => TaxCollectorComplementaryInformations,
  TaxCollectorDialogQuestionBasicMessage: () => TaxCollectorDialogQuestionBasicMessage,
  TaxCollectorDialogQuestionExtendedMessage: () => TaxCollectorDialogQuestionExtendedMessage,
  TaxCollectorErrorMessage: () => TaxCollectorErrorMessage,
  TaxCollectorErrorReasonEnum: () => TaxCollectorErrorReasonEnum,
  TaxCollectorFightersInformation: () => TaxCollectorFightersInformation,
  TaxCollectorGuildInformations: () => TaxCollectorGuildInformations,
  TaxCollectorInformations: () => TaxCollectorInformations,
  TaxCollectorListMessage: () => TaxCollectorListMessage,
  TaxCollectorLootInformations: () => TaxCollectorLootInformations,
  TaxCollectorMovement: () => TaxCollectorMovement,
  TaxCollectorMovementAddMessage: () => TaxCollectorMovementAddMessage,
  TaxCollectorMovementMessage: () => TaxCollectorMovementMessage,
  TaxCollectorMovementRemoveMessage: () => TaxCollectorMovementRemoveMessage,
  TaxCollectorMovementTypeEnum: () => TaxCollectorMovementTypeEnum,
  TaxCollectorMovementsOfflineMessage: () => TaxCollectorMovementsOfflineMessage,
  TaxCollectorStateEnum: () => TaxCollectorStateEnum,
  TaxCollectorStateUpdateMessage: () => TaxCollectorStateUpdateMessage,
  TaxCollectorStaticExtendedInformations: () => TaxCollectorStaticExtendedInformations,
  TaxCollectorStaticInformations: () => TaxCollectorStaticInformations,
  TaxCollectorWaitingForHelpInformations: () => TaxCollectorWaitingForHelpInformations,
  TeamEnum: () => TeamEnum,
  TeamTypeEnum: () => TeamTypeEnum,
  TeleportBuddiesAnswerMessage: () => TeleportBuddiesAnswerMessage,
  TeleportBuddiesMessage: () => TeleportBuddiesMessage,
  TeleportBuddiesRequestedMessage: () => TeleportBuddiesRequestedMessage,
  TeleportDestination: () => TeleportDestination,
  TeleportDestinationsMessage: () => TeleportDestinationsMessage,
  TeleportHavenBagAnswerMessage: () => TeleportHavenBagAnswerMessage,
  TeleportHavenBagRequestMessage: () => TeleportHavenBagRequestMessage,
  TeleportOnSameMapMessage: () => TeleportOnSameMapMessage,
  TeleportRequestMessage: () => TeleportRequestMessage,
  TeleportToBuddyAnswerMessage: () => TeleportToBuddyAnswerMessage,
  TeleportToBuddyCloseMessage: () => TeleportToBuddyCloseMessage,
  TeleportToBuddyOfferMessage: () => TeleportToBuddyOfferMessage,
  TeleporterTypeEnum: () => TeleporterTypeEnum,
  TextInformationMessage: () => TextInformationMessage,
  TextInformationTypeEnum: () => TextInformationTypeEnum,
  TitleGainedMessage: () => TitleGainedMessage,
  TitleLostMessage: () => TitleLostMessage,
  TitleSelectErrorMessage: () => TitleSelectErrorMessage,
  TitleSelectRequestMessage: () => TitleSelectRequestMessage,
  TitleSelectedMessage: () => TitleSelectedMessage,
  TitlesAndOrnamentsListMessage: () => TitlesAndOrnamentsListMessage,
  TitlesAndOrnamentsListRequestMessage: () => TitlesAndOrnamentsListRequestMessage,
  TopTaxCollectorListMessage: () => TopTaxCollectorListMessage,
  TreasureHuntAvailableRetryCountUpdateMessage: () => TreasureHuntAvailableRetryCountUpdateMessage,
  TreasureHuntDigRequestAnswerFailedMessage: () => TreasureHuntDigRequestAnswerFailedMessage,
  TreasureHuntDigRequestAnswerMessage: () => TreasureHuntDigRequestAnswerMessage,
  TreasureHuntDigRequestEnum: () => TreasureHuntDigRequestEnum,
  TreasureHuntDigRequestMessage: () => TreasureHuntDigRequestMessage,
  TreasureHuntFinishedMessage: () => TreasureHuntFinishedMessage,
  TreasureHuntFlag: () => TreasureHuntFlag,
  TreasureHuntFlagRemoveRequestMessage: () => TreasureHuntFlagRemoveRequestMessage,
  TreasureHuntFlagRequestAnswerMessage: () => TreasureHuntFlagRequestAnswerMessage,
  TreasureHuntFlagRequestEnum: () => TreasureHuntFlagRequestEnum,
  TreasureHuntFlagRequestMessage: () => TreasureHuntFlagRequestMessage,
  TreasureHuntFlagStateEnum: () => TreasureHuntFlagStateEnum,
  TreasureHuntGiveUpRequestMessage: () => TreasureHuntGiveUpRequestMessage,
  TreasureHuntLegendaryRequestMessage: () => TreasureHuntLegendaryRequestMessage,
  TreasureHuntMessage: () => TreasureHuntMessage,
  TreasureHuntRequestAnswerMessage: () => TreasureHuntRequestAnswerMessage,
  TreasureHuntRequestEnum: () => TreasureHuntRequestEnum,
  TreasureHuntShowLegendaryUIMessage: () => TreasureHuntShowLegendaryUIMessage,
  TreasureHuntStep: () => TreasureHuntStep,
  TreasureHuntStepDig: () => TreasureHuntStepDig,
  TreasureHuntStepFight: () => TreasureHuntStepFight,
  TreasureHuntStepFollowDirection: () => TreasureHuntStepFollowDirection,
  TreasureHuntStepFollowDirectionToHint: () => TreasureHuntStepFollowDirectionToHint,
  TreasureHuntStepFollowDirectionToPOI: () => TreasureHuntStepFollowDirectionToPOI,
  TreasureHuntTypeEnum: () => TreasureHuntTypeEnum,
  TrustCertificate: () => TrustCertificate,
  TrustStatusMessage: () => TrustStatusMessage,
  UnfollowQuestObjectiveRequestMessage: () => UnfollowQuestObjectiveRequestMessage,
  UpdateLifePointsMessage: () => UpdateLifePointsMessage,
  UpdateMapPlayersAgressableStatusMessage: () => UpdateMapPlayersAgressableStatusMessage,
  UpdateMountBooleanCharacteristic: () => UpdateMountBooleanCharacteristic,
  UpdateMountCharacteristic: () => UpdateMountCharacteristic,
  UpdateMountCharacteristicsMessage: () => UpdateMountCharacteristicsMessage,
  UpdateMountIntegerCharacteristic: () => UpdateMountIntegerCharacteristic,
  UpdateRecruitmentInformationMessage: () => UpdateRecruitmentInformationMessage,
  UpdateSelfAgressableStatusMessage: () => UpdateSelfAgressableStatusMessage,
  UpdateSpellModifierMessage: () => UpdateSpellModifierMessage,
  Version: () => Version,
  WarnOnPermaDeathMessage: () => WarnOnPermaDeathMessage,
  WarnOnPermaDeathStateMessage: () => WarnOnPermaDeathStateMessage,
  WatchInventoryContentMessage: () => WatchInventoryContentMessage,
  WatchQuestListMessage: () => WatchQuestListMessage,
  WatchQuestStepInfoMessage: () => WatchQuestStepInfoMessage,
  WatchQuestStepInfoRequestMessage: () => WatchQuestStepInfoRequestMessage,
  WrapperObjectAssociatedMessage: () => WrapperObjectAssociatedMessage,
  WrapperObjectDissociateRequestMessage: () => WrapperObjectDissociateRequestMessage,
  WrapperObjectErrorMessage: () => WrapperObjectErrorMessage,
  ZaapDestinationsMessage: () => ZaapDestinationsMessage,
  ZaapRespawnSaveRequestMessage: () => ZaapRespawnSaveRequestMessage,
  ZaapRespawnUpdatedMessage: () => ZaapRespawnUpdatedMessage,
  messages: () => messages,
  types: () => types
});
module.exports = __toCommonJS(src_exports);

// src/dofus-message.ts
var DofusMessage = class {
  static id;
  id;
  constructor() {
    this.id = this.constructor.id;
  }
  serialize(_) {
    throw "Serializing empty message";
  }
  deserialize(_) {
    throw "Deserializing empty message";
  }
};

// src/dofus-type.ts
var DofusType = class {
  static id;
  id;
  constructor() {
    this.id = this.constructor.id;
  }
  serialize(_) {
    throw "Serializing empty type";
  }
  deserialize(_) {
    throw "Deserializing empty type";
  }
};

// src/network-message.ts
var import_ts_pattern = require("ts-pattern");
var import_hetwan = require("@hetwan.io");
var NetworkMessage = class _NetworkMessage {
  static BIT_RIGHT_SHIFT_LEN_PACKET_ID = 2;
  static BIT_MASK = 3;
  static PACKET_METADATA_LENGTH = 7;
  static encode(message) {
    const messageWriter = new import_hetwan.BigEndianWriter();
    message.serialize(messageWriter);
    const wrapperWriter = new import_hetwan.BigEndianWriter(
      Buffer.allocUnsafe(
        messageWriter.getPointer() + _NetworkMessage.PACKET_METADATA_LENGTH
      )
    );
    const type = this.computeTypeLength(messageWriter.getPointer());
    wrapperWriter.writeUShort(this.subComputeStaticHeader(message.id, type));
    wrapperWriter.writeUInt(1);
    (0, import_ts_pattern.match)(type).with(1, () => wrapperWriter.writeByte(messageWriter.getPointer())).with(2, () => wrapperWriter.writeShort(messageWriter.getPointer())).with(3, () => {
      wrapperWriter.writeByte(messageWriter.getPointer() >> 16 & 255);
      wrapperWriter.writeShort(messageWriter.getPointer() & 65535);
    }).otherwise(() => {
      throw new Error("Invalid type");
    });
    wrapperWriter.writeBuffer(messageWriter.getBuffer());
    return wrapperWriter.getBuffer();
  }
  static decode(data) {
    const reader = new import_hetwan.BigEndianReader(data);
    const messageHeader = reader.readUShort();
    const messageId = messageHeader >> 2;
    const typeLength = messageHeader & 3;
    const instanceId = reader.readUInt();
    const messageLength = _NetworkMessage.getPacketLength(
      reader,
      typeLength
    );
    const messageReader = new import_hetwan.BigEndianReader(
      data.subarray(reader.getPointer(), reader.getPointer() + messageLength)
    );
    return {
      messageId,
      instanceId,
      messageLength,
      messageReader
    };
  }
  static computeTypeLength(length) {
    return (0, import_ts_pattern.match)(length).with(
      import_ts_pattern.P.when((l) => l > 65535),
      () => 3
    ).with(
      import_ts_pattern.P.when((l) => l > 255),
      () => 2
    ).with(
      import_ts_pattern.P.when((l) => l > 0),
      () => 1
    ).otherwise(() => 0);
  }
  static subComputeStaticHeader(id, typeLength) {
    return id << _NetworkMessage.BIT_RIGHT_SHIFT_LEN_PACKET_ID | typeLength;
  }
  static getPacketLength(reader, length) {
    return (0, import_ts_pattern.match)(length).with(1, () => reader.readByte()).with(2, () => reader.readUShort()).with(3, () => {
      return ((reader.readByte() & 255) << 16) + ((reader.readByte() & 255) << 8) + (reader.readByte() & 255);
    }).otherwise(() => {
      throw new Error("Packet too long");
    });
  }
};

// src/protocol.ts
var import_hetwan2 = require("@hetwan.io");
var SubEntityBindingPointCategoryEnum = /* @__PURE__ */ ((SubEntityBindingPointCategoryEnum2) => {
  SubEntityBindingPointCategoryEnum2[SubEntityBindingPointCategoryEnum2["HOOK_POINT_CATEGORY_UNUSED"] = 0] = "HOOK_POINT_CATEGORY_UNUSED";
  SubEntityBindingPointCategoryEnum2[SubEntityBindingPointCategoryEnum2["HOOK_POINT_CATEGORY_PET"] = 1] = "HOOK_POINT_CATEGORY_PET";
  SubEntityBindingPointCategoryEnum2[SubEntityBindingPointCategoryEnum2["HOOK_POINT_CATEGORY_MOUNT_DRIVER"] = 2] = "HOOK_POINT_CATEGORY_MOUNT_DRIVER";
  SubEntityBindingPointCategoryEnum2[SubEntityBindingPointCategoryEnum2["HOOK_POINT_CATEGORY_LIFTED_ENTITY"] = 3] = "HOOK_POINT_CATEGORY_LIFTED_ENTITY";
  SubEntityBindingPointCategoryEnum2[SubEntityBindingPointCategoryEnum2["HOOK_POINT_CATEGORY_BASE_BACKGROUND"] = 4] = "HOOK_POINT_CATEGORY_BASE_BACKGROUND";
  SubEntityBindingPointCategoryEnum2[SubEntityBindingPointCategoryEnum2["HOOK_POINT_CATEGORY_MERCHANT_BAG"] = 5] = "HOOK_POINT_CATEGORY_MERCHANT_BAG";
  SubEntityBindingPointCategoryEnum2[SubEntityBindingPointCategoryEnum2["HOOK_POINT_CATEGORY_BASE_FOREGROUND"] = 6] = "HOOK_POINT_CATEGORY_BASE_FOREGROUND";
  SubEntityBindingPointCategoryEnum2[SubEntityBindingPointCategoryEnum2["HOOK_POINT_CATEGORY_PET_FOLLOWER"] = 7] = "HOOK_POINT_CATEGORY_PET_FOLLOWER";
  SubEntityBindingPointCategoryEnum2[SubEntityBindingPointCategoryEnum2["HOOK_POINT_CATEGORY_UNDERWATER_BUBBLES"] = 8] = "HOOK_POINT_CATEGORY_UNDERWATER_BUBBLES";
  return SubEntityBindingPointCategoryEnum2;
})(SubEntityBindingPointCategoryEnum || {});
var BuildTypeEnum = /* @__PURE__ */ ((BuildTypeEnum2) => {
  BuildTypeEnum2[BuildTypeEnum2["RELEASE"] = 0] = "RELEASE";
  BuildTypeEnum2[BuildTypeEnum2["BETA"] = 1] = "BETA";
  BuildTypeEnum2[BuildTypeEnum2["ALPHA"] = 2] = "ALPHA";
  BuildTypeEnum2[BuildTypeEnum2["TESTING"] = 3] = "TESTING";
  BuildTypeEnum2[BuildTypeEnum2["INTERNAL"] = 4] = "INTERNAL";
  BuildTypeEnum2[BuildTypeEnum2["DEBUG"] = 5] = "DEBUG";
  BuildTypeEnum2[BuildTypeEnum2["DRAFT"] = 6] = "DRAFT";
  return BuildTypeEnum2;
})(BuildTypeEnum || {});
var ChatActivableChannelsEnum = /* @__PURE__ */ ((ChatActivableChannelsEnum2) => {
  ChatActivableChannelsEnum2[ChatActivableChannelsEnum2["CHANNEL_GLOBAL"] = 0] = "CHANNEL_GLOBAL";
  ChatActivableChannelsEnum2[ChatActivableChannelsEnum2["CHANNEL_TEAM"] = 1] = "CHANNEL_TEAM";
  ChatActivableChannelsEnum2[ChatActivableChannelsEnum2["CHANNEL_GUILD"] = 2] = "CHANNEL_GUILD";
  ChatActivableChannelsEnum2[ChatActivableChannelsEnum2["CHANNEL_ALLIANCE"] = 3] = "CHANNEL_ALLIANCE";
  ChatActivableChannelsEnum2[ChatActivableChannelsEnum2["CHANNEL_PARTY"] = 4] = "CHANNEL_PARTY";
  ChatActivableChannelsEnum2[ChatActivableChannelsEnum2["CHANNEL_SALES"] = 5] = "CHANNEL_SALES";
  ChatActivableChannelsEnum2[ChatActivableChannelsEnum2["CHANNEL_SEEK"] = 6] = "CHANNEL_SEEK";
  ChatActivableChannelsEnum2[ChatActivableChannelsEnum2["CHANNEL_NOOB"] = 7] = "CHANNEL_NOOB";
  ChatActivableChannelsEnum2[ChatActivableChannelsEnum2["CHANNEL_ADMIN"] = 8] = "CHANNEL_ADMIN";
  ChatActivableChannelsEnum2[ChatActivableChannelsEnum2["PSEUDO_CHANNEL_PRIVATE"] = 9] = "PSEUDO_CHANNEL_PRIVATE";
  ChatActivableChannelsEnum2[ChatActivableChannelsEnum2["PSEUDO_CHANNEL_INFO"] = 10] = "PSEUDO_CHANNEL_INFO";
  ChatActivableChannelsEnum2[ChatActivableChannelsEnum2["PSEUDO_CHANNEL_FIGHT_LOG"] = 11] = "PSEUDO_CHANNEL_FIGHT_LOG";
  ChatActivableChannelsEnum2[ChatActivableChannelsEnum2["CHANNEL_ADS"] = 12] = "CHANNEL_ADS";
  ChatActivableChannelsEnum2[ChatActivableChannelsEnum2["CHANNEL_ARENA"] = 13] = "CHANNEL_ARENA";
  ChatActivableChannelsEnum2[ChatActivableChannelsEnum2["CHANNEL_COMMUNITY"] = 14] = "CHANNEL_COMMUNITY";
  return ChatActivableChannelsEnum2;
})(ChatActivableChannelsEnum || {});
var FightSpellCastCriticalEnum = /* @__PURE__ */ ((FightSpellCastCriticalEnum2) => {
  FightSpellCastCriticalEnum2[FightSpellCastCriticalEnum2["NORMAL"] = 1] = "NORMAL";
  FightSpellCastCriticalEnum2[FightSpellCastCriticalEnum2["CRITICAL_HIT"] = 2] = "CRITICAL_HIT";
  FightSpellCastCriticalEnum2[FightSpellCastCriticalEnum2["CRITICAL_FAIL"] = 3] = "CRITICAL_FAIL";
  return FightSpellCastCriticalEnum2;
})(FightSpellCastCriticalEnum || {});
var PlayerLifeStatusEnum = /* @__PURE__ */ ((PlayerLifeStatusEnum2) => {
  PlayerLifeStatusEnum2[PlayerLifeStatusEnum2["STATUS_ALIVE_AND_KICKING"] = 0] = "STATUS_ALIVE_AND_KICKING";
  PlayerLifeStatusEnum2[PlayerLifeStatusEnum2["STATUS_TOMBSTONE"] = 1] = "STATUS_TOMBSTONE";
  PlayerLifeStatusEnum2[PlayerLifeStatusEnum2["STATUS_PHANTOM"] = 2] = "STATUS_PHANTOM";
  return PlayerLifeStatusEnum2;
})(PlayerLifeStatusEnum || {});
var PrismStateEnum = /* @__PURE__ */ ((PrismStateEnum2) => {
  PrismStateEnum2[PrismStateEnum2["PRISM_STATE_INVULNERABLE"] = 0] = "PRISM_STATE_INVULNERABLE";
  PrismStateEnum2[PrismStateEnum2["PRISM_STATE_NORMAL"] = 1] = "PRISM_STATE_NORMAL";
  PrismStateEnum2[PrismStateEnum2["PRISM_STATE_ATTACKED"] = 2] = "PRISM_STATE_ATTACKED";
  PrismStateEnum2[PrismStateEnum2["PRISM_STATE_FIGHTING"] = 3] = "PRISM_STATE_FIGHTING";
  PrismStateEnum2[PrismStateEnum2["PRISM_STATE_WEAKENED"] = 4] = "PRISM_STATE_WEAKENED";
  PrismStateEnum2[PrismStateEnum2["PRISM_STATE_VULNERABLE"] = 5] = "PRISM_STATE_VULNERABLE";
  PrismStateEnum2[PrismStateEnum2["PRISM_STATE_DEFEATED"] = 6] = "PRISM_STATE_DEFEATED";
  PrismStateEnum2[PrismStateEnum2["PRISM_STATE_SABOTAGED"] = 7] = "PRISM_STATE_SABOTAGED";
  return PrismStateEnum2;
})(PrismStateEnum || {});
var MapObstacleStateEnum = /* @__PURE__ */ ((MapObstacleStateEnum2) => {
  MapObstacleStateEnum2[MapObstacleStateEnum2["OBSTACLE_OPENED"] = 1] = "OBSTACLE_OPENED";
  MapObstacleStateEnum2[MapObstacleStateEnum2["OBSTACLE_CLOSED"] = 2] = "OBSTACLE_CLOSED";
  return MapObstacleStateEnum2;
})(MapObstacleStateEnum || {});
var AggressableStatusEnum = /* @__PURE__ */ ((AggressableStatusEnum2) => {
  AggressableStatusEnum2[AggressableStatusEnum2["NON_AGGRESSABLE"] = 0] = "NON_AGGRESSABLE";
  AggressableStatusEnum2[AggressableStatusEnum2["PvP_ENABLED_AGGRESSABLE"] = 10] = "PvP_ENABLED_AGGRESSABLE";
  AggressableStatusEnum2[AggressableStatusEnum2["PvP_ENABLED_NON_AGGRESSABLE"] = 11] = "PvP_ENABLED_NON_AGGRESSABLE";
  AggressableStatusEnum2[AggressableStatusEnum2["AvA_ENABLED_AGGRESSABLE"] = 20] = "AvA_ENABLED_AGGRESSABLE";
  AggressableStatusEnum2[AggressableStatusEnum2["AvA_ENABLED_NON_AGGRESSABLE"] = 21] = "AvA_ENABLED_NON_AGGRESSABLE";
  AggressableStatusEnum2[AggressableStatusEnum2["AvA_DISQUALIFIED"] = 22] = "AvA_DISQUALIFIED";
  AggressableStatusEnum2[AggressableStatusEnum2["AvA_PREQUALIFIED_AGGRESSABLE"] = 23] = "AvA_PREQUALIFIED_AGGRESSABLE";
  return AggressableStatusEnum2;
})(AggressableStatusEnum || {});
var TeamEnum = /* @__PURE__ */ ((TeamEnum2) => {
  TeamEnum2[TeamEnum2["TEAM_CHALLENGER"] = 0] = "TEAM_CHALLENGER";
  TeamEnum2[TeamEnum2["TEAM_DEFENDER"] = 1] = "TEAM_DEFENDER";
  TeamEnum2[TeamEnum2["TEAM_SPECTATOR"] = 2] = "TEAM_SPECTATOR";
  return TeamEnum2;
})(TeamEnum || {});
var GameActionFightInvisibilityStateEnum = /* @__PURE__ */ ((GameActionFightInvisibilityStateEnum2) => {
  GameActionFightInvisibilityStateEnum2[GameActionFightInvisibilityStateEnum2["INVISIBLE"] = 1] = "INVISIBLE";
  GameActionFightInvisibilityStateEnum2[GameActionFightInvisibilityStateEnum2["DETECTED"] = 2] = "DETECTED";
  GameActionFightInvisibilityStateEnum2[GameActionFightInvisibilityStateEnum2["VISIBLE"] = 3] = "VISIBLE";
  return GameActionFightInvisibilityStateEnum2;
})(GameActionFightInvisibilityStateEnum || {});
var CharacterInventoryPositionEnum = /* @__PURE__ */ ((CharacterInventoryPositionEnum2) => {
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["ACCESSORY_POSITION_AMULET"] = 0] = "ACCESSORY_POSITION_AMULET";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["ACCESSORY_POSITION_WEAPON"] = 1] = "ACCESSORY_POSITION_WEAPON";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_RING_LEFT"] = 2] = "INVENTORY_POSITION_RING_LEFT";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["ACCESSORY_POSITION_BELT"] = 3] = "ACCESSORY_POSITION_BELT";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_RING_RIGHT"] = 4] = "INVENTORY_POSITION_RING_RIGHT";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["ACCESSORY_POSITION_BOOTS"] = 5] = "ACCESSORY_POSITION_BOOTS";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["ACCESSORY_POSITION_HAT"] = 6] = "ACCESSORY_POSITION_HAT";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["ACCESSORY_POSITION_CAPE"] = 7] = "ACCESSORY_POSITION_CAPE";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["ACCESSORY_POSITION_PETS"] = 8] = "ACCESSORY_POSITION_PETS";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_DOFUS_1"] = 9] = "INVENTORY_POSITION_DOFUS_1";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_DOFUS_2"] = 10] = "INVENTORY_POSITION_DOFUS_2";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_DOFUS_3"] = 11] = "INVENTORY_POSITION_DOFUS_3";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_DOFUS_4"] = 12] = "INVENTORY_POSITION_DOFUS_4";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_DOFUS_5"] = 13] = "INVENTORY_POSITION_DOFUS_5";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_DOFUS_6"] = 14] = "INVENTORY_POSITION_DOFUS_6";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["ACCESSORY_POSITION_SHIELD"] = 15] = "ACCESSORY_POSITION_SHIELD";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_MOUNT"] = 16] = "INVENTORY_POSITION_MOUNT";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_MUTATION"] = 20] = "INVENTORY_POSITION_MUTATION";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_BOOST_FOOD"] = 21] = "INVENTORY_POSITION_BOOST_FOOD";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_FIRST_BONUS"] = 22] = "INVENTORY_POSITION_FIRST_BONUS";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_SECOND_BONUS"] = 23] = "INVENTORY_POSITION_SECOND_BONUS";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_FIRST_MALUS"] = 24] = "INVENTORY_POSITION_FIRST_MALUS";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_SECOND_MALUS"] = 25] = "INVENTORY_POSITION_SECOND_MALUS";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_ROLEPLAY_BUFFER"] = 26] = "INVENTORY_POSITION_ROLEPLAY_BUFFER";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_FOLLOWER"] = 27] = "INVENTORY_POSITION_FOLLOWER";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_ENTITY"] = 28] = "INVENTORY_POSITION_ENTITY";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["ACCESSORY_POSITION_RIDE_HARNESS"] = 29] = "ACCESSORY_POSITION_RIDE_HARNESS";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_COSTUME"] = 30] = "INVENTORY_POSITION_COSTUME";
  CharacterInventoryPositionEnum2[CharacterInventoryPositionEnum2["INVENTORY_POSITION_NOT_EQUIPED"] = 63] = "INVENTORY_POSITION_NOT_EQUIPED";
  return CharacterInventoryPositionEnum2;
})(CharacterInventoryPositionEnum || {});
var FightTypeEnum = /* @__PURE__ */ ((FightTypeEnum2) => {
  FightTypeEnum2[FightTypeEnum2["FIGHT_TYPE_CHALLENGE"] = 0] = "FIGHT_TYPE_CHALLENGE";
  FightTypeEnum2[FightTypeEnum2["FIGHT_TYPE_AGRESSION"] = 1] = "FIGHT_TYPE_AGRESSION";
  FightTypeEnum2[FightTypeEnum2["FIGHT_TYPE_PvMA"] = 2] = "FIGHT_TYPE_PvMA";
  FightTypeEnum2[FightTypeEnum2["FIGHT_TYPE_MXvM"] = 3] = "FIGHT_TYPE_MXvM";
  FightTypeEnum2[FightTypeEnum2["FIGHT_TYPE_PvM"] = 4] = "FIGHT_TYPE_PvM";
  FightTypeEnum2[FightTypeEnum2["FIGHT_TYPE_PvT"] = 5] = "FIGHT_TYPE_PvT";
  FightTypeEnum2[FightTypeEnum2["FIGHT_TYPE_PvMU"] = 6] = "FIGHT_TYPE_PvMU";
  FightTypeEnum2[FightTypeEnum2["FIGHT_TYPE_PVP_ARENA"] = 7] = "FIGHT_TYPE_PVP_ARENA";
  FightTypeEnum2[FightTypeEnum2["FIGHT_TYPE_Koh"] = 8] = "FIGHT_TYPE_Koh";
  FightTypeEnum2[FightTypeEnum2["FIGHT_TYPE_PvPr"] = 9] = "FIGHT_TYPE_PvPr";
  FightTypeEnum2[FightTypeEnum2["FIGHT_TYPE_BREACH"] = 10] = "FIGHT_TYPE_BREACH";
  return FightTypeEnum2;
})(FightTypeEnum || {});
var FightOutcomeEnum = /* @__PURE__ */ ((FightOutcomeEnum2) => {
  FightOutcomeEnum2[FightOutcomeEnum2["RESULT_LOST"] = 0] = "RESULT_LOST";
  FightOutcomeEnum2[FightOutcomeEnum2["RESULT_DRAW"] = 1] = "RESULT_DRAW";
  FightOutcomeEnum2[FightOutcomeEnum2["RESULT_VICTORY"] = 2] = "RESULT_VICTORY";
  FightOutcomeEnum2[FightOutcomeEnum2["RESULT_TAX"] = 5] = "RESULT_TAX";
  FightOutcomeEnum2[FightOutcomeEnum2["RESULT_DEFENDER_GROUP"] = 6] = "RESULT_DEFENDER_GROUP";
  return FightOutcomeEnum2;
})(FightOutcomeEnum || {});
var CharacterSpellModificationTypeEnum = /* @__PURE__ */ ((CharacterSpellModificationTypeEnum2) => {
  CharacterSpellModificationTypeEnum2[CharacterSpellModificationTypeEnum2["INVALID_MODIFICATION"] = 0] = "INVALID_MODIFICATION";
  CharacterSpellModificationTypeEnum2[CharacterSpellModificationTypeEnum2["RANGEABLE"] = 1] = "RANGEABLE";
  CharacterSpellModificationTypeEnum2[CharacterSpellModificationTypeEnum2["DAMAGE"] = 2] = "DAMAGE";
  CharacterSpellModificationTypeEnum2[CharacterSpellModificationTypeEnum2["BASE_DAMAGE"] = 3] = "BASE_DAMAGE";
  CharacterSpellModificationTypeEnum2[CharacterSpellModificationTypeEnum2["HEAL_BONUS"] = 4] = "HEAL_BONUS";
  CharacterSpellModificationTypeEnum2[CharacterSpellModificationTypeEnum2["AP_COST"] = 5] = "AP_COST";
  CharacterSpellModificationTypeEnum2[CharacterSpellModificationTypeEnum2["CAST_INTERVAL"] = 6] = "CAST_INTERVAL";
  CharacterSpellModificationTypeEnum2[CharacterSpellModificationTypeEnum2["CAST_INTERVAL_SET"] = 7] = "CAST_INTERVAL_SET";
  CharacterSpellModificationTypeEnum2[CharacterSpellModificationTypeEnum2["CRITICAL_HIT_BONUS"] = 8] = "CRITICAL_HIT_BONUS";
  CharacterSpellModificationTypeEnum2[CharacterSpellModificationTypeEnum2["CAST_LINE"] = 9] = "CAST_LINE";
  CharacterSpellModificationTypeEnum2[CharacterSpellModificationTypeEnum2["LOS"] = 10] = "LOS";
  CharacterSpellModificationTypeEnum2[CharacterSpellModificationTypeEnum2["MAX_CAST_PER_TURN"] = 11] = "MAX_CAST_PER_TURN";
  CharacterSpellModificationTypeEnum2[CharacterSpellModificationTypeEnum2["MAX_CAST_PER_TARGET"] = 12] = "MAX_CAST_PER_TARGET";
  CharacterSpellModificationTypeEnum2[CharacterSpellModificationTypeEnum2["RANGE_MAX"] = 13] = "RANGE_MAX";
  CharacterSpellModificationTypeEnum2[CharacterSpellModificationTypeEnum2["RANGE_MIN"] = 14] = "RANGE_MIN";
  return CharacterSpellModificationTypeEnum2;
})(CharacterSpellModificationTypeEnum || {});
var DebugLevelEnum = /* @__PURE__ */ ((DebugLevelEnum2) => {
  DebugLevelEnum2[DebugLevelEnum2["LEVEL_TRACE"] = 0] = "LEVEL_TRACE";
  DebugLevelEnum2[DebugLevelEnum2["LEVEL_DEBUG"] = 1] = "LEVEL_DEBUG";
  DebugLevelEnum2[DebugLevelEnum2["LEVEL_INFO"] = 2] = "LEVEL_INFO";
  DebugLevelEnum2[DebugLevelEnum2["LEVEL_WARN"] = 3] = "LEVEL_WARN";
  DebugLevelEnum2[DebugLevelEnum2["LEVEL_ERROR"] = 4] = "LEVEL_ERROR";
  DebugLevelEnum2[DebugLevelEnum2["LEVEL_FATAL"] = 5] = "LEVEL_FATAL";
  return DebugLevelEnum2;
})(DebugLevelEnum || {});
var GameServerTypeEnum = /* @__PURE__ */ ((GameServerTypeEnum2) => {
  GameServerTypeEnum2[GameServerTypeEnum2["SERVER_TYPE_UNDEFINED"] = -1] = "SERVER_TYPE_UNDEFINED";
  GameServerTypeEnum2[GameServerTypeEnum2["SERVER_TYPE_CLASSICAL"] = 0] = "SERVER_TYPE_CLASSICAL";
  GameServerTypeEnum2[GameServerTypeEnum2["SERVER_TYPE_HARDCORE"] = 1] = "SERVER_TYPE_HARDCORE";
  GameServerTypeEnum2[GameServerTypeEnum2["SERVER_TYPE_KOLIZEUM"] = 2] = "SERVER_TYPE_KOLIZEUM";
  GameServerTypeEnum2[GameServerTypeEnum2["SERVER_TYPE_TOURNAMENT"] = 3] = "SERVER_TYPE_TOURNAMENT";
  GameServerTypeEnum2[GameServerTypeEnum2["SERVER_TYPE_EPIC"] = 4] = "SERVER_TYPE_EPIC";
  GameServerTypeEnum2[GameServerTypeEnum2["SERVER_TYPE_TEMPORIS"] = 5] = "SERVER_TYPE_TEMPORIS";
  return GameServerTypeEnum2;
})(GameServerTypeEnum || {});
var ShortcutBarEnum = /* @__PURE__ */ ((ShortcutBarEnum2) => {
  ShortcutBarEnum2[ShortcutBarEnum2["GENERAL_SHORTCUT_BAR"] = 0] = "GENERAL_SHORTCUT_BAR";
  ShortcutBarEnum2[ShortcutBarEnum2["SPELL_SHORTCUT_BAR"] = 1] = "SPELL_SHORTCUT_BAR";
  return ShortcutBarEnum2;
})(ShortcutBarEnum || {});
var CharacterCreationResultEnum = /* @__PURE__ */ ((CharacterCreationResultEnum2) => {
  CharacterCreationResultEnum2[CharacterCreationResultEnum2["OK"] = 0] = "OK";
  CharacterCreationResultEnum2[CharacterCreationResultEnum2["ERR_NO_REASON"] = 1] = "ERR_NO_REASON";
  CharacterCreationResultEnum2[CharacterCreationResultEnum2["ERR_INVALID_NAME"] = 2] = "ERR_INVALID_NAME";
  CharacterCreationResultEnum2[CharacterCreationResultEnum2["ERR_NAME_ALREADY_EXISTS"] = 3] = "ERR_NAME_ALREADY_EXISTS";
  CharacterCreationResultEnum2[CharacterCreationResultEnum2["ERR_TOO_MANY_CHARACTERS"] = 4] = "ERR_TOO_MANY_CHARACTERS";
  CharacterCreationResultEnum2[CharacterCreationResultEnum2["ERR_NOT_ALLOWED"] = 5] = "ERR_NOT_ALLOWED";
  CharacterCreationResultEnum2[CharacterCreationResultEnum2["ERR_NEW_PLAYER_NOT_ALLOWED"] = 6] = "ERR_NEW_PLAYER_NOT_ALLOWED";
  CharacterCreationResultEnum2[CharacterCreationResultEnum2["ERR_RESTRICED_ZONE"] = 7] = "ERR_RESTRICED_ZONE";
  CharacterCreationResultEnum2[CharacterCreationResultEnum2["ERR_INCONSISTENT_COMMUNITY"] = 8] = "ERR_INCONSISTENT_COMMUNITY";
  return CharacterCreationResultEnum2;
})(CharacterCreationResultEnum || {});
var ExchangeErrorEnum = /* @__PURE__ */ ((ExchangeErrorEnum2) => {
  ExchangeErrorEnum2[ExchangeErrorEnum2["REQUEST_IMPOSSIBLE"] = 1] = "REQUEST_IMPOSSIBLE";
  ExchangeErrorEnum2[ExchangeErrorEnum2["REQUEST_CHARACTER_OCCUPIED"] = 2] = "REQUEST_CHARACTER_OCCUPIED";
  ExchangeErrorEnum2[ExchangeErrorEnum2["REQUEST_CHARACTER_JOB_NOT_EQUIPED"] = 3] = "REQUEST_CHARACTER_JOB_NOT_EQUIPED";
  ExchangeErrorEnum2[ExchangeErrorEnum2["REQUEST_CHARACTER_TOOL_TOO_FAR"] = 4] = "REQUEST_CHARACTER_TOOL_TOO_FAR";
  ExchangeErrorEnum2[ExchangeErrorEnum2["REQUEST_CHARACTER_OVERLOADED"] = 5] = "REQUEST_CHARACTER_OVERLOADED";
  ExchangeErrorEnum2[ExchangeErrorEnum2["REQUEST_CHARACTER_NOT_SUSCRIBER"] = 6] = "REQUEST_CHARACTER_NOT_SUSCRIBER";
  ExchangeErrorEnum2[ExchangeErrorEnum2["REQUEST_CHARACTER_RESTRICTED"] = 7] = "REQUEST_CHARACTER_RESTRICTED";
  ExchangeErrorEnum2[ExchangeErrorEnum2["REQUEST_CHARACTER_GUEST"] = 8] = "REQUEST_CHARACTER_GUEST";
  ExchangeErrorEnum2[ExchangeErrorEnum2["MOUNT_PADDOCK_ERROR"] = 10] = "MOUNT_PADDOCK_ERROR";
  ExchangeErrorEnum2[ExchangeErrorEnum2["BID_SEARCH_ERROR"] = 11] = "BID_SEARCH_ERROR";
  ExchangeErrorEnum2[ExchangeErrorEnum2["SELL_ERROR"] = 63] = "SELL_ERROR";
  ExchangeErrorEnum2[ExchangeErrorEnum2["BUY_ERROR"] = 64] = "BUY_ERROR";
  return ExchangeErrorEnum2;
})(ExchangeErrorEnum || {});
var ServerCompletionEnum = /* @__PURE__ */ ((ServerCompletionEnum2) => {
  ServerCompletionEnum2[ServerCompletionEnum2["COMPLETION_RECOMANDATED"] = 0] = "COMPLETION_RECOMANDATED";
  ServerCompletionEnum2[ServerCompletionEnum2["COMPLETION_AVERAGE"] = 1] = "COMPLETION_AVERAGE";
  ServerCompletionEnum2[ServerCompletionEnum2["COMPLETION_HIGH"] = 2] = "COMPLETION_HIGH";
  ServerCompletionEnum2[ServerCompletionEnum2["COMPLETION_COMING_SOON"] = 3] = "COMPLETION_COMING_SOON";
  ServerCompletionEnum2[ServerCompletionEnum2["COMPLETION_FULL"] = 4] = "COMPLETION_FULL";
  return ServerCompletionEnum2;
})(ServerCompletionEnum || {});
var ServerStatusEnum = /* @__PURE__ */ ((ServerStatusEnum2) => {
  ServerStatusEnum2[ServerStatusEnum2["STATUS_UNKNOWN"] = 0] = "STATUS_UNKNOWN";
  ServerStatusEnum2[ServerStatusEnum2["OFFLINE"] = 1] = "OFFLINE";
  ServerStatusEnum2[ServerStatusEnum2["STARTING"] = 2] = "STARTING";
  ServerStatusEnum2[ServerStatusEnum2["ONLINE"] = 3] = "ONLINE";
  ServerStatusEnum2[ServerStatusEnum2["NOJOIN"] = 4] = "NOJOIN";
  ServerStatusEnum2[ServerStatusEnum2["SAVING"] = 5] = "SAVING";
  ServerStatusEnum2[ServerStatusEnum2["STOPING"] = 6] = "STOPING";
  ServerStatusEnum2[ServerStatusEnum2["FULL"] = 7] = "FULL";
  return ServerStatusEnum2;
})(ServerStatusEnum || {});
var BoostableCharacteristicEnum = /* @__PURE__ */ ((BoostableCharacteristicEnum2) => {
  BoostableCharacteristicEnum2[BoostableCharacteristicEnum2["BOOSTABLE_CHARAC_STRENGTH"] = 10] = "BOOSTABLE_CHARAC_STRENGTH";
  BoostableCharacteristicEnum2[BoostableCharacteristicEnum2["BOOSTABLE_CHARAC_VITALITY"] = 11] = "BOOSTABLE_CHARAC_VITALITY";
  BoostableCharacteristicEnum2[BoostableCharacteristicEnum2["BOOSTABLE_CHARAC_WISDOM"] = 12] = "BOOSTABLE_CHARAC_WISDOM";
  BoostableCharacteristicEnum2[BoostableCharacteristicEnum2["BOOSTABLE_CHARAC_CHANCE"] = 13] = "BOOSTABLE_CHARAC_CHANCE";
  BoostableCharacteristicEnum2[BoostableCharacteristicEnum2["BOOSTABLE_CHARAC_AGILITY"] = 14] = "BOOSTABLE_CHARAC_AGILITY";
  BoostableCharacteristicEnum2[BoostableCharacteristicEnum2["BOOSTABLE_CHARAC_INTELLIGENCE"] = 15] = "BOOSTABLE_CHARAC_INTELLIGENCE";
  return BoostableCharacteristicEnum2;
})(BoostableCharacteristicEnum || {});
var CompassTypeEnum = /* @__PURE__ */ ((CompassTypeEnum2) => {
  CompassTypeEnum2[CompassTypeEnum2["COMPASS_TYPE_SIMPLE"] = 0] = "COMPASS_TYPE_SIMPLE";
  CompassTypeEnum2[CompassTypeEnum2["COMPASS_TYPE_SPOUSE"] = 1] = "COMPASS_TYPE_SPOUSE";
  CompassTypeEnum2[CompassTypeEnum2["COMPASS_TYPE_PARTY"] = 2] = "COMPASS_TYPE_PARTY";
  CompassTypeEnum2[CompassTypeEnum2["COMPASS_TYPE_PVP_SEEK"] = 3] = "COMPASS_TYPE_PVP_SEEK";
  CompassTypeEnum2[CompassTypeEnum2["COMPASS_TYPE_QUEST"] = 4] = "COMPASS_TYPE_QUEST";
  return CompassTypeEnum2;
})(CompassTypeEnum || {});
var PlayerStatusEnum = /* @__PURE__ */ ((PlayerStatusEnum2) => {
  PlayerStatusEnum2[PlayerStatusEnum2["PLAYER_STATUS_OFFLINE"] = 0] = "PLAYER_STATUS_OFFLINE";
  PlayerStatusEnum2[PlayerStatusEnum2["PLAYER_STATUS_UNKNOWN"] = 1] = "PLAYER_STATUS_UNKNOWN";
  PlayerStatusEnum2[PlayerStatusEnum2["PLAYER_STATUS_AVAILABLE"] = 10] = "PLAYER_STATUS_AVAILABLE";
  PlayerStatusEnum2[PlayerStatusEnum2["PLAYER_STATUS_IDLE"] = 20] = "PLAYER_STATUS_IDLE";
  PlayerStatusEnum2[PlayerStatusEnum2["PLAYER_STATUS_AFK"] = 21] = "PLAYER_STATUS_AFK";
  PlayerStatusEnum2[PlayerStatusEnum2["PLAYER_STATUS_PRIVATE"] = 30] = "PLAYER_STATUS_PRIVATE";
  PlayerStatusEnum2[PlayerStatusEnum2["PLAYER_STATUS_SOLO"] = 40] = "PLAYER_STATUS_SOLO";
  return PlayerStatusEnum2;
})(PlayerStatusEnum || {});
var AlignmentSideEnum = /* @__PURE__ */ ((AlignmentSideEnum2) => {
  AlignmentSideEnum2[AlignmentSideEnum2["ALIGNMENT_UNKNOWN"] = -2] = "ALIGNMENT_UNKNOWN";
  AlignmentSideEnum2[AlignmentSideEnum2["ALIGNMENT_WITHOUT"] = -1] = "ALIGNMENT_WITHOUT";
  AlignmentSideEnum2[AlignmentSideEnum2["ALIGNMENT_NEUTRAL"] = 0] = "ALIGNMENT_NEUTRAL";
  AlignmentSideEnum2[AlignmentSideEnum2["ALIGNMENT_ANGEL"] = 1] = "ALIGNMENT_ANGEL";
  AlignmentSideEnum2[AlignmentSideEnum2["ALIGNMENT_EVIL"] = 2] = "ALIGNMENT_EVIL";
  return AlignmentSideEnum2;
})(AlignmentSideEnum || {});
var MountCharacteristicEnum = /* @__PURE__ */ ((MountCharacteristicEnum2) => {
  MountCharacteristicEnum2[MountCharacteristicEnum2["ENERGY"] = 1] = "ENERGY";
  MountCharacteristicEnum2[MountCharacteristicEnum2["SERENITY"] = 2] = "SERENITY";
  MountCharacteristicEnum2[MountCharacteristicEnum2["STAMINA"] = 3] = "STAMINA";
  MountCharacteristicEnum2[MountCharacteristicEnum2["LOVE"] = 4] = "LOVE";
  MountCharacteristicEnum2[MountCharacteristicEnum2["MATURITY"] = 5] = "MATURITY";
  MountCharacteristicEnum2[MountCharacteristicEnum2["TIREDNESS"] = 6] = "TIREDNESS";
  MountCharacteristicEnum2[MountCharacteristicEnum2["CARRIER"] = 7] = "CARRIER";
  MountCharacteristicEnum2[MountCharacteristicEnum2["FERTILE"] = 8] = "FERTILE";
  MountCharacteristicEnum2[MountCharacteristicEnum2["PREGNANT"] = 9] = "PREGNANT";
  return MountCharacteristicEnum2;
})(MountCharacteristicEnum || {});
var ExchangeTypeEnum = /* @__PURE__ */ ((ExchangeTypeEnum2) => {
  ExchangeTypeEnum2[ExchangeTypeEnum2["UNKNOWN_TRADE_TYPE"] = -1] = "UNKNOWN_TRADE_TYPE";
  ExchangeTypeEnum2[ExchangeTypeEnum2["NPC_SHOP"] = 0] = "NPC_SHOP";
  ExchangeTypeEnum2[ExchangeTypeEnum2["PLAYER_TRADE"] = 1] = "PLAYER_TRADE";
  ExchangeTypeEnum2[ExchangeTypeEnum2["NPC_TRADE"] = 2] = "NPC_TRADE";
  ExchangeTypeEnum2[ExchangeTypeEnum2["CRAFT"] = 3] = "CRAFT";
  ExchangeTypeEnum2[ExchangeTypeEnum2["DISCONNECTED_VENDOR"] = 4] = "DISCONNECTED_VENDOR";
  ExchangeTypeEnum2[ExchangeTypeEnum2["STORAGE"] = 5] = "STORAGE";
  ExchangeTypeEnum2[ExchangeTypeEnum2["SHOP_STOCK"] = 6] = "SHOP_STOCK";
  ExchangeTypeEnum2[ExchangeTypeEnum2["TAXCOLLECTOR"] = 8] = "TAXCOLLECTOR";
  ExchangeTypeEnum2[ExchangeTypeEnum2["NPC_MODIFY_TRADE"] = 9] = "NPC_MODIFY_TRADE";
  ExchangeTypeEnum2[ExchangeTypeEnum2["BIDHOUSE_SELL"] = 10] = "BIDHOUSE_SELL";
  ExchangeTypeEnum2[ExchangeTypeEnum2["BIDHOUSE_BUY"] = 11] = "BIDHOUSE_BUY";
  ExchangeTypeEnum2[ExchangeTypeEnum2["MULTICRAFT_CRAFTER"] = 12] = "MULTICRAFT_CRAFTER";
  ExchangeTypeEnum2[ExchangeTypeEnum2["MULTICRAFT_CUSTOMER"] = 13] = "MULTICRAFT_CUSTOMER";
  ExchangeTypeEnum2[ExchangeTypeEnum2["JOB_INDEX"] = 14] = "JOB_INDEX";
  ExchangeTypeEnum2[ExchangeTypeEnum2["MOUNT"] = 15] = "MOUNT";
  ExchangeTypeEnum2[ExchangeTypeEnum2["MOUNT_STABLE"] = 16] = "MOUNT_STABLE";
  ExchangeTypeEnum2[ExchangeTypeEnum2["NPC_RESURECT_PET"] = 17] = "NPC_RESURECT_PET";
  ExchangeTypeEnum2[ExchangeTypeEnum2["NPC_TRADE_DRAGOTURKEY"] = 18] = "NPC_TRADE_DRAGOTURKEY";
  ExchangeTypeEnum2[ExchangeTypeEnum2["REALESTATE_HOUSE"] = 19] = "REALESTATE_HOUSE";
  ExchangeTypeEnum2[ExchangeTypeEnum2["REALESTATE_FARM"] = 20] = "REALESTATE_FARM";
  ExchangeTypeEnum2[ExchangeTypeEnum2["RUNES_TRADE"] = 21] = "RUNES_TRADE";
  ExchangeTypeEnum2[ExchangeTypeEnum2["RECYCLE_TRADE"] = 22] = "RECYCLE_TRADE";
  ExchangeTypeEnum2[ExchangeTypeEnum2["BANK"] = 23] = "BANK";
  ExchangeTypeEnum2[ExchangeTypeEnum2["TRASHBIN"] = 24] = "TRASHBIN";
  ExchangeTypeEnum2[ExchangeTypeEnum2["ALLIANCE_PRISM"] = 25] = "ALLIANCE_PRISM";
  ExchangeTypeEnum2[ExchangeTypeEnum2["HAVENBAG"] = 26] = "HAVENBAG";
  ExchangeTypeEnum2[ExchangeTypeEnum2["NPC_TRADE_SEEMYOOL"] = 27] = "NPC_TRADE_SEEMYOOL";
  ExchangeTypeEnum2[ExchangeTypeEnum2["NPC_TRADE_RHINEETLE"] = 28] = "NPC_TRADE_RHINEETLE";
  ExchangeTypeEnum2[ExchangeTypeEnum2["EVOLUTIVE_OBJECT_ELEMENTARY_RECYCLE"] = 29] = "EVOLUTIVE_OBJECT_ELEMENTARY_RECYCLE";
  ExchangeTypeEnum2[ExchangeTypeEnum2["NPC_RIDE_CAPABILITY_TRADE"] = 30] = "NPC_RIDE_CAPABILITY_TRADE";
  return ExchangeTypeEnum2;
})(ExchangeTypeEnum || {});
var GameContextEnum = /* @__PURE__ */ ((GameContextEnum2) => {
  GameContextEnum2[GameContextEnum2["ROLE_PLAY"] = 1] = "ROLE_PLAY";
  GameContextEnum2[GameContextEnum2["FIGHT"] = 2] = "FIGHT";
  return GameContextEnum2;
})(GameContextEnum || {});
var FighterRefusedReasonEnum = /* @__PURE__ */ ((FighterRefusedReasonEnum2) => {
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["FIGHTER_REFUSED"] = -1] = "FIGHTER_REFUSED";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["FIGHTER_ACCEPTED"] = 0] = "FIGHTER_ACCEPTED";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["CHALLENGE_FULL"] = 1] = "CHALLENGE_FULL";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["TEAM_FULL"] = 2] = "TEAM_FULL";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["WRONG_ALIGNMENT"] = 3] = "WRONG_ALIGNMENT";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["WRONG_GUILD"] = 4] = "WRONG_GUILD";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["TOO_LATE"] = 5] = "TOO_LATE";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["MUTANT_REFUSED"] = 6] = "MUTANT_REFUSED";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["WRONG_MAP"] = 7] = "WRONG_MAP";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["JUST_RESPAWNED"] = 8] = "JUST_RESPAWNED";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["IM_OCCUPIED"] = 9] = "IM_OCCUPIED";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["OPPONENT_OCCUPIED"] = 10] = "OPPONENT_OCCUPIED";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["FIGHT_MYSELF"] = 11] = "FIGHT_MYSELF";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["INSUFFICIENT_RIGHTS"] = 12] = "INSUFFICIENT_RIGHTS";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["MEMBER_ACCOUNT_NEEDED"] = 13] = "MEMBER_ACCOUNT_NEEDED";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["OPPONENT_NOT_MEMBER"] = 14] = "OPPONENT_NOT_MEMBER";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["TEAM_LIMITED_BY_MAINCHARACTER"] = 15] = "TEAM_LIMITED_BY_MAINCHARACTER";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["MULTIACCOUNT_NOT_ALLOWED"] = 16] = "MULTIACCOUNT_NOT_ALLOWED";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["GHOST_REFUSED"] = 17] = "GHOST_REFUSED";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["RESTRICTED_ACCOUNT"] = 19] = "RESTRICTED_ACCOUNT";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["WRONG_ALLIANCE"] = 20] = "WRONG_ALLIANCE";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["AVA_ZONE"] = 21] = "AVA_ZONE";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["ENTITY_REFUSED"] = 22] = "ENTITY_REFUSED";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["NOT_ENOUGH_ROOM"] = 23] = "NOT_ENOUGH_ROOM";
  FighterRefusedReasonEnum2[FighterRefusedReasonEnum2["GUEST_ACCOUNT"] = 24] = "GUEST_ACCOUNT";
  return FighterRefusedReasonEnum2;
})(FighterRefusedReasonEnum || {});
var LockableResultEnum = /* @__PURE__ */ ((LockableResultEnum2) => {
  LockableResultEnum2[LockableResultEnum2["LOCKABLE_UNLOCKED"] = 0] = "LOCKABLE_UNLOCKED";
  LockableResultEnum2[LockableResultEnum2["LOCKABLE_CODE_ERROR"] = 1] = "LOCKABLE_CODE_ERROR";
  LockableResultEnum2[LockableResultEnum2["LOCKABLE_UNLOCK_FORBIDDEN"] = 2] = "LOCKABLE_UNLOCK_FORBIDDEN";
  return LockableResultEnum2;
})(LockableResultEnum || {});
var ClientUITypeEnum = /* @__PURE__ */ ((ClientUITypeEnum2) => {
  ClientUITypeEnum2[ClientUITypeEnum2["CLIENT_UI_UNDEFINED"] = 0] = "CLIENT_UI_UNDEFINED";
  ClientUITypeEnum2[ClientUITypeEnum2["CLIENT_UI_TELEPORT_GUILD_HOUSE"] = 1] = "CLIENT_UI_TELEPORT_GUILD_HOUSE";
  ClientUITypeEnum2[ClientUITypeEnum2["CLIENT_UI_TELEPORT_GUILD_PADDOCK"] = 2] = "CLIENT_UI_TELEPORT_GUILD_PADDOCK";
  ClientUITypeEnum2[ClientUITypeEnum2["CLIENT_UI_OBJECT_MIMICRY"] = 3] = "CLIENT_UI_OBJECT_MIMICRY";
  ClientUITypeEnum2[ClientUITypeEnum2["CLIENT_UI_LEGENDARY_TREASURE_QUEST"] = 4] = "CLIENT_UI_LEGENDARY_TREASURE_QUEST";
  ClientUITypeEnum2[ClientUITypeEnum2["CLIENT_UI_TELEPORT_HOUSE"] = 5] = "CLIENT_UI_TELEPORT_HOUSE";
  return ClientUITypeEnum2;
})(ClientUITypeEnum || {});
var TeleporterTypeEnum = /* @__PURE__ */ ((TeleporterTypeEnum2) => {
  TeleporterTypeEnum2[TeleporterTypeEnum2["TELEPORTER_ZAAP"] = 0] = "TELEPORTER_ZAAP";
  TeleporterTypeEnum2[TeleporterTypeEnum2["TELEPORTER_SUBWAY"] = 1] = "TELEPORTER_SUBWAY";
  TeleporterTypeEnum2[TeleporterTypeEnum2["TELEPORTER_PRISM"] = 2] = "TELEPORTER_PRISM";
  TeleporterTypeEnum2[TeleporterTypeEnum2["TELEPORTER_HAVENBAG"] = 3] = "TELEPORTER_HAVENBAG";
  TeleporterTypeEnum2[TeleporterTypeEnum2["TELEPORTER_ANOMALY"] = 4] = "TELEPORTER_ANOMALY";
  return TeleporterTypeEnum2;
})(TeleporterTypeEnum || {});
var IdentificationFailureReasonEnum = /* @__PURE__ */ ((IdentificationFailureReasonEnum2) => {
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["BAD_VERSION"] = 1] = "BAD_VERSION";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["WRONG_CREDENTIALS"] = 2] = "WRONG_CREDENTIALS";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["BANNED"] = 3] = "BANNED";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["KICKED"] = 4] = "KICKED";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["IN_MAINTENANCE"] = 5] = "IN_MAINTENANCE";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["TOO_MANY_ON_IP"] = 6] = "TOO_MANY_ON_IP";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["TIME_OUT"] = 7] = "TIME_OUT";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["BAD_IPRANGE"] = 8] = "BAD_IPRANGE";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["CREDENTIALS_RESET"] = 9] = "CREDENTIALS_RESET";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["EMAIL_UNVALIDATED"] = 10] = "EMAIL_UNVALIDATED";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["OTP_TIMEOUT"] = 11] = "OTP_TIMEOUT";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["LOCKED"] = 12] = "LOCKED";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["ANONYMOUS_IP_FORBIDDEN"] = 13] = "ANONYMOUS_IP_FORBIDDEN";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["SERVICE_UNAVAILABLE"] = 53] = "SERVICE_UNAVAILABLE";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["EXTERNAL_ACCOUNT_LINK_REFUSED"] = 61] = "EXTERNAL_ACCOUNT_LINK_REFUSED";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["EXTERNAL_ACCOUNT_ALREADY_LINKED"] = 62] = "EXTERNAL_ACCOUNT_ALREADY_LINKED";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["UNKNOWN_AUTH_ERROR"] = 99] = "UNKNOWN_AUTH_ERROR";
  IdentificationFailureReasonEnum2[IdentificationFailureReasonEnum2["SPARE"] = 100] = "SPARE";
  return IdentificationFailureReasonEnum2;
})(IdentificationFailureReasonEnum || {});
var SocialNoticeErrorEnum = /* @__PURE__ */ ((SocialNoticeErrorEnum2) => {
  SocialNoticeErrorEnum2[SocialNoticeErrorEnum2["SOCIAL_NOTICE_UNKNOWN_ERROR"] = 0] = "SOCIAL_NOTICE_UNKNOWN_ERROR";
  SocialNoticeErrorEnum2[SocialNoticeErrorEnum2["SOCIAL_NOTICE_INVALID_RIGHTS"] = 1] = "SOCIAL_NOTICE_INVALID_RIGHTS";
  SocialNoticeErrorEnum2[SocialNoticeErrorEnum2["SOCIAL_NOTICE_COOLDOWN"] = 2] = "SOCIAL_NOTICE_COOLDOWN";
  return SocialNoticeErrorEnum2;
})(SocialNoticeErrorEnum || {});
var TaxCollectorErrorReasonEnum = /* @__PURE__ */ ((TaxCollectorErrorReasonEnum2) => {
  TaxCollectorErrorReasonEnum2[TaxCollectorErrorReasonEnum2["TAX_COLLECTOR_ERROR_UNKNOWN"] = 0] = "TAX_COLLECTOR_ERROR_UNKNOWN";
  TaxCollectorErrorReasonEnum2[TaxCollectorErrorReasonEnum2["TAX_COLLECTOR_NOT_FOUND"] = 1] = "TAX_COLLECTOR_NOT_FOUND";
  TaxCollectorErrorReasonEnum2[TaxCollectorErrorReasonEnum2["TAX_COLLECTOR_NOT_OWNED"] = 2] = "TAX_COLLECTOR_NOT_OWNED";
  TaxCollectorErrorReasonEnum2[TaxCollectorErrorReasonEnum2["TAX_COLLECTOR_NO_RIGHTS"] = 3] = "TAX_COLLECTOR_NO_RIGHTS";
  TaxCollectorErrorReasonEnum2[TaxCollectorErrorReasonEnum2["TAX_COLLECTOR_MAX_REACHED"] = 4] = "TAX_COLLECTOR_MAX_REACHED";
  TaxCollectorErrorReasonEnum2[TaxCollectorErrorReasonEnum2["TAX_COLLECTOR_ALREADY_ONE"] = 5] = "TAX_COLLECTOR_ALREADY_ONE";
  TaxCollectorErrorReasonEnum2[TaxCollectorErrorReasonEnum2["TAX_COLLECTOR_CANT_HIRE_YET"] = 6] = "TAX_COLLECTOR_CANT_HIRE_YET";
  TaxCollectorErrorReasonEnum2[TaxCollectorErrorReasonEnum2["TAX_COLLECTOR_CANT_HIRE_HERE"] = 7] = "TAX_COLLECTOR_CANT_HIRE_HERE";
  TaxCollectorErrorReasonEnum2[TaxCollectorErrorReasonEnum2["TAX_COLLECTOR_NOT_ENOUGH_KAMAS"] = 8] = "TAX_COLLECTOR_NOT_ENOUGH_KAMAS";
  return TaxCollectorErrorReasonEnum2;
})(TaxCollectorErrorReasonEnum || {});
var GuildInformationsTypeEnum = /* @__PURE__ */ ((GuildInformationsTypeEnum2) => {
  GuildInformationsTypeEnum2[GuildInformationsTypeEnum2["INFO_GENERAL"] = 1] = "INFO_GENERAL";
  GuildInformationsTypeEnum2[GuildInformationsTypeEnum2["INFO_MEMBERS"] = 2] = "INFO_MEMBERS";
  GuildInformationsTypeEnum2[GuildInformationsTypeEnum2["INFO_BOOSTS"] = 3] = "INFO_BOOSTS";
  GuildInformationsTypeEnum2[GuildInformationsTypeEnum2["INFO_PADDOCKS"] = 4] = "INFO_PADDOCKS";
  GuildInformationsTypeEnum2[GuildInformationsTypeEnum2["INFO_HOUSES"] = 5] = "INFO_HOUSES";
  GuildInformationsTypeEnum2[GuildInformationsTypeEnum2["INFO_TAX_COLLECTOR_GUILD_ONLY"] = 6] = "INFO_TAX_COLLECTOR_GUILD_ONLY";
  GuildInformationsTypeEnum2[GuildInformationsTypeEnum2["INFO_TAX_COLLECTOR_ALLIANCE"] = 7] = "INFO_TAX_COLLECTOR_ALLIANCE";
  GuildInformationsTypeEnum2[GuildInformationsTypeEnum2["INFO_TAX_COLLECTOR_LEAVE"] = 8] = "INFO_TAX_COLLECTOR_LEAVE";
  GuildInformationsTypeEnum2[GuildInformationsTypeEnum2["INFO_RECRUITMENT"] = 9] = "INFO_RECRUITMENT";
  return GuildInformationsTypeEnum2;
})(GuildInformationsTypeEnum || {});
var SocialGroupInvitationStateEnum = /* @__PURE__ */ ((SocialGroupInvitationStateEnum2) => {
  SocialGroupInvitationStateEnum2[SocialGroupInvitationStateEnum2["SOCIAL_GROUP_INVITATION_FAILED"] = 0] = "SOCIAL_GROUP_INVITATION_FAILED";
  SocialGroupInvitationStateEnum2[SocialGroupInvitationStateEnum2["SOCIAL_GROUP_INVITATION_SENT"] = 1] = "SOCIAL_GROUP_INVITATION_SENT";
  SocialGroupInvitationStateEnum2[SocialGroupInvitationStateEnum2["SOCIAL_GROUP_INVITATION_CANCELED"] = 2] = "SOCIAL_GROUP_INVITATION_CANCELED";
  SocialGroupInvitationStateEnum2[SocialGroupInvitationStateEnum2["SOCIAL_GROUP_INVITATION_OK"] = 3] = "SOCIAL_GROUP_INVITATION_OK";
  return SocialGroupInvitationStateEnum2;
})(SocialGroupInvitationStateEnum || {});
var ListAddFailureEnum = /* @__PURE__ */ ((ListAddFailureEnum2) => {
  ListAddFailureEnum2[ListAddFailureEnum2["LIST_ADD_FAILURE_UNKNOWN"] = 0] = "LIST_ADD_FAILURE_UNKNOWN";
  ListAddFailureEnum2[ListAddFailureEnum2["LIST_ADD_FAILURE_OVER_QUOTA"] = 1] = "LIST_ADD_FAILURE_OVER_QUOTA";
  ListAddFailureEnum2[ListAddFailureEnum2["LIST_ADD_FAILURE_NOT_FOUND"] = 2] = "LIST_ADD_FAILURE_NOT_FOUND";
  ListAddFailureEnum2[ListAddFailureEnum2["LIST_ADD_FAILURE_EGOCENTRIC"] = 3] = "LIST_ADD_FAILURE_EGOCENTRIC";
  ListAddFailureEnum2[ListAddFailureEnum2["LIST_ADD_FAILURE_IS_DOUBLE"] = 4] = "LIST_ADD_FAILURE_IS_DOUBLE";
  ListAddFailureEnum2[ListAddFailureEnum2["LIST_ADD_FAILURE_IS_CONFLICTING_DOUBLE"] = 5] = "LIST_ADD_FAILURE_IS_CONFLICTING_DOUBLE";
  return ListAddFailureEnum2;
})(ListAddFailureEnum || {});
var TaxCollectorMovementTypeEnum = /* @__PURE__ */ ((TaxCollectorMovementTypeEnum2) => {
  TaxCollectorMovementTypeEnum2[TaxCollectorMovementTypeEnum2["TAX_COLLECTOR_UNKNOWN_ACTION"] = 0] = "TAX_COLLECTOR_UNKNOWN_ACTION";
  TaxCollectorMovementTypeEnum2[TaxCollectorMovementTypeEnum2["TAX_COLLECTOR_HIRED"] = 1] = "TAX_COLLECTOR_HIRED";
  TaxCollectorMovementTypeEnum2[TaxCollectorMovementTypeEnum2["TAX_COLLECTOR_HARVESTED"] = 2] = "TAX_COLLECTOR_HARVESTED";
  TaxCollectorMovementTypeEnum2[TaxCollectorMovementTypeEnum2["TAX_COLLECTOR_DEFEATED"] = 3] = "TAX_COLLECTOR_DEFEATED";
  TaxCollectorMovementTypeEnum2[TaxCollectorMovementTypeEnum2["TAX_COLLECTOR_DESTROYED"] = 4] = "TAX_COLLECTOR_DESTROYED";
  return TaxCollectorMovementTypeEnum2;
})(TaxCollectorMovementTypeEnum || {});
var TaxCollectorStateEnum = /* @__PURE__ */ ((TaxCollectorStateEnum2) => {
  TaxCollectorStateEnum2[TaxCollectorStateEnum2["STATE_COLLECTING"] = 0] = "STATE_COLLECTING";
  TaxCollectorStateEnum2[TaxCollectorStateEnum2["STATE_WAITING_FOR_HELP"] = 1] = "STATE_WAITING_FOR_HELP";
  TaxCollectorStateEnum2[TaxCollectorStateEnum2["STATE_FIGHTING"] = 2] = "STATE_FIGHTING";
  return TaxCollectorStateEnum2;
})(TaxCollectorStateEnum || {});
var SocialGroupCreationResultEnum = /* @__PURE__ */ ((SocialGroupCreationResultEnum2) => {
  SocialGroupCreationResultEnum2[SocialGroupCreationResultEnum2["SOCIAL_GROUP_CREATE_OK"] = 1] = "SOCIAL_GROUP_CREATE_OK";
  SocialGroupCreationResultEnum2[SocialGroupCreationResultEnum2["SOCIAL_GROUP_CREATE_ERROR_NAME_INVALID"] = 2] = "SOCIAL_GROUP_CREATE_ERROR_NAME_INVALID";
  SocialGroupCreationResultEnum2[SocialGroupCreationResultEnum2["SOCIAL_GROUP_CREATE_ERROR_ALREADY_IN_GROUP"] = 3] = "SOCIAL_GROUP_CREATE_ERROR_ALREADY_IN_GROUP";
  SocialGroupCreationResultEnum2[SocialGroupCreationResultEnum2["SOCIAL_GROUP_CREATE_ERROR_NAME_ALREADY_EXISTS"] = 4] = "SOCIAL_GROUP_CREATE_ERROR_NAME_ALREADY_EXISTS";
  SocialGroupCreationResultEnum2[SocialGroupCreationResultEnum2["SOCIAL_GROUP_CREATE_ERROR_EMBLEM_ALREADY_EXISTS"] = 5] = "SOCIAL_GROUP_CREATE_ERROR_EMBLEM_ALREADY_EXISTS";
  SocialGroupCreationResultEnum2[SocialGroupCreationResultEnum2["SOCIAL_GROUP_CREATE_ERROR_LEAVE"] = 6] = "SOCIAL_GROUP_CREATE_ERROR_LEAVE";
  SocialGroupCreationResultEnum2[SocialGroupCreationResultEnum2["SOCIAL_GROUP_CREATE_ERROR_CANCEL"] = 7] = "SOCIAL_GROUP_CREATE_ERROR_CANCEL";
  SocialGroupCreationResultEnum2[SocialGroupCreationResultEnum2["SOCIAL_GROUP_CREATE_ERROR_REQUIREMENT_UNMET"] = 8] = "SOCIAL_GROUP_CREATE_ERROR_REQUIREMENT_UNMET";
  SocialGroupCreationResultEnum2[SocialGroupCreationResultEnum2["SOCIAL_GROUP_CREATE_ERROR_EMBLEM_INVALID"] = 9] = "SOCIAL_GROUP_CREATE_ERROR_EMBLEM_INVALID";
  SocialGroupCreationResultEnum2[SocialGroupCreationResultEnum2["SOCIAL_GROUP_CREATE_ERROR_TAG_INVALID"] = 10] = "SOCIAL_GROUP_CREATE_ERROR_TAG_INVALID";
  SocialGroupCreationResultEnum2[SocialGroupCreationResultEnum2["SOCIAL_GROUP_CREATE_ERROR_TAG_ALREADY_EXISTS"] = 11] = "SOCIAL_GROUP_CREATE_ERROR_TAG_ALREADY_EXISTS";
  SocialGroupCreationResultEnum2[SocialGroupCreationResultEnum2["SOCIAL_GROUP_CREATE_ERROR_NEEDS_SUBGROUP"] = 12] = "SOCIAL_GROUP_CREATE_ERROR_NEEDS_SUBGROUP";
  SocialGroupCreationResultEnum2[SocialGroupCreationResultEnum2["SOCIAL_GROUP_CREATE_ERROR_UNKNOWN"] = 99] = "SOCIAL_GROUP_CREATE_ERROR_UNKNOWN";
  return SocialGroupCreationResultEnum2;
})(SocialGroupCreationResultEnum || {});
var PlayerStateEnum = /* @__PURE__ */ ((PlayerStateEnum2) => {
  PlayerStateEnum2[PlayerStateEnum2["NOT_CONNECTED"] = 0] = "NOT_CONNECTED";
  PlayerStateEnum2[PlayerStateEnum2["GAME_TYPE_ROLEPLAY"] = 1] = "GAME_TYPE_ROLEPLAY";
  PlayerStateEnum2[PlayerStateEnum2["GAME_TYPE_FIGHT"] = 2] = "GAME_TYPE_FIGHT";
  PlayerStateEnum2[PlayerStateEnum2["UNKNOWN_STATE"] = 99] = "UNKNOWN_STATE";
  return PlayerStateEnum2;
})(PlayerStateEnum || {});
var ObjectErrorEnum = /* @__PURE__ */ ((ObjectErrorEnum2) => {
  ObjectErrorEnum2[ObjectErrorEnum2["INVENTORY_FULL"] = 1] = "INVENTORY_FULL";
  ObjectErrorEnum2[ObjectErrorEnum2["CANNOT_EQUIP_TWICE"] = 2] = "CANNOT_EQUIP_TWICE";
  ObjectErrorEnum2[ObjectErrorEnum2["NOT_TRADABLE"] = 3] = "NOT_TRADABLE";
  ObjectErrorEnum2[ObjectErrorEnum2["CANNOT_DROP"] = 4] = "CANNOT_DROP";
  ObjectErrorEnum2[ObjectErrorEnum2["CANNOT_DROP_NO_PLACE"] = 5] = "CANNOT_DROP_NO_PLACE";
  ObjectErrorEnum2[ObjectErrorEnum2["CANNOT_DESTROY"] = 6] = "CANNOT_DESTROY";
  ObjectErrorEnum2[ObjectErrorEnum2["LEVEL_TOO_LOW"] = 7] = "LEVEL_TOO_LOW";
  ObjectErrorEnum2[ObjectErrorEnum2["LIVING_OBJECT_REFUSED_FOOD"] = 8] = "LIVING_OBJECT_REFUSED_FOOD";
  ObjectErrorEnum2[ObjectErrorEnum2["CANNOT_UNEQUIP"] = 9] = "CANNOT_UNEQUIP";
  ObjectErrorEnum2[ObjectErrorEnum2["CANNOT_EQUIP_HERE"] = 10] = "CANNOT_EQUIP_HERE";
  ObjectErrorEnum2[ObjectErrorEnum2["CRITERIONS"] = 11] = "CRITERIONS";
  ObjectErrorEnum2[ObjectErrorEnum2["SYMBIOTIC_OBJECT_ERROR"] = 12] = "SYMBIOTIC_OBJECT_ERROR";
  ObjectErrorEnum2[ObjectErrorEnum2["EVOLUTIVE_OBJECT_REFUSED_FOOD"] = 13] = "EVOLUTIVE_OBJECT_REFUSED_FOOD";
  return ObjectErrorEnum2;
})(ObjectErrorEnum || {});
var GameHierarchyEnum = /* @__PURE__ */ ((GameHierarchyEnum2) => {
  GameHierarchyEnum2[GameHierarchyEnum2["UNAVAILABLE"] = -1] = "UNAVAILABLE";
  GameHierarchyEnum2[GameHierarchyEnum2["PLAYER"] = 0] = "PLAYER";
  GameHierarchyEnum2[GameHierarchyEnum2["MODERATOR"] = 10] = "MODERATOR";
  GameHierarchyEnum2[GameHierarchyEnum2["GAMEMASTER_PADAWAN"] = 20] = "GAMEMASTER_PADAWAN";
  GameHierarchyEnum2[GameHierarchyEnum2["GAMEMASTER"] = 30] = "GAMEMASTER";
  GameHierarchyEnum2[GameHierarchyEnum2["ADMIN"] = 40] = "ADMIN";
  GameHierarchyEnum2[GameHierarchyEnum2["UNKNOWN_SPECIAL_USER"] = 50] = "UNKNOWN_SPECIAL_USER";
  return GameHierarchyEnum2;
})(GameHierarchyEnum || {});
var TextInformationTypeEnum = /* @__PURE__ */ ((TextInformationTypeEnum2) => {
  TextInformationTypeEnum2[TextInformationTypeEnum2["TEXT_INFORMATION_MESSAGE"] = 0] = "TEXT_INFORMATION_MESSAGE";
  TextInformationTypeEnum2[TextInformationTypeEnum2["TEXT_INFORMATION_ERROR"] = 1] = "TEXT_INFORMATION_ERROR";
  TextInformationTypeEnum2[TextInformationTypeEnum2["TEXT_INFORMATION_PVP"] = 2] = "TEXT_INFORMATION_PVP";
  TextInformationTypeEnum2[TextInformationTypeEnum2["TEXT_INFORMATION_FIGHT_LOG"] = 3] = "TEXT_INFORMATION_FIGHT_LOG";
  TextInformationTypeEnum2[TextInformationTypeEnum2["TEXT_INFORMATION_POPUP"] = 4] = "TEXT_INFORMATION_POPUP";
  TextInformationTypeEnum2[TextInformationTypeEnum2["TEXT_LIVING_OBJECT"] = 5] = "TEXT_LIVING_OBJECT";
  TextInformationTypeEnum2[TextInformationTypeEnum2["TEXT_ENTITY_TALK"] = 6] = "TEXT_ENTITY_TALK";
  TextInformationTypeEnum2[TextInformationTypeEnum2["TEXT_INFORMATION_FIGHT"] = 7] = "TEXT_INFORMATION_FIGHT";
  return TextInformationTypeEnum2;
})(TextInformationTypeEnum || {});
var ChatChannelsMultiEnum = /* @__PURE__ */ ((ChatChannelsMultiEnum2) => {
  ChatChannelsMultiEnum2[ChatChannelsMultiEnum2["CHANNEL_GLOBAL"] = 0] = "CHANNEL_GLOBAL";
  ChatChannelsMultiEnum2[ChatChannelsMultiEnum2["CHANNEL_TEAM"] = 1] = "CHANNEL_TEAM";
  ChatChannelsMultiEnum2[ChatChannelsMultiEnum2["CHANNEL_GUILD"] = 2] = "CHANNEL_GUILD";
  ChatChannelsMultiEnum2[ChatChannelsMultiEnum2["CHANNEL_ALLIANCE"] = 3] = "CHANNEL_ALLIANCE";
  ChatChannelsMultiEnum2[ChatChannelsMultiEnum2["CHANNEL_PARTY"] = 4] = "CHANNEL_PARTY";
  ChatChannelsMultiEnum2[ChatChannelsMultiEnum2["CHANNEL_SALES"] = 5] = "CHANNEL_SALES";
  ChatChannelsMultiEnum2[ChatChannelsMultiEnum2["CHANNEL_SEEK"] = 6] = "CHANNEL_SEEK";
  ChatChannelsMultiEnum2[ChatChannelsMultiEnum2["CHANNEL_NOOB"] = 7] = "CHANNEL_NOOB";
  ChatChannelsMultiEnum2[ChatChannelsMultiEnum2["CHANNEL_ADMIN"] = 8] = "CHANNEL_ADMIN";
  ChatChannelsMultiEnum2[ChatChannelsMultiEnum2["CHANNEL_ADS"] = 12] = "CHANNEL_ADS";
  ChatChannelsMultiEnum2[ChatChannelsMultiEnum2["CHANNEL_ARENA"] = 13] = "CHANNEL_ARENA";
  ChatChannelsMultiEnum2[ChatChannelsMultiEnum2["CHANNEL_COMMUNITY"] = 14] = "CHANNEL_COMMUNITY";
  return ChatChannelsMultiEnum2;
})(ChatChannelsMultiEnum || {});
var ChatErrorEnum = /* @__PURE__ */ ((ChatErrorEnum2) => {
  ChatErrorEnum2[ChatErrorEnum2["CHAT_ERROR_UNKNOWN"] = 0] = "CHAT_ERROR_UNKNOWN";
  ChatErrorEnum2[ChatErrorEnum2["CHAT_ERROR_RECEIVER_NOT_FOUND"] = 1] = "CHAT_ERROR_RECEIVER_NOT_FOUND";
  ChatErrorEnum2[ChatErrorEnum2["CHAT_ERROR_INTERIOR_MONOLOGUE"] = 2] = "CHAT_ERROR_INTERIOR_MONOLOGUE";
  ChatErrorEnum2[ChatErrorEnum2["CHAT_ERROR_NO_GUILD"] = 3] = "CHAT_ERROR_NO_GUILD";
  ChatErrorEnum2[ChatErrorEnum2["CHAT_ERROR_NO_PARTY"] = 4] = "CHAT_ERROR_NO_PARTY";
  ChatErrorEnum2[ChatErrorEnum2["CHAT_ERROR_ALLIANCE"] = 5] = "CHAT_ERROR_ALLIANCE";
  ChatErrorEnum2[ChatErrorEnum2["CHAT_ERROR_INVALID_MAP"] = 6] = "CHAT_ERROR_INVALID_MAP";
  ChatErrorEnum2[ChatErrorEnum2["CHAT_ERROR_NO_PARTY_ARENA"] = 7] = "CHAT_ERROR_NO_PARTY_ARENA";
  ChatErrorEnum2[ChatErrorEnum2["CHAT_ERROR_NO_TEAM"] = 8] = "CHAT_ERROR_NO_TEAM";
  ChatErrorEnum2[ChatErrorEnum2["CHAT_ERROR_MALFORMED_CONTENT"] = 9] = "CHAT_ERROR_MALFORMED_CONTENT";
  ChatErrorEnum2[ChatErrorEnum2["CHAT_ERROR_NO_CHANNEL_COMMUNITY"] = 10] = "CHAT_ERROR_NO_CHANNEL_COMMUNITY";
  return ChatErrorEnum2;
})(ChatErrorEnum || {});
var PartyJoinErrorEnum = /* @__PURE__ */ ((PartyJoinErrorEnum2) => {
  PartyJoinErrorEnum2[PartyJoinErrorEnum2["PARTY_JOIN_ERROR_UNKNOWN"] = 0] = "PARTY_JOIN_ERROR_UNKNOWN";
  PartyJoinErrorEnum2[PartyJoinErrorEnum2["PARTY_JOIN_ERROR_PLAYER_NOT_FOUND"] = 1] = "PARTY_JOIN_ERROR_PLAYER_NOT_FOUND";
  PartyJoinErrorEnum2[PartyJoinErrorEnum2["PARTY_JOIN_ERROR_PARTY_NOT_FOUND"] = 2] = "PARTY_JOIN_ERROR_PARTY_NOT_FOUND";
  PartyJoinErrorEnum2[PartyJoinErrorEnum2["PARTY_JOIN_ERROR_PARTY_FULL"] = 3] = "PARTY_JOIN_ERROR_PARTY_FULL";
  PartyJoinErrorEnum2[PartyJoinErrorEnum2["PARTY_JOIN_ERROR_PLAYER_BUSY"] = 4] = "PARTY_JOIN_ERROR_PLAYER_BUSY";
  PartyJoinErrorEnum2[PartyJoinErrorEnum2["PARTY_JOIN_ERROR_PLAYER_ALREADY_INVITED"] = 6] = "PARTY_JOIN_ERROR_PLAYER_ALREADY_INVITED";
  PartyJoinErrorEnum2[PartyJoinErrorEnum2["PARTY_JOIN_ERROR_PLAYER_TOO_SOLLICITED"] = 7] = "PARTY_JOIN_ERROR_PLAYER_TOO_SOLLICITED";
  PartyJoinErrorEnum2[PartyJoinErrorEnum2["PARTY_JOIN_ERROR_PLAYER_LOYAL"] = 8] = "PARTY_JOIN_ERROR_PLAYER_LOYAL";
  PartyJoinErrorEnum2[PartyJoinErrorEnum2["PARTY_JOIN_ERROR_UNMODIFIABLE"] = 9] = "PARTY_JOIN_ERROR_UNMODIFIABLE";
  PartyJoinErrorEnum2[PartyJoinErrorEnum2["PARTY_JOIN_ERROR_UNMET_CRITERION"] = 10] = "PARTY_JOIN_ERROR_UNMET_CRITERION";
  PartyJoinErrorEnum2[PartyJoinErrorEnum2["PARTY_JOIN_ERROR_NOT_ENOUGH_ROOM"] = 11] = "PARTY_JOIN_ERROR_NOT_ENOUGH_ROOM";
  PartyJoinErrorEnum2[PartyJoinErrorEnum2["PARTY_JOIN_ERROR_COMPOSITION_CHANGED"] = 12] = "PARTY_JOIN_ERROR_COMPOSITION_CHANGED";
  PartyJoinErrorEnum2[PartyJoinErrorEnum2["PARTY_JOIN_ERROR_PLAYER_IN_TUTORIAL"] = 13] = "PARTY_JOIN_ERROR_PLAYER_IN_TUTORIAL";
  return PartyJoinErrorEnum2;
})(PartyJoinErrorEnum || {});
var PartyTypeEnum = /* @__PURE__ */ ((PartyTypeEnum2) => {
  PartyTypeEnum2[PartyTypeEnum2["PARTY_TYPE_UNDEFINED"] = 0] = "PARTY_TYPE_UNDEFINED";
  PartyTypeEnum2[PartyTypeEnum2["PARTY_TYPE_CLASSICAL"] = 1] = "PARTY_TYPE_CLASSICAL";
  PartyTypeEnum2[PartyTypeEnum2["PARTY_TYPE_DUNGEON"] = 2] = "PARTY_TYPE_DUNGEON";
  PartyTypeEnum2[PartyTypeEnum2["PARTY_TYPE_ARENA"] = 3] = "PARTY_TYPE_ARENA";
  return PartyTypeEnum2;
})(PartyTypeEnum || {});
var PvpArenaTypeEnum = /* @__PURE__ */ ((PvpArenaTypeEnum2) => {
  PvpArenaTypeEnum2[PvpArenaTypeEnum2["ARENA_TYPE_1VS1"] = 1] = "ARENA_TYPE_1VS1";
  PvpArenaTypeEnum2[PvpArenaTypeEnum2["ARENA_TYPE_3VS3_SOLO"] = 2] = "ARENA_TYPE_3VS3_SOLO";
  PvpArenaTypeEnum2[PvpArenaTypeEnum2["ARENA_TYPE_3VS3_TEAM"] = 3] = "ARENA_TYPE_3VS3_TEAM";
  return PvpArenaTypeEnum2;
})(PvpArenaTypeEnum || {});
var PvpArenaStepEnum = /* @__PURE__ */ ((PvpArenaStepEnum2) => {
  PvpArenaStepEnum2[PvpArenaStepEnum2["ARENA_STEP_REGISTRED"] = 0] = "ARENA_STEP_REGISTRED";
  PvpArenaStepEnum2[PvpArenaStepEnum2["ARENA_STEP_WAITING_FIGHT"] = 1] = "ARENA_STEP_WAITING_FIGHT";
  PvpArenaStepEnum2[PvpArenaStepEnum2["ARENA_STEP_STARTING_FIGHT"] = 2] = "ARENA_STEP_STARTING_FIGHT";
  PvpArenaStepEnum2[PvpArenaStepEnum2["ARENA_STEP_UNREGISTER"] = 3] = "ARENA_STEP_UNREGISTER";
  return PvpArenaStepEnum2;
})(PvpArenaStepEnum || {});
var PartyNameErrorEnum = /* @__PURE__ */ ((PartyNameErrorEnum2) => {
  PartyNameErrorEnum2[PartyNameErrorEnum2["PARTY_NAME_UNDEFINED_ERROR"] = 0] = "PARTY_NAME_UNDEFINED_ERROR";
  PartyNameErrorEnum2[PartyNameErrorEnum2["PARTY_NAME_INVALID"] = 1] = "PARTY_NAME_INVALID";
  PartyNameErrorEnum2[PartyNameErrorEnum2["PARTY_NAME_ALREADY_USED"] = 2] = "PARTY_NAME_ALREADY_USED";
  PartyNameErrorEnum2[PartyNameErrorEnum2["PARTY_NAME_UNALLOWED_RIGHTS"] = 3] = "PARTY_NAME_UNALLOWED_RIGHTS";
  PartyNameErrorEnum2[PartyNameErrorEnum2["PARTY_NAME_UNALLOWED_NOW"] = 4] = "PARTY_NAME_UNALLOWED_NOW";
  return PartyNameErrorEnum2;
})(PartyNameErrorEnum || {});
var PrismSetSabotagedRefusedReasonEnum = /* @__PURE__ */ ((PrismSetSabotagedRefusedReasonEnum2) => {
  PrismSetSabotagedRefusedReasonEnum2[PrismSetSabotagedRefusedReasonEnum2["SABOTAGE_REFUSED"] = -1] = "SABOTAGE_REFUSED";
  PrismSetSabotagedRefusedReasonEnum2[PrismSetSabotagedRefusedReasonEnum2["SABOTAGE_INSUFFICIENT_RIGHTS"] = 0] = "SABOTAGE_INSUFFICIENT_RIGHTS";
  PrismSetSabotagedRefusedReasonEnum2[PrismSetSabotagedRefusedReasonEnum2["SABOTAGE_MEMBER_ACCOUNT_NEEDED"] = 1] = "SABOTAGE_MEMBER_ACCOUNT_NEEDED";
  PrismSetSabotagedRefusedReasonEnum2[PrismSetSabotagedRefusedReasonEnum2["SABOTAGE_RESTRICTED_ACCOUNT"] = 2] = "SABOTAGE_RESTRICTED_ACCOUNT";
  PrismSetSabotagedRefusedReasonEnum2[PrismSetSabotagedRefusedReasonEnum2["SABOTAGE_WRONG_ALLIANCE"] = 3] = "SABOTAGE_WRONG_ALLIANCE";
  PrismSetSabotagedRefusedReasonEnum2[PrismSetSabotagedRefusedReasonEnum2["SABOTAGE_NO_PRISM"] = 4] = "SABOTAGE_NO_PRISM";
  PrismSetSabotagedRefusedReasonEnum2[PrismSetSabotagedRefusedReasonEnum2["SABOTAGE_WRONG_STATE"] = 5] = "SABOTAGE_WRONG_STATE";
  return PrismSetSabotagedRefusedReasonEnum2;
})(PrismSetSabotagedRefusedReasonEnum || {});
var PrismListenEnum = /* @__PURE__ */ ((PrismListenEnum2) => {
  PrismListenEnum2[PrismListenEnum2["PRISM_LISTEN_NONE"] = 0] = "PRISM_LISTEN_NONE";
  PrismListenEnum2[PrismListenEnum2["PRISM_LISTEN_MINE"] = 1] = "PRISM_LISTEN_MINE";
  PrismListenEnum2[PrismListenEnum2["PRISM_LISTEN_ALL"] = 2] = "PRISM_LISTEN_ALL";
  return PrismListenEnum2;
})(PrismListenEnum || {});
var FightDispellableEnum = /* @__PURE__ */ ((FightDispellableEnum2) => {
  FightDispellableEnum2[FightDispellableEnum2["DISPELLABLE"] = 1] = "DISPELLABLE";
  FightDispellableEnum2[FightDispellableEnum2["DISPELLABLE_BY_DEATH"] = 2] = "DISPELLABLE_BY_DEATH";
  FightDispellableEnum2[FightDispellableEnum2["DISPELLABLE_BY_STRONG_DISPEL"] = 3] = "DISPELLABLE_BY_STRONG_DISPEL";
  FightDispellableEnum2[FightDispellableEnum2["REALLY_NOT_DISPELLABLE"] = 4] = "REALLY_NOT_DISPELLABLE";
  return FightDispellableEnum2;
})(FightDispellableEnum || {});
var GameActionMarkCellsTypeEnum = /* @__PURE__ */ ((GameActionMarkCellsTypeEnum2) => {
  GameActionMarkCellsTypeEnum2[GameActionMarkCellsTypeEnum2["CELLS_CIRCLE"] = 0] = "CELLS_CIRCLE";
  GameActionMarkCellsTypeEnum2[GameActionMarkCellsTypeEnum2["CELLS_CROSS"] = 1] = "CELLS_CROSS";
  GameActionMarkCellsTypeEnum2[GameActionMarkCellsTypeEnum2["CELLS_SQUARE"] = 2] = "CELLS_SQUARE";
  return GameActionMarkCellsTypeEnum2;
})(GameActionMarkCellsTypeEnum || {});
var TeamTypeEnum = /* @__PURE__ */ ((TeamTypeEnum2) => {
  TeamTypeEnum2[TeamTypeEnum2["TEAM_TYPE_PLAYER"] = 0] = "TEAM_TYPE_PLAYER";
  TeamTypeEnum2[TeamTypeEnum2["TEAM_TYPE_MONSTER"] = 1] = "TEAM_TYPE_MONSTER";
  TeamTypeEnum2[TeamTypeEnum2["TEAM_TYPE_MUTANT"] = 2] = "TEAM_TYPE_MUTANT";
  TeamTypeEnum2[TeamTypeEnum2["TEAM_TYPE_TAXCOLLECTOR"] = 3] = "TEAM_TYPE_TAXCOLLECTOR";
  TeamTypeEnum2[TeamTypeEnum2["TEAM_TYPE_BAD_PLAYER"] = 4] = "TEAM_TYPE_BAD_PLAYER";
  TeamTypeEnum2[TeamTypeEnum2["TEAM_TYPE_PRISM"] = 5] = "TEAM_TYPE_PRISM";
  return TeamTypeEnum2;
})(TeamTypeEnum || {});
var BreachRoomUnlockEnum = /* @__PURE__ */ ((BreachRoomUnlockEnum2) => {
  BreachRoomUnlockEnum2[BreachRoomUnlockEnum2["BREACH_UNLOCK_SUCCESS"] = 0] = "BREACH_UNLOCK_SUCCESS";
  BreachRoomUnlockEnum2[BreachRoomUnlockEnum2["BREACH_UNLOCK_FAIL_NOT_ENOUGH_BUDGET"] = 1] = "BREACH_UNLOCK_FAIL_NOT_ENOUGH_BUDGET";
  return BreachRoomUnlockEnum2;
})(BreachRoomUnlockEnum || {});
var HavenBagDailyLoteryErrorEnum = /* @__PURE__ */ ((HavenBagDailyLoteryErrorEnum2) => {
  HavenBagDailyLoteryErrorEnum2[HavenBagDailyLoteryErrorEnum2["HAVENBAG_DAILY_LOTERY_OK"] = 0] = "HAVENBAG_DAILY_LOTERY_OK";
  HavenBagDailyLoteryErrorEnum2[HavenBagDailyLoteryErrorEnum2["HAVENBAG_DAILY_LOTERY_ALREADYUSED"] = 1] = "HAVENBAG_DAILY_LOTERY_ALREADYUSED";
  HavenBagDailyLoteryErrorEnum2[HavenBagDailyLoteryErrorEnum2["HAVENBAG_DAILY_LOTERY_ERROR"] = 2] = "HAVENBAG_DAILY_LOTERY_ERROR";
  return HavenBagDailyLoteryErrorEnum2;
})(HavenBagDailyLoteryErrorEnum || {});
var FightOptionsEnum = /* @__PURE__ */ ((FightOptionsEnum2) => {
  FightOptionsEnum2[FightOptionsEnum2["FIGHT_OPTION_SET_SECRET"] = 0] = "FIGHT_OPTION_SET_SECRET";
  FightOptionsEnum2[FightOptionsEnum2["FIGHT_OPTION_SET_TO_PARTY_ONLY"] = 1] = "FIGHT_OPTION_SET_TO_PARTY_ONLY";
  FightOptionsEnum2[FightOptionsEnum2["FIGHT_OPTION_SET_CLOSED"] = 2] = "FIGHT_OPTION_SET_CLOSED";
  FightOptionsEnum2[FightOptionsEnum2["FIGHT_OPTION_ASK_FOR_HELP"] = 3] = "FIGHT_OPTION_ASK_FOR_HELP";
  return FightOptionsEnum2;
})(FightOptionsEnum || {});
var TreasureHuntFlagRequestEnum = /* @__PURE__ */ ((TreasureHuntFlagRequestEnum2) => {
  TreasureHuntFlagRequestEnum2[TreasureHuntFlagRequestEnum2["TREASURE_HUNT_FLAG_ERROR_UNDEFINED"] = 0] = "TREASURE_HUNT_FLAG_ERROR_UNDEFINED";
  TreasureHuntFlagRequestEnum2[TreasureHuntFlagRequestEnum2["TREASURE_HUNT_FLAG_OK"] = 1] = "TREASURE_HUNT_FLAG_OK";
  TreasureHuntFlagRequestEnum2[TreasureHuntFlagRequestEnum2["TREASURE_HUNT_FLAG_WRONG"] = 2] = "TREASURE_HUNT_FLAG_WRONG";
  TreasureHuntFlagRequestEnum2[TreasureHuntFlagRequestEnum2["TREASURE_HUNT_FLAG_TOO_MANY"] = 3] = "TREASURE_HUNT_FLAG_TOO_MANY";
  TreasureHuntFlagRequestEnum2[TreasureHuntFlagRequestEnum2["TREASURE_HUNT_FLAG_ERROR_IMPOSSIBLE"] = 4] = "TREASURE_HUNT_FLAG_ERROR_IMPOSSIBLE";
  TreasureHuntFlagRequestEnum2[TreasureHuntFlagRequestEnum2["TREASURE_HUNT_FLAG_WRONG_INDEX"] = 5] = "TREASURE_HUNT_FLAG_WRONG_INDEX";
  TreasureHuntFlagRequestEnum2[TreasureHuntFlagRequestEnum2["TREASURE_HUNT_FLAG_SAME_MAP"] = 6] = "TREASURE_HUNT_FLAG_SAME_MAP";
  return TreasureHuntFlagRequestEnum2;
})(TreasureHuntFlagRequestEnum || {});
var TreasureHuntDigRequestEnum = /* @__PURE__ */ ((TreasureHuntDigRequestEnum2) => {
  TreasureHuntDigRequestEnum2[TreasureHuntDigRequestEnum2["TREASURE_HUNT_DIG_ERROR_UNDEFINED"] = 0] = "TREASURE_HUNT_DIG_ERROR_UNDEFINED";
  TreasureHuntDigRequestEnum2[TreasureHuntDigRequestEnum2["TREASURE_HUNT_DIG_NEW_HINT"] = 1] = "TREASURE_HUNT_DIG_NEW_HINT";
  TreasureHuntDigRequestEnum2[TreasureHuntDigRequestEnum2["TREASURE_HUNT_DIG_FINISHED"] = 2] = "TREASURE_HUNT_DIG_FINISHED";
  TreasureHuntDigRequestEnum2[TreasureHuntDigRequestEnum2["TREASURE_HUNT_DIG_WRONG"] = 3] = "TREASURE_HUNT_DIG_WRONG";
  TreasureHuntDigRequestEnum2[TreasureHuntDigRequestEnum2["TREASURE_HUNT_DIG_LOST"] = 4] = "TREASURE_HUNT_DIG_LOST";
  TreasureHuntDigRequestEnum2[TreasureHuntDigRequestEnum2["TREASURE_HUNT_DIG_ERROR_IMPOSSIBLE"] = 5] = "TREASURE_HUNT_DIG_ERROR_IMPOSSIBLE";
  TreasureHuntDigRequestEnum2[TreasureHuntDigRequestEnum2["TREASURE_HUNT_DIG_WRONG_AND_YOU_KNOW_IT"] = 6] = "TREASURE_HUNT_DIG_WRONG_AND_YOU_KNOW_IT";
  return TreasureHuntDigRequestEnum2;
})(TreasureHuntDigRequestEnum || {});
var TreasureHuntFlagStateEnum = /* @__PURE__ */ ((TreasureHuntFlagStateEnum2) => {
  TreasureHuntFlagStateEnum2[TreasureHuntFlagStateEnum2["TREASURE_HUNT_FLAG_STATE_UNKNOWN"] = 0] = "TREASURE_HUNT_FLAG_STATE_UNKNOWN";
  TreasureHuntFlagStateEnum2[TreasureHuntFlagStateEnum2["TREASURE_HUNT_FLAG_STATE_OK"] = 1] = "TREASURE_HUNT_FLAG_STATE_OK";
  TreasureHuntFlagStateEnum2[TreasureHuntFlagStateEnum2["TREASURE_HUNT_FLAG_STATE_WRONG"] = 2] = "TREASURE_HUNT_FLAG_STATE_WRONG";
  return TreasureHuntFlagStateEnum2;
})(TreasureHuntFlagStateEnum || {});
var TreasureHuntRequestEnum = /* @__PURE__ */ ((TreasureHuntRequestEnum2) => {
  TreasureHuntRequestEnum2[TreasureHuntRequestEnum2["TREASURE_HUNT_ERROR_UNDEFINED"] = 0] = "TREASURE_HUNT_ERROR_UNDEFINED";
  TreasureHuntRequestEnum2[TreasureHuntRequestEnum2["TREASURE_HUNT_OK"] = 1] = "TREASURE_HUNT_OK";
  TreasureHuntRequestEnum2[TreasureHuntRequestEnum2["TREASURE_HUNT_ERROR_NO_QUEST_FOUND"] = 2] = "TREASURE_HUNT_ERROR_NO_QUEST_FOUND";
  TreasureHuntRequestEnum2[TreasureHuntRequestEnum2["TREASURE_HUNT_ERROR_ALREADY_HAVE_QUEST"] = 3] = "TREASURE_HUNT_ERROR_ALREADY_HAVE_QUEST";
  TreasureHuntRequestEnum2[TreasureHuntRequestEnum2["TREASURE_HUNT_ERROR_NOT_AVAILABLE"] = 4] = "TREASURE_HUNT_ERROR_NOT_AVAILABLE";
  TreasureHuntRequestEnum2[TreasureHuntRequestEnum2["TREASURE_HUNT_ERROR_DAILY_LIMIT_EXCEEDED"] = 5] = "TREASURE_HUNT_ERROR_DAILY_LIMIT_EXCEEDED";
  return TreasureHuntRequestEnum2;
})(TreasureHuntRequestEnum || {});
var TreasureHuntTypeEnum = /* @__PURE__ */ ((TreasureHuntTypeEnum2) => {
  TreasureHuntTypeEnum2[TreasureHuntTypeEnum2["TREASURE_HUNT_CLASSIC"] = 0] = "TREASURE_HUNT_CLASSIC";
  TreasureHuntTypeEnum2[TreasureHuntTypeEnum2["TREASURE_HUNT_PORTAL"] = 1] = "TREASURE_HUNT_PORTAL";
  TreasureHuntTypeEnum2[TreasureHuntTypeEnum2["TREASURE_HUNT_LEGENDARY"] = 2] = "TREASURE_HUNT_LEGENDARY";
  return TreasureHuntTypeEnum2;
})(TreasureHuntTypeEnum || {});
var CharacterDeletionErrorEnum = /* @__PURE__ */ ((CharacterDeletionErrorEnum2) => {
  CharacterDeletionErrorEnum2[CharacterDeletionErrorEnum2["DEL_ERR_NO_REASON"] = 1] = "DEL_ERR_NO_REASON";
  CharacterDeletionErrorEnum2[CharacterDeletionErrorEnum2["DEL_ERR_TOO_MANY_CHAR_DELETION"] = 2] = "DEL_ERR_TOO_MANY_CHAR_DELETION";
  CharacterDeletionErrorEnum2[CharacterDeletionErrorEnum2["DEL_ERR_BAD_SECRET_ANSWER"] = 3] = "DEL_ERR_BAD_SECRET_ANSWER";
  CharacterDeletionErrorEnum2[CharacterDeletionErrorEnum2["DEL_ERR_RESTRICED_ZONE"] = 4] = "DEL_ERR_RESTRICED_ZONE";
  return CharacterDeletionErrorEnum2;
})(CharacterDeletionErrorEnum || {});
var CharacterRemodelingEnum = /* @__PURE__ */ ((CharacterRemodelingEnum2) => {
  CharacterRemodelingEnum2[CharacterRemodelingEnum2["CHARACTER_REMODELING_NOT_APPLICABLE"] = 0] = "CHARACTER_REMODELING_NOT_APPLICABLE";
  CharacterRemodelingEnum2[CharacterRemodelingEnum2["CHARACTER_REMODELING_NAME"] = 1] = "CHARACTER_REMODELING_NAME";
  CharacterRemodelingEnum2[CharacterRemodelingEnum2["CHARACTER_REMODELING_COLORS"] = 2] = "CHARACTER_REMODELING_COLORS";
  CharacterRemodelingEnum2[CharacterRemodelingEnum2["CHARACTER_REMODELING_COSMETIC"] = 4] = "CHARACTER_REMODELING_COSMETIC";
  CharacterRemodelingEnum2[CharacterRemodelingEnum2["CHARACTER_REMODELING_BREED"] = 8] = "CHARACTER_REMODELING_BREED";
  CharacterRemodelingEnum2[CharacterRemodelingEnum2["CHARACTER_REMODELING_GENDER"] = 16] = "CHARACTER_REMODELING_GENDER";
  CharacterRemodelingEnum2[CharacterRemodelingEnum2["CHARACTER_OPT_REMODELING_NAME"] = 32] = "CHARACTER_OPT_REMODELING_NAME";
  CharacterRemodelingEnum2[CharacterRemodelingEnum2["CHARACTER_OPT_REMODELING_ALL"] = 64] = "CHARACTER_OPT_REMODELING_ALL";
  return CharacterRemodelingEnum2;
})(CharacterRemodelingEnum || {});
var ServerConnectionErrorEnum = /* @__PURE__ */ ((ServerConnectionErrorEnum2) => {
  ServerConnectionErrorEnum2[ServerConnectionErrorEnum2["SERVER_CONNECTION_ERROR_DUE_TO_STATUS"] = 0] = "SERVER_CONNECTION_ERROR_DUE_TO_STATUS";
  ServerConnectionErrorEnum2[ServerConnectionErrorEnum2["SERVER_CONNECTION_ERROR_NO_REASON"] = 1] = "SERVER_CONNECTION_ERROR_NO_REASON";
  ServerConnectionErrorEnum2[ServerConnectionErrorEnum2["SERVER_CONNECTION_ERROR_ACCOUNT_RESTRICTED"] = 2] = "SERVER_CONNECTION_ERROR_ACCOUNT_RESTRICTED";
  ServerConnectionErrorEnum2[ServerConnectionErrorEnum2["SERVER_CONNECTION_ERROR_COMMUNITY_RESTRICTED"] = 3] = "SERVER_CONNECTION_ERROR_COMMUNITY_RESTRICTED";
  ServerConnectionErrorEnum2[ServerConnectionErrorEnum2["SERVER_CONNECTION_ERROR_LOCATION_RESTRICTED"] = 4] = "SERVER_CONNECTION_ERROR_LOCATION_RESTRICTED";
  ServerConnectionErrorEnum2[ServerConnectionErrorEnum2["SERVER_CONNECTION_ERROR_SUBSCRIBERS_ONLY"] = 5] = "SERVER_CONNECTION_ERROR_SUBSCRIBERS_ONLY";
  ServerConnectionErrorEnum2[ServerConnectionErrorEnum2["SERVER_CONNECTION_ERROR_REGULAR_PLAYERS_ONLY"] = 6] = "SERVER_CONNECTION_ERROR_REGULAR_PLAYERS_ONLY";
  ServerConnectionErrorEnum2[ServerConnectionErrorEnum2["SERVER_CONNECTION_ERROR_MONOACCOUNT_CANNOT_VERIFY"] = 7] = "SERVER_CONNECTION_ERROR_MONOACCOUNT_CANNOT_VERIFY";
  ServerConnectionErrorEnum2[ServerConnectionErrorEnum2["SERVER_CONNECTION_ERROR_MONOACCOUNT_ONLY"] = 8] = "SERVER_CONNECTION_ERROR_MONOACCOUNT_ONLY";
  ServerConnectionErrorEnum2[ServerConnectionErrorEnum2["SERVER_CONNECTION_ERROR_SERVER_OVERLOAD"] = 9] = "SERVER_CONNECTION_ERROR_SERVER_OVERLOAD";
  return ServerConnectionErrorEnum2;
})(ServerConnectionErrorEnum || {});
var HaapiAuthTypeEnum = /* @__PURE__ */ ((HaapiAuthTypeEnum2) => {
  HaapiAuthTypeEnum2[HaapiAuthTypeEnum2["HAAPI_API_KEY"] = 0] = "HAAPI_API_KEY";
  HaapiAuthTypeEnum2[HaapiAuthTypeEnum2["HAAPI_TOKEN"] = 1] = "HAAPI_TOKEN";
  return HaapiAuthTypeEnum2;
})(HaapiAuthTypeEnum || {});
var HaapiSessionTypeEnum = /* @__PURE__ */ ((HaapiSessionTypeEnum2) => {
  HaapiSessionTypeEnum2[HaapiSessionTypeEnum2["HAAPI_ACCOUNT_SESSION"] = 0] = "HAAPI_ACCOUNT_SESSION";
  HaapiSessionTypeEnum2[HaapiSessionTypeEnum2["HAAPI_GAME_SESSION"] = 1] = "HAAPI_GAME_SESSION";
  return HaapiSessionTypeEnum2;
})(HaapiSessionTypeEnum || {});
var ForgettableSpellListActionEnum = /* @__PURE__ */ ((ForgettableSpellListActionEnum2) => {
  ForgettableSpellListActionEnum2[ForgettableSpellListActionEnum2["FORGETTABLE_SPELL_LIST_DISPATCH"] = 0] = "FORGETTABLE_SPELL_LIST_DISPATCH";
  ForgettableSpellListActionEnum2[ForgettableSpellListActionEnum2["FORGETTABLE_SPELL_LIST_UPDATE"] = 1] = "FORGETTABLE_SPELL_LIST_UPDATE";
  return ForgettableSpellListActionEnum2;
})(ForgettableSpellListActionEnum || {});
var StatsUpgradeResultEnum = /* @__PURE__ */ ((StatsUpgradeResultEnum2) => {
  StatsUpgradeResultEnum2[StatsUpgradeResultEnum2["NONE"] = -1] = "NONE";
  StatsUpgradeResultEnum2[StatsUpgradeResultEnum2["SUCCESS"] = 0] = "SUCCESS";
  StatsUpgradeResultEnum2[StatsUpgradeResultEnum2["RESTRICTED"] = 1] = "RESTRICTED";
  StatsUpgradeResultEnum2[StatsUpgradeResultEnum2["GUEST"] = 2] = "GUEST";
  StatsUpgradeResultEnum2[StatsUpgradeResultEnum2["IN_FIGHT"] = 3] = "IN_FIGHT";
  StatsUpgradeResultEnum2[StatsUpgradeResultEnum2["NOT_ENOUGH_POINT"] = 4] = "NOT_ENOUGH_POINT";
  return StatsUpgradeResultEnum2;
})(StatsUpgradeResultEnum || {});
var ConsoleMessageTypeEnum = /* @__PURE__ */ ((ConsoleMessageTypeEnum2) => {
  ConsoleMessageTypeEnum2[ConsoleMessageTypeEnum2["CONSOLE_TEXT_MESSAGE"] = 0] = "CONSOLE_TEXT_MESSAGE";
  ConsoleMessageTypeEnum2[ConsoleMessageTypeEnum2["CONSOLE_INFO_MESSAGE"] = 1] = "CONSOLE_INFO_MESSAGE";
  ConsoleMessageTypeEnum2[ConsoleMessageTypeEnum2["CONSOLE_ERR_MESSAGE"] = 2] = "CONSOLE_ERR_MESSAGE";
  return ConsoleMessageTypeEnum2;
})(ConsoleMessageTypeEnum || {});
var AlignmentWarEffortDonationResultEnum = /* @__PURE__ */ ((AlignmentWarEffortDonationResultEnum2) => {
  AlignmentWarEffortDonationResultEnum2[AlignmentWarEffortDonationResultEnum2["WAR_EFFORT_DONATION_SUCCESS"] = 0] = "WAR_EFFORT_DONATION_SUCCESS";
  AlignmentWarEffortDonationResultEnum2[AlignmentWarEffortDonationResultEnum2["WAR_EFFORT_DONATION_ERROR_NOT_ENOUGH_KAMAS"] = 1] = "WAR_EFFORT_DONATION_ERROR_NOT_ENOUGH_KAMAS";
  AlignmentWarEffortDonationResultEnum2[AlignmentWarEffortDonationResultEnum2["WAR_EFFORT_DONATION_ERROR_INVALID_ALIGNMENT"] = 2] = "WAR_EFFORT_DONATION_ERROR_INVALID_ALIGNMENT";
  AlignmentWarEffortDonationResultEnum2[AlignmentWarEffortDonationResultEnum2["WAR_EFFORT_DONATION_ERROR_KAMAS_LIMIT_REACH"] = 3] = "WAR_EFFORT_DONATION_ERROR_KAMAS_LIMIT_REACH";
  AlignmentWarEffortDonationResultEnum2[AlignmentWarEffortDonationResultEnum2["WAR_EFFORT_DONATION_ERROR_UNKNOWN"] = 4] = "WAR_EFFORT_DONATION_ERROR_UNKNOWN";
  return AlignmentWarEffortDonationResultEnum2;
})(AlignmentWarEffortDonationResultEnum || {});
var DialogTypeEnum = /* @__PURE__ */ ((DialogTypeEnum2) => {
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_BOOK"] = 0] = "DIALOG_BOOK";
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_DIALOG"] = 1] = "DIALOG_DIALOG";
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_LOCKABLE"] = 2] = "DIALOG_LOCKABLE";
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_PURCHASABLE"] = 3] = "DIALOG_PURCHASABLE";
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_GUILD_INVITATION"] = 4] = "DIALOG_GUILD_INVITATION";
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_GUILD_CREATE"] = 5] = "DIALOG_GUILD_CREATE";
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_GUILD_RENAME"] = 6] = "DIALOG_GUILD_RENAME";
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_MARRIAGE"] = 7] = "DIALOG_MARRIAGE";
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_DUNGEON_MEETING"] = 8] = "DIALOG_DUNGEON_MEETING";
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_SPELL_FORGET"] = 9] = "DIALOG_SPELL_FORGET";
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_TELEPORTER"] = 10] = "DIALOG_TELEPORTER";
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_EXCHANGE"] = 11] = "DIALOG_EXCHANGE";
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_ALLIANCE_INVITATION"] = 12] = "DIALOG_ALLIANCE_INVITATION";
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_ALLIANCE_CREATE"] = 13] = "DIALOG_ALLIANCE_CREATE";
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_ALLIANCE_RENAME"] = 14] = "DIALOG_ALLIANCE_RENAME";
  DialogTypeEnum2[DialogTypeEnum2["DIALOG_HAVENBAG_MEETING"] = 15] = "DIALOG_HAVENBAG_MEETING";
  return DialogTypeEnum2;
})(DialogTypeEnum || {});
var SocialContactCategoryEnum = /* @__PURE__ */ ((SocialContactCategoryEnum2) => {
  SocialContactCategoryEnum2[SocialContactCategoryEnum2["SOCIAL_CONTACT_FRIEND"] = 0] = "SOCIAL_CONTACT_FRIEND";
  SocialContactCategoryEnum2[SocialContactCategoryEnum2["SOCIAL_CONTACT_SPOUSE"] = 1] = "SOCIAL_CONTACT_SPOUSE";
  SocialContactCategoryEnum2[SocialContactCategoryEnum2["SOCIAL_CONTACT_PARTY"] = 2] = "SOCIAL_CONTACT_PARTY";
  SocialContactCategoryEnum2[SocialContactCategoryEnum2["SOCIAL_CONTACT_GUILD"] = 3] = "SOCIAL_CONTACT_GUILD";
  SocialContactCategoryEnum2[SocialContactCategoryEnum2["SOCIAL_CONTACT_ALLIANCE"] = 4] = "SOCIAL_CONTACT_ALLIANCE";
  SocialContactCategoryEnum2[SocialContactCategoryEnum2["SOCIAL_CONTACT_CRAFTER"] = 5] = "SOCIAL_CONTACT_CRAFTER";
  SocialContactCategoryEnum2[SocialContactCategoryEnum2["SOCIAL_CONTACT_INTERLOCUTOR"] = 6] = "SOCIAL_CONTACT_INTERLOCUTOR";
  SocialContactCategoryEnum2[SocialContactCategoryEnum2["SOCIAL_CONTACT_FIGHT"] = 7] = "SOCIAL_CONTACT_FIGHT";
  return SocialContactCategoryEnum2;
})(SocialContactCategoryEnum || {});
var ExchangeReplayStopReasonEnum = /* @__PURE__ */ ((ExchangeReplayStopReasonEnum2) => {
  ExchangeReplayStopReasonEnum2[ExchangeReplayStopReasonEnum2["STOPPED_REASON_OK"] = 1] = "STOPPED_REASON_OK";
  ExchangeReplayStopReasonEnum2[ExchangeReplayStopReasonEnum2["STOPPED_REASON_USER"] = 2] = "STOPPED_REASON_USER";
  ExchangeReplayStopReasonEnum2[ExchangeReplayStopReasonEnum2["STOPPED_REASON_MISSING_RESSOURCE"] = 3] = "STOPPED_REASON_MISSING_RESSOURCE";
  ExchangeReplayStopReasonEnum2[ExchangeReplayStopReasonEnum2["STOPPED_REASON_IMPOSSIBLE_MODIFICATION"] = 4] = "STOPPED_REASON_IMPOSSIBLE_MODIFICATION";
  return ExchangeReplayStopReasonEnum2;
})(ExchangeReplayStopReasonEnum || {});
var MountEquipedErrorEnum = /* @__PURE__ */ ((MountEquipedErrorEnum2) => {
  MountEquipedErrorEnum2[MountEquipedErrorEnum2["UNSET"] = 0] = "UNSET";
  MountEquipedErrorEnum2[MountEquipedErrorEnum2["SET"] = 1] = "SET";
  MountEquipedErrorEnum2[MountEquipedErrorEnum2["RIDING"] = 2] = "RIDING";
  return MountEquipedErrorEnum2;
})(MountEquipedErrorEnum || {});
var AllianceRightsBitEnum = /* @__PURE__ */ ((AllianceRightsBitEnum2) => {
  AllianceRightsBitEnum2[AllianceRightsBitEnum2["ALLIANCE_RIGHT_NONE"] = 0] = "ALLIANCE_RIGHT_NONE";
  AllianceRightsBitEnum2[AllianceRightsBitEnum2["ALLIANCE_RIGHT_BOSS"] = 1] = "ALLIANCE_RIGHT_BOSS";
  AllianceRightsBitEnum2[AllianceRightsBitEnum2["ALLIANCE_RIGHT_MANAGE_PRISMS"] = 2] = "ALLIANCE_RIGHT_MANAGE_PRISMS";
  AllianceRightsBitEnum2[AllianceRightsBitEnum2["ALLIANCE_RIGHT_TALK_IN_CHAN"] = 4] = "ALLIANCE_RIGHT_TALK_IN_CHAN";
  AllianceRightsBitEnum2[AllianceRightsBitEnum2["ALLIANCE_RIGHT_RECRUIT_GUILDS"] = 8] = "ALLIANCE_RIGHT_RECRUIT_GUILDS";
  AllianceRightsBitEnum2[AllianceRightsBitEnum2["ALLIANCE_RIGHT_KICK_GUILDS"] = 16] = "ALLIANCE_RIGHT_KICK_GUILDS";
  AllianceRightsBitEnum2[AllianceRightsBitEnum2["ALLIANCE_RIGHT_MANAGE_RIGHTS"] = 32] = "ALLIANCE_RIGHT_MANAGE_RIGHTS";
  return AllianceRightsBitEnum2;
})(AllianceRightsBitEnum || {});
var AccessoryPreviewErrorEnum = /* @__PURE__ */ ((AccessoryPreviewErrorEnum2) => {
  AccessoryPreviewErrorEnum2[AccessoryPreviewErrorEnum2["PREVIEW_ERROR"] = 0] = "PREVIEW_ERROR";
  AccessoryPreviewErrorEnum2[AccessoryPreviewErrorEnum2["PREVIEW_COOLDOWN"] = 1] = "PREVIEW_COOLDOWN";
  AccessoryPreviewErrorEnum2[AccessoryPreviewErrorEnum2["PREVIEW_BAD_ITEM"] = 2] = "PREVIEW_BAD_ITEM";
  return AccessoryPreviewErrorEnum2;
})(AccessoryPreviewErrorEnum || {});
var PresetUseResultEnum = /* @__PURE__ */ ((PresetUseResultEnum2) => {
  PresetUseResultEnum2[PresetUseResultEnum2["PRESET_USE_OK"] = 1] = "PRESET_USE_OK";
  PresetUseResultEnum2[PresetUseResultEnum2["PRESET_USE_OK_PARTIAL"] = 2] = "PRESET_USE_OK_PARTIAL";
  PresetUseResultEnum2[PresetUseResultEnum2["PRESET_USE_ERR_STATS_FIGHT_PREPARATION"] = 3] = "PRESET_USE_ERR_STATS_FIGHT_PREPARATION";
  PresetUseResultEnum2[PresetUseResultEnum2["PRESET_USE_ERR_COOLDOWN"] = 4] = "PRESET_USE_ERR_COOLDOWN";
  PresetUseResultEnum2[PresetUseResultEnum2["PRESET_USE_ERR_BAD_PRESET_ID"] = 5] = "PRESET_USE_ERR_BAD_PRESET_ID";
  PresetUseResultEnum2[PresetUseResultEnum2["PRESET_USE_ERR_INVALID_STATE"] = 6] = "PRESET_USE_ERR_INVALID_STATE";
  PresetUseResultEnum2[PresetUseResultEnum2["PRESET_USE_ERR_STATS"] = 7] = "PRESET_USE_ERR_STATS";
  PresetUseResultEnum2[PresetUseResultEnum2["PRESET_USE_ERR_CRITERION"] = 8] = "PRESET_USE_ERR_CRITERION";
  PresetUseResultEnum2[PresetUseResultEnum2["PRESET_USE_ERR_UNKNOWN"] = 9] = "PRESET_USE_ERR_UNKNOWN";
  PresetUseResultEnum2[PresetUseResultEnum2["PRESET_USE_ERR_INVALID_DATA"] = 10] = "PRESET_USE_ERR_INVALID_DATA";
  return PresetUseResultEnum2;
})(PresetUseResultEnum || {});
var PresetDeleteResultEnum = /* @__PURE__ */ ((PresetDeleteResultEnum2) => {
  PresetDeleteResultEnum2[PresetDeleteResultEnum2["PRESET_DEL_OK"] = 1] = "PRESET_DEL_OK";
  PresetDeleteResultEnum2[PresetDeleteResultEnum2["PRESET_DEL_ERR_UNKNOWN"] = 2] = "PRESET_DEL_ERR_UNKNOWN";
  PresetDeleteResultEnum2[PresetDeleteResultEnum2["PRESET_DEL_ERR_BAD_PRESET_ID"] = 3] = "PRESET_DEL_ERR_BAD_PRESET_ID";
  PresetDeleteResultEnum2[PresetDeleteResultEnum2["PRESET_DEL_ERR_SYSTEM_INACTIVE"] = 4] = "PRESET_DEL_ERR_SYSTEM_INACTIVE";
  return PresetDeleteResultEnum2;
})(PresetDeleteResultEnum || {});
var PresetSaveResultEnum = /* @__PURE__ */ ((PresetSaveResultEnum2) => {
  PresetSaveResultEnum2[PresetSaveResultEnum2["PRESET_SAVE_OK"] = 1] = "PRESET_SAVE_OK";
  PresetSaveResultEnum2[PresetSaveResultEnum2["PRESET_SAVE_ERR_UNKNOWN"] = 2] = "PRESET_SAVE_ERR_UNKNOWN";
  PresetSaveResultEnum2[PresetSaveResultEnum2["PRESET_SAVE_ERR_TOO_MANY"] = 3] = "PRESET_SAVE_ERR_TOO_MANY";
  PresetSaveResultEnum2[PresetSaveResultEnum2["PRESET_SAVE_ERR_INVALID_PLAYER_STATE"] = 4] = "PRESET_SAVE_ERR_INVALID_PLAYER_STATE";
  PresetSaveResultEnum2[PresetSaveResultEnum2["PRESET_SAVE_ERR_SYSTEM_INACTIVE"] = 5] = "PRESET_SAVE_ERR_SYSTEM_INACTIVE";
  PresetSaveResultEnum2[PresetSaveResultEnum2["PRESET_SAVE_ERR_INVALID_ID"] = 6] = "PRESET_SAVE_ERR_INVALID_ID";
  return PresetSaveResultEnum2;
})(PresetSaveResultEnum || {});
var DelayedActionTypeEnum = /* @__PURE__ */ ((DelayedActionTypeEnum2) => {
  DelayedActionTypeEnum2[DelayedActionTypeEnum2["DELAYED_ACTION_DISCONNECT"] = 0] = "DELAYED_ACTION_DISCONNECT";
  DelayedActionTypeEnum2[DelayedActionTypeEnum2["DELAYED_ACTION_OBJECT_USE"] = 1] = "DELAYED_ACTION_OBJECT_USE";
  DelayedActionTypeEnum2[DelayedActionTypeEnum2["DELAYED_ACTION_JOIN_CHARACTER"] = 2] = "DELAYED_ACTION_JOIN_CHARACTER";
  DelayedActionTypeEnum2[DelayedActionTypeEnum2["DELAYED_ACTION_AGGRESSION_IMMUNE"] = 3] = "DELAYED_ACTION_AGGRESSION_IMMUNE";
  return DelayedActionTypeEnum2;
})(DelayedActionTypeEnum || {});
var BreachRewardLockEnum = /* @__PURE__ */ ((BreachRewardLockEnum2) => {
  BreachRewardLockEnum2[BreachRewardLockEnum2["BREACH_REWARD_LOCK_OWNER"] = 0] = "BREACH_REWARD_LOCK_OWNER";
  BreachRewardLockEnum2[BreachRewardLockEnum2["BREACH_REWARD_LOCK_FIGHTER"] = 1] = "BREACH_REWARD_LOCK_FIGHTER";
  BreachRewardLockEnum2[BreachRewardLockEnum2["BREACH_REWARD_LOCK_RESOURCES"] = 2] = "BREACH_REWARD_LOCK_RESOURCES";
  BreachRewardLockEnum2[BreachRewardLockEnum2["BREACH_REWARD_LOCK_CRITERION"] = 3] = "BREACH_REWARD_LOCK_CRITERION";
  BreachRewardLockEnum2[BreachRewardLockEnum2["BREACH_REWARD_LOCK_USELESS"] = 4] = "BREACH_REWARD_LOCK_USELESS";
  BreachRewardLockEnum2[BreachRewardLockEnum2["BREACH_REWARD_MAX_PURCHASE_REACHED"] = 5] = "BREACH_REWARD_MAX_PURCHASE_REACHED";
  return BreachRewardLockEnum2;
})(BreachRewardLockEnum || {});
var BidCancellationEnum = /* @__PURE__ */ ((BidCancellationEnum2) => {
  BidCancellationEnum2[BidCancellationEnum2["UNKNOWN_TYPE"] = 0] = "UNKNOWN_TYPE";
  BidCancellationEnum2[BidCancellationEnum2["CLASSIC"] = 1] = "CLASSIC";
  BidCancellationEnum2[BidCancellationEnum2["FRAUD"] = 2] = "FRAUD";
  return BidCancellationEnum2;
})(BidCancellationEnum || {});
var BidValidationEnum = /* @__PURE__ */ ((BidValidationEnum2) => {
  BidValidationEnum2[BidValidationEnum2["GENERIC_ERROR"] = 0] = "GENERIC_ERROR";
  BidValidationEnum2[BidValidationEnum2["BUFFER_OVERLOAD"] = 1] = "BUFFER_OVERLOAD";
  BidValidationEnum2[BidValidationEnum2["OFFER_DOESNT_EXIST"] = 2] = "OFFER_DOESNT_EXIST";
  BidValidationEnum2[BidValidationEnum2["OFFER_ALREADY_EXISTS"] = 3] = "OFFER_ALREADY_EXISTS";
  BidValidationEnum2[BidValidationEnum2["NOT_ENOUGH_KAMAS"] = 4] = "NOT_ENOUGH_KAMAS";
  BidValidationEnum2[BidValidationEnum2["NOT_ENOUGH_OGRINES"] = 5] = "NOT_ENOUGH_OGRINES";
  BidValidationEnum2[BidValidationEnum2["SERVER_MAINTENANCE"] = 6] = "SERVER_MAINTENANCE";
  BidValidationEnum2[BidValidationEnum2["PLAYER_IN_DEBT"] = 7] = "PLAYER_IN_DEBT";
  BidValidationEnum2[BidValidationEnum2["OFFER_IS_YOURS"] = 8] = "OFFER_IS_YOURS";
  BidValidationEnum2[BidValidationEnum2["VALIDATION_SUCCESS"] = 100] = "VALIDATION_SUCCESS";
  return BidValidationEnum2;
})(BidValidationEnum || {});
var BidActionEnum = /* @__PURE__ */ ((BidActionEnum2) => {
  BidActionEnum2[BidActionEnum2["INVALID_ACTION"] = 0] = "INVALID_ACTION";
  BidActionEnum2[BidActionEnum2["CONSUME_BUFF"] = 1] = "CONSUME_BUFF";
  BidActionEnum2[BidActionEnum2["CANCEL"] = 2] = "CANCEL";
  BidActionEnum2[BidActionEnum2["CREATE_KAMA"] = 3] = "CREATE_KAMA";
  BidActionEnum2[BidActionEnum2["CREATE_OGRINE"] = 4] = "CREATE_OGRINE";
  BidActionEnum2[BidActionEnum2["BUY_KAMA"] = 5] = "BUY_KAMA";
  BidActionEnum2[BidActionEnum2["BUY_OGRINE"] = 6] = "BUY_OGRINE";
  return BidActionEnum2;
})(BidActionEnum || {});
var CraftResultEnum = /* @__PURE__ */ ((CraftResultEnum2) => {
  CraftResultEnum2[CraftResultEnum2["CRAFT_IMPOSSIBLE"] = 0] = "CRAFT_IMPOSSIBLE";
  CraftResultEnum2[CraftResultEnum2["CRAFT_FAILED"] = 1] = "CRAFT_FAILED";
  CraftResultEnum2[CraftResultEnum2["CRAFT_SUCCESS"] = 2] = "CRAFT_SUCCESS";
  CraftResultEnum2[CraftResultEnum2["CRAFT_NEUTRAL"] = 3] = "CRAFT_NEUTRAL";
  CraftResultEnum2[CraftResultEnum2["CRAFT_FORBIDDEN"] = 4] = "CRAFT_FORBIDDEN";
  return CraftResultEnum2;
})(CraftResultEnum || {});
var HavenBagShareBitEnum = /* @__PURE__ */ ((HavenBagShareBitEnum2) => {
  HavenBagShareBitEnum2[HavenBagShareBitEnum2["HAVEN_BAG_NONE"] = 0] = "HAVEN_BAG_NONE";
  HavenBagShareBitEnum2[HavenBagShareBitEnum2["HAVEN_BAG_FRIENDS"] = 1] = "HAVEN_BAG_FRIENDS";
  HavenBagShareBitEnum2[HavenBagShareBitEnum2["HAVEN_BAG_GUILD"] = 2] = "HAVEN_BAG_GUILD";
  return HavenBagShareBitEnum2;
})(HavenBagShareBitEnum || {});
var GuildRecruitmentTypeEnum = /* @__PURE__ */ ((GuildRecruitmentTypeEnum2) => {
  GuildRecruitmentTypeEnum2[GuildRecruitmentTypeEnum2["DISABLED"] = 0] = "DISABLED";
  GuildRecruitmentTypeEnum2[GuildRecruitmentTypeEnum2["AUTOMATIC"] = 1] = "AUTOMATIC";
  GuildRecruitmentTypeEnum2[GuildRecruitmentTypeEnum2["MANUAL"] = 2] = "MANUAL";
  return GuildRecruitmentTypeEnum2;
})(GuildRecruitmentTypeEnum || {});
var GuildApplicationStateEnum = /* @__PURE__ */ ((GuildApplicationStateEnum2) => {
  GuildApplicationStateEnum2[GuildApplicationStateEnum2["ADDED"] = 0] = "ADDED";
  GuildApplicationStateEnum2[GuildApplicationStateEnum2["DELETED"] = 1] = "DELETED";
  GuildApplicationStateEnum2[GuildApplicationStateEnum2["UPDATED"] = 2] = "UPDATED";
  return GuildApplicationStateEnum2;
})(GuildApplicationStateEnum || {});
var GuildSummarySortEnum = /* @__PURE__ */ ((GuildSummarySortEnum2) => {
  GuildSummarySortEnum2[GuildSummarySortEnum2["SORT_BY_NAME"] = 0] = "SORT_BY_NAME";
  GuildSummarySortEnum2[GuildSummarySortEnum2["SORT_BY_LEVEL"] = 1] = "SORT_BY_LEVEL";
  GuildSummarySortEnum2[GuildSummarySortEnum2["SORT_BY_NB_MEMBERS"] = 2] = "SORT_BY_NB_MEMBERS";
  GuildSummarySortEnum2[GuildSummarySortEnum2["SORT_BY_LAST_ACTIVITY"] = 3] = "SORT_BY_LAST_ACTIVITY";
  return GuildSummarySortEnum2;
})(GuildSummarySortEnum || {});
var BreedEnum = /* @__PURE__ */ ((BreedEnum2) => {
  BreedEnum2[BreedEnum2["INCARNATION"] = -11] = "INCARNATION";
  BreedEnum2[BreedEnum2["PRISM"] = -10] = "PRISM";
  BreedEnum2[BreedEnum2["MOUNT_OUTSIDE"] = -9] = "MOUNT_OUTSIDE";
  BreedEnum2[BreedEnum2["MUTANT_IN_DUNGEON"] = -8] = "MUTANT_IN_DUNGEON";
  BreedEnum2[BreedEnum2["MUTANT"] = -7] = "MUTANT";
  BreedEnum2[BreedEnum2["TAX_COLLECTOR"] = -6] = "TAX_COLLECTOR";
  BreedEnum2[BreedEnum2["HUMAN_VENDOR"] = -5] = "HUMAN_VENDOR";
  BreedEnum2[BreedEnum2["NPC"] = -4] = "NPC";
  BreedEnum2[BreedEnum2["MONSTER_GROUP"] = -3] = "MONSTER_GROUP";
  BreedEnum2[BreedEnum2["MONSTER"] = -2] = "MONSTER";
  BreedEnum2[BreedEnum2["SUMMONED"] = -1] = "SUMMONED";
  BreedEnum2[BreedEnum2["UNDEFINED"] = 0] = "UNDEFINED";
  BreedEnum2[BreedEnum2["Feca"] = 1] = "Feca";
  BreedEnum2[BreedEnum2["Osamodas"] = 2] = "Osamodas";
  BreedEnum2[BreedEnum2["Enutrof"] = 3] = "Enutrof";
  BreedEnum2[BreedEnum2["Sram"] = 4] = "Sram";
  BreedEnum2[BreedEnum2["Xelor"] = 5] = "Xelor";
  BreedEnum2[BreedEnum2["Ecaflip"] = 6] = "Ecaflip";
  BreedEnum2[BreedEnum2["Eniripsa"] = 7] = "Eniripsa";
  BreedEnum2[BreedEnum2["Iop"] = 8] = "Iop";
  BreedEnum2[BreedEnum2["Cra"] = 9] = "Cra";
  BreedEnum2[BreedEnum2["Sadida"] = 10] = "Sadida";
  BreedEnum2[BreedEnum2["Sacrieur"] = 11] = "Sacrieur";
  BreedEnum2[BreedEnum2["Pandawa"] = 12] = "Pandawa";
  BreedEnum2[BreedEnum2["Roublard"] = 13] = "Roublard";
  BreedEnum2[BreedEnum2["Zobal"] = 14] = "Zobal";
  BreedEnum2[BreedEnum2["Steamer"] = 15] = "Steamer";
  BreedEnum2[BreedEnum2["Eliotrope"] = 16] = "Eliotrope";
  BreedEnum2[BreedEnum2["Huppermage"] = 17] = "Huppermage";
  BreedEnum2[BreedEnum2["Ouginak"] = 18] = "Ouginak";
  return BreedEnum2;
})(BreedEnum || {});
var NicknameErrorEnum = /* @__PURE__ */ ((NicknameErrorEnum2) => {
  NicknameErrorEnum2[NicknameErrorEnum2["ALREADY_USED"] = 1] = "ALREADY_USED";
  NicknameErrorEnum2[NicknameErrorEnum2["SAME_AS_LOGIN"] = 2] = "SAME_AS_LOGIN";
  NicknameErrorEnum2[NicknameErrorEnum2["TOO_SIMILAR_TO_LOGIN"] = 3] = "TOO_SIMILAR_TO_LOGIN";
  NicknameErrorEnum2[NicknameErrorEnum2["INVALID_NICK"] = 4] = "INVALID_NICK";
  NicknameErrorEnum2[NicknameErrorEnum2["UNKNOWN_NICK_ERROR"] = 99] = "UNKNOWN_NICK_ERROR";
  return NicknameErrorEnum2;
})(NicknameErrorEnum || {});
var ForgettableSpellClientActionEnum = /* @__PURE__ */ ((ForgettableSpellClientActionEnum2) => {
  ForgettableSpellClientActionEnum2[ForgettableSpellClientActionEnum2["FORGETTABLE_SPELL_FORGET"] = 0] = "FORGETTABLE_SPELL_FORGET";
  ForgettableSpellClientActionEnum2[ForgettableSpellClientActionEnum2["FORGETTABLE_SPELL_EQUIP"] = 1] = "FORGETTABLE_SPELL_EQUIP";
  ForgettableSpellClientActionEnum2[ForgettableSpellClientActionEnum2["FORGETTABLE_SPELL_UNEQUIP"] = 2] = "FORGETTABLE_SPELL_UNEQUIP";
  return ForgettableSpellClientActionEnum2;
})(ForgettableSpellClientActionEnum || {});
var SavablePresetTypeEnum = /* @__PURE__ */ ((SavablePresetTypeEnum2) => {
  SavablePresetTypeEnum2[SavablePresetTypeEnum2["CHARACTER_BUILD"] = 0] = "CHARACTER_BUILD";
  SavablePresetTypeEnum2[SavablePresetTypeEnum2["SPELL_PRESET"] = 1] = "SPELL_PRESET";
  return SavablePresetTypeEnum2;
})(SavablePresetTypeEnum || {});
var ExchangeHandleMountStableTypeEnum = /* @__PURE__ */ ((ExchangeHandleMountStableTypeEnum2) => {
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_MOUNTSTABLES_PUT"] = 1] = "EXCHANGE_MOUNTSTABLES_PUT";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_MOUNTSTABLES_GET"] = 2] = "EXCHANGE_MOUNTSTABLES_GET";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_MOUNTSTABLES_FREE"] = 3] = "EXCHANGE_MOUNTSTABLES_FREE";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_MOUNTSTABLES_CERTIF"] = 4] = "EXCHANGE_MOUNTSTABLES_CERTIF";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_MOUNTSTABLES_UNCERTIF"] = 5] = "EXCHANGE_MOUNTSTABLES_UNCERTIF";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_MOUNTPADDOCK_PUT"] = 6] = "EXCHANGE_MOUNTPADDOCK_PUT";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_MOUNTPADDOCK_GET"] = 7] = "EXCHANGE_MOUNTPADDOCK_GET";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_MOUNTPADDOCK_FREE"] = 8] = "EXCHANGE_MOUNTPADDOCK_FREE";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_EQUIPED_MOUNTPADDOCK_PUT"] = 9] = "EXCHANGE_EQUIPED_MOUNTPADDOCK_PUT";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_EQUIPED_MOUNTPADDOCK_GET"] = 10] = "EXCHANGE_EQUIPED_MOUNTPADDOCK_GET";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_EQUIPED_FREE"] = 11] = "EXCHANGE_EQUIPED_FREE";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_CERTIFICAT_FREE"] = 12] = "EXCHANGE_CERTIFICAT_FREE";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_EQUIPED_CERTIF"] = 13] = "EXCHANGE_EQUIPED_CERTIF";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_MOUNTPADDOCK_CERTIF"] = 14] = "EXCHANGE_MOUNTPADDOCK_CERTIF";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_UNCERTIF_TO_EQUIPED"] = 15] = "EXCHANGE_UNCERTIF_TO_EQUIPED";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_UNCERTIF_TO_PADDOCK"] = 16] = "EXCHANGE_UNCERTIF_TO_PADDOCK";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_MOUNTSTABLES_STERILIZE"] = 17] = "EXCHANGE_MOUNTSTABLES_STERILIZE";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_EQUIPED_STERILIZE"] = 18] = "EXCHANGE_EQUIPED_STERILIZE";
  ExchangeHandleMountStableTypeEnum2[ExchangeHandleMountStableTypeEnum2["EXCHANGE_MOUNTPADDOCK_STERILIZE"] = 19] = "EXCHANGE_MOUNTPADDOCK_STERILIZE";
  return ExchangeHandleMountStableTypeEnum2;
})(ExchangeHandleMountStableTypeEnum || {});
var AlliancePrismModuleTypeEnum = /* @__PURE__ */ ((AlliancePrismModuleTypeEnum2) => {
  AlliancePrismModuleTypeEnum2[AlliancePrismModuleTypeEnum2["TELEPORTER"] = 0] = "TELEPORTER";
  AlliancePrismModuleTypeEnum2[AlliancePrismModuleTypeEnum2["RECYCLER"] = 1] = "RECYCLER";
  return AlliancePrismModuleTypeEnum2;
})(AlliancePrismModuleTypeEnum || {});
var PlayableBreedEnum = /* @__PURE__ */ ((PlayableBreedEnum2) => {
  PlayableBreedEnum2[PlayableBreedEnum2["UNDEFINED"] = 0] = "UNDEFINED";
  PlayableBreedEnum2[PlayableBreedEnum2["Feca"] = 1] = "Feca";
  PlayableBreedEnum2[PlayableBreedEnum2["Osamodas"] = 2] = "Osamodas";
  PlayableBreedEnum2[PlayableBreedEnum2["Enutrof"] = 3] = "Enutrof";
  PlayableBreedEnum2[PlayableBreedEnum2["Sram"] = 4] = "Sram";
  PlayableBreedEnum2[PlayableBreedEnum2["Xelor"] = 5] = "Xelor";
  PlayableBreedEnum2[PlayableBreedEnum2["Ecaflip"] = 6] = "Ecaflip";
  PlayableBreedEnum2[PlayableBreedEnum2["Eniripsa"] = 7] = "Eniripsa";
  PlayableBreedEnum2[PlayableBreedEnum2["Iop"] = 8] = "Iop";
  PlayableBreedEnum2[PlayableBreedEnum2["Cra"] = 9] = "Cra";
  PlayableBreedEnum2[PlayableBreedEnum2["Sadida"] = 10] = "Sadida";
  PlayableBreedEnum2[PlayableBreedEnum2["Sacrieur"] = 11] = "Sacrieur";
  PlayableBreedEnum2[PlayableBreedEnum2["Pandawa"] = 12] = "Pandawa";
  PlayableBreedEnum2[PlayableBreedEnum2["Roublard"] = 13] = "Roublard";
  PlayableBreedEnum2[PlayableBreedEnum2["Zobal"] = 14] = "Zobal";
  PlayableBreedEnum2[PlayableBreedEnum2["Steamer"] = 15] = "Steamer";
  PlayableBreedEnum2[PlayableBreedEnum2["Eliotrope"] = 16] = "Eliotrope";
  PlayableBreedEnum2[PlayableBreedEnum2["Huppermage"] = 17] = "Huppermage";
  PlayableBreedEnum2[PlayableBreedEnum2["Ouginak"] = 18] = "Ouginak";
  return PlayableBreedEnum2;
})(PlayableBreedEnum || {});
var HavenBagRoomActionEnum = /* @__PURE__ */ ((HavenBagRoomActionEnum2) => {
  HavenBagRoomActionEnum2[HavenBagRoomActionEnum2["HAVEN_BAG_ROOM_DISPATCH"] = 0] = "HAVEN_BAG_ROOM_DISPATCH";
  HavenBagRoomActionEnum2[HavenBagRoomActionEnum2["HAVEN_BAG_ROOM_UPDATE"] = 1] = "HAVEN_BAG_ROOM_UPDATE";
  return HavenBagRoomActionEnum2;
})(HavenBagRoomActionEnum || {});
var SubscriptionRequiredEnum = /* @__PURE__ */ ((SubscriptionRequiredEnum2) => {
  SubscriptionRequiredEnum2[SubscriptionRequiredEnum2["LIMITED_TO_SUBSCRIBER"] = 0] = "LIMITED_TO_SUBSCRIBER";
  SubscriptionRequiredEnum2[SubscriptionRequiredEnum2["LIMIT_ON_JOB_XP"] = 1] = "LIMIT_ON_JOB_XP";
  SubscriptionRequiredEnum2[SubscriptionRequiredEnum2["LIMIT_ON_JOB_USE"] = 2] = "LIMIT_ON_JOB_USE";
  SubscriptionRequiredEnum2[SubscriptionRequiredEnum2["LIMIT_ON_MAP"] = 3] = "LIMIT_ON_MAP";
  SubscriptionRequiredEnum2[SubscriptionRequiredEnum2["LIMIT_ON_ITEM"] = 4] = "LIMIT_ON_ITEM";
  SubscriptionRequiredEnum2[SubscriptionRequiredEnum2["LIMIT_ON_VENDOR"] = 5] = "LIMIT_ON_VENDOR";
  SubscriptionRequiredEnum2[SubscriptionRequiredEnum2["LIMIT_ON_HAVENBAG"] = 6] = "LIMIT_ON_HAVENBAG";
  return SubscriptionRequiredEnum2;
})(SubscriptionRequiredEnum || {});
var GuildRightsBitEnum = /* @__PURE__ */ ((GuildRightsBitEnum2) => {
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_NONE"] = 0] = "GUILD_RIGHT_NONE";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_BOSS"] = 1] = "GUILD_RIGHT_BOSS";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_MANAGE_GUILD_BOOSTS"] = 2] = "GUILD_RIGHT_MANAGE_GUILD_BOOSTS";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_MANAGE_RIGHTS"] = 4] = "GUILD_RIGHT_MANAGE_RIGHTS";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_INVITE_NEW_MEMBERS"] = 8] = "GUILD_RIGHT_INVITE_NEW_MEMBERS";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_BAN_MEMBERS"] = 16] = "GUILD_RIGHT_BAN_MEMBERS";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_MANAGE_XP_CONTRIBUTION"] = 32] = "GUILD_RIGHT_MANAGE_XP_CONTRIBUTION";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_MANAGE_RANKS"] = 64] = "GUILD_RIGHT_MANAGE_RANKS";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_HIRE_TAX_COLLECTOR"] = 128] = "GUILD_RIGHT_HIRE_TAX_COLLECTOR";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_MANAGE_MY_XP_CONTRIBUTION"] = 256] = "GUILD_RIGHT_MANAGE_MY_XP_CONTRIBUTION";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_COLLECT"] = 512] = "GUILD_RIGHT_COLLECT";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_USE_PADDOCKS"] = 4096] = "GUILD_RIGHT_USE_PADDOCKS";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_ORGANIZE_PADDOCKS"] = 8192] = "GUILD_RIGHT_ORGANIZE_PADDOCKS";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_TAKE_OTHERS_MOUNTS_IN_PADDOCKS"] = 16384] = "GUILD_RIGHT_TAKE_OTHERS_MOUNTS_IN_PADDOCKS";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_DEFENSE_PRIORITY"] = 32768] = "GUILD_RIGHT_DEFENSE_PRIORITY";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_COLLECT_MY_TAX_COLLECTOR"] = 65536] = "GUILD_RIGHT_COLLECT_MY_TAX_COLLECTOR";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_SET_ALLIANCE_PRISM"] = 131072] = "GUILD_RIGHT_SET_ALLIANCE_PRISM";
  GuildRightsBitEnum2[GuildRightsBitEnum2["GUILD_RIGHT_TALK_IN_ALLIANCE_CHAN"] = 262144] = "GUILD_RIGHT_TALK_IN_ALLIANCE_CHAN";
  return GuildRightsBitEnum2;
})(GuildRightsBitEnum || {});
var GameContextActorPositionInformations = class extends DofusType {
  static id = 1244;
  id = 1244;
  contextualId = 0;
  disposition;
  constructor(contextualId, disposition) {
    super();
    this.contextualId = contextualId;
    this.disposition = disposition;
  }
  serialize(writer) {
    writer.writeDouble(this.contextualId);
    writer.writeShort(this.disposition.id);
    this.disposition.serialize(writer);
  }
  deserialize(reader) {
    this.contextualId = reader.readDouble();
    const dispositionTypeId = reader.readShort();
    this.disposition = new types[dispositionTypeId]();
    this.disposition.deserialize(reader);
  }
};
var GameContextActorInformations = class extends GameContextActorPositionInformations {
  static id = 801;
  id = 801;
  look;
  constructor(contextualId, disposition, look) {
    super(contextualId, disposition);
    this.look = look;
  }
  serialize(writer) {
    this.look.serialize(writer);
  }
  deserialize(reader) {
    this.look = new EntityLook();
    this.look.deserialize(reader);
  }
};
var GameRolePlayActorInformations = class extends GameContextActorInformations {
  static id = 102;
  id = 102;
  constructor(contextualId, disposition, look) {
    super(contextualId, disposition, look);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GameRolePlayGroupMonsterInformations = class extends GameRolePlayActorInformations {
  static id = 3148;
  id = 3148;
  lootShare = 0;
  staticInfos;
  alignmentSide = 0;
  keyRingBonus = false;
  hasHardcoreDrop = false;
  hasAVARewardToken = false;
  constructor(contextualId, disposition, look, lootShare, staticInfos, alignmentSide, keyRingBonus, hasHardcoreDrop, hasAVARewardToken) {
    super(contextualId, disposition, look);
    this.lootShare = lootShare;
    this.staticInfos = staticInfos;
    this.alignmentSide = alignmentSide;
    this.keyRingBonus = keyRingBonus;
    this.hasHardcoreDrop = hasHardcoreDrop;
    this.hasAVARewardToken = hasAVARewardToken;
  }
  serialize(writer) {
    writer.writeByte(this.lootShare);
    writer.writeShort(this.staticInfos.id);
    this.staticInfos.serialize(writer);
    writer.writeByte(this.alignmentSide);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.keyRingBonus);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.hasHardcoreDrop);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 2, this.hasAVARewardToken);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.lootShare = reader.readByte();
    const staticInfosTypeId = reader.readShort();
    this.staticInfos = new types[staticInfosTypeId]();
    this.staticInfos.deserialize(reader);
    this.alignmentSide = reader.readByte();
    const box0 = reader.readByte();
    this.keyRingBonus = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.hasHardcoreDrop = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
    this.hasAVARewardToken = (0, import_hetwan2.bigEndianGetFlag)(box0, 2);
  }
};
var HavenBagRoomPreviewInformation = class extends DofusType {
  static id = 8913;
  id = 8913;
  themeId = 0;
  roomId = 0;
  constructor(themeId, roomId) {
    super();
    this.themeId = themeId;
    this.roomId = roomId;
  }
  serialize(writer) {
    writer.writeByte(this.themeId);
    writer.writeByte(this.roomId);
  }
  deserialize(reader) {
    this.themeId = reader.readByte();
    this.roomId = reader.readByte();
  }
};
var InteractiveElement = class extends DofusType {
  static id = 4768;
  id = 4768;
  elementTypeId = 0;
  elementId = 0;
  disabledSkills;
  enabledSkills;
  onCurrentMap = false;
  constructor(elementTypeId, elementId, disabledSkills, enabledSkills, onCurrentMap) {
    super();
    this.elementTypeId = elementTypeId;
    this.elementId = elementId;
    this.disabledSkills = disabledSkills;
    this.enabledSkills = enabledSkills;
    this.onCurrentMap = onCurrentMap;
  }
  serialize(writer) {
    writer.writeInt(this.elementTypeId);
    writer.writeInt(this.elementId);
    writer.writeShort(this.disabledSkills.length);
    this.disabledSkills.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.enabledSkills.length);
    this.enabledSkills.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeBoolean(this.onCurrentMap);
  }
  deserialize(reader) {
    this.elementTypeId = reader.readInt();
    this.elementId = reader.readInt();
    this.disabledSkills = [];
    const countDisabledSkills = reader.readShort();
    for (let i = 0; i < countDisabledSkills; i++) {
      const disabledSkillsTypeId = reader.readShort();
      const type = new types[disabledSkillsTypeId]();
      type.deserialize(reader);
      this.disabledSkills.push(type);
    }
    this.enabledSkills = [];
    const countEnabledSkills = reader.readShort();
    for (let i = 0; i < countEnabledSkills; i++) {
      const enabledSkillsTypeId = reader.readShort();
      const type = new types[enabledSkillsTypeId]();
      type.deserialize(reader);
      this.enabledSkills.push(type);
    }
    this.onCurrentMap = reader.readBoolean();
  }
};
var GameFightFighterInformations = class extends GameContextActorInformations {
  static id = 5068;
  id = 5068;
  wave = 0;
  spawnInfo;
  previousPositions;
  stats;
  constructor(contextualId, disposition, look, wave, spawnInfo, previousPositions, stats) {
    super(contextualId, disposition, look);
    this.wave = wave;
    this.spawnInfo = spawnInfo;
    this.previousPositions = previousPositions;
    this.stats = stats;
  }
  serialize(writer) {
    writer.writeByte(this.wave);
    this.spawnInfo.serialize(writer);
    writer.writeShort(this.previousPositions.length);
    this.previousPositions.forEach(
      (current) => writer.writeVarShort(current)
    );
    writer.writeShort(this.stats.id);
    this.stats.serialize(writer);
  }
  deserialize(reader) {
    this.wave = reader.readByte();
    this.spawnInfo = new GameContextBasicSpawnInformation();
    this.spawnInfo.deserialize(reader);
    this.previousPositions = [];
    const countPreviousPositions = reader.readShort();
    for (let i = 0; i < countPreviousPositions; i++) {
      this.previousPositions.push(reader.readVarShort());
    }
    const statsTypeId = reader.readShort();
    this.stats = new types[statsTypeId]();
    this.stats.deserialize(reader);
  }
};
var GameFightEntityInformation = class extends GameFightFighterInformations {
  static id = 5544;
  id = 5544;
  entityModelId = 0;
  masterId = 0;
  level = 0;
  constructor(contextualId, disposition, look, wave, spawnInfo, previousPositions, stats, entityModelId, masterId, level) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats
    );
    this.entityModelId = entityModelId;
    this.masterId = masterId;
    this.level = level;
  }
  serialize(writer) {
    writer.writeByte(this.entityModelId);
    writer.writeDouble(this.masterId);
    writer.writeVarShort(this.level);
  }
  deserialize(reader) {
    this.entityModelId = reader.readByte();
    this.masterId = reader.readDouble();
    this.level = reader.readVarShort();
  }
};
var GameRolePlayPrismInformations = class extends GameRolePlayActorInformations {
  static id = 6265;
  id = 6265;
  prism;
  constructor(contextualId, disposition, look, prism) {
    super(contextualId, disposition, look);
    this.prism = prism;
  }
  serialize(writer) {
    writer.writeShort(this.prism.id);
    this.prism.serialize(writer);
  }
  deserialize(reader) {
    const prismTypeId = reader.readShort();
    this.prism = new types[prismTypeId]();
    this.prism.deserialize(reader);
  }
};
var GameFightAIInformations = class extends GameFightFighterInformations {
  static id = 858;
  id = 858;
  constructor(contextualId, disposition, look, wave, spawnInfo, previousPositions, stats) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats
    );
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GameFightMonsterInformations = class extends GameFightAIInformations {
  static id = 1922;
  id = 1922;
  creatureLevel = 0;
  creatureGenericId = 0;
  creatureGrade = 0;
  constructor(contextualId, disposition, look, wave, spawnInfo, previousPositions, stats, creatureLevel, creatureGenericId, creatureGrade) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats
    );
    this.creatureLevel = creatureLevel;
    this.creatureGenericId = creatureGenericId;
    this.creatureGrade = creatureGrade;
  }
  serialize(writer) {
    writer.writeShort(this.creatureLevel);
    writer.writeVarShort(this.creatureGenericId);
    writer.writeByte(this.creatureGrade);
  }
  deserialize(reader) {
    this.creatureLevel = reader.readShort();
    this.creatureGenericId = reader.readVarShort();
    this.creatureGrade = reader.readByte();
  }
};
var GameRolePlayGroupMonsterWaveInformations = class extends GameRolePlayGroupMonsterInformations {
  static id = 5382;
  id = 5382;
  nbWaves = 0;
  alternatives;
  constructor(contextualId, disposition, look, lootShare, staticInfos, alignmentSide, keyRingBonus, hasHardcoreDrop, hasAVARewardToken, nbWaves, alternatives) {
    super(
      contextualId,
      disposition,
      look,
      lootShare,
      staticInfos,
      alignmentSide,
      keyRingBonus,
      hasHardcoreDrop,
      hasAVARewardToken
    );
    this.nbWaves = nbWaves;
    this.alternatives = alternatives;
  }
  serialize(writer) {
    writer.writeByte(this.nbWaves);
    writer.writeShort(this.alternatives.length);
    this.alternatives.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.nbWaves = reader.readByte();
    this.alternatives = [];
    const countAlternatives = reader.readShort();
    for (let i = 0; i < countAlternatives; i++) {
      const alternativesTypeId = reader.readShort();
      const type = new types[alternativesTypeId]();
      type.deserialize(reader);
      this.alternatives.push(type);
    }
  }
};
var GameRolePlayTaxCollectorInformations = class extends GameRolePlayActorInformations {
  static id = 5071;
  id = 5071;
  identification;
  taxCollectorAttack = 0;
  guildLevel = 0;
  constructor(contextualId, disposition, look, identification, taxCollectorAttack, guildLevel) {
    super(contextualId, disposition, look);
    this.identification = identification;
    this.taxCollectorAttack = taxCollectorAttack;
    this.guildLevel = guildLevel;
  }
  serialize(writer) {
    writer.writeShort(this.identification.id);
    this.identification.serialize(writer);
    writer.writeInt(this.taxCollectorAttack);
    writer.writeByte(this.guildLevel);
  }
  deserialize(reader) {
    const identificationTypeId = reader.readShort();
    this.identification = new types[identificationTypeId]();
    this.identification.deserialize(reader);
    this.taxCollectorAttack = reader.readInt();
    this.guildLevel = reader.readByte();
  }
};
var GameRolePlayNamedActorInformations = class extends GameRolePlayActorInformations {
  static id = 6660;
  id = 6660;
  name;
  constructor(contextualId, disposition, look, name) {
    super(contextualId, disposition, look);
    this.name = name;
  }
  serialize(writer) {
    writer.writeUTF(this.name);
  }
  deserialize(reader) {
    this.name = reader.readUTF();
  }
};
var GameRolePlayMountInformations = class extends GameRolePlayNamedActorInformations {
  static id = 9304;
  id = 9304;
  level = 0;
  ownerName;
  constructor(contextualId, disposition, look, name, level, ownerName) {
    super(contextualId, disposition, look, name);
    this.level = level;
    this.ownerName = ownerName;
  }
  serialize(writer) {
    writer.writeByte(this.level);
    writer.writeUTF(this.ownerName);
  }
  deserialize(reader) {
    this.level = reader.readByte();
    this.ownerName = reader.readUTF();
  }
};
var GameRolePlayNpcInformations = class extends GameRolePlayActorInformations {
  static id = 7419;
  id = 7419;
  specialArtworkId = 0;
  npcId = 0;
  sex = false;
  constructor(contextualId, disposition, look, specialArtworkId, npcId, sex) {
    super(contextualId, disposition, look);
    this.specialArtworkId = specialArtworkId;
    this.npcId = npcId;
    this.sex = sex;
  }
  serialize(writer) {
    writer.writeVarShort(this.specialArtworkId);
    writer.writeVarShort(this.npcId);
    writer.writeBoolean(this.sex);
  }
  deserialize(reader) {
    this.specialArtworkId = reader.readVarShort();
    this.npcId = reader.readVarShort();
    this.sex = reader.readBoolean();
  }
};
var GameRolePlayNpcWithQuestInformations = class extends GameRolePlayNpcInformations {
  static id = 3824;
  id = 3824;
  questFlag;
  constructor(contextualId, disposition, look, specialArtworkId, npcId, sex, questFlag) {
    super(contextualId, disposition, look, specialArtworkId, npcId, sex);
    this.questFlag = questFlag;
  }
  serialize(writer) {
    this.questFlag.serialize(writer);
  }
  deserialize(reader) {
    this.questFlag = new GameRolePlayNpcQuestFlag();
    this.questFlag.deserialize(reader);
  }
};
var GameRolePlayMerchantInformations = class extends GameRolePlayNamedActorInformations {
  static id = 3425;
  id = 3425;
  sellType = 0;
  options;
  constructor(contextualId, disposition, look, name, sellType, options) {
    super(contextualId, disposition, look, name);
    this.sellType = sellType;
    this.options = options;
  }
  serialize(writer) {
    writer.writeByte(this.sellType);
    writer.writeShort(this.options.length);
    this.options.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.sellType = reader.readByte();
    this.options = [];
    const countOptions = reader.readShort();
    for (let i = 0; i < countOptions; i++) {
      const optionsTypeId = reader.readShort();
      const type = new types[optionsTypeId]();
      type.deserialize(reader);
      this.options.push(type);
    }
  }
};
var GameRolePlayHumanoidInformations = class extends GameRolePlayNamedActorInformations {
  static id = 345;
  id = 345;
  humanoidInfo;
  accountId = 0;
  constructor(contextualId, disposition, look, name, humanoidInfo, accountId) {
    super(contextualId, disposition, look, name);
    this.humanoidInfo = humanoidInfo;
    this.accountId = accountId;
  }
  serialize(writer) {
    writer.writeShort(this.humanoidInfo.id);
    this.humanoidInfo.serialize(writer);
    writer.writeInt(this.accountId);
  }
  deserialize(reader) {
    const humanoidInfoTypeId = reader.readShort();
    this.humanoidInfo = new types[humanoidInfoTypeId]();
    this.humanoidInfo.deserialize(reader);
    this.accountId = reader.readInt();
  }
};
var GameRolePlayCharacterInformations = class extends GameRolePlayHumanoidInformations {
  static id = 9532;
  id = 9532;
  alignmentInfos;
  constructor(contextualId, disposition, look, name, humanoidInfo, accountId, alignmentInfos) {
    super(contextualId, disposition, look, name, humanoidInfo, accountId);
    this.alignmentInfos = alignmentInfos;
  }
  serialize(writer) {
    this.alignmentInfos.serialize(writer);
  }
  deserialize(reader) {
    this.alignmentInfos = new ActorAlignmentInformations();
    this.alignmentInfos.deserialize(reader);
  }
};
var GameRolePlayPortalInformations = class extends GameRolePlayActorInformations {
  static id = 8125;
  id = 8125;
  portal;
  constructor(contextualId, disposition, look, portal) {
    super(contextualId, disposition, look);
    this.portal = portal;
  }
  serialize(writer) {
    writer.writeShort(this.portal.id);
    this.portal.serialize(writer);
  }
  deserialize(reader) {
    const portalTypeId = reader.readShort();
    this.portal = new types[portalTypeId]();
    this.portal.deserialize(reader);
  }
};
var GameRolePlayMutantInformations = class extends GameRolePlayHumanoidInformations {
  static id = 4120;
  id = 4120;
  powerLevel = 0;
  monsterId = 0;
  constructor(contextualId, disposition, look, name, humanoidInfo, accountId, powerLevel, monsterId) {
    super(contextualId, disposition, look, name, humanoidInfo, accountId);
    this.powerLevel = powerLevel;
    this.monsterId = monsterId;
  }
  serialize(writer) {
    writer.writeByte(this.powerLevel);
    writer.writeVarShort(this.monsterId);
  }
  deserialize(reader) {
    this.powerLevel = reader.readByte();
    this.monsterId = reader.readVarShort();
  }
};
var GameFightFighterNamedInformations = class extends GameFightFighterInformations {
  static id = 7293;
  id = 7293;
  status;
  name;
  hiddenInPrefight = false;
  leagueId = 0;
  ladderPosition = 0;
  constructor(contextualId, disposition, look, wave, spawnInfo, previousPositions, stats, status, name, hiddenInPrefight, leagueId, ladderPosition) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats
    );
    this.status = status;
    this.name = name;
    this.hiddenInPrefight = hiddenInPrefight;
    this.leagueId = leagueId;
    this.ladderPosition = ladderPosition;
  }
  serialize(writer) {
    this.status.serialize(writer);
    writer.writeUTF(this.name);
    writer.writeBoolean(this.hiddenInPrefight);
    writer.writeVarShort(this.leagueId);
    writer.writeInt(this.ladderPosition);
  }
  deserialize(reader) {
    this.status = new PlayerStatus();
    this.status.deserialize(reader);
    this.name = reader.readUTF();
    this.hiddenInPrefight = reader.readBoolean();
    this.leagueId = reader.readVarShort();
    this.ladderPosition = reader.readInt();
  }
};
var GameFightCharacterInformations = class extends GameFightFighterNamedInformations {
  static id = 2405;
  id = 2405;
  sex = false;
  breed = 0;
  level = 0;
  alignmentInfos;
  constructor(contextualId, disposition, look, wave, spawnInfo, previousPositions, stats, status, name, hiddenInPrefight, leagueId, ladderPosition, sex, breed, level, alignmentInfos) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats,
      status,
      name,
      hiddenInPrefight,
      leagueId,
      ladderPosition
    );
    this.sex = sex;
    this.breed = breed;
    this.level = level;
    this.alignmentInfos = alignmentInfos;
  }
  serialize(writer) {
    writer.writeBoolean(this.sex);
    writer.writeByte(this.breed);
    writer.writeVarShort(this.level);
    this.alignmentInfos.serialize(writer);
  }
  deserialize(reader) {
    this.sex = reader.readBoolean();
    this.breed = reader.readByte();
    this.level = reader.readVarShort();
    this.alignmentInfos = new ActorAlignmentInformations();
    this.alignmentInfos.deserialize(reader);
  }
};
var GameFightTaxCollectorInformations = class extends GameFightAIInformations {
  static id = 5235;
  id = 5235;
  level = 0;
  firstNameId = 0;
  lastNameId = 0;
  constructor(contextualId, disposition, look, wave, spawnInfo, previousPositions, stats, level, firstNameId, lastNameId) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats
    );
    this.level = level;
    this.firstNameId = firstNameId;
    this.lastNameId = lastNameId;
  }
  serialize(writer) {
    writer.writeByte(this.level);
    writer.writeVarShort(this.firstNameId);
    writer.writeVarShort(this.lastNameId);
  }
  deserialize(reader) {
    this.level = reader.readByte();
    this.firstNameId = reader.readVarShort();
    this.lastNameId = reader.readVarShort();
  }
};
var EntityLook = class extends DofusType {
  static id = 9546;
  id = 9546;
  skins;
  subentities;
  bonesId = 0;
  indexedColors;
  scales;
  constructor(skins, subentities, bonesId, indexedColors, scales) {
    super();
    this.skins = skins;
    this.subentities = subentities;
    this.bonesId = bonesId;
    this.indexedColors = indexedColors;
    this.scales = scales;
  }
  serialize(writer) {
    writer.writeShort(this.skins.length);
    this.skins.forEach((current) => writer.writeVarShort(current));
    writer.writeShort(this.subentities.length);
    this.subentities.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.bonesId);
    writer.writeShort(this.indexedColors.length);
    this.indexedColors.forEach((current) => writer.writeInt(current));
    writer.writeShort(this.scales.length);
    this.scales.forEach((current) => writer.writeVarShort(current));
  }
  deserialize(reader) {
    this.skins = [];
    const countSkins = reader.readShort();
    for (let i = 0; i < countSkins; i++) {
      this.skins.push(reader.readVarShort());
    }
    this.subentities = [];
    const countSubentities = reader.readShort();
    for (let i = 0; i < countSubentities; i++) {
      const type = new SubEntity();
      type.deserialize(reader);
      this.subentities.push(type);
    }
    this.bonesId = reader.readVarShort();
    this.indexedColors = [];
    const countIndexedColors = reader.readShort();
    for (let i = 0; i < countIndexedColors; i++) {
      this.indexedColors.push(reader.readInt());
    }
    this.scales = [];
    const countScales = reader.readShort();
    for (let i = 0; i < countScales; i++) {
      this.scales.push(reader.readVarShort());
    }
  }
};
var SubEntity = class extends DofusType {
  static id = 8670;
  id = 8670;
  subEntityLook;
  bindingPointCategory = 0;
  bindingPointIndex = 0;
  constructor(subEntityLook, bindingPointCategory, bindingPointIndex) {
    super();
    this.subEntityLook = subEntityLook;
    this.bindingPointCategory = bindingPointCategory;
    this.bindingPointIndex = bindingPointIndex;
  }
  serialize(writer) {
    this.subEntityLook.serialize(writer);
    writer.writeByte(this.bindingPointCategory);
    writer.writeByte(this.bindingPointIndex);
  }
  deserialize(reader) {
    this.subEntityLook = new EntityLook();
    this.subEntityLook.deserialize(reader);
    this.bindingPointCategory = reader.readByte();
    this.bindingPointIndex = reader.readByte();
  }
};
var AbstractFightDispellableEffect = class extends DofusType {
  static id = 1657;
  id = 1657;
  parentBoostUid = 0;
  effectId = 0;
  targetId = 0;
  uid = 0;
  turnDuration = 0;
  spellId = 0;
  dispelable = 1;
  constructor(parentBoostUid, effectId, targetId, uid, turnDuration, spellId, dispelable) {
    super();
    this.parentBoostUid = parentBoostUid;
    this.effectId = effectId;
    this.targetId = targetId;
    this.uid = uid;
    this.turnDuration = turnDuration;
    this.spellId = spellId;
    this.dispelable = dispelable;
  }
  serialize(writer) {
    writer.writeVarInt(this.parentBoostUid);
    writer.writeVarInt(this.effectId);
    writer.writeDouble(this.targetId);
    writer.writeVarInt(this.uid);
    writer.writeShort(this.turnDuration);
    writer.writeVarShort(this.spellId);
    writer.writeByte(this.dispelable);
  }
  deserialize(reader) {
    this.parentBoostUid = reader.readVarInt();
    this.effectId = reader.readVarInt();
    this.targetId = reader.readDouble();
    this.uid = reader.readVarInt();
    this.turnDuration = reader.readShort();
    this.spellId = reader.readVarShort();
    this.dispelable = reader.readByte();
  }
};
var GameContextSummonsInformation = class extends DofusType {
  static id = 253;
  id = 253;
  wave = 0;
  spawnInformation;
  summons;
  look;
  stats;
  constructor(wave, spawnInformation, summons, look, stats) {
    super();
    this.wave = wave;
    this.spawnInformation = spawnInformation;
    this.summons = summons;
    this.look = look;
    this.stats = stats;
  }
  serialize(writer) {
    writer.writeByte(this.wave);
    writer.writeShort(this.spawnInformation.id);
    this.spawnInformation.serialize(writer);
    writer.writeShort(this.summons.length);
    this.summons.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    this.look.serialize(writer);
    writer.writeShort(this.stats.id);
    this.stats.serialize(writer);
  }
  deserialize(reader) {
    this.wave = reader.readByte();
    const spawnInformationTypeId = reader.readShort();
    this.spawnInformation = new types[spawnInformationTypeId]();
    this.spawnInformation.deserialize(reader);
    this.summons = [];
    const countSummons = reader.readShort();
    for (let i = 0; i < countSummons; i++) {
      const summonsTypeId = reader.readShort();
      const type = new types[summonsTypeId]();
      type.deserialize(reader);
      this.summons.push(type);
    }
    this.look = new EntityLook();
    this.look.deserialize(reader);
    const statsTypeId = reader.readShort();
    this.stats = new types[statsTypeId]();
    this.stats.deserialize(reader);
  }
};
var FightTemporaryBoostEffect = class extends AbstractFightDispellableEffect {
  static id = 7366;
  id = 7366;
  delta = 0;
  constructor(parentBoostUid, effectId, targetId, uid, turnDuration, spellId, dispelable, delta) {
    super(
      parentBoostUid,
      effectId,
      targetId,
      uid,
      turnDuration,
      spellId,
      dispelable
    );
    this.delta = delta;
  }
  serialize(writer) {
    writer.writeInt(this.delta);
  }
  deserialize(reader) {
    this.delta = reader.readInt();
  }
};
var SpawnInformation = class extends DofusType {
  static id = 5149;
  id = 5149;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var SpawnCompanionInformation = class extends SpawnInformation {
  static id = 8892;
  id = 8892;
  summonerId = 0;
  modelId = 0;
  ownerId = 0;
  level = 0;
  constructor(summonerId, modelId, ownerId, level) {
    super();
    this.summonerId = summonerId;
    this.modelId = modelId;
    this.ownerId = ownerId;
    this.level = level;
  }
  serialize(writer) {
    writer.writeDouble(this.summonerId);
    writer.writeByte(this.modelId);
    writer.writeDouble(this.ownerId);
    writer.writeVarShort(this.level);
  }
  deserialize(reader) {
    this.summonerId = reader.readDouble();
    this.modelId = reader.readByte();
    this.ownerId = reader.readDouble();
    this.level = reader.readVarShort();
  }
};
var BaseSpawnMonsterInformation = class extends SpawnInformation {
  static id = 736;
  id = 736;
  creatureGenericId = 0;
  constructor(creatureGenericId) {
    super();
    this.creatureGenericId = creatureGenericId;
  }
  serialize(writer) {
    writer.writeVarShort(this.creatureGenericId);
  }
  deserialize(reader) {
    this.creatureGenericId = reader.readVarShort();
  }
};
var SpawnScaledMonsterInformation = class extends BaseSpawnMonsterInformation {
  static id = 6368;
  id = 6368;
  creatureLevel = 0;
  constructor(creatureGenericId, creatureLevel) {
    super(creatureGenericId);
    this.creatureLevel = creatureLevel;
  }
  serialize(writer) {
    writer.writeShort(this.creatureLevel);
  }
  deserialize(reader) {
    this.creatureLevel = reader.readShort();
  }
};
var GameContextBasicSpawnInformation = class extends DofusType {
  static id = 2015;
  id = 2015;
  teamId = 2;
  informations;
  alive = false;
  constructor(teamId, informations, alive) {
    super();
    this.teamId = teamId;
    this.informations = informations;
    this.alive = alive;
  }
  serialize(writer) {
    writer.writeByte(this.teamId);
    writer.writeShort(this.informations.id);
    this.informations.serialize(writer);
    writer.writeBoolean(this.alive);
  }
  deserialize(reader) {
    this.teamId = reader.readByte();
    const informationsTypeId = reader.readShort();
    this.informations = new types[informationsTypeId]();
    this.informations.deserialize(reader);
    this.alive = reader.readBoolean();
  }
};
var GameFightSpellCooldown = class extends DofusType {
  static id = 5389;
  id = 5389;
  cooldown = 0;
  spellId = 0;
  constructor(cooldown, spellId) {
    super();
    this.cooldown = cooldown;
    this.spellId = spellId;
  }
  serialize(writer) {
    writer.writeByte(this.cooldown);
    writer.writeInt(this.spellId);
  }
  deserialize(reader) {
    this.cooldown = reader.readByte();
    this.spellId = reader.readInt();
  }
};
var SpawnCharacterInformation = class extends SpawnInformation {
  static id = 457;
  id = 457;
  level = 0;
  name;
  constructor(level, name) {
    super();
    this.level = level;
    this.name = name;
  }
  serialize(writer) {
    writer.writeVarShort(this.level);
    writer.writeUTF(this.name);
  }
  deserialize(reader) {
    this.level = reader.readVarShort();
    this.name = reader.readUTF();
  }
};
var SpawnMonsterInformation = class extends BaseSpawnMonsterInformation {
  static id = 3120;
  id = 3120;
  creatureGrade = 0;
  constructor(creatureGenericId, creatureGrade) {
    super(creatureGenericId);
    this.creatureGrade = creatureGrade;
  }
  serialize(writer) {
    writer.writeByte(this.creatureGrade);
  }
  deserialize(reader) {
    this.creatureGrade = reader.readByte();
  }
};
var EntityDispositionInformations = class extends DofusType {
  static id = 7424;
  id = 7424;
  direction = 1;
  cellId = 0;
  constructor(direction, cellId) {
    super();
    this.direction = direction;
    this.cellId = cellId;
  }
  serialize(writer) {
    writer.writeByte(this.direction);
    writer.writeShort(this.cellId);
  }
  deserialize(reader) {
    this.direction = reader.readByte();
    this.cellId = reader.readShort();
  }
};
var HumanOption = class extends DofusType {
  static id = 693;
  id = 693;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var HumanOptionAlliance = class extends HumanOption {
  static id = 3939;
  id = 3939;
  allianceInformations;
  aggressable = 0;
  constructor(allianceInformations, aggressable) {
    super();
    this.allianceInformations = allianceInformations;
    this.aggressable = aggressable;
  }
  serialize(writer) {
    this.allianceInformations.serialize(writer);
    writer.writeByte(this.aggressable);
  }
  deserialize(reader) {
    this.allianceInformations = new AllianceInformations();
    this.allianceInformations.deserialize(reader);
    this.aggressable = reader.readByte();
  }
};
var HumanOptionFollowers = class extends HumanOption {
  static id = 77;
  id = 77;
  followingCharactersLook;
  constructor(followingCharactersLook) {
    super();
    this.followingCharactersLook = followingCharactersLook;
  }
  serialize(writer) {
    writer.writeShort(this.followingCharactersLook.length);
    this.followingCharactersLook.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.followingCharactersLook = [];
    const countFollowingCharactersLook = reader.readShort();
    for (let i = 0; i < countFollowingCharactersLook; i++) {
      const type = new IndexedEntityLook();
      type.deserialize(reader);
      this.followingCharactersLook.push(type);
    }
  }
};
var ActorOrientation = class extends DofusType {
  static id = 6459;
  id = 6459;
  direction = 1;
  id_ = 0;
  constructor(direction, id_) {
    super();
    this.direction = direction;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeByte(this.direction);
    writer.writeDouble(this.id_);
  }
  deserialize(reader) {
    this.direction = reader.readByte();
    this.id_ = reader.readDouble();
  }
};
var GroupMonsterStaticInformations = class extends DofusType {
  static id = 9226;
  id = 9226;
  mainCreatureLightInfos;
  underlings;
  constructor(mainCreatureLightInfos, underlings) {
    super();
    this.mainCreatureLightInfos = mainCreatureLightInfos;
    this.underlings = underlings;
  }
  serialize(writer) {
    this.mainCreatureLightInfos.serialize(writer);
    writer.writeShort(this.underlings.length);
    this.underlings.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.mainCreatureLightInfos = new MonsterInGroupLightInformations();
    this.mainCreatureLightInfos.deserialize(reader);
    this.underlings = [];
    const countUnderlings = reader.readShort();
    for (let i = 0; i < countUnderlings; i++) {
      const type = new MonsterInGroupInformations();
      type.deserialize(reader);
      this.underlings.push(type);
    }
  }
};
var HumanInformations = class extends DofusType {
  static id = 7547;
  id = 7547;
  restrictions;
  options;
  sex = false;
  constructor(restrictions, options, sex) {
    super();
    this.restrictions = restrictions;
    this.options = options;
    this.sex = sex;
  }
  serialize(writer) {
    this.restrictions.serialize(writer);
    writer.writeShort(this.options.length);
    this.options.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeBoolean(this.sex);
  }
  deserialize(reader) {
    this.restrictions = new ActorRestrictionsInformations();
    this.restrictions.deserialize(reader);
    this.options = [];
    const countOptions = reader.readShort();
    for (let i = 0; i < countOptions; i++) {
      const optionsTypeId = reader.readShort();
      const type = new types[optionsTypeId]();
      type.deserialize(reader);
      this.options.push(type);
    }
    this.sex = reader.readBoolean();
  }
};
var FightTeamMemberInformations = class extends DofusType {
  static id = 5640;
  id = 5640;
  id_ = 0;
  constructor(id_) {
    super();
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeDouble(this.id_);
  }
  deserialize(reader) {
    this.id_ = reader.readDouble();
  }
};
var HouseInformations = class extends DofusType {
  static id = 3346;
  id = 3346;
  modelId = 0;
  houseId = 0;
  constructor(modelId, houseId) {
    super();
    this.modelId = modelId;
    this.houseId = houseId;
  }
  serialize(writer) {
    writer.writeVarShort(this.modelId);
    writer.writeVarInt(this.houseId);
  }
  deserialize(reader) {
    this.modelId = reader.readVarShort();
    this.houseId = reader.readVarInt();
  }
};
var HouseOnMapInformations = class extends HouseInformations {
  static id = 8890;
  id = 8890;
  doorsOnMap;
  houseInstances;
  constructor(modelId, houseId, doorsOnMap, houseInstances) {
    super(modelId, houseId);
    this.doorsOnMap = doorsOnMap;
    this.houseInstances = houseInstances;
  }
  serialize(writer) {
    writer.writeShort(this.doorsOnMap.length);
    this.doorsOnMap.forEach((current) => writer.writeInt(current));
    writer.writeShort(this.houseInstances.length);
    this.houseInstances.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.doorsOnMap = [];
    const countDoorsOnMap = reader.readShort();
    for (let i = 0; i < countDoorsOnMap; i++) {
      this.doorsOnMap.push(reader.readInt());
    }
    this.houseInstances = [];
    const countHouseInstances = reader.readShort();
    for (let i = 0; i < countHouseInstances; i++) {
      const type = new HouseInstanceInformations();
      type.deserialize(reader);
      this.houseInstances.push(type);
    }
  }
};
var HumanOptionObjectUse = class extends HumanOption {
  static id = 1192;
  id = 1192;
  objectGID = 0;
  delayTypeId = 0;
  delayEndTime = 0;
  constructor(objectGID, delayTypeId, delayEndTime) {
    super();
    this.objectGID = objectGID;
    this.delayTypeId = delayTypeId;
    this.delayEndTime = delayEndTime;
  }
  serialize(writer) {
    writer.writeVarShort(this.objectGID);
    writer.writeByte(this.delayTypeId);
    writer.writeDouble(this.delayEndTime);
  }
  deserialize(reader) {
    this.objectGID = reader.readVarShort();
    this.delayTypeId = reader.readByte();
    this.delayEndTime = reader.readDouble();
  }
};
var HouseInstanceInformations = class extends DofusType {
  static id = 3243;
  id = 3243;
  price = 0;
  instanceId = 0;
  ownerTag;
  secondHand = false;
  isLocked = false;
  hasOwner = false;
  isSaleLocked = false;
  constructor(price, instanceId, ownerTag, secondHand, isLocked, hasOwner, isSaleLocked) {
    super();
    this.price = price;
    this.instanceId = instanceId;
    this.ownerTag = ownerTag;
    this.secondHand = secondHand;
    this.isLocked = isLocked;
    this.hasOwner = hasOwner;
    this.isSaleLocked = isSaleLocked;
  }
  serialize(writer) {
    writer.writeVarLong(this.price);
    writer.writeInt(this.instanceId);
    this.ownerTag.serialize(writer);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.secondHand);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.isLocked);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 2, this.hasOwner);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 3, this.isSaleLocked);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.price = reader.readVarLong();
    this.instanceId = reader.readInt();
    this.ownerTag = new AccountTagInformation();
    this.ownerTag.deserialize(reader);
    const box0 = reader.readByte();
    this.secondHand = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.isLocked = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
    this.hasOwner = (0, import_hetwan2.bigEndianGetFlag)(box0, 2);
    this.isSaleLocked = (0, import_hetwan2.bigEndianGetFlag)(box0, 3);
  }
};
var HumanOptionEmote = class extends HumanOption {
  static id = 3456;
  id = 3456;
  emoteStartTime = 0;
  emoteId = 0;
  constructor(emoteStartTime, emoteId) {
    super();
    this.emoteStartTime = emoteStartTime;
    this.emoteId = emoteId;
  }
  serialize(writer) {
    writer.writeDouble(this.emoteStartTime);
    writer.writeShort(this.emoteId);
  }
  deserialize(reader) {
    this.emoteStartTime = reader.readDouble();
    this.emoteId = reader.readShort();
  }
};
var ObjectItemInRolePlay = class extends DofusType {
  static id = 4848;
  id = 4848;
  objectGID = 0;
  cellId = 0;
  constructor(objectGID, cellId) {
    super();
    this.objectGID = objectGID;
    this.cellId = cellId;
  }
  serialize(writer) {
    writer.writeVarShort(this.objectGID);
    writer.writeVarShort(this.cellId);
  }
  deserialize(reader) {
    this.objectGID = reader.readVarShort();
    this.cellId = reader.readVarShort();
  }
};
var PaddockItem = class extends ObjectItemInRolePlay {
  static id = 5575;
  id = 5575;
  durability;
  constructor(objectGID, cellId, durability) {
    super(objectGID, cellId);
    this.durability = durability;
  }
  serialize(writer) {
    this.durability.serialize(writer);
  }
  deserialize(reader) {
    this.durability = new ItemDurability();
    this.durability.deserialize(reader);
  }
};
var AbstractFightTeamInformations = class extends DofusType {
  static id = 3071;
  id = 3071;
  nbWaves = 0;
  teamId = 2;
  teamTypeId = 0;
  teamSide = 0;
  leaderId = 0;
  constructor(nbWaves, teamId, teamTypeId, teamSide, leaderId) {
    super();
    this.nbWaves = nbWaves;
    this.teamId = teamId;
    this.teamTypeId = teamTypeId;
    this.teamSide = teamSide;
    this.leaderId = leaderId;
  }
  serialize(writer) {
    writer.writeByte(this.nbWaves);
    writer.writeByte(this.teamId);
    writer.writeByte(this.teamTypeId);
    writer.writeByte(this.teamSide);
    writer.writeDouble(this.leaderId);
  }
  deserialize(reader) {
    this.nbWaves = reader.readByte();
    this.teamId = reader.readByte();
    this.teamTypeId = reader.readByte();
    this.teamSide = reader.readByte();
    this.leaderId = reader.readDouble();
  }
};
var FightTeamInformations = class extends AbstractFightTeamInformations {
  static id = 4654;
  id = 4654;
  teamMembers;
  constructor(nbWaves, teamId, teamTypeId, teamSide, leaderId, teamMembers) {
    super(nbWaves, teamId, teamTypeId, teamSide, leaderId);
    this.teamMembers = teamMembers;
  }
  serialize(writer) {
    writer.writeShort(this.teamMembers.length);
    this.teamMembers.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.teamMembers = [];
    const countTeamMembers = reader.readShort();
    for (let i = 0; i < countTeamMembers; i++) {
      const teamMembersTypeId = reader.readShort();
      const type = new types[teamMembersTypeId]();
      type.deserialize(reader);
      this.teamMembers.push(type);
    }
  }
};
var IndexedEntityLook = class extends DofusType {
  static id = 1904;
  id = 1904;
  look;
  index = 0;
  constructor(look, index) {
    super();
    this.look = look;
    this.index = index;
  }
  serialize(writer) {
    this.look.serialize(writer);
    writer.writeByte(this.index);
  }
  deserialize(reader) {
    this.look = new EntityLook();
    this.look.deserialize(reader);
    this.index = reader.readByte();
  }
};
var HumanOptionSkillUse = class extends HumanOption {
  static id = 2427;
  id = 2427;
  elementId = 0;
  skillEndTime = 0;
  skillId = 0;
  constructor(elementId, skillEndTime, skillId) {
    super();
    this.elementId = elementId;
    this.skillEndTime = skillEndTime;
    this.skillId = skillId;
  }
  serialize(writer) {
    writer.writeVarInt(this.elementId);
    writer.writeDouble(this.skillEndTime);
    writer.writeVarShort(this.skillId);
  }
  deserialize(reader) {
    this.elementId = reader.readVarInt();
    this.skillEndTime = reader.readDouble();
    this.skillId = reader.readVarShort();
  }
};
var AlternativeMonstersInGroupLightInformations = class extends DofusType {
  static id = 1183;
  id = 1183;
  playerCount = 0;
  monsters;
  constructor(playerCount, monsters) {
    super();
    this.playerCount = playerCount;
    this.monsters = monsters;
  }
  serialize(writer) {
    writer.writeInt(this.playerCount);
    writer.writeShort(this.monsters.length);
    this.monsters.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.playerCount = reader.readInt();
    this.monsters = [];
    const countMonsters = reader.readShort();
    for (let i = 0; i < countMonsters; i++) {
      const type = new MonsterInGroupLightInformations();
      type.deserialize(reader);
      this.monsters.push(type);
    }
  }
};
var FightCommonInformations = class extends DofusType {
  static id = 5008;
  id = 5008;
  fightType = 0;
  fightId = 0;
  fightTeams;
  fightTeamsOptions;
  fightTeamsPositions;
  constructor(fightType, fightId, fightTeams, fightTeamsOptions, fightTeamsPositions) {
    super();
    this.fightType = fightType;
    this.fightId = fightId;
    this.fightTeams = fightTeams;
    this.fightTeamsOptions = fightTeamsOptions;
    this.fightTeamsPositions = fightTeamsPositions;
  }
  serialize(writer) {
    writer.writeByte(this.fightType);
    writer.writeVarShort(this.fightId);
    writer.writeShort(this.fightTeams.length);
    this.fightTeams.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.fightTeamsOptions.length);
    this.fightTeamsOptions.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.fightTeamsPositions.length);
    this.fightTeamsPositions.forEach(
      (current) => writer.writeVarShort(current)
    );
  }
  deserialize(reader) {
    this.fightType = reader.readByte();
    this.fightId = reader.readVarShort();
    this.fightTeams = [];
    const countFightTeams = reader.readShort();
    for (let i = 0; i < countFightTeams; i++) {
      const fightTeamsTypeId = reader.readShort();
      const type = new types[fightTeamsTypeId]();
      type.deserialize(reader);
      this.fightTeams.push(type);
    }
    this.fightTeamsOptions = [];
    const countFightTeamsOptions = reader.readShort();
    for (let i = 0; i < countFightTeamsOptions; i++) {
      const type = new FightOptionsInformations();
      type.deserialize(reader);
      this.fightTeamsOptions.push(type);
    }
    this.fightTeamsPositions = [];
    const countFightTeamsPositions = reader.readShort();
    for (let i = 0; i < countFightTeamsPositions; i++) {
      this.fightTeamsPositions.push(reader.readVarShort());
    }
  }
};
var MapNpcQuestInfo = class extends DofusType {
  static id = 7429;
  id = 7429;
  mapId = 0;
  questFlags;
  npcsIdsWithQuest;
  constructor(mapId, questFlags, npcsIdsWithQuest) {
    super();
    this.mapId = mapId;
    this.questFlags = questFlags;
    this.npcsIdsWithQuest = npcsIdsWithQuest;
  }
  serialize(writer) {
    writer.writeDouble(this.mapId);
    writer.writeShort(this.questFlags.length);
    this.questFlags.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.npcsIdsWithQuest.length);
    this.npcsIdsWithQuest.forEach(
      (current) => writer.writeInt(current)
    );
  }
  deserialize(reader) {
    this.mapId = reader.readDouble();
    this.questFlags = [];
    const countQuestFlags = reader.readShort();
    for (let i = 0; i < countQuestFlags; i++) {
      const type = new GameRolePlayNpcQuestFlag();
      type.deserialize(reader);
      this.questFlags.push(type);
    }
    this.npcsIdsWithQuest = [];
    const countNpcsIdsWithQuest = reader.readShort();
    for (let i = 0; i < countNpcsIdsWithQuest; i++) {
      this.npcsIdsWithQuest.push(reader.readInt());
    }
  }
};
var MonsterInGroupLightInformations = class extends DofusType {
  static id = 4246;
  id = 4246;
  level = 0;
  genericId = 0;
  grade = 0;
  constructor(level, genericId, grade) {
    super();
    this.level = level;
    this.genericId = genericId;
    this.grade = grade;
  }
  serialize(writer) {
    writer.writeShort(this.level);
    writer.writeInt(this.genericId);
    writer.writeByte(this.grade);
  }
  deserialize(reader) {
    this.level = reader.readShort();
    this.genericId = reader.readInt();
    this.grade = reader.readByte();
  }
};
var MonsterInGroupInformations = class extends MonsterInGroupLightInformations {
  static id = 2614;
  id = 2614;
  look;
  constructor(level, genericId, grade, look) {
    super(level, genericId, grade);
    this.look = look;
  }
  serialize(writer) {
    this.look.serialize(writer);
  }
  deserialize(reader) {
    this.look = new EntityLook();
    this.look.deserialize(reader);
  }
};
var MapObstacle = class extends DofusType {
  static id = 5512;
  id = 5512;
  state = 0;
  obstacleCellId = 0;
  constructor(state, obstacleCellId) {
    super();
    this.state = state;
    this.obstacleCellId = obstacleCellId;
  }
  serialize(writer) {
    writer.writeByte(this.state);
    writer.writeVarShort(this.obstacleCellId);
  }
  deserialize(reader) {
    this.state = reader.readByte();
    this.obstacleCellId = reader.readVarShort();
  }
};
var GroupMonsterStaticInformationsWithAlternatives = class extends GroupMonsterStaticInformations {
  static id = 1240;
  id = 1240;
  alternatives;
  constructor(mainCreatureLightInfos, underlings, alternatives) {
    super(mainCreatureLightInfos, underlings);
    this.alternatives = alternatives;
  }
  serialize(writer) {
    writer.writeShort(this.alternatives.length);
    this.alternatives.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.alternatives = [];
    const countAlternatives = reader.readShort();
    for (let i = 0; i < countAlternatives; i++) {
      const type = new AlternativeMonstersInGroupLightInformations();
      type.deserialize(reader);
      this.alternatives.push(type);
    }
  }
};
var FightEntityDispositionInformations = class extends EntityDispositionInformations {
  static id = 7794;
  id = 7794;
  carryingCharacterId = 0;
  constructor(direction, cellId, carryingCharacterId) {
    super(direction, cellId);
    this.carryingCharacterId = carryingCharacterId;
  }
  serialize(writer) {
    writer.writeDouble(this.carryingCharacterId);
  }
  deserialize(reader) {
    this.carryingCharacterId = reader.readDouble();
  }
};
var BreachBranch = class extends DofusType {
  static id = 5320;
  id = 5320;
  monsters;
  relativeScore = 0;
  room = 0;
  bosses;
  map = 0;
  element = 0;
  score = 0;
  constructor(monsters, relativeScore, room, bosses, map, element, score) {
    super();
    this.monsters = monsters;
    this.relativeScore = relativeScore;
    this.room = room;
    this.bosses = bosses;
    this.map = map;
    this.element = element;
    this.score = score;
  }
  serialize(writer) {
    writer.writeShort(this.monsters.length);
    this.monsters.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.relativeScore);
    writer.writeByte(this.room);
    writer.writeShort(this.bosses.length);
    this.bosses.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeDouble(this.map);
    writer.writeInt(this.element);
    writer.writeShort(this.score);
  }
  deserialize(reader) {
    this.monsters = [];
    const countMonsters = reader.readShort();
    for (let i = 0; i < countMonsters; i++) {
      const type = new MonsterInGroupLightInformations();
      type.deserialize(reader);
      this.monsters.push(type);
    }
    this.relativeScore = reader.readShort();
    this.room = reader.readByte();
    this.bosses = [];
    const countBosses = reader.readShort();
    for (let i = 0; i < countBosses; i++) {
      const type = new MonsterInGroupLightInformations();
      type.deserialize(reader);
      this.bosses.push(type);
    }
    this.map = reader.readDouble();
    this.element = reader.readInt();
    this.score = reader.readShort();
  }
};
var IdentifiedEntityDispositionInformations = class extends EntityDispositionInformations {
  static id = 8490;
  id = 8490;
  id_ = 0;
  constructor(direction, cellId, id_) {
    super(direction, cellId);
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeDouble(this.id_);
  }
  deserialize(reader) {
    this.id_ = reader.readDouble();
  }
};
var StatedElement = class extends DofusType {
  static id = 7058;
  id = 7058;
  onCurrentMap = false;
  elementState = 0;
  elementId = 0;
  elementCellId = 0;
  constructor(onCurrentMap, elementState, elementId, elementCellId) {
    super();
    this.onCurrentMap = onCurrentMap;
    this.elementState = elementState;
    this.elementId = elementId;
    this.elementCellId = elementCellId;
  }
  serialize(writer) {
    writer.writeBoolean(this.onCurrentMap);
    writer.writeVarInt(this.elementState);
    writer.writeInt(this.elementId);
    writer.writeVarShort(this.elementCellId);
  }
  deserialize(reader) {
    this.onCurrentMap = reader.readBoolean();
    this.elementState = reader.readVarInt();
    this.elementId = reader.readInt();
    this.elementCellId = reader.readVarShort();
  }
};
var ActorRestrictionsInformations = class extends DofusType {
  static id = 8982;
  id = 8982;
  cantBeAggressed = false;
  cantBeChallenged = false;
  cantTrade = false;
  cantBeAttackedByMutant = false;
  cantRun = false;
  forceSlowWalk = false;
  cantMinimize = false;
  cantMove = false;
  cantAggress = false;
  cantChallenge = false;
  cantExchange = false;
  cantAttack = false;
  cantChat = false;
  cantBeMerchant = false;
  cantUseObject = false;
  cantUseTaxCollector = false;
  cantUseInteractive = false;
  cantSpeakToNPC = false;
  cantChangeZone = false;
  cantAttackMonster = false;
  constructor(cantBeAggressed, cantBeChallenged, cantTrade, cantBeAttackedByMutant, cantRun, forceSlowWalk, cantMinimize, cantMove, cantAggress, cantChallenge, cantExchange, cantAttack, cantChat, cantBeMerchant, cantUseObject, cantUseTaxCollector, cantUseInteractive, cantSpeakToNPC, cantChangeZone, cantAttackMonster) {
    super();
    this.cantBeAggressed = cantBeAggressed;
    this.cantBeChallenged = cantBeChallenged;
    this.cantTrade = cantTrade;
    this.cantBeAttackedByMutant = cantBeAttackedByMutant;
    this.cantRun = cantRun;
    this.forceSlowWalk = forceSlowWalk;
    this.cantMinimize = cantMinimize;
    this.cantMove = cantMove;
    this.cantAggress = cantAggress;
    this.cantChallenge = cantChallenge;
    this.cantExchange = cantExchange;
    this.cantAttack = cantAttack;
    this.cantChat = cantChat;
    this.cantBeMerchant = cantBeMerchant;
    this.cantUseObject = cantUseObject;
    this.cantUseTaxCollector = cantUseTaxCollector;
    this.cantUseInteractive = cantUseInteractive;
    this.cantSpeakToNPC = cantSpeakToNPC;
    this.cantChangeZone = cantChangeZone;
    this.cantAttackMonster = cantAttackMonster;
  }
  serialize(writer) {
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.cantBeAggressed);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.cantBeChallenged);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 2, this.cantTrade);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 3, this.cantBeAttackedByMutant);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 4, this.cantRun);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 5, this.forceSlowWalk);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 6, this.cantMinimize);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 7, this.cantMove);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 8, this.cantAggress);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 9, this.cantChallenge);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 10, this.cantExchange);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 11, this.cantAttack);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 12, this.cantChat);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 13, this.cantBeMerchant);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 14, this.cantUseObject);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 15, this.cantUseTaxCollector);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 16, this.cantUseInteractive);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 17, this.cantSpeakToNPC);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 18, this.cantChangeZone);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 19, this.cantAttackMonster);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    const box0 = reader.readByte();
    this.cantBeAggressed = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.cantBeChallenged = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
    this.cantTrade = (0, import_hetwan2.bigEndianGetFlag)(box0, 2);
    this.cantBeAttackedByMutant = (0, import_hetwan2.bigEndianGetFlag)(box0, 3);
    this.cantRun = (0, import_hetwan2.bigEndianGetFlag)(box0, 4);
    this.forceSlowWalk = (0, import_hetwan2.bigEndianGetFlag)(box0, 5);
    this.cantMinimize = (0, import_hetwan2.bigEndianGetFlag)(box0, 6);
    this.cantMove = (0, import_hetwan2.bigEndianGetFlag)(box0, 7);
    this.cantAggress = (0, import_hetwan2.bigEndianGetFlag)(box0, 8);
    this.cantChallenge = (0, import_hetwan2.bigEndianGetFlag)(box0, 9);
    this.cantExchange = (0, import_hetwan2.bigEndianGetFlag)(box0, 10);
    this.cantAttack = (0, import_hetwan2.bigEndianGetFlag)(box0, 11);
    this.cantChat = (0, import_hetwan2.bigEndianGetFlag)(box0, 12);
    this.cantBeMerchant = (0, import_hetwan2.bigEndianGetFlag)(box0, 13);
    this.cantUseObject = (0, import_hetwan2.bigEndianGetFlag)(box0, 14);
    this.cantUseTaxCollector = (0, import_hetwan2.bigEndianGetFlag)(box0, 15);
    this.cantUseInteractive = (0, import_hetwan2.bigEndianGetFlag)(box0, 16);
    this.cantSpeakToNPC = (0, import_hetwan2.bigEndianGetFlag)(box0, 17);
    this.cantChangeZone = (0, import_hetwan2.bigEndianGetFlag)(box0, 18);
    this.cantAttackMonster = (0, import_hetwan2.bigEndianGetFlag)(box0, 19);
  }
};
var CharacterCharacteristicsInformations = class extends DofusType {
  static id = 1918;
  id = 1918;
  kamas = 0;
  experienceBonusLimit = 0;
  experienceNextLevelFloor = 0;
  criticalHitWeapon = 0;
  experience = 0;
  alignmentInfos;
  experienceLevelFloor = 0;
  spellModifications;
  characteristics;
  probationTime = 0;
  constructor(kamas, experienceBonusLimit, experienceNextLevelFloor, criticalHitWeapon, experience, alignmentInfos, experienceLevelFloor, spellModifications, characteristics, probationTime) {
    super();
    this.kamas = kamas;
    this.experienceBonusLimit = experienceBonusLimit;
    this.experienceNextLevelFloor = experienceNextLevelFloor;
    this.criticalHitWeapon = criticalHitWeapon;
    this.experience = experience;
    this.alignmentInfos = alignmentInfos;
    this.experienceLevelFloor = experienceLevelFloor;
    this.spellModifications = spellModifications;
    this.characteristics = characteristics;
    this.probationTime = probationTime;
  }
  serialize(writer) {
    writer.writeVarLong(this.kamas);
    writer.writeVarLong(this.experienceBonusLimit);
    writer.writeVarLong(this.experienceNextLevelFloor);
    writer.writeVarShort(this.criticalHitWeapon);
    writer.writeVarLong(this.experience);
    this.alignmentInfos.serialize(writer);
    writer.writeVarLong(this.experienceLevelFloor);
    writer.writeShort(this.spellModifications.length);
    this.spellModifications.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.characteristics.length);
    this.characteristics.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeInt(this.probationTime);
  }
  deserialize(reader) {
    this.kamas = reader.readVarLong();
    this.experienceBonusLimit = reader.readVarLong();
    this.experienceNextLevelFloor = reader.readVarLong();
    this.criticalHitWeapon = reader.readVarShort();
    this.experience = reader.readVarLong();
    this.alignmentInfos = new ActorExtendedAlignmentInformations();
    this.alignmentInfos.deserialize(reader);
    this.experienceLevelFloor = reader.readVarLong();
    this.spellModifications = [];
    const countSpellModifications = reader.readShort();
    for (let i = 0; i < countSpellModifications; i++) {
      const type = new CharacterSpellModification();
      type.deserialize(reader);
      this.spellModifications.push(type);
    }
    this.characteristics = [];
    const countCharacteristics = reader.readShort();
    for (let i = 0; i < countCharacteristics; i++) {
      const characteristicsTypeId = reader.readShort();
      const type = new types[characteristicsTypeId]();
      type.deserialize(reader);
      this.characteristics.push(type);
    }
    this.probationTime = reader.readInt();
  }
};
var GuildApplicationInformation = class extends DofusType {
  static id = 7662;
  id = 7662;
  creationDate = 0;
  playerInfo;
  applyText;
  constructor(creationDate, playerInfo, applyText) {
    super();
    this.creationDate = creationDate;
    this.playerInfo = playerInfo;
    this.applyText = applyText;
  }
  serialize(writer) {
    writer.writeDouble(this.creationDate);
    this.playerInfo.serialize(writer);
    writer.writeUTF(this.applyText);
  }
  deserialize(reader) {
    this.creationDate = reader.readDouble();
    this.playerInfo = new ApplicationPlayerInformation();
    this.playerInfo.deserialize(reader);
    this.applyText = reader.readUTF();
  }
};
var AbstractSocialGroupInfos = class extends DofusType {
  static id = 6359;
  id = 6359;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var BasicGuildInformations = class extends AbstractSocialGroupInfos {
  static id = 4374;
  id = 4374;
  guildLevel = 0;
  guildId = 0;
  guildName;
  constructor(guildLevel, guildId, guildName) {
    super();
    this.guildLevel = guildLevel;
    this.guildId = guildId;
    this.guildName = guildName;
  }
  serialize(writer) {
    writer.writeByte(this.guildLevel);
    writer.writeVarInt(this.guildId);
    writer.writeUTF(this.guildName);
  }
  deserialize(reader) {
    this.guildLevel = reader.readByte();
    this.guildId = reader.readVarInt();
    this.guildName = reader.readUTF();
  }
};
var GuildInformations = class extends BasicGuildInformations {
  static id = 1201;
  id = 1201;
  guildEmblem;
  constructor(guildLevel, guildId, guildName, guildEmblem) {
    super(guildLevel, guildId, guildName);
    this.guildEmblem = guildEmblem;
  }
  serialize(writer) {
    this.guildEmblem.serialize(writer);
  }
  deserialize(reader) {
    this.guildEmblem = new GuildEmblem();
    this.guildEmblem.deserialize(reader);
  }
};
var AbstractCharacterInformation = class extends DofusType {
  static id = 2714;
  id = 2714;
  id_ = 0;
  constructor(id_) {
    super();
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeVarLong(this.id_);
  }
  deserialize(reader) {
    this.id_ = reader.readVarLong();
  }
};
var CharacterBasicMinimalInformations = class extends AbstractCharacterInformation {
  static id = 4480;
  id = 4480;
  name;
  constructor(id_, name) {
    super(id_);
    this.name = name;
  }
  serialize(writer) {
    writer.writeUTF(this.name);
  }
  deserialize(reader) {
    this.name = reader.readUTF();
  }
};
var CharacterMinimalInformations = class extends CharacterBasicMinimalInformations {
  static id = 6674;
  id = 6674;
  level = 0;
  constructor(id_, name, level) {
    super(id_, name);
    this.level = level;
  }
  serialize(writer) {
    writer.writeVarShort(this.level);
  }
  deserialize(reader) {
    this.level = reader.readVarShort();
  }
};
var CharacterMinimalPlusLookInformations = class extends CharacterMinimalInformations {
  static id = 9551;
  id = 9551;
  entityLook;
  breed = 0;
  constructor(id_, name, level, entityLook, breed) {
    super(id_, name, level);
    this.entityLook = entityLook;
    this.breed = breed;
  }
  serialize(writer) {
    this.entityLook.serialize(writer);
    writer.writeByte(this.breed);
  }
  deserialize(reader) {
    this.entityLook = new EntityLook();
    this.entityLook.deserialize(reader);
    this.breed = reader.readByte();
  }
};
var CharacterBaseInformations = class extends CharacterMinimalPlusLookInformations {
  static id = 8097;
  id = 8097;
  sex = false;
  constructor(id_, name, level, entityLook, breed, sex) {
    super(id_, name, level, entityLook, breed);
    this.sex = sex;
  }
  serialize(writer) {
    writer.writeBoolean(this.sex);
  }
  deserialize(reader) {
    this.sex = reader.readBoolean();
  }
};
var FightDispellableEffectExtendedInformations = class extends DofusType {
  static id = 8005;
  id = 8005;
  effect;
  actionId = 0;
  sourceId = 0;
  constructor(effect, actionId, sourceId) {
    super();
    this.effect = effect;
    this.actionId = actionId;
    this.sourceId = sourceId;
  }
  serialize(writer) {
    writer.writeShort(this.effect.id);
    this.effect.serialize(writer);
    writer.writeVarShort(this.actionId);
    writer.writeDouble(this.sourceId);
  }
  deserialize(reader) {
    const effectTypeId = reader.readShort();
    this.effect = new types[effectTypeId]();
    this.effect.deserialize(reader);
    this.actionId = reader.readVarShort();
    this.sourceId = reader.readDouble();
  }
};
var GameActionMarkedCell = class extends DofusType {
  static id = 2389;
  id = 2389;
  cellColor = 0;
  cellsType = 0;
  cellId = 0;
  zoneSize = 0;
  constructor(cellColor, cellsType, cellId, zoneSize) {
    super();
    this.cellColor = cellColor;
    this.cellsType = cellsType;
    this.cellId = cellId;
    this.zoneSize = zoneSize;
  }
  serialize(writer) {
    writer.writeInt(this.cellColor);
    writer.writeByte(this.cellsType);
    writer.writeVarShort(this.cellId);
    writer.writeByte(this.zoneSize);
  }
  deserialize(reader) {
    this.cellColor = reader.readInt();
    this.cellsType = reader.readByte();
    this.cellId = reader.readVarShort();
    this.zoneSize = reader.readByte();
  }
};
var FightResultListEntry = class extends DofusType {
  static id = 6627;
  id = 6627;
  rewards;
  outcome = 0;
  wave = 0;
  constructor(rewards, outcome, wave) {
    super();
    this.rewards = rewards;
    this.outcome = outcome;
    this.wave = wave;
  }
  serialize(writer) {
    this.rewards.serialize(writer);
    writer.writeVarShort(this.outcome);
    writer.writeByte(this.wave);
  }
  deserialize(reader) {
    this.rewards = new FightLoot();
    this.rewards.deserialize(reader);
    this.outcome = reader.readVarShort();
    this.wave = reader.readByte();
  }
};
var FightResultFighterListEntry = class extends FightResultListEntry {
  static id = 4819;
  id = 4819;
  alive = false;
  id_ = 0;
  constructor(rewards, outcome, wave, alive, id_) {
    super(rewards, outcome, wave);
    this.alive = alive;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeBoolean(this.alive);
    writer.writeDouble(this.id_);
  }
  deserialize(reader) {
    this.alive = reader.readBoolean();
    this.id_ = reader.readDouble();
  }
};
var GameFightResumeSlaveInfo = class extends DofusType {
  static id = 8117;
  id = 8117;
  bombCount = 0;
  summonCount = 0;
  slaveId = 0;
  spellCooldowns;
  constructor(bombCount, summonCount, slaveId, spellCooldowns) {
    super();
    this.bombCount = bombCount;
    this.summonCount = summonCount;
    this.slaveId = slaveId;
    this.spellCooldowns = spellCooldowns;
  }
  serialize(writer) {
    writer.writeByte(this.bombCount);
    writer.writeByte(this.summonCount);
    writer.writeDouble(this.slaveId);
    writer.writeShort(this.spellCooldowns.length);
    this.spellCooldowns.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.bombCount = reader.readByte();
    this.summonCount = reader.readByte();
    this.slaveId = reader.readDouble();
    this.spellCooldowns = [];
    const countSpellCooldowns = reader.readShort();
    for (let i = 0; i < countSpellCooldowns; i++) {
      const type = new GameFightSpellCooldown();
      type.deserialize(reader);
      this.spellCooldowns.push(type);
    }
  }
};
var NamedPartyTeamWithOutcome = class extends DofusType {
  static id = 5095;
  id = 5095;
  team;
  outcome = 0;
  constructor(team, outcome) {
    super();
    this.team = team;
    this.outcome = outcome;
  }
  serialize(writer) {
    this.team.serialize(writer);
    writer.writeVarShort(this.outcome);
  }
  deserialize(reader) {
    this.team = new NamedPartyTeam();
    this.team.deserialize(reader);
    this.outcome = reader.readVarShort();
  }
};
var GameActionMark = class extends DofusType {
  static id = 158;
  id = 158;
  markimpactCell = 0;
  markTeamId = 2;
  markId = 0;
  cells;
  markAuthorId = 0;
  markType = 0;
  markSpellId = 0;
  active = false;
  markSpellLevel = 0;
  constructor(markimpactCell, markTeamId, markId, cells, markAuthorId, markType, markSpellId, active, markSpellLevel) {
    super();
    this.markimpactCell = markimpactCell;
    this.markTeamId = markTeamId;
    this.markId = markId;
    this.cells = cells;
    this.markAuthorId = markAuthorId;
    this.markType = markType;
    this.markSpellId = markSpellId;
    this.active = active;
    this.markSpellLevel = markSpellLevel;
  }
  serialize(writer) {
    writer.writeShort(this.markimpactCell);
    writer.writeByte(this.markTeamId);
    writer.writeShort(this.markId);
    writer.writeShort(this.cells.length);
    this.cells.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeDouble(this.markAuthorId);
    writer.writeByte(this.markType);
    writer.writeInt(this.markSpellId);
    writer.writeBoolean(this.active);
    writer.writeShort(this.markSpellLevel);
  }
  deserialize(reader) {
    this.markimpactCell = reader.readShort();
    this.markTeamId = reader.readByte();
    this.markId = reader.readShort();
    this.cells = [];
    const countCells = reader.readShort();
    for (let i = 0; i < countCells; i++) {
      const type = new GameActionMarkedCell();
      type.deserialize(reader);
      this.cells.push(type);
    }
    this.markAuthorId = reader.readDouble();
    this.markType = reader.readByte();
    this.markSpellId = reader.readInt();
    this.active = reader.readBoolean();
    this.markSpellLevel = reader.readShort();
  }
};
var NamedPartyTeam = class extends DofusType {
  static id = 6995;
  id = 6995;
  partyName;
  teamId = 2;
  constructor(partyName, teamId) {
    super();
    this.partyName = partyName;
    this.teamId = teamId;
  }
  serialize(writer) {
    writer.writeUTF(this.partyName);
    writer.writeByte(this.teamId);
  }
  deserialize(reader) {
    this.partyName = reader.readUTF();
    this.teamId = reader.readByte();
  }
};
var Idol = class extends DofusType {
  static id = 960;
  id = 960;
  dropBonusPercent = 0;
  id_ = 0;
  xpBonusPercent = 0;
  constructor(dropBonusPercent, id_, xpBonusPercent) {
    super();
    this.dropBonusPercent = dropBonusPercent;
    this.id_ = id_;
    this.xpBonusPercent = xpBonusPercent;
  }
  serialize(writer) {
    writer.writeVarShort(this.dropBonusPercent);
    writer.writeVarShort(this.id_);
    writer.writeVarShort(this.xpBonusPercent);
  }
  deserialize(reader) {
    this.dropBonusPercent = reader.readVarShort();
    this.id_ = reader.readVarShort();
    this.xpBonusPercent = reader.readVarShort();
  }
};
var GameFightMutantInformations = class extends GameFightFighterNamedInformations {
  static id = 2861;
  id = 2861;
  powerLevel = 0;
  constructor(contextualId, disposition, look, wave, spawnInfo, previousPositions, stats, status, name, hiddenInPrefight, leagueId, ladderPosition, powerLevel) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats,
      status,
      name,
      hiddenInPrefight,
      leagueId,
      ladderPosition
    );
    this.powerLevel = powerLevel;
  }
  serialize(writer) {
    writer.writeByte(this.powerLevel);
  }
  deserialize(reader) {
    this.powerLevel = reader.readByte();
  }
};
var FightResultPlayerListEntry = class extends FightResultFighterListEntry {
  static id = 9771;
  id = 9771;
  level = 0;
  additional;
  constructor(rewards, outcome, wave, alive, id_, level, additional) {
    super(rewards, outcome, wave, alive, id_);
    this.level = level;
    this.additional = additional;
  }
  serialize(writer) {
    writer.writeVarShort(this.level);
    writer.writeShort(this.additional.length);
    this.additional.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.level = reader.readVarShort();
    this.additional = [];
    const countAdditional = reader.readShort();
    for (let i = 0; i < countAdditional; i++) {
      const additionalTypeId = reader.readShort();
      const type = new types[additionalTypeId]();
      type.deserialize(reader);
      this.additional.push(type);
    }
  }
};
var FightResultTaxCollectorListEntry = class extends FightResultFighterListEntry {
  static id = 1517;
  id = 1517;
  experienceForGuild = 0;
  level = 0;
  guildInfo;
  constructor(rewards, outcome, wave, alive, id_, experienceForGuild, level, guildInfo) {
    super(rewards, outcome, wave, alive, id_);
    this.experienceForGuild = experienceForGuild;
    this.level = level;
    this.guildInfo = guildInfo;
  }
  serialize(writer) {
    writer.writeInt(this.experienceForGuild);
    writer.writeByte(this.level);
    this.guildInfo.serialize(writer);
  }
  deserialize(reader) {
    this.experienceForGuild = reader.readInt();
    this.level = reader.readByte();
    this.guildInfo = new BasicGuildInformations();
    this.guildInfo.deserialize(reader);
  }
};
var GameFightEffectTriggerCount = class extends DofusType {
  static id = 3026;
  id = 3026;
  count = 0;
  effectId = 0;
  targetId = 0;
  constructor(count, effectId, targetId) {
    super();
    this.count = count;
    this.effectId = effectId;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeByte(this.count);
    writer.writeVarInt(this.effectId);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.count = reader.readByte();
    this.effectId = reader.readVarInt();
    this.targetId = reader.readDouble();
  }
};
var CharacterCharacteristic = class extends DofusType {
  static id = 4565;
  id = 4565;
  characteristicId = 0;
  constructor(characteristicId) {
    super();
    this.characteristicId = characteristicId;
  }
  serialize(writer) {
    writer.writeShort(this.characteristicId);
  }
  deserialize(reader) {
    this.characteristicId = reader.readShort();
  }
};
var CharacterCharacteristicDetailed = class extends CharacterCharacteristic {
  static id = 9089;
  id = 9089;
  objectsAndMountBonus = 0;
  alignGiftBonus = 0;
  base = 0;
  contextModif = 0;
  additional = 0;
  constructor(characteristicId, objectsAndMountBonus, alignGiftBonus, base, contextModif, additional) {
    super(characteristicId);
    this.objectsAndMountBonus = objectsAndMountBonus;
    this.alignGiftBonus = alignGiftBonus;
    this.base = base;
    this.contextModif = contextModif;
    this.additional = additional;
  }
  serialize(writer) {
    writer.writeVarShort(this.objectsAndMountBonus);
    writer.writeVarShort(this.alignGiftBonus);
    writer.writeVarShort(this.base);
    writer.writeVarShort(this.contextModif);
    writer.writeVarShort(this.additional);
  }
  deserialize(reader) {
    this.objectsAndMountBonus = reader.readVarShort();
    this.alignGiftBonus = reader.readVarShort();
    this.base = reader.readVarShort();
    this.contextModif = reader.readVarShort();
    this.additional = reader.readVarShort();
  }
};
var CharacterUsableCharacteristicDetailed = class extends CharacterCharacteristicDetailed {
  static id = 9575;
  id = 9575;
  used = 0;
  constructor(characteristicId, objectsAndMountBonus, alignGiftBonus, base, contextModif, additional, used) {
    super(
      characteristicId,
      objectsAndMountBonus,
      alignGiftBonus,
      base,
      contextModif,
      additional
    );
    this.used = used;
  }
  serialize(writer) {
    writer.writeVarShort(this.used);
  }
  deserialize(reader) {
    this.used = reader.readVarShort();
  }
};
var CharacterCharacteristicValue = class extends CharacterCharacteristic {
  static id = 1995;
  id = 1995;
  total = 0;
  constructor(characteristicId, total) {
    super(characteristicId);
    this.total = total;
  }
  serialize(writer) {
    writer.writeInt(this.total);
  }
  deserialize(reader) {
    this.total = reader.readInt();
  }
};
var Item = class extends DofusType {
  static id = 842;
  id = 842;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ObjectItem = class extends Item {
  static id = 2916;
  id = 2916;
  objectGID = 0;
  position = 63;
  objectUID = 0;
  effects;
  quantity = 0;
  constructor(objectGID, position, objectUID, effects, quantity) {
    super();
    this.objectGID = objectGID;
    this.position = position;
    this.objectUID = objectUID;
    this.effects = effects;
    this.quantity = quantity;
  }
  serialize(writer) {
    writer.writeVarShort(this.objectGID);
    writer.writeShort(this.position);
    writer.writeVarInt(this.objectUID);
    writer.writeShort(this.effects.length);
    this.effects.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarInt(this.quantity);
  }
  deserialize(reader) {
    this.objectGID = reader.readVarShort();
    this.position = reader.readShort();
    this.objectUID = reader.readVarInt();
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i = 0; i < countEffects; i++) {
      const effectsTypeId = reader.readShort();
      const type = new types[effectsTypeId]();
      type.deserialize(reader);
      this.effects.push(type);
    }
    this.quantity = reader.readVarInt();
  }
};
var ObjectEffect = class extends DofusType {
  static id = 5685;
  id = 5685;
  actionId = 0;
  constructor(actionId) {
    super();
    this.actionId = actionId;
  }
  serialize(writer) {
    writer.writeVarShort(this.actionId);
  }
  deserialize(reader) {
    this.actionId = reader.readVarShort();
  }
};
var ObjectEffectInteger = class extends ObjectEffect {
  static id = 2163;
  id = 2163;
  value = 0;
  constructor(actionId, value) {
    super(actionId);
    this.value = value;
  }
  serialize(writer) {
    writer.writeVarInt(this.value);
  }
  deserialize(reader) {
    this.value = reader.readVarInt();
  }
};
var TrustCertificate = class extends DofusType {
  static id = 8866;
  id = 8866;
  hash;
  id_ = 0;
  constructor(hash, id_) {
    super();
    this.hash = hash;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeUTF(this.hash);
    writer.writeInt(this.id_);
  }
  deserialize(reader) {
    this.hash = reader.readUTF();
    this.id_ = reader.readInt();
  }
};
var CharacterSpellModification = class extends DofusType {
  static id = 4425;
  id = 4425;
  value;
  modificationType = 0;
  spellId = 0;
  constructor(value, modificationType, spellId) {
    super();
    this.value = value;
    this.modificationType = modificationType;
    this.spellId = spellId;
  }
  serialize(writer) {
    this.value.serialize(writer);
    writer.writeByte(this.modificationType);
    writer.writeVarShort(this.spellId);
  }
  deserialize(reader) {
    this.value = new CharacterCharacteristicDetailed();
    this.value.deserialize(reader);
    this.modificationType = reader.readByte();
    this.spellId = reader.readVarShort();
  }
};
var InteractiveElementSkill = class extends DofusType {
  static id = 6784;
  id = 6784;
  skillInstanceUid = 0;
  skillId = 0;
  constructor(skillInstanceUid, skillId) {
    super();
    this.skillInstanceUid = skillInstanceUid;
    this.skillId = skillId;
  }
  serialize(writer) {
    writer.writeInt(this.skillInstanceUid);
    writer.writeVarInt(this.skillId);
  }
  deserialize(reader) {
    this.skillInstanceUid = reader.readInt();
    this.skillId = reader.readVarInt();
  }
};
var QuestActiveInformations = class extends DofusType {
  static id = 1975;
  id = 1975;
  questId = 0;
  constructor(questId) {
    super();
    this.questId = questId;
  }
  serialize(writer) {
    writer.writeVarShort(this.questId);
  }
  deserialize(reader) {
    this.questId = reader.readVarShort();
  }
};
var GameFightCharacteristics = class extends DofusType {
  static id = 7425;
  id = 7425;
  invisibilityState = 0;
  characteristics;
  summoned = false;
  summoner = 0;
  constructor(invisibilityState, characteristics, summoned, summoner) {
    super();
    this.invisibilityState = invisibilityState;
    this.characteristics = characteristics;
    this.summoned = summoned;
    this.summoner = summoner;
  }
  serialize(writer) {
    writer.writeByte(this.invisibilityState);
    this.characteristics.serialize(writer);
    writer.writeBoolean(this.summoned);
    writer.writeDouble(this.summoner);
  }
  deserialize(reader) {
    this.invisibilityState = reader.readByte();
    this.characteristics = new CharacterCharacteristics();
    this.characteristics.deserialize(reader);
    this.summoned = reader.readBoolean();
    this.summoner = reader.readDouble();
  }
};
var PrismInformation = class extends DofusType {
  static id = 6060;
  id = 6060;
  rewardTokenCount = 0;
  placementDate = 0;
  typeId = 0;
  nextVulnerabilityDate = 0;
  state = 1;
  constructor(rewardTokenCount, placementDate, typeId, nextVulnerabilityDate, state) {
    super();
    this.rewardTokenCount = rewardTokenCount;
    this.placementDate = placementDate;
    this.typeId = typeId;
    this.nextVulnerabilityDate = nextVulnerabilityDate;
    this.state = state;
  }
  serialize(writer) {
    writer.writeVarInt(this.rewardTokenCount);
    writer.writeInt(this.placementDate);
    writer.writeByte(this.typeId);
    writer.writeInt(this.nextVulnerabilityDate);
    writer.writeByte(this.state);
  }
  deserialize(reader) {
    this.rewardTokenCount = reader.readVarInt();
    this.placementDate = reader.readInt();
    this.typeId = reader.readByte();
    this.nextVulnerabilityDate = reader.readInt();
    this.state = reader.readByte();
  }
};
var TaxCollectorStaticInformations = class extends DofusType {
  static id = 4022;
  id = 4022;
  callerId = 0;
  guildIdentity;
  firstNameId = 0;
  lastNameId = 0;
  constructor(callerId, guildIdentity, firstNameId, lastNameId) {
    super();
    this.callerId = callerId;
    this.guildIdentity = guildIdentity;
    this.firstNameId = firstNameId;
    this.lastNameId = lastNameId;
  }
  serialize(writer) {
    writer.writeVarLong(this.callerId);
    this.guildIdentity.serialize(writer);
    writer.writeVarShort(this.firstNameId);
    writer.writeVarShort(this.lastNameId);
  }
  deserialize(reader) {
    this.callerId = reader.readVarLong();
    this.guildIdentity = new GuildInformations();
    this.guildIdentity.deserialize(reader);
    this.firstNameId = reader.readVarShort();
    this.lastNameId = reader.readVarShort();
  }
};
var SkillActionDescription = class extends DofusType {
  static id = 2262;
  id = 2262;
  skillId = 0;
  constructor(skillId) {
    super();
    this.skillId = skillId;
  }
  serialize(writer) {
    writer.writeVarShort(this.skillId);
  }
  deserialize(reader) {
    this.skillId = reader.readVarShort();
  }
};
var SkillActionDescriptionCraft = class extends SkillActionDescription {
  static id = 6151;
  id = 6151;
  probability = 0;
  constructor(skillId, probability) {
    super(skillId);
    this.probability = probability;
  }
  serialize(writer) {
    writer.writeByte(this.probability);
  }
  deserialize(reader) {
    this.probability = reader.readByte();
  }
};
var JobDescription = class extends DofusType {
  static id = 2005;
  id = 2005;
  jobId = 0;
  skills;
  constructor(jobId, skills) {
    super();
    this.jobId = jobId;
    this.skills = skills;
  }
  serialize(writer) {
    writer.writeByte(this.jobId);
    writer.writeShort(this.skills.length);
    this.skills.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.jobId = reader.readByte();
    this.skills = [];
    const countSkills = reader.readShort();
    for (let i = 0; i < countSkills; i++) {
      const skillsTypeId = reader.readShort();
      const type = new types[skillsTypeId]();
      type.deserialize(reader);
      this.skills.push(type);
    }
  }
};
var SkillActionDescriptionTimed = class extends SkillActionDescription {
  static id = 9286;
  id = 9286;
  time = 0;
  constructor(skillId, time) {
    super(skillId);
    this.time = time;
  }
  serialize(writer) {
    writer.writeByte(this.time);
  }
  deserialize(reader) {
    this.time = reader.readByte();
  }
};
var SkillActionDescriptionCollect = class extends SkillActionDescriptionTimed {
  static id = 5191;
  id = 5191;
  max = 0;
  min = 0;
  constructor(skillId, time, max, min) {
    super(skillId, time);
    this.max = max;
    this.min = min;
  }
  serialize(writer) {
    writer.writeVarShort(this.max);
    writer.writeVarShort(this.min);
  }
  deserialize(reader) {
    this.max = reader.readVarShort();
    this.min = reader.readVarShort();
  }
};
var GameServerInformations = class extends DofusType {
  static id = 5238;
  id = 5238;
  date = 0;
  charactersCount = 0;
  type = -1;
  id_ = 0;
  status = 1;
  completion = 0;
  charactersSlots = 0;
  isMonoAccount = false;
  isSelectable = false;
  constructor(date, charactersCount, type, id_, status, completion, charactersSlots, isMonoAccount, isSelectable) {
    super();
    this.date = date;
    this.charactersCount = charactersCount;
    this.type = type;
    this.id_ = id_;
    this.status = status;
    this.completion = completion;
    this.charactersSlots = charactersSlots;
    this.isMonoAccount = isMonoAccount;
    this.isSelectable = isSelectable;
  }
  serialize(writer) {
    writer.writeDouble(this.date);
    writer.writeByte(this.charactersCount);
    writer.writeByte(this.type);
    writer.writeVarShort(this.id_);
    writer.writeByte(this.status);
    writer.writeByte(this.completion);
    writer.writeByte(this.charactersSlots);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.isMonoAccount);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.isSelectable);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.date = reader.readDouble();
    this.charactersCount = reader.readByte();
    this.type = reader.readByte();
    this.id_ = reader.readVarShort();
    this.status = reader.readByte();
    this.completion = reader.readByte();
    this.charactersSlots = reader.readByte();
    const box0 = reader.readByte();
    this.isMonoAccount = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.isSelectable = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var PaddockInformations = class extends DofusType {
  static id = 1965;
  id = 1965;
  maxItems = 0;
  maxOutdoorMount = 0;
  constructor(maxItems, maxOutdoorMount) {
    super();
    this.maxItems = maxItems;
    this.maxOutdoorMount = maxOutdoorMount;
  }
  serialize(writer) {
    writer.writeVarShort(this.maxItems);
    writer.writeVarShort(this.maxOutdoorMount);
  }
  deserialize(reader) {
    this.maxItems = reader.readVarShort();
    this.maxOutdoorMount = reader.readVarShort();
  }
};
var PaddockInstancesInformations = class extends PaddockInformations {
  static id = 3435;
  id = 3435;
  paddocks;
  constructor(maxItems, maxOutdoorMount, paddocks) {
    super(maxItems, maxOutdoorMount);
    this.paddocks = paddocks;
  }
  serialize(writer) {
    writer.writeShort(this.paddocks.length);
    this.paddocks.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.paddocks = [];
    const countPaddocks = reader.readShort();
    for (let i = 0; i < countPaddocks; i++) {
      const paddocksTypeId = reader.readShort();
      const type = new types[paddocksTypeId]();
      type.deserialize(reader);
      this.paddocks.push(type);
    }
  }
};
var PaddockBuyableInformations = class extends DofusType {
  static id = 3536;
  id = 3536;
  locked = false;
  price = 0;
  constructor(locked, price) {
    super();
    this.locked = locked;
    this.price = price;
  }
  serialize(writer) {
    writer.writeBoolean(this.locked);
    writer.writeVarLong(this.price);
  }
  deserialize(reader) {
    this.locked = reader.readBoolean();
    this.price = reader.readVarLong();
  }
};
var GameRolePlayNpcQuestFlag = class extends DofusType {
  static id = 3944;
  id = 3944;
  questsToValidId;
  questsToStartId;
  constructor(questsToValidId, questsToStartId) {
    super();
    this.questsToValidId = questsToValidId;
    this.questsToStartId = questsToStartId;
  }
  serialize(writer) {
    writer.writeShort(this.questsToValidId.length);
    this.questsToValidId.forEach(
      (current) => writer.writeVarShort(current)
    );
    writer.writeShort(this.questsToStartId.length);
    this.questsToStartId.forEach(
      (current) => writer.writeVarShort(current)
    );
  }
  deserialize(reader) {
    this.questsToValidId = [];
    const countQuestsToValidId = reader.readShort();
    for (let i = 0; i < countQuestsToValidId; i++) {
      this.questsToValidId.push(reader.readVarShort());
    }
    this.questsToStartId = [];
    const countQuestsToStartId = reader.readShort();
    for (let i = 0; i < countQuestsToStartId; i++) {
      this.questsToStartId.push(reader.readVarShort());
    }
  }
};
var ItemDurability = class extends DofusType {
  static id = 2055;
  id = 2055;
  durabilityMax = 0;
  durability = 0;
  constructor(durabilityMax, durability) {
    super();
    this.durabilityMax = durabilityMax;
    this.durability = durability;
  }
  serialize(writer) {
    writer.writeShort(this.durabilityMax);
    writer.writeShort(this.durability);
  }
  deserialize(reader) {
    this.durabilityMax = reader.readShort();
    this.durability = reader.readShort();
  }
};
var AchievementAchieved = class extends DofusType {
  static id = 1836;
  id = 1836;
  achievedBy = 0;
  id_ = 0;
  constructor(achievedBy, id_) {
    super();
    this.achievedBy = achievedBy;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeVarLong(this.achievedBy);
    writer.writeVarShort(this.id_);
  }
  deserialize(reader) {
    this.achievedBy = reader.readVarLong();
    this.id_ = reader.readVarShort();
  }
};
var AchievementAchievedRewardable = class extends AchievementAchieved {
  static id = 4851;
  id = 4851;
  finishedlevel = 0;
  constructor(achievedBy, id_, finishedlevel) {
    super(achievedBy, id_);
    this.finishedlevel = finishedlevel;
  }
  serialize(writer) {
    writer.writeVarShort(this.finishedlevel);
  }
  deserialize(reader) {
    this.finishedlevel = reader.readVarShort();
  }
};
var HumanOptionOrnament = class extends HumanOption {
  static id = 5510;
  id = 5510;
  leagueId = 0;
  ornamentId = 0;
  ladderPosition = 0;
  level = 0;
  constructor(leagueId, ornamentId, ladderPosition, level) {
    super();
    this.leagueId = leagueId;
    this.ornamentId = ornamentId;
    this.ladderPosition = ladderPosition;
    this.level = level;
  }
  serialize(writer) {
    writer.writeVarShort(this.leagueId);
    writer.writeVarShort(this.ornamentId);
    writer.writeInt(this.ladderPosition);
    writer.writeVarShort(this.level);
  }
  deserialize(reader) {
    this.leagueId = reader.readVarShort();
    this.ornamentId = reader.readVarShort();
    this.ladderPosition = reader.readInt();
    this.level = reader.readVarShort();
  }
};
var HumanOptionTitle = class extends HumanOption {
  static id = 1813;
  id = 1813;
  titleParam;
  titleId = 0;
  constructor(titleParam, titleId) {
    super();
    this.titleParam = titleParam;
    this.titleId = titleId;
  }
  serialize(writer) {
    writer.writeUTF(this.titleParam);
    writer.writeVarShort(this.titleId);
  }
  deserialize(reader) {
    this.titleParam = reader.readUTF();
    this.titleId = reader.readVarShort();
  }
};
var AccountHouseInformations = class extends HouseInformations {
  static id = 3170;
  id = 3170;
  worldX = 0;
  houseInfos;
  worldY = 0;
  mapId = 0;
  subAreaId = 0;
  constructor(modelId, houseId, worldX, houseInfos, worldY, mapId, subAreaId) {
    super(modelId, houseId);
    this.worldX = worldX;
    this.houseInfos = houseInfos;
    this.worldY = worldY;
    this.mapId = mapId;
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeShort(this.worldX);
    writer.writeShort(this.houseInfos.id);
    this.houseInfos.serialize(writer);
    writer.writeShort(this.worldY);
    writer.writeDouble(this.mapId);
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.worldX = reader.readShort();
    const houseInfosTypeId = reader.readShort();
    this.houseInfos = new types[houseInfosTypeId]();
    this.houseInfos.deserialize(reader);
    this.worldY = reader.readShort();
    this.mapId = reader.readDouble();
    this.subAreaId = reader.readVarShort();
  }
};
var HouseInformationsInside = class extends HouseInformations {
  static id = 2517;
  id = 2517;
  worldY = 0;
  houseInfos;
  worldX = 0;
  constructor(modelId, houseId, worldY, houseInfos, worldX) {
    super(modelId, houseId);
    this.worldY = worldY;
    this.houseInfos = houseInfos;
    this.worldX = worldX;
  }
  serialize(writer) {
    writer.writeShort(this.worldY);
    writer.writeShort(this.houseInfos.id);
    this.houseInfos.serialize(writer);
    writer.writeShort(this.worldX);
  }
  deserialize(reader) {
    this.worldY = reader.readShort();
    const houseInfosTypeId = reader.readShort();
    this.houseInfos = new types[houseInfosTypeId]();
    this.houseInfos.deserialize(reader);
    this.worldX = reader.readShort();
  }
};
var ActorAlignmentInformations = class extends DofusType {
  static id = 3635;
  id = 3635;
  characterPower = 0;
  alignmentGrade = 0;
  alignmentSide = 0;
  alignmentValue = 0;
  constructor(characterPower, alignmentGrade, alignmentSide, alignmentValue) {
    super();
    this.characterPower = characterPower;
    this.alignmentGrade = alignmentGrade;
    this.alignmentSide = alignmentSide;
    this.alignmentValue = alignmentValue;
  }
  serialize(writer) {
    writer.writeDouble(this.characterPower);
    writer.writeByte(this.alignmentGrade);
    writer.writeByte(this.alignmentSide);
    writer.writeByte(this.alignmentValue);
  }
  deserialize(reader) {
    this.characterPower = reader.readDouble();
    this.alignmentGrade = reader.readByte();
    this.alignmentSide = reader.readByte();
    this.alignmentValue = reader.readByte();
  }
};
var PortalInformation = class extends DofusType {
  static id = 2145;
  id = 2145;
  areaId = 0;
  portalId = 0;
  constructor(areaId, portalId) {
    super();
    this.areaId = areaId;
    this.portalId = portalId;
  }
  serialize(writer) {
    writer.writeShort(this.areaId);
    writer.writeInt(this.portalId);
  }
  deserialize(reader) {
    this.areaId = reader.readShort();
    this.portalId = reader.readInt();
  }
};
var AlliancePrismInformation = class extends PrismInformation {
  static id = 1469;
  id = 1469;
  alliance;
  constructor(rewardTokenCount, placementDate, typeId, nextVulnerabilityDate, state, alliance) {
    super(
      rewardTokenCount,
      placementDate,
      typeId,
      nextVulnerabilityDate,
      state
    );
    this.alliance = alliance;
  }
  serialize(writer) {
    this.alliance.serialize(writer);
  }
  deserialize(reader) {
    this.alliance = new AllianceInformations();
    this.alliance.deserialize(reader);
  }
};
var AllianceInsiderPrismInformation = class extends PrismInformation {
  static id = 8201;
  id = 8201;
  lastTimeSlotModificationAuthorGuildId = 0;
  lastTimeSlotModificationAuthorId = 0;
  lastTimeSlotModificationDate = 0;
  lastTimeSlotModificationAuthorName;
  modulesObjects;
  constructor(rewardTokenCount, placementDate, typeId, nextVulnerabilityDate, state, lastTimeSlotModificationAuthorGuildId, lastTimeSlotModificationAuthorId, lastTimeSlotModificationDate, lastTimeSlotModificationAuthorName, modulesObjects) {
    super(
      rewardTokenCount,
      placementDate,
      typeId,
      nextVulnerabilityDate,
      state
    );
    this.lastTimeSlotModificationAuthorGuildId = lastTimeSlotModificationAuthorGuildId;
    this.lastTimeSlotModificationAuthorId = lastTimeSlotModificationAuthorId;
    this.lastTimeSlotModificationDate = lastTimeSlotModificationDate;
    this.lastTimeSlotModificationAuthorName = lastTimeSlotModificationAuthorName;
    this.modulesObjects = modulesObjects;
  }
  serialize(writer) {
    writer.writeVarInt(this.lastTimeSlotModificationAuthorGuildId);
    writer.writeVarLong(this.lastTimeSlotModificationAuthorId);
    writer.writeInt(this.lastTimeSlotModificationDate);
    writer.writeUTF(this.lastTimeSlotModificationAuthorName);
    writer.writeShort(this.modulesObjects.length);
    this.modulesObjects.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.lastTimeSlotModificationAuthorGuildId = reader.readVarInt();
    this.lastTimeSlotModificationAuthorId = reader.readVarLong();
    this.lastTimeSlotModificationDate = reader.readInt();
    this.lastTimeSlotModificationAuthorName = reader.readUTF();
    this.modulesObjects = [];
    const countModulesObjects = reader.readShort();
    for (let i = 0; i < countModulesObjects; i++) {
      const type = new ObjectItem();
      type.deserialize(reader);
      this.modulesObjects.push(type);
    }
  }
};
var PaddockContentInformations = class extends PaddockInformations {
  static id = 8051;
  id = 8051;
  abandonned = false;
  worldX = 0;
  mountsInformations;
  paddockId = 0;
  worldY = 0;
  mapId = 0;
  subAreaId = 0;
  constructor(maxItems, maxOutdoorMount, abandonned, worldX, mountsInformations, paddockId, worldY, mapId, subAreaId) {
    super(maxItems, maxOutdoorMount);
    this.abandonned = abandonned;
    this.worldX = worldX;
    this.mountsInformations = mountsInformations;
    this.paddockId = paddockId;
    this.worldY = worldY;
    this.mapId = mapId;
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeBoolean(this.abandonned);
    writer.writeShort(this.worldX);
    writer.writeShort(this.mountsInformations.length);
    this.mountsInformations.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeDouble(this.paddockId);
    writer.writeShort(this.worldY);
    writer.writeDouble(this.mapId);
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.abandonned = reader.readBoolean();
    this.worldX = reader.readShort();
    this.mountsInformations = [];
    const countMountsInformations = reader.readShort();
    for (let i = 0; i < countMountsInformations; i++) {
      const type = new MountInformationsForPaddock();
      type.deserialize(reader);
      this.mountsInformations.push(type);
    }
    this.paddockId = reader.readDouble();
    this.worldY = reader.readShort();
    this.mapId = reader.readDouble();
    this.subAreaId = reader.readVarShort();
  }
};
var GuildMember = class extends CharacterMinimalInformations {
  static id = 5491;
  id = 5491;
  status;
  achievementPoints = 0;
  givenExperience = 0;
  rank = 0;
  experienceGivenPercent = 0;
  moodSmileyId = 0;
  accountId = 0;
  alignmentSide = 0;
  rights = 0;
  breed = 0;
  connected = 99;
  hoursSinceLastConnection = 0;
  sex = false;
  havenBagShared = false;
  constructor(id_, name, level, status, achievementPoints, givenExperience, rank, experienceGivenPercent, moodSmileyId, accountId, alignmentSide, rights, breed, connected, hoursSinceLastConnection, sex, havenBagShared) {
    super(id_, name, level);
    this.status = status;
    this.achievementPoints = achievementPoints;
    this.givenExperience = givenExperience;
    this.rank = rank;
    this.experienceGivenPercent = experienceGivenPercent;
    this.moodSmileyId = moodSmileyId;
    this.accountId = accountId;
    this.alignmentSide = alignmentSide;
    this.rights = rights;
    this.breed = breed;
    this.connected = connected;
    this.hoursSinceLastConnection = hoursSinceLastConnection;
    this.sex = sex;
    this.havenBagShared = havenBagShared;
  }
  serialize(writer) {
    writer.writeShort(this.status.id);
    this.status.serialize(writer);
    writer.writeInt(this.achievementPoints);
    writer.writeVarLong(this.givenExperience);
    writer.writeVarShort(this.rank);
    writer.writeByte(this.experienceGivenPercent);
    writer.writeVarShort(this.moodSmileyId);
    writer.writeInt(this.accountId);
    writer.writeByte(this.alignmentSide);
    writer.writeVarInt(this.rights);
    writer.writeByte(this.breed);
    writer.writeByte(this.connected);
    writer.writeShort(this.hoursSinceLastConnection);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.sex);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.havenBagShared);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    const statusTypeId = reader.readShort();
    this.status = new types[statusTypeId]();
    this.status.deserialize(reader);
    this.achievementPoints = reader.readInt();
    this.givenExperience = reader.readVarLong();
    this.rank = reader.readVarShort();
    this.experienceGivenPercent = reader.readByte();
    this.moodSmileyId = reader.readVarShort();
    this.accountId = reader.readInt();
    this.alignmentSide = reader.readByte();
    this.rights = reader.readVarInt();
    this.breed = reader.readByte();
    this.connected = reader.readByte();
    this.hoursSinceLastConnection = reader.readShort();
    const box0 = reader.readByte();
    this.sex = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.havenBagShared = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var SpellItem = class extends Item {
  static id = 1179;
  id = 1179;
  spellLevel = 0;
  spellId = 0;
  constructor(spellLevel, spellId) {
    super();
    this.spellLevel = spellLevel;
    this.spellId = spellId;
  }
  serialize(writer) {
    writer.writeShort(this.spellLevel);
    writer.writeInt(this.spellId);
  }
  deserialize(reader) {
    this.spellLevel = reader.readShort();
    this.spellId = reader.readInt();
  }
};
var ForgettableSpellItem = class extends SpellItem {
  static id = 2497;
  id = 2497;
  available = false;
  constructor(spellLevel, spellId, available) {
    super(spellLevel, spellId);
    this.available = available;
  }
  serialize(writer) {
    writer.writeBoolean(this.available);
  }
  deserialize(reader) {
    this.available = reader.readBoolean();
  }
};
var PlayerStatus = class extends DofusType {
  static id = 3077;
  id = 3077;
  statusId = 1;
  constructor(statusId) {
    super();
    this.statusId = statusId;
  }
  serialize(writer) {
    writer.writeByte(this.statusId);
  }
  deserialize(reader) {
    this.statusId = reader.readByte();
  }
};
var HumanOptionGuild = class extends HumanOption {
  static id = 1437;
  id = 1437;
  guildInformations;
  constructor(guildInformations) {
    super();
    this.guildInformations = guildInformations;
  }
  serialize(writer) {
    this.guildInformations.serialize(writer);
  }
  deserialize(reader) {
    this.guildInformations = new GuildInformations();
    this.guildInformations.deserialize(reader);
  }
};
var Version = class extends DofusType {
  static id = 3781;
  id = 3781;
  buildType = 0;
  build = 0;
  code = 0;
  major = 0;
  minor = 0;
  constructor(buildType, build, code, major, minor) {
    super();
    this.buildType = buildType;
    this.build = build;
    this.code = code;
    this.major = major;
    this.minor = minor;
  }
  serialize(writer) {
    writer.writeByte(this.buildType);
    writer.writeInt(this.build);
    writer.writeByte(this.code);
    writer.writeByte(this.major);
    writer.writeByte(this.minor);
  }
  deserialize(reader) {
    this.buildType = reader.readByte();
    this.build = reader.readInt();
    this.code = reader.readByte();
    this.major = reader.readByte();
    this.minor = reader.readByte();
  }
};
var ObjectItemToSell = class extends Item {
  static id = 4244;
  id = 4244;
  effects;
  quantity = 0;
  objectGID = 0;
  objectUID = 0;
  objectPrice = 0;
  constructor(effects, quantity, objectGID, objectUID, objectPrice) {
    super();
    this.effects = effects;
    this.quantity = quantity;
    this.objectGID = objectGID;
    this.objectUID = objectUID;
    this.objectPrice = objectPrice;
  }
  serialize(writer) {
    writer.writeShort(this.effects.length);
    this.effects.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarInt(this.quantity);
    writer.writeVarShort(this.objectGID);
    writer.writeVarInt(this.objectUID);
    writer.writeVarLong(this.objectPrice);
  }
  deserialize(reader) {
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i = 0; i < countEffects; i++) {
      const effectsTypeId = reader.readShort();
      const type = new types[effectsTypeId]();
      type.deserialize(reader);
      this.effects.push(type);
    }
    this.quantity = reader.readVarInt();
    this.objectGID = reader.readVarShort();
    this.objectUID = reader.readVarInt();
    this.objectPrice = reader.readVarLong();
  }
};
var ObjectItemToSellInBid = class extends ObjectItemToSell {
  static id = 3500;
  id = 3500;
  unsoldDelay = 0;
  constructor(effects, quantity, objectGID, objectUID, objectPrice, unsoldDelay) {
    super(effects, quantity, objectGID, objectUID, objectPrice);
    this.unsoldDelay = unsoldDelay;
  }
  serialize(writer) {
    writer.writeInt(this.unsoldDelay);
  }
  deserialize(reader) {
    this.unsoldDelay = reader.readInt();
  }
};
var SellerBuyerDescriptor = class extends DofusType {
  static id = 5475;
  id = 5475;
  npcContextualId = 0;
  maxItemPerAccount = 0;
  types;
  quantities;
  taxPercentage = 0;
  taxModificationPercentage = 0;
  unsoldDelay = 0;
  maxItemLevel = 0;
  constructor(npcContextualId, maxItemPerAccount, types2, quantities, taxPercentage, taxModificationPercentage, unsoldDelay, maxItemLevel) {
    super();
    this.npcContextualId = npcContextualId;
    this.maxItemPerAccount = maxItemPerAccount;
    this.types = types2;
    this.quantities = quantities;
    this.taxPercentage = taxPercentage;
    this.taxModificationPercentage = taxModificationPercentage;
    this.unsoldDelay = unsoldDelay;
    this.maxItemLevel = maxItemLevel;
  }
  serialize(writer) {
    writer.writeInt(this.npcContextualId);
    writer.writeVarInt(this.maxItemPerAccount);
    writer.writeShort(this.types.length);
    this.types.forEach((current) => writer.writeVarInt(current));
    writer.writeShort(this.quantities.length);
    this.quantities.forEach((current) => writer.writeVarInt(current));
    writer.writeFloat(this.taxPercentage);
    writer.writeFloat(this.taxModificationPercentage);
    writer.writeVarShort(this.unsoldDelay);
    writer.writeByte(this.maxItemLevel);
  }
  deserialize(reader) {
    this.npcContextualId = reader.readInt();
    this.maxItemPerAccount = reader.readVarInt();
    this.types = [];
    const countTypes = reader.readShort();
    for (let i = 0; i < countTypes; i++) {
      this.types.push(reader.readVarInt());
    }
    this.quantities = [];
    const countQuantities = reader.readShort();
    for (let i = 0; i < countQuantities; i++) {
      this.quantities.push(reader.readVarInt());
    }
    this.taxPercentage = reader.readFloat();
    this.taxModificationPercentage = reader.readFloat();
    this.unsoldDelay = reader.readVarShort();
    this.maxItemLevel = reader.readByte();
  }
};
var FightExternalInformations = class extends DofusType {
  static id = 7149;
  id = 7149;
  fightType = 0;
  fightId = 0;
  fightTeamsOptions;
  fightSpectatorLocked = false;
  fightStart = 0;
  fightTeams;
  constructor(fightType, fightId, fightTeamsOptions, fightSpectatorLocked, fightStart, fightTeams) {
    super();
    this.fightType = fightType;
    this.fightId = fightId;
    this.fightTeamsOptions = fightTeamsOptions;
    this.fightSpectatorLocked = fightSpectatorLocked;
    this.fightStart = fightStart;
    this.fightTeams = fightTeams;
  }
  serialize(writer) {
    writer.writeByte(this.fightType);
    writer.writeVarShort(this.fightId);
    this.fightTeamsOptions.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeBoolean(this.fightSpectatorLocked);
    writer.writeInt(this.fightStart);
    this.fightTeams.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.fightType = reader.readByte();
    this.fightId = reader.readVarShort();
    this.fightTeamsOptions = [];
    for (let i = 0; i < 2; i++) {
      const type = new FightOptionsInformations();
      type.deserialize(reader);
      this.fightTeamsOptions.push(type);
    }
    this.fightSpectatorLocked = reader.readBoolean();
    this.fightStart = reader.readInt();
    this.fightTeams = [];
    for (let i = 0; i < 2; i++) {
      const type = new FightTeamLightInformations();
      type.deserialize(reader);
      this.fightTeams.push(type);
    }
  }
};
var AbstractPlayerSearchInformation = class extends DofusType {
  static id = 1294;
  id = 1294;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PlayerSearchTagInformation = class extends AbstractPlayerSearchInformation {
  static id = 3556;
  id = 3556;
  tag;
  constructor(tag) {
    super();
    this.tag = tag;
  }
  serialize(writer) {
    this.tag.serialize(writer);
  }
  deserialize(reader) {
    this.tag = new AccountTagInformation();
    this.tag.deserialize(reader);
  }
};
var TaxCollectorMovement = class extends DofusType {
  static id = 6775;
  id = 6775;
  playerName;
  movementType = 0;
  playerId = 0;
  basicInfos;
  constructor(playerName, movementType, playerId, basicInfos) {
    super();
    this.playerName = playerName;
    this.movementType = movementType;
    this.playerId = playerId;
    this.basicInfos = basicInfos;
  }
  serialize(writer) {
    writer.writeUTF(this.playerName);
    writer.writeByte(this.movementType);
    writer.writeVarLong(this.playerId);
    this.basicInfos.serialize(writer);
  }
  deserialize(reader) {
    this.playerName = reader.readUTF();
    this.movementType = reader.readByte();
    this.playerId = reader.readVarLong();
    this.basicInfos = new TaxCollectorBasicInformations();
    this.basicInfos.deserialize(reader);
  }
};
var HouseInformationsForGuild = class extends HouseInformations {
  static id = 3219;
  id = 3219;
  subAreaId = 0;
  guildshareParams = 0;
  mapId = 0;
  secondHand = false;
  skillListIds;
  instanceId = 0;
  worldY = 0;
  ownerTag;
  worldX = 0;
  constructor(modelId, houseId, subAreaId, guildshareParams, mapId, secondHand, skillListIds, instanceId, worldY, ownerTag, worldX) {
    super(modelId, houseId);
    this.subAreaId = subAreaId;
    this.guildshareParams = guildshareParams;
    this.mapId = mapId;
    this.secondHand = secondHand;
    this.skillListIds = skillListIds;
    this.instanceId = instanceId;
    this.worldY = worldY;
    this.ownerTag = ownerTag;
    this.worldX = worldX;
  }
  serialize(writer) {
    writer.writeVarShort(this.subAreaId);
    writer.writeVarInt(this.guildshareParams);
    writer.writeDouble(this.mapId);
    writer.writeBoolean(this.secondHand);
    writer.writeShort(this.skillListIds.length);
    this.skillListIds.forEach((current) => writer.writeInt(current));
    writer.writeInt(this.instanceId);
    writer.writeShort(this.worldY);
    this.ownerTag.serialize(writer);
    writer.writeShort(this.worldX);
  }
  deserialize(reader) {
    this.subAreaId = reader.readVarShort();
    this.guildshareParams = reader.readVarInt();
    this.mapId = reader.readDouble();
    this.secondHand = reader.readBoolean();
    this.skillListIds = [];
    const countSkillListIds = reader.readShort();
    for (let i = 0; i < countSkillListIds; i++) {
      this.skillListIds.push(reader.readInt());
    }
    this.instanceId = reader.readInt();
    this.worldY = reader.readShort();
    this.ownerTag = new AccountTagInformation();
    this.ownerTag.deserialize(reader);
    this.worldX = reader.readShort();
  }
};
var AbstractContactInformations = class extends DofusType {
  static id = 6684;
  id = 6684;
  accountId = 0;
  accountTag;
  constructor(accountId, accountTag) {
    super();
    this.accountId = accountId;
    this.accountTag = accountTag;
  }
  serialize(writer) {
    writer.writeInt(this.accountId);
    this.accountTag.serialize(writer);
  }
  deserialize(reader) {
    this.accountId = reader.readInt();
    this.accountTag = new AccountTagInformation();
    this.accountTag.deserialize(reader);
  }
};
var FriendInformations = class extends AbstractContactInformations {
  static id = 8035;
  id = 8035;
  ladderPosition = 0;
  leagueId = 0;
  achievementPoints = 0;
  playerState = 99;
  lastConnection = 0;
  constructor(accountId, accountTag, ladderPosition, leagueId, achievementPoints, playerState, lastConnection) {
    super(accountId, accountTag);
    this.ladderPosition = ladderPosition;
    this.leagueId = leagueId;
    this.achievementPoints = achievementPoints;
    this.playerState = playerState;
    this.lastConnection = lastConnection;
  }
  serialize(writer) {
    writer.writeInt(this.ladderPosition);
    writer.writeVarShort(this.leagueId);
    writer.writeInt(this.achievementPoints);
    writer.writeByte(this.playerState);
    writer.writeVarShort(this.lastConnection);
  }
  deserialize(reader) {
    this.ladderPosition = reader.readInt();
    this.leagueId = reader.readVarShort();
    this.achievementPoints = reader.readInt();
    this.playerState = reader.readByte();
    this.lastConnection = reader.readVarShort();
  }
};
var FriendOnlineInformations = class extends FriendInformations {
  static id = 3896;
  id = 3896;
  level = 0;
  playerId = 0;
  breed = 0;
  moodSmileyId = 0;
  playerName;
  alignmentSide = 0;
  status;
  guildInfo;
  sex = false;
  havenBagShared = false;
  constructor(accountId, accountTag, ladderPosition, leagueId, achievementPoints, playerState, lastConnection, level, playerId, breed, moodSmileyId, playerName, alignmentSide, status, guildInfo, sex, havenBagShared) {
    super(
      accountId,
      accountTag,
      ladderPosition,
      leagueId,
      achievementPoints,
      playerState,
      lastConnection
    );
    this.level = level;
    this.playerId = playerId;
    this.breed = breed;
    this.moodSmileyId = moodSmileyId;
    this.playerName = playerName;
    this.alignmentSide = alignmentSide;
    this.status = status;
    this.guildInfo = guildInfo;
    this.sex = sex;
    this.havenBagShared = havenBagShared;
  }
  serialize(writer) {
    writer.writeVarShort(this.level);
    writer.writeVarLong(this.playerId);
    writer.writeByte(this.breed);
    writer.writeVarShort(this.moodSmileyId);
    writer.writeUTF(this.playerName);
    writer.writeByte(this.alignmentSide);
    writer.writeShort(this.status.id);
    this.status.serialize(writer);
    this.guildInfo.serialize(writer);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.sex);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.havenBagShared);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.level = reader.readVarShort();
    this.playerId = reader.readVarLong();
    this.breed = reader.readByte();
    this.moodSmileyId = reader.readVarShort();
    this.playerName = reader.readUTF();
    this.alignmentSide = reader.readByte();
    const statusTypeId = reader.readShort();
    this.status = new types[statusTypeId]();
    this.status.deserialize(reader);
    this.guildInfo = new GuildInformations();
    this.guildInfo.deserialize(reader);
    const box0 = reader.readByte();
    this.sex = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.havenBagShared = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var PlayerStatusExtended = class extends PlayerStatus {
  static id = 1176;
  id = 1176;
  message;
  constructor(statusId, message) {
    super(statusId);
    this.message = message;
  }
  serialize(writer) {
    writer.writeUTF(this.message);
  }
  deserialize(reader) {
    this.message = reader.readUTF();
  }
};
var AcquaintanceInformation = class extends AbstractContactInformations {
  static id = 6223;
  id = 6223;
  playerState = 99;
  constructor(accountId, accountTag, playerState) {
    super(accountId, accountTag);
    this.playerState = playerState;
  }
  serialize(writer) {
    writer.writeByte(this.playerState);
  }
  deserialize(reader) {
    this.playerState = reader.readByte();
  }
};
var AcquaintanceOnlineInformation = class extends AcquaintanceInformation {
  static id = 4750;
  id = 4750;
  moodSmileyId = 0;
  status;
  playerId = 0;
  playerName;
  constructor(accountId, accountTag, playerState, moodSmileyId, status, playerId, playerName) {
    super(accountId, accountTag, playerState);
    this.moodSmileyId = moodSmileyId;
    this.status = status;
    this.playerId = playerId;
    this.playerName = playerName;
  }
  serialize(writer) {
    writer.writeVarShort(this.moodSmileyId);
    writer.writeShort(this.status.id);
    this.status.serialize(writer);
    writer.writeVarLong(this.playerId);
    writer.writeUTF(this.playerName);
  }
  deserialize(reader) {
    this.moodSmileyId = reader.readVarShort();
    const statusTypeId = reader.readShort();
    this.status = new types[statusTypeId]();
    this.status.deserialize(reader);
    this.playerId = reader.readVarLong();
    this.playerName = reader.readUTF();
  }
};
var ObjectItemGenericQuantity = class extends Item {
  static id = 7873;
  id = 7873;
  quantity = 0;
  objectGID = 0;
  constructor(quantity, objectGID) {
    super();
    this.quantity = quantity;
    this.objectGID = objectGID;
  }
  serialize(writer) {
    writer.writeVarInt(this.quantity);
    writer.writeVarShort(this.objectGID);
  }
  deserialize(reader) {
    this.quantity = reader.readVarInt();
    this.objectGID = reader.readVarShort();
  }
};
var AccountTagInformation = class extends DofusType {
  static id = 7636;
  id = 7636;
  tagNumber;
  nickname;
  constructor(tagNumber, nickname) {
    super();
    this.tagNumber = tagNumber;
    this.nickname = nickname;
  }
  serialize(writer) {
    writer.writeUTF(this.tagNumber);
    writer.writeUTF(this.nickname);
  }
  deserialize(reader) {
    this.tagNumber = reader.readUTF();
    this.nickname = reader.readUTF();
  }
};
var IgnoredInformations = class extends AbstractContactInformations {
  static id = 1909;
  id = 1909;
  constructor(accountId, accountTag) {
    super(accountId, accountTag);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var IgnoredOnlineInformations = class extends IgnoredInformations {
  static id = 7223;
  id = 7223;
  playerId = 0;
  sex = false;
  breed = 0;
  playerName;
  constructor(accountId, accountTag, playerId, sex, breed, playerName) {
    super(accountId, accountTag);
    this.playerId = playerId;
    this.sex = sex;
    this.breed = breed;
    this.playerName = playerName;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
    writer.writeBoolean(this.sex);
    writer.writeByte(this.breed);
    writer.writeUTF(this.playerName);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
    this.sex = reader.readBoolean();
    this.breed = reader.readByte();
    this.playerName = reader.readUTF();
  }
};
var TaxCollectorInformations = class extends DofusType {
  static id = 3820;
  id = 3820;
  additionalInfos;
  lastNameId = 0;
  uniqueId = 0;
  complements;
  firtNameId = 0;
  worldX = 0;
  worldY = 0;
  state = 0;
  subAreaId = 0;
  look;
  constructor(additionalInfos, lastNameId, uniqueId, complements, firtNameId, worldX, worldY, state, subAreaId, look) {
    super();
    this.additionalInfos = additionalInfos;
    this.lastNameId = lastNameId;
    this.uniqueId = uniqueId;
    this.complements = complements;
    this.firtNameId = firtNameId;
    this.worldX = worldX;
    this.worldY = worldY;
    this.state = state;
    this.subAreaId = subAreaId;
    this.look = look;
  }
  serialize(writer) {
    this.additionalInfos.serialize(writer);
    writer.writeVarShort(this.lastNameId);
    writer.writeDouble(this.uniqueId);
    writer.writeShort(this.complements.length);
    this.complements.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarShort(this.firtNameId);
    writer.writeShort(this.worldX);
    writer.writeShort(this.worldY);
    writer.writeByte(this.state);
    writer.writeVarShort(this.subAreaId);
    this.look.serialize(writer);
  }
  deserialize(reader) {
    this.additionalInfos = new AdditionalTaxCollectorInformations();
    this.additionalInfos.deserialize(reader);
    this.lastNameId = reader.readVarShort();
    this.uniqueId = reader.readDouble();
    this.complements = [];
    const countComplements = reader.readShort();
    for (let i = 0; i < countComplements; i++) {
      const complementsTypeId = reader.readShort();
      const type = new types[complementsTypeId]();
      type.deserialize(reader);
      this.complements.push(type);
    }
    this.firtNameId = reader.readVarShort();
    this.worldX = reader.readShort();
    this.worldY = reader.readShort();
    this.state = reader.readByte();
    this.subAreaId = reader.readVarShort();
    this.look = new EntityLook();
    this.look.deserialize(reader);
  }
};
var PlayerSearchCharacterNameInformation = class extends AbstractPlayerSearchInformation {
  static id = 6431;
  id = 6431;
  name;
  constructor(name) {
    super();
    this.name = name;
  }
  serialize(writer) {
    writer.writeUTF(this.name);
  }
  deserialize(reader) {
    this.name = reader.readUTF();
  }
};
var GuildFactSheetInformations = class extends GuildInformations {
  static id = 7387;
  id = 7387;
  leaderId = 0;
  lastActivityDay = 0;
  recruitment;
  nbMembers = 0;
  nbPendingApply = 0;
  constructor(guildLevel, guildId, guildName, guildEmblem, leaderId, lastActivityDay, recruitment, nbMembers, nbPendingApply) {
    super(guildLevel, guildId, guildName, guildEmblem);
    this.leaderId = leaderId;
    this.lastActivityDay = lastActivityDay;
    this.recruitment = recruitment;
    this.nbMembers = nbMembers;
    this.nbPendingApply = nbPendingApply;
  }
  serialize(writer) {
    writer.writeVarLong(this.leaderId);
    writer.writeShort(this.lastActivityDay);
    this.recruitment.serialize(writer);
    writer.writeVarShort(this.nbMembers);
    writer.writeInt(this.nbPendingApply);
  }
  deserialize(reader) {
    this.leaderId = reader.readVarLong();
    this.lastActivityDay = reader.readShort();
    this.recruitment = new GuildRecruitmentInformation();
    this.recruitment.deserialize(reader);
    this.nbMembers = reader.readVarShort();
    this.nbPendingApply = reader.readInt();
  }
};
var BasicAllianceInformations = class extends AbstractSocialGroupInfos {
  static id = 183;
  id = 183;
  allianceTag;
  allianceId = 0;
  constructor(allianceTag, allianceId) {
    super();
    this.allianceTag = allianceTag;
    this.allianceId = allianceId;
  }
  serialize(writer) {
    writer.writeUTF(this.allianceTag);
    writer.writeVarInt(this.allianceId);
  }
  deserialize(reader) {
    this.allianceTag = reader.readUTF();
    this.allianceId = reader.readVarInt();
  }
};
var ObjectItemQuantityPriceDateEffects = class extends ObjectItemGenericQuantity {
  static id = 7217;
  id = 7217;
  date = 0;
  price = 0;
  effects;
  constructor(quantity, objectGID, date, price, effects) {
    super(quantity, objectGID);
    this.date = date;
    this.price = price;
    this.effects = effects;
  }
  serialize(writer) {
    writer.writeInt(this.date);
    writer.writeVarLong(this.price);
    this.effects.serialize(writer);
  }
  deserialize(reader) {
    this.date = reader.readInt();
    this.price = reader.readVarLong();
    this.effects = new ObjectEffects();
    this.effects.deserialize(reader);
  }
};
var DungeonPartyFinderPlayer = class extends DofusType {
  static id = 5806;
  id = 5806;
  level = 0;
  playerId = 0;
  sex = false;
  breed = 0;
  playerName;
  constructor(level, playerId, sex, breed, playerName) {
    super();
    this.level = level;
    this.playerId = playerId;
    this.sex = sex;
    this.breed = breed;
    this.playerName = playerName;
  }
  serialize(writer) {
    writer.writeVarShort(this.level);
    writer.writeVarLong(this.playerId);
    writer.writeBoolean(this.sex);
    writer.writeByte(this.breed);
    writer.writeUTF(this.playerName);
  }
  deserialize(reader) {
    this.level = reader.readVarShort();
    this.playerId = reader.readVarLong();
    this.sex = reader.readBoolean();
    this.breed = reader.readByte();
    this.playerName = reader.readUTF();
  }
};
var PartyMemberInformations = class extends CharacterBaseInformations {
  static id = 8492;
  id = 8492;
  prospecting = 0;
  lifePoints = 0;
  subAreaId = 0;
  maxLifePoints = 0;
  mapId = 0;
  entities;
  alignmentSide = 0;
  worldX = 0;
  regenRate = 0;
  worldY = 0;
  initiative = 0;
  status;
  constructor(id_, name, level, entityLook, breed, sex, prospecting, lifePoints, subAreaId, maxLifePoints, mapId, entities, alignmentSide, worldX, regenRate, worldY, initiative, status) {
    super(id_, name, level, entityLook, breed, sex);
    this.prospecting = prospecting;
    this.lifePoints = lifePoints;
    this.subAreaId = subAreaId;
    this.maxLifePoints = maxLifePoints;
    this.mapId = mapId;
    this.entities = entities;
    this.alignmentSide = alignmentSide;
    this.worldX = worldX;
    this.regenRate = regenRate;
    this.worldY = worldY;
    this.initiative = initiative;
    this.status = status;
  }
  serialize(writer) {
    writer.writeVarShort(this.prospecting);
    writer.writeVarInt(this.lifePoints);
    writer.writeVarShort(this.subAreaId);
    writer.writeVarInt(this.maxLifePoints);
    writer.writeDouble(this.mapId);
    writer.writeShort(this.entities.length);
    this.entities.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeByte(this.alignmentSide);
    writer.writeShort(this.worldX);
    writer.writeByte(this.regenRate);
    writer.writeShort(this.worldY);
    writer.writeVarShort(this.initiative);
    writer.writeShort(this.status.id);
    this.status.serialize(writer);
  }
  deserialize(reader) {
    this.prospecting = reader.readVarShort();
    this.lifePoints = reader.readVarInt();
    this.subAreaId = reader.readVarShort();
    this.maxLifePoints = reader.readVarInt();
    this.mapId = reader.readDouble();
    this.entities = [];
    const countEntities = reader.readShort();
    for (let i = 0; i < countEntities; i++) {
      const entitiesTypeId = reader.readShort();
      const type = new types[entitiesTypeId]();
      type.deserialize(reader);
      this.entities.push(type);
    }
    this.alignmentSide = reader.readByte();
    this.worldX = reader.readShort();
    this.regenRate = reader.readByte();
    this.worldY = reader.readShort();
    this.initiative = reader.readVarShort();
    const statusTypeId = reader.readShort();
    this.status = new types[statusTypeId]();
    this.status.deserialize(reader);
  }
};
var PartyMemberArenaInformations = class extends PartyMemberInformations {
  static id = 2694;
  id = 2694;
  rank = 0;
  constructor(id_, name, level, entityLook, breed, sex, prospecting, lifePoints, subAreaId, maxLifePoints, mapId, entities, alignmentSide, worldX, regenRate, worldY, initiative, status, rank) {
    super(
      id_,
      name,
      level,
      entityLook,
      breed,
      sex,
      prospecting,
      lifePoints,
      subAreaId,
      maxLifePoints,
      mapId,
      entities,
      alignmentSide,
      worldX,
      regenRate,
      worldY,
      initiative,
      status
    );
    this.rank = rank;
  }
  serialize(writer) {
    writer.writeVarShort(this.rank);
  }
  deserialize(reader) {
    this.rank = reader.readVarShort();
  }
};
var PartyEntityBaseInformation = class extends DofusType {
  static id = 8087;
  id = 8087;
  entityLook;
  indexId = 0;
  entityModelId = 0;
  constructor(entityLook, indexId, entityModelId) {
    super();
    this.entityLook = entityLook;
    this.indexId = indexId;
    this.entityModelId = entityModelId;
  }
  serialize(writer) {
    this.entityLook.serialize(writer);
    writer.writeByte(this.indexId);
    writer.writeByte(this.entityModelId);
  }
  deserialize(reader) {
    this.entityLook = new EntityLook();
    this.entityLook.deserialize(reader);
    this.indexId = reader.readByte();
    this.entityModelId = reader.readByte();
  }
};
var PartyInvitationMemberInformations = class extends CharacterBaseInformations {
  static id = 436;
  id = 436;
  mapId = 0;
  worldX = 0;
  subAreaId = 0;
  worldY = 0;
  entities;
  constructor(id_, name, level, entityLook, breed, sex, mapId, worldX, subAreaId, worldY, entities) {
    super(id_, name, level, entityLook, breed, sex);
    this.mapId = mapId;
    this.worldX = worldX;
    this.subAreaId = subAreaId;
    this.worldY = worldY;
    this.entities = entities;
  }
  serialize(writer) {
    writer.writeDouble(this.mapId);
    writer.writeShort(this.worldX);
    writer.writeVarShort(this.subAreaId);
    writer.writeShort(this.worldY);
    writer.writeShort(this.entities.length);
    this.entities.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.mapId = reader.readDouble();
    this.worldX = reader.readShort();
    this.subAreaId = reader.readVarShort();
    this.worldY = reader.readShort();
    this.entities = [];
    const countEntities = reader.readShort();
    for (let i = 0; i < countEntities; i++) {
      const type = new PartyEntityBaseInformation();
      type.deserialize(reader);
      this.entities.push(type);
    }
  }
};
var PartyGuestInformations = class extends DofusType {
  static id = 1057;
  id = 1057;
  entities;
  status;
  sex = false;
  hostId = 0;
  guestId = 0;
  name;
  guestLook;
  breed = 0;
  constructor(entities, status, sex, hostId, guestId, name, guestLook, breed) {
    super();
    this.entities = entities;
    this.status = status;
    this.sex = sex;
    this.hostId = hostId;
    this.guestId = guestId;
    this.name = name;
    this.guestLook = guestLook;
    this.breed = breed;
  }
  serialize(writer) {
    writer.writeShort(this.entities.length);
    this.entities.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.status.id);
    this.status.serialize(writer);
    writer.writeBoolean(this.sex);
    writer.writeVarLong(this.hostId);
    writer.writeVarLong(this.guestId);
    writer.writeUTF(this.name);
    this.guestLook.serialize(writer);
    writer.writeByte(this.breed);
  }
  deserialize(reader) {
    this.entities = [];
    const countEntities = reader.readShort();
    for (let i = 0; i < countEntities; i++) {
      const type = new PartyEntityBaseInformation();
      type.deserialize(reader);
      this.entities.push(type);
    }
    const statusTypeId = reader.readShort();
    this.status = new types[statusTypeId]();
    this.status.deserialize(reader);
    this.sex = reader.readBoolean();
    this.hostId = reader.readVarLong();
    this.guestId = reader.readVarLong();
    this.name = reader.readUTF();
    this.guestLook = new EntityLook();
    this.guestLook.deserialize(reader);
    this.breed = reader.readByte();
  }
};
var PartyEntityMemberInformation = class extends PartyEntityBaseInformation {
  static id = 2136;
  id = 2136;
  prospecting = 0;
  regenRate = 0;
  maxLifePoints = 0;
  initiative = 0;
  lifePoints = 0;
  constructor(entityLook, indexId, entityModelId, prospecting, regenRate, maxLifePoints, initiative, lifePoints) {
    super(entityLook, indexId, entityModelId);
    this.prospecting = prospecting;
    this.regenRate = regenRate;
    this.maxLifePoints = maxLifePoints;
    this.initiative = initiative;
    this.lifePoints = lifePoints;
  }
  serialize(writer) {
    writer.writeVarShort(this.prospecting);
    writer.writeByte(this.regenRate);
    writer.writeVarInt(this.maxLifePoints);
    writer.writeVarShort(this.initiative);
    writer.writeVarInt(this.lifePoints);
  }
  deserialize(reader) {
    this.prospecting = reader.readVarShort();
    this.regenRate = reader.readByte();
    this.maxLifePoints = reader.readVarInt();
    this.initiative = reader.readVarShort();
    this.lifePoints = reader.readVarInt();
  }
};
var GuildInAllianceInformations = class extends GuildInformations {
  static id = 8343;
  id = 8343;
  joinDate = 0;
  nbMembers = 0;
  constructor(guildLevel, guildId, guildName, guildEmblem, joinDate, nbMembers) {
    super(guildLevel, guildId, guildName, guildEmblem);
    this.joinDate = joinDate;
    this.nbMembers = nbMembers;
  }
  serialize(writer) {
    writer.writeInt(this.joinDate);
    writer.writeByte(this.nbMembers);
  }
  deserialize(reader) {
    this.joinDate = reader.readInt();
    this.nbMembers = reader.readByte();
  }
};
var PrismSubareaEmptyInfo = class extends DofusType {
  static id = 6884;
  id = 6884;
  allianceId = 0;
  subAreaId = 0;
  constructor(allianceId, subAreaId) {
    super();
    this.allianceId = allianceId;
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeVarInt(this.allianceId);
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.allianceId = reader.readVarInt();
    this.subAreaId = reader.readVarShort();
  }
};
var PrismGeolocalizedInformation = class extends PrismSubareaEmptyInfo {
  static id = 2406;
  id = 2406;
  prism;
  worldX = 0;
  mapId = 0;
  worldY = 0;
  constructor(allianceId, subAreaId, prism, worldX, mapId, worldY) {
    super(allianceId, subAreaId);
    this.prism = prism;
    this.worldX = worldX;
    this.mapId = mapId;
    this.worldY = worldY;
  }
  serialize(writer) {
    writer.writeShort(this.prism.id);
    this.prism.serialize(writer);
    writer.writeShort(this.worldX);
    writer.writeDouble(this.mapId);
    writer.writeShort(this.worldY);
  }
  deserialize(reader) {
    const prismTypeId = reader.readShort();
    this.prism = new types[prismTypeId]();
    this.prism.deserialize(reader);
    this.worldX = reader.readShort();
    this.mapId = reader.readDouble();
    this.worldY = reader.readShort();
  }
};
var GuildInsiderFactSheetInformations = class extends GuildFactSheetInformations {
  static id = 8132;
  id = 8132;
  nbTaxCollectors = 0;
  leaderName;
  nbConnectedMembers = 0;
  constructor(guildLevel, guildId, guildName, guildEmblem, leaderId, lastActivityDay, recruitment, nbMembers, nbPendingApply, nbTaxCollectors, leaderName, nbConnectedMembers) {
    super(
      guildLevel,
      guildId,
      guildName,
      guildEmblem,
      leaderId,
      lastActivityDay,
      recruitment,
      nbMembers,
      nbPendingApply
    );
    this.nbTaxCollectors = nbTaxCollectors;
    this.leaderName = leaderName;
    this.nbConnectedMembers = nbConnectedMembers;
  }
  serialize(writer) {
    writer.writeByte(this.nbTaxCollectors);
    writer.writeUTF(this.leaderName);
    writer.writeVarShort(this.nbConnectedMembers);
  }
  deserialize(reader) {
    this.nbTaxCollectors = reader.readByte();
    this.leaderName = reader.readUTF();
    this.nbConnectedMembers = reader.readVarShort();
  }
};
var FightTriggeredEffect = class extends AbstractFightDispellableEffect {
  static id = 1349;
  id = 1349;
  delay = 0;
  param3 = 0;
  param1 = 0;
  param2 = 0;
  constructor(parentBoostUid, effectId, targetId, uid, turnDuration, spellId, dispelable, delay, param3, param1, param2) {
    super(
      parentBoostUid,
      effectId,
      targetId,
      uid,
      turnDuration,
      spellId,
      dispelable
    );
    this.delay = delay;
    this.param3 = param3;
    this.param1 = param1;
    this.param2 = param2;
  }
  serialize(writer) {
    writer.writeShort(this.delay);
    writer.writeInt(this.param3);
    writer.writeInt(this.param1);
    writer.writeInt(this.param2);
  }
  deserialize(reader) {
    this.delay = reader.readShort();
    this.param3 = reader.readInt();
    this.param1 = reader.readInt();
    this.param2 = reader.readInt();
  }
};
var FightTemporarySpellImmunityEffect = class extends AbstractFightDispellableEffect {
  static id = 4141;
  id = 4141;
  immuneSpellId = 0;
  constructor(parentBoostUid, effectId, targetId, uid, turnDuration, spellId, dispelable, immuneSpellId) {
    super(
      parentBoostUid,
      effectId,
      targetId,
      uid,
      turnDuration,
      spellId,
      dispelable
    );
    this.immuneSpellId = immuneSpellId;
  }
  serialize(writer) {
    writer.writeInt(this.immuneSpellId);
  }
  deserialize(reader) {
    this.immuneSpellId = reader.readInt();
  }
};
var FightTemporaryBoostWeaponDamagesEffect = class extends FightTemporaryBoostEffect {
  static id = 15;
  id = 15;
  weaponTypeId = 0;
  constructor(parentBoostUid, effectId, targetId, uid, turnDuration, spellId, dispelable, delta, weaponTypeId) {
    super(
      parentBoostUid,
      effectId,
      targetId,
      uid,
      turnDuration,
      spellId,
      dispelable,
      delta
    );
    this.weaponTypeId = weaponTypeId;
  }
  serialize(writer) {
    writer.writeShort(this.weaponTypeId);
  }
  deserialize(reader) {
    this.weaponTypeId = reader.readShort();
  }
};
var FightTemporaryBoostStateEffect = class extends FightTemporaryBoostEffect {
  static id = 8281;
  id = 8281;
  stateId = 0;
  constructor(parentBoostUid, effectId, targetId, uid, turnDuration, spellId, dispelable, delta, stateId) {
    super(
      parentBoostUid,
      effectId,
      targetId,
      uid,
      turnDuration,
      spellId,
      dispelable,
      delta
    );
    this.stateId = stateId;
  }
  serialize(writer) {
    writer.writeShort(this.stateId);
  }
  deserialize(reader) {
    this.stateId = reader.readShort();
  }
};
var FightTemporarySpellBoostEffect = class extends FightTemporaryBoostEffect {
  static id = 540;
  id = 540;
  boostedSpellId = 0;
  constructor(parentBoostUid, effectId, targetId, uid, turnDuration, spellId, dispelable, delta, boostedSpellId) {
    super(
      parentBoostUid,
      effectId,
      targetId,
      uid,
      turnDuration,
      spellId,
      dispelable,
      delta
    );
    this.boostedSpellId = boostedSpellId;
  }
  serialize(writer) {
    writer.writeVarShort(this.boostedSpellId);
  }
  deserialize(reader) {
    this.boostedSpellId = reader.readVarShort();
  }
};
var FinishMoveInformations = class extends DofusType {
  static id = 2972;
  id = 2972;
  finishMoveState = false;
  finishMoveId = 0;
  constructor(finishMoveState, finishMoveId) {
    super();
    this.finishMoveState = finishMoveState;
    this.finishMoveId = finishMoveId;
  }
  serialize(writer) {
    writer.writeBoolean(this.finishMoveState);
    writer.writeInt(this.finishMoveId);
  }
  deserialize(reader) {
    this.finishMoveState = reader.readBoolean();
    this.finishMoveId = reader.readInt();
  }
};
var FightStartingPositions = class extends DofusType {
  static id = 9707;
  id = 9707;
  positionsForChallengers;
  positionsForDefenders;
  constructor(positionsForChallengers, positionsForDefenders) {
    super();
    this.positionsForChallengers = positionsForChallengers;
    this.positionsForDefenders = positionsForDefenders;
  }
  serialize(writer) {
    writer.writeShort(this.positionsForChallengers.length);
    this.positionsForChallengers.forEach(
      (current) => writer.writeVarShort(current)
    );
    writer.writeShort(this.positionsForDefenders.length);
    this.positionsForDefenders.forEach(
      (current) => writer.writeVarShort(current)
    );
  }
  deserialize(reader) {
    this.positionsForChallengers = [];
    const countPositionsForChallengers = reader.readShort();
    for (let i = 0; i < countPositionsForChallengers; i++) {
      this.positionsForChallengers.push(reader.readVarShort());
    }
    this.positionsForDefenders = [];
    const countPositionsForDefenders = reader.readShort();
    for (let i = 0; i < countPositionsForDefenders; i++) {
      this.positionsForDefenders.push(reader.readVarShort());
    }
  }
};
var BasicNamedAllianceInformations = class extends BasicAllianceInformations {
  static id = 949;
  id = 949;
  allianceName;
  constructor(allianceTag, allianceId, allianceName) {
    super(allianceTag, allianceId);
    this.allianceName = allianceName;
  }
  serialize(writer) {
    writer.writeUTF(this.allianceName);
  }
  deserialize(reader) {
    this.allianceName = reader.readUTF();
  }
};
var AllianceInformations = class extends BasicNamedAllianceInformations {
  static id = 5338;
  id = 5338;
  allianceEmblem;
  constructor(allianceTag, allianceId, allianceName, allianceEmblem) {
    super(allianceTag, allianceId, allianceName);
    this.allianceEmblem = allianceEmblem;
  }
  serialize(writer) {
    this.allianceEmblem.serialize(writer);
  }
  deserialize(reader) {
    this.allianceEmblem = new GuildEmblem();
    this.allianceEmblem.deserialize(reader);
  }
};
var FightTeamMemberCharacterInformations = class extends FightTeamMemberInformations {
  static id = 6593;
  id = 6593;
  level = 0;
  name;
  constructor(id_, level, name) {
    super(id_);
    this.level = level;
    this.name = name;
  }
  serialize(writer) {
    writer.writeVarShort(this.level);
    writer.writeUTF(this.name);
  }
  deserialize(reader) {
    this.level = reader.readVarShort();
    this.name = reader.readUTF();
  }
};
var FightTeamMemberWithAllianceCharacterInformations = class extends FightTeamMemberCharacterInformations {
  static id = 2689;
  id = 2689;
  allianceInfos;
  constructor(id_, level, name, allianceInfos) {
    super(id_, level, name);
    this.allianceInfos = allianceInfos;
  }
  serialize(writer) {
    this.allianceInfos.serialize(writer);
  }
  deserialize(reader) {
    this.allianceInfos = new BasicAllianceInformations();
    this.allianceInfos.deserialize(reader);
  }
};
var ExtendedBreachBranch = class extends BreachBranch {
  static id = 9376;
  id = 9376;
  prize = 0;
  rewards;
  modifier = 0;
  constructor(monsters, relativeScore, room, bosses, map, element, score, prize, rewards, modifier) {
    super(monsters, relativeScore, room, bosses, map, element, score);
    this.prize = prize;
    this.rewards = rewards;
    this.modifier = modifier;
  }
  serialize(writer) {
    writer.writeVarInt(this.prize);
    writer.writeShort(this.rewards.length);
    this.rewards.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarInt(this.modifier);
  }
  deserialize(reader) {
    this.prize = reader.readVarInt();
    this.rewards = [];
    const countRewards = reader.readShort();
    for (let i = 0; i < countRewards; i++) {
      const type = new BreachReward();
      type.deserialize(reader);
      this.rewards.push(type);
    }
    this.modifier = reader.readVarInt();
  }
};
var BreachReward = class extends DofusType {
  static id = 2317;
  id = 2317;
  id_ = 0;
  buyCriterion;
  remainingQty = 0;
  buyLocks;
  price = 0;
  constructor(id_, buyCriterion, remainingQty, buyLocks, price) {
    super();
    this.id_ = id_;
    this.buyCriterion = buyCriterion;
    this.remainingQty = remainingQty;
    this.buyLocks = buyLocks;
    this.price = price;
  }
  serialize(writer) {
    writer.writeVarInt(this.id_);
    writer.writeUTF(this.buyCriterion);
    writer.writeVarInt(this.remainingQty);
    writer.writeShort(this.buyLocks.length);
    this.buyLocks.forEach((current) => writer.writeByte(current));
    writer.writeVarInt(this.price);
  }
  deserialize(reader) {
    this.id_ = reader.readVarInt();
    this.buyCriterion = reader.readUTF();
    this.remainingQty = reader.readVarInt();
    this.buyLocks = [];
    const countBuyLocks = reader.readShort();
    for (let i = 0; i < countBuyLocks; i++) {
      this.buyLocks.push(reader.readByte());
    }
    this.price = reader.readVarInt();
  }
};
var HouseGuildedInformations = class extends HouseInstanceInformations {
  static id = 856;
  id = 856;
  guildInfo;
  constructor(price, instanceId, ownerTag, secondHand, isLocked, hasOwner, isSaleLocked, guildInfo) {
    super(
      price,
      instanceId,
      ownerTag,
      secondHand,
      isLocked,
      hasOwner,
      isSaleLocked
    );
    this.guildInfo = guildInfo;
  }
  serialize(writer) {
    this.guildInfo.serialize(writer);
  }
  deserialize(reader) {
    this.guildInfo = new GuildInformations();
    this.guildInfo.deserialize(reader);
  }
};
var FightOptionsInformations = class extends DofusType {
  static id = 5639;
  id = 5639;
  isSecret = false;
  isRestrictedToPartyOnly = false;
  isClosed = false;
  isAskingForHelp = false;
  constructor(isSecret, isRestrictedToPartyOnly, isClosed, isAskingForHelp) {
    super();
    this.isSecret = isSecret;
    this.isRestrictedToPartyOnly = isRestrictedToPartyOnly;
    this.isClosed = isClosed;
    this.isAskingForHelp = isAskingForHelp;
  }
  serialize(writer) {
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.isSecret);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.isRestrictedToPartyOnly);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 2, this.isClosed);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 3, this.isAskingForHelp);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    const box0 = reader.readByte();
    this.isSecret = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.isRestrictedToPartyOnly = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
    this.isClosed = (0, import_hetwan2.bigEndianGetFlag)(box0, 2);
    this.isAskingForHelp = (0, import_hetwan2.bigEndianGetFlag)(box0, 3);
  }
};
var FightTeamMemberTaxCollectorInformations = class extends FightTeamMemberInformations {
  static id = 9850;
  id = 9850;
  guildId = 0;
  level = 0;
  uid = 0;
  firstNameId = 0;
  lastNameId = 0;
  constructor(id_, guildId, level, uid, firstNameId, lastNameId) {
    super(id_);
    this.guildId = guildId;
    this.level = level;
    this.uid = uid;
    this.firstNameId = firstNameId;
    this.lastNameId = lastNameId;
  }
  serialize(writer) {
    writer.writeVarInt(this.guildId);
    writer.writeByte(this.level);
    writer.writeDouble(this.uid);
    writer.writeVarShort(this.firstNameId);
    writer.writeVarShort(this.lastNameId);
  }
  deserialize(reader) {
    this.guildId = reader.readVarInt();
    this.level = reader.readByte();
    this.uid = reader.readDouble();
    this.firstNameId = reader.readVarShort();
    this.lastNameId = reader.readVarShort();
  }
};
var TaxCollectorStaticExtendedInformations = class extends TaxCollectorStaticInformations {
  static id = 6505;
  id = 6505;
  allianceIdentity;
  constructor(callerId, guildIdentity, firstNameId, lastNameId, allianceIdentity) {
    super(callerId, guildIdentity, firstNameId, lastNameId);
    this.allianceIdentity = allianceIdentity;
  }
  serialize(writer) {
    this.allianceIdentity.serialize(writer);
  }
  deserialize(reader) {
    this.allianceIdentity = new AllianceInformations();
    this.allianceIdentity.deserialize(reader);
  }
};
var GameRolePlayTreasureHintInformations = class extends GameRolePlayActorInformations {
  static id = 8741;
  id = 8741;
  npcId = 0;
  constructor(contextualId, disposition, look, npcId) {
    super(contextualId, disposition, look);
    this.npcId = npcId;
  }
  serialize(writer) {
    writer.writeVarShort(this.npcId);
  }
  deserialize(reader) {
    this.npcId = reader.readVarShort();
  }
};
var FightResultMutantListEntry = class extends FightResultFighterListEntry {
  static id = 815;
  id = 815;
  level = 0;
  constructor(rewards, outcome, wave, alive, id_, level) {
    super(rewards, outcome, wave, alive, id_);
    this.level = level;
  }
  serialize(writer) {
    writer.writeVarShort(this.level);
  }
  deserialize(reader) {
    this.level = reader.readVarShort();
  }
};
var TreasureHuntStep = class extends DofusType {
  static id = 7141;
  id = 7141;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var TreasureHuntStepFight = class extends TreasureHuntStep {
  static id = 4747;
  id = 4747;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var MapCoordinates = class extends DofusType {
  static id = 3568;
  id = 3568;
  worldY = 0;
  worldX = 0;
  constructor(worldY, worldX) {
    super();
    this.worldY = worldY;
    this.worldX = worldX;
  }
  serialize(writer) {
    writer.writeShort(this.worldY);
    writer.writeShort(this.worldX);
  }
  deserialize(reader) {
    this.worldY = reader.readShort();
    this.worldX = reader.readShort();
  }
};
var FriendSpouseInformations = class extends DofusType {
  static id = 9956;
  id = 9956;
  alignmentSide = 0;
  spouseEntityLook;
  sex = 0;
  spouseId = 0;
  guildInfo;
  spouseName;
  spouseLevel = 0;
  spouseAccountId = 0;
  breed = 0;
  constructor(alignmentSide, spouseEntityLook, sex, spouseId, guildInfo, spouseName, spouseLevel, spouseAccountId, breed) {
    super();
    this.alignmentSide = alignmentSide;
    this.spouseEntityLook = spouseEntityLook;
    this.sex = sex;
    this.spouseId = spouseId;
    this.guildInfo = guildInfo;
    this.spouseName = spouseName;
    this.spouseLevel = spouseLevel;
    this.spouseAccountId = spouseAccountId;
    this.breed = breed;
  }
  serialize(writer) {
    writer.writeByte(this.alignmentSide);
    this.spouseEntityLook.serialize(writer);
    writer.writeByte(this.sex);
    writer.writeVarLong(this.spouseId);
    this.guildInfo.serialize(writer);
    writer.writeUTF(this.spouseName);
    writer.writeVarShort(this.spouseLevel);
    writer.writeInt(this.spouseAccountId);
    writer.writeByte(this.breed);
  }
  deserialize(reader) {
    this.alignmentSide = reader.readByte();
    this.spouseEntityLook = new EntityLook();
    this.spouseEntityLook.deserialize(reader);
    this.sex = reader.readByte();
    this.spouseId = reader.readVarLong();
    this.guildInfo = new GuildInformations();
    this.guildInfo.deserialize(reader);
    this.spouseName = reader.readUTF();
    this.spouseLevel = reader.readVarShort();
    this.spouseAccountId = reader.readInt();
    this.breed = reader.readByte();
  }
};
var FriendSpouseOnlineInformations = class extends FriendSpouseInformations {
  static id = 1910;
  id = 1910;
  mapId = 0;
  subAreaId = 0;
  inFight = false;
  followSpouse = false;
  constructor(alignmentSide, spouseEntityLook, sex, spouseId, guildInfo, spouseName, spouseLevel, spouseAccountId, breed, mapId, subAreaId, inFight, followSpouse) {
    super(
      alignmentSide,
      spouseEntityLook,
      sex,
      spouseId,
      guildInfo,
      spouseName,
      spouseLevel,
      spouseAccountId,
      breed
    );
    this.mapId = mapId;
    this.subAreaId = subAreaId;
    this.inFight = inFight;
    this.followSpouse = followSpouse;
  }
  serialize(writer) {
    writer.writeDouble(this.mapId);
    writer.writeVarShort(this.subAreaId);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.inFight);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.followSpouse);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.mapId = reader.readDouble();
    this.subAreaId = reader.readVarShort();
    const box0 = reader.readByte();
    this.inFight = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.followSpouse = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var CharacterMinimalPlusLookAndGradeInformations = class extends CharacterMinimalPlusLookInformations {
  static id = 7522;
  id = 7522;
  grade = 0;
  constructor(id_, name, level, entityLook, breed, grade) {
    super(id_, name, level, entityLook, breed);
    this.grade = grade;
  }
  serialize(writer) {
    writer.writeVarInt(this.grade);
  }
  deserialize(reader) {
    this.grade = reader.readVarInt();
  }
};
var StatisticData = class extends DofusType {
  static id = 9162;
  id = 9162;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var StatisticDataShort = class extends StatisticData {
  static id = 5872;
  id = 5872;
  value = 0;
  constructor(value) {
    super();
    this.value = value;
  }
  serialize(writer) {
    writer.writeShort(this.value);
  }
  deserialize(reader) {
    this.value = reader.readShort();
  }
};
var FightResultAdditionalData = class extends DofusType {
  static id = 6654;
  id = 6654;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var FightResultExperienceData = class extends FightResultAdditionalData {
  static id = 9530;
  id = 9530;
  rerollExperienceMul = 0;
  experienceLevelFloor = 0;
  experienceNextLevelFloor = 0;
  experience = 0;
  experienceFightDelta = 0;
  experienceForGuild = 0;
  experienceForMount = 0;
  showExperience = false;
  showExperienceLevelFloor = false;
  showExperienceNextLevelFloor = false;
  showExperienceFightDelta = false;
  showExperienceForGuild = false;
  showExperienceForMount = false;
  isIncarnationExperience = false;
  constructor(rerollExperienceMul, experienceLevelFloor, experienceNextLevelFloor, experience, experienceFightDelta, experienceForGuild, experienceForMount, showExperience, showExperienceLevelFloor, showExperienceNextLevelFloor, showExperienceFightDelta, showExperienceForGuild, showExperienceForMount, isIncarnationExperience) {
    super();
    this.rerollExperienceMul = rerollExperienceMul;
    this.experienceLevelFloor = experienceLevelFloor;
    this.experienceNextLevelFloor = experienceNextLevelFloor;
    this.experience = experience;
    this.experienceFightDelta = experienceFightDelta;
    this.experienceForGuild = experienceForGuild;
    this.experienceForMount = experienceForMount;
    this.showExperience = showExperience;
    this.showExperienceLevelFloor = showExperienceLevelFloor;
    this.showExperienceNextLevelFloor = showExperienceNextLevelFloor;
    this.showExperienceFightDelta = showExperienceFightDelta;
    this.showExperienceForGuild = showExperienceForGuild;
    this.showExperienceForMount = showExperienceForMount;
    this.isIncarnationExperience = isIncarnationExperience;
  }
  serialize(writer) {
    writer.writeByte(this.rerollExperienceMul);
    writer.writeVarLong(this.experienceLevelFloor);
    writer.writeVarLong(this.experienceNextLevelFloor);
    writer.writeVarLong(this.experience);
    writer.writeVarLong(this.experienceFightDelta);
    writer.writeVarLong(this.experienceForGuild);
    writer.writeVarLong(this.experienceForMount);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.showExperience);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.showExperienceLevelFloor);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 2, this.showExperienceNextLevelFloor);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 3, this.showExperienceFightDelta);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 4, this.showExperienceForGuild);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 5, this.showExperienceForMount);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 6, this.isIncarnationExperience);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.rerollExperienceMul = reader.readByte();
    this.experienceLevelFloor = reader.readVarLong();
    this.experienceNextLevelFloor = reader.readVarLong();
    this.experience = reader.readVarLong();
    this.experienceFightDelta = reader.readVarLong();
    this.experienceForGuild = reader.readVarLong();
    this.experienceForMount = reader.readVarLong();
    const box0 = reader.readByte();
    this.showExperience = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.showExperienceLevelFloor = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
    this.showExperienceNextLevelFloor = (0, import_hetwan2.bigEndianGetFlag)(box0, 2);
    this.showExperienceFightDelta = (0, import_hetwan2.bigEndianGetFlag)(box0, 3);
    this.showExperienceForGuild = (0, import_hetwan2.bigEndianGetFlag)(box0, 4);
    this.showExperienceForMount = (0, import_hetwan2.bigEndianGetFlag)(box0, 5);
    this.isIncarnationExperience = (0, import_hetwan2.bigEndianGetFlag)(box0, 6);
  }
};
var ObjectEffectString = class extends ObjectEffect {
  static id = 576;
  id = 576;
  value;
  constructor(actionId, value) {
    super(actionId);
    this.value = value;
  }
  serialize(writer) {
    writer.writeUTF(this.value);
  }
  deserialize(reader) {
    this.value = reader.readUTF();
  }
};
var Preset = class extends DofusType {
  static id = 6024;
  id = 6024;
  id_ = 0;
  constructor(id_) {
    super();
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeShort(this.id_);
  }
  deserialize(reader) {
    this.id_ = reader.readShort();
  }
};
var IdolsPreset = class extends Preset {
  static id = 6343;
  id = 6343;
  iconId = 0;
  idolIds;
  constructor(id_, iconId, idolIds) {
    super(id_);
    this.iconId = iconId;
    this.idolIds = idolIds;
  }
  serialize(writer) {
    writer.writeShort(this.iconId);
    writer.writeShort(this.idolIds.length);
    this.idolIds.forEach((current) => writer.writeVarShort(current));
  }
  deserialize(reader) {
    this.iconId = reader.readShort();
    this.idolIds = [];
    const countIdolIds = reader.readShort();
    for (let i = 0; i < countIdolIds; i++) {
      this.idolIds.push(reader.readVarShort());
    }
  }
};
var AlliancedGuildFactSheetInformations = class extends GuildInformations {
  static id = 1714;
  id = 1714;
  allianceInfos;
  constructor(guildLevel, guildId, guildName, guildEmblem, allianceInfos) {
    super(guildLevel, guildId, guildName, guildEmblem);
    this.allianceInfos = allianceInfos;
  }
  serialize(writer) {
    this.allianceInfos.serialize(writer);
  }
  deserialize(reader) {
    this.allianceInfos = new BasicNamedAllianceInformations();
    this.allianceInfos.deserialize(reader);
  }
};
var ForgettableSpellsPreset = class extends Preset {
  static id = 8231;
  id = 8231;
  baseSpellsPreset;
  forgettableSpells;
  constructor(id_, baseSpellsPreset, forgettableSpells) {
    super(id_);
    this.baseSpellsPreset = baseSpellsPreset;
    this.forgettableSpells = forgettableSpells;
  }
  serialize(writer) {
    this.baseSpellsPreset.serialize(writer);
    writer.writeShort(this.forgettableSpells.length);
    this.forgettableSpells.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.baseSpellsPreset = new SpellsPreset();
    this.baseSpellsPreset.deserialize(reader);
    this.forgettableSpells = [];
    const countForgettableSpells = reader.readShort();
    for (let i = 0; i < countForgettableSpells; i++) {
      const type = new SpellForPreset();
      type.deserialize(reader);
      this.forgettableSpells.push(type);
    }
  }
};
var Shortcut = class extends DofusType {
  static id = 5511;
  id = 5511;
  slot = 0;
  constructor(slot) {
    super();
    this.slot = slot;
  }
  serialize(writer) {
    writer.writeByte(this.slot);
  }
  deserialize(reader) {
    this.slot = reader.readByte();
  }
};
var ShortcutSpell = class extends Shortcut {
  static id = 445;
  id = 445;
  spellId = 0;
  constructor(slot, spellId) {
    super(slot);
    this.spellId = spellId;
  }
  serialize(writer) {
    writer.writeVarShort(this.spellId);
  }
  deserialize(reader) {
    this.spellId = reader.readVarShort();
  }
};
var StatisticDataByte = class extends StatisticData {
  static id = 6844;
  id = 6844;
  value = 0;
  constructor(value) {
    super();
    this.value = value;
  }
  serialize(writer) {
    writer.writeByte(this.value);
  }
  deserialize(reader) {
    this.value = reader.readByte();
  }
};
var TreasureHuntStepDig = class extends TreasureHuntStep {
  static id = 199;
  id = 199;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var FullStatsPreset = class extends Preset {
  static id = 9471;
  id = 9471;
  stats;
  constructor(id_, stats) {
    super(id_);
    this.stats = stats;
  }
  serialize(writer) {
    writer.writeShort(this.stats.length);
    this.stats.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.stats = [];
    const countStats = reader.readShort();
    for (let i = 0; i < countStats; i++) {
      const type = new CharacterCharacteristicForPreset();
      type.deserialize(reader);
      this.stats.push(type);
    }
  }
};
var InteractiveElementNamedSkill = class extends InteractiveElementSkill {
  static id = 3340;
  id = 3340;
  nameId = 0;
  constructor(skillInstanceUid, skillId, nameId) {
    super(skillInstanceUid, skillId);
    this.nameId = nameId;
  }
  serialize(writer) {
    writer.writeVarInt(this.nameId);
  }
  deserialize(reader) {
    this.nameId = reader.readVarInt();
  }
};
var FightResultPvpData = class extends FightResultAdditionalData {
  static id = 9919;
  id = 9919;
  honorDelta = 0;
  honor = 0;
  maxHonorForGrade = 0;
  grade = 0;
  minHonorForGrade = 0;
  constructor(honorDelta, honor, maxHonorForGrade, grade, minHonorForGrade) {
    super();
    this.honorDelta = honorDelta;
    this.honor = honor;
    this.maxHonorForGrade = maxHonorForGrade;
    this.grade = grade;
    this.minHonorForGrade = minHonorForGrade;
  }
  serialize(writer) {
    writer.writeVarShort(this.honorDelta);
    writer.writeVarShort(this.honor);
    writer.writeVarShort(this.maxHonorForGrade);
    writer.writeByte(this.grade);
    writer.writeVarShort(this.minHonorForGrade);
  }
  deserialize(reader) {
    this.honorDelta = reader.readVarShort();
    this.honor = reader.readVarShort();
    this.maxHonorForGrade = reader.readVarShort();
    this.grade = reader.readByte();
    this.minHonorForGrade = reader.readVarShort();
  }
};
var TreasureHuntStepFollowDirectionToHint = class extends TreasureHuntStep {
  static id = 4752;
  id = 4752;
  npcId = 0;
  direction = 1;
  constructor(npcId, direction) {
    super();
    this.npcId = npcId;
    this.direction = direction;
  }
  serialize(writer) {
    writer.writeVarShort(this.npcId);
    writer.writeByte(this.direction);
  }
  deserialize(reader) {
    this.npcId = reader.readVarShort();
    this.direction = reader.readByte();
  }
};
var GuildVersatileInformations = class extends DofusType {
  static id = 4170;
  id = 4170;
  nbMembers = 0;
  guildLevel = 0;
  guildId = 0;
  leaderId = 0;
  constructor(nbMembers, guildLevel, guildId, leaderId) {
    super();
    this.nbMembers = nbMembers;
    this.guildLevel = guildLevel;
    this.guildId = guildId;
    this.leaderId = leaderId;
  }
  serialize(writer) {
    writer.writeByte(this.nbMembers);
    writer.writeByte(this.guildLevel);
    writer.writeVarInt(this.guildId);
    writer.writeVarLong(this.leaderId);
  }
  deserialize(reader) {
    this.nbMembers = reader.readByte();
    this.guildLevel = reader.readByte();
    this.guildId = reader.readVarInt();
    this.leaderId = reader.readVarLong();
  }
};
var GuildInAllianceVersatileInformations = class extends GuildVersatileInformations {
  static id = 9740;
  id = 9740;
  allianceId = 0;
  constructor(nbMembers, guildLevel, guildId, leaderId, allianceId) {
    super(nbMembers, guildLevel, guildId, leaderId);
    this.allianceId = allianceId;
  }
  serialize(writer) {
    writer.writeVarInt(this.allianceId);
  }
  deserialize(reader) {
    this.allianceId = reader.readVarInt();
  }
};
var ShortcutObject = class extends Shortcut {
  static id = 8583;
  id = 8583;
  constructor(slot) {
    super(slot);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ObjectEffectDice = class extends ObjectEffect {
  static id = 1048;
  id = 1048;
  diceConst = 0;
  diceNum = 0;
  diceSide = 0;
  constructor(actionId, diceConst, diceNum, diceSide) {
    super(actionId);
    this.diceConst = diceConst;
    this.diceNum = diceNum;
    this.diceSide = diceSide;
  }
  serialize(writer) {
    writer.writeVarInt(this.diceConst);
    writer.writeVarInt(this.diceNum);
    writer.writeVarInt(this.diceSide);
  }
  deserialize(reader) {
    this.diceConst = reader.readVarInt();
    this.diceNum = reader.readVarInt();
    this.diceSide = reader.readVarInt();
  }
};
var ObjectEffectDate = class extends ObjectEffect {
  static id = 5415;
  id = 5415;
  hour = 0;
  year = 0;
  minute = 0;
  day = 0;
  month = 0;
  constructor(actionId, hour, year, minute, day, month) {
    super(actionId);
    this.hour = hour;
    this.year = year;
    this.minute = minute;
    this.day = day;
    this.month = month;
  }
  serialize(writer) {
    writer.writeByte(this.hour);
    writer.writeVarShort(this.year);
    writer.writeByte(this.minute);
    writer.writeByte(this.day);
    writer.writeByte(this.month);
  }
  deserialize(reader) {
    this.hour = reader.readByte();
    this.year = reader.readVarShort();
    this.minute = reader.readByte();
    this.day = reader.readByte();
    this.month = reader.readByte();
  }
};
var UpdateMountCharacteristic = class extends DofusType {
  static id = 826;
  id = 826;
  type = 0;
  constructor(type) {
    super();
    this.type = type;
  }
  serialize(writer) {
    writer.writeByte(this.type);
  }
  deserialize(reader) {
    this.type = reader.readByte();
  }
};
var UpdateMountIntegerCharacteristic = class extends UpdateMountCharacteristic {
  static id = 305;
  id = 305;
  value = 0;
  constructor(type, value) {
    super(type);
    this.value = value;
  }
  serialize(writer) {
    writer.writeInt(this.value);
  }
  deserialize(reader) {
    this.value = reader.readInt();
  }
};
var ShortcutObjectItem = class extends ShortcutObject {
  static id = 6510;
  id = 6510;
  itemGID = 0;
  itemUID = 0;
  constructor(slot, itemGID, itemUID) {
    super(slot);
    this.itemGID = itemGID;
    this.itemUID = itemUID;
  }
  serialize(writer) {
    writer.writeInt(this.itemGID);
    writer.writeInt(this.itemUID);
  }
  deserialize(reader) {
    this.itemGID = reader.readInt();
    this.itemUID = reader.readInt();
  }
};
var QuestObjectiveInformations = class extends DofusType {
  static id = 4677;
  id = 4677;
  dialogParams;
  objectiveId = 0;
  objectiveStatus = false;
  constructor(dialogParams, objectiveId, objectiveStatus) {
    super();
    this.dialogParams = dialogParams;
    this.objectiveId = objectiveId;
    this.objectiveStatus = objectiveStatus;
  }
  serialize(writer) {
    writer.writeShort(this.dialogParams.length);
    this.dialogParams.forEach((current) => writer.writeUTF(current));
    writer.writeVarShort(this.objectiveId);
    writer.writeBoolean(this.objectiveStatus);
  }
  deserialize(reader) {
    this.dialogParams = [];
    const countDialogParams = reader.readShort();
    for (let i = 0; i < countDialogParams; i++) {
      this.dialogParams.push(reader.readUTF());
    }
    this.objectiveId = reader.readVarShort();
    this.objectiveStatus = reader.readBoolean();
  }
};
var QuestObjectiveInformationsWithCompletion = class extends QuestObjectiveInformations {
  static id = 5115;
  id = 5115;
  maxCompletion = 0;
  curCompletion = 0;
  constructor(dialogParams, objectiveId, objectiveStatus, maxCompletion, curCompletion) {
    super(dialogParams, objectiveId, objectiveStatus);
    this.maxCompletion = maxCompletion;
    this.curCompletion = curCompletion;
  }
  serialize(writer) {
    writer.writeVarShort(this.maxCompletion);
    writer.writeVarShort(this.curCompletion);
  }
  deserialize(reader) {
    this.maxCompletion = reader.readVarShort();
    this.curCompletion = reader.readVarShort();
  }
};
var FightTeamMemberEntityInformation = class extends FightTeamMemberInformations {
  static id = 5487;
  id = 5487;
  entityModelId = 0;
  masterId = 0;
  level = 0;
  constructor(id_, entityModelId, masterId, level) {
    super(id_);
    this.entityModelId = entityModelId;
    this.masterId = masterId;
    this.level = level;
  }
  serialize(writer) {
    writer.writeByte(this.entityModelId);
    writer.writeDouble(this.masterId);
    writer.writeVarShort(this.level);
  }
  deserialize(reader) {
    this.entityModelId = reader.readByte();
    this.masterId = reader.readDouble();
    this.level = reader.readVarShort();
  }
};
var UpdateMountBooleanCharacteristic = class extends UpdateMountCharacteristic {
  static id = 1756;
  id = 1756;
  value = false;
  constructor(type, value) {
    super(type);
    this.value = value;
  }
  serialize(writer) {
    writer.writeBoolean(this.value);
  }
  deserialize(reader) {
    this.value = reader.readBoolean();
  }
};
var CharacterMinimalGuildInformations = class extends CharacterMinimalPlusLookInformations {
  static id = 4548;
  id = 4548;
  guild;
  constructor(id_, name, level, entityLook, breed, guild) {
    super(id_, name, level, entityLook, breed);
    this.guild = guild;
  }
  serialize(writer) {
    this.guild.serialize(writer);
  }
  deserialize(reader) {
    this.guild = new BasicGuildInformations();
    this.guild.deserialize(reader);
  }
};
var CharacterMinimalAllianceInformations = class extends CharacterMinimalGuildInformations {
  static id = 4354;
  id = 4354;
  alliance;
  constructor(id_, name, level, entityLook, breed, guild, alliance) {
    super(id_, name, level, entityLook, breed, guild);
    this.alliance = alliance;
  }
  serialize(writer) {
    this.alliance.serialize(writer);
  }
  deserialize(reader) {
    this.alliance = new BasicAllianceInformations();
    this.alliance.deserialize(reader);
  }
};
var ItemsPreset = class extends Preset {
  static id = 5400;
  id = 5400;
  look;
  items;
  mountEquipped = false;
  constructor(id_, look, items, mountEquipped) {
    super(id_);
    this.look = look;
    this.items = items;
    this.mountEquipped = mountEquipped;
  }
  serialize(writer) {
    this.look.serialize(writer);
    writer.writeShort(this.items.length);
    this.items.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeBoolean(this.mountEquipped);
  }
  deserialize(reader) {
    this.look = new EntityLook();
    this.look.deserialize(reader);
    this.items = [];
    const countItems = reader.readShort();
    for (let i = 0; i < countItems; i++) {
      const type = new ItemForPreset();
      type.deserialize(reader);
      this.items.push(type);
    }
    this.mountEquipped = reader.readBoolean();
  }
};
var ServerSessionConstant = class extends DofusType {
  static id = 7504;
  id = 7504;
  id_ = 0;
  constructor(id_) {
    super();
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeVarShort(this.id_);
  }
  deserialize(reader) {
    this.id_ = reader.readVarShort();
  }
};
var ServerSessionConstantInteger = class extends ServerSessionConstant {
  static id = 6620;
  id = 6620;
  value = 0;
  constructor(id_, value) {
    super(id_);
    this.value = value;
  }
  serialize(writer) {
    writer.writeInt(this.value);
  }
  deserialize(reader) {
    this.value = reader.readInt();
  }
};
var ShortcutEmote = class extends Shortcut {
  static id = 3292;
  id = 3292;
  emoteId = 0;
  constructor(slot, emoteId) {
    super(slot);
    this.emoteId = emoteId;
  }
  serialize(writer) {
    writer.writeShort(this.emoteId);
  }
  deserialize(reader) {
    this.emoteId = reader.readShort();
  }
};
var TaxCollectorComplementaryInformations = class extends DofusType {
  static id = 9875;
  id = 9875;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var TaxCollectorLootInformations = class extends TaxCollectorComplementaryInformations {
  static id = 8142;
  id = 8142;
  itemsValue = 0;
  pods = 0;
  kamas = 0;
  experience = 0;
  constructor(itemsValue, pods, kamas, experience) {
    super();
    this.itemsValue = itemsValue;
    this.pods = pods;
    this.kamas = kamas;
    this.experience = experience;
  }
  serialize(writer) {
    writer.writeVarLong(this.itemsValue);
    writer.writeVarInt(this.pods);
    writer.writeVarLong(this.kamas);
    writer.writeVarLong(this.experience);
  }
  deserialize(reader) {
    this.itemsValue = reader.readVarLong();
    this.pods = reader.readVarInt();
    this.kamas = reader.readVarLong();
    this.experience = reader.readVarLong();
  }
};
var MapCoordinatesAndId = class extends MapCoordinates {
  static id = 1741;
  id = 1741;
  mapId = 0;
  constructor(worldY, worldX, mapId) {
    super(worldY, worldX);
    this.mapId = mapId;
  }
  serialize(writer) {
    writer.writeDouble(this.mapId);
  }
  deserialize(reader) {
    this.mapId = reader.readDouble();
  }
};
var EntitiesPreset = class extends Preset {
  static id = 1197;
  id = 1197;
  iconId = 0;
  entityIds;
  constructor(id_, iconId, entityIds) {
    super(id_);
    this.iconId = iconId;
    this.entityIds = entityIds;
  }
  serialize(writer) {
    writer.writeShort(this.iconId);
    writer.writeShort(this.entityIds.length);
    this.entityIds.forEach((current) => writer.writeVarShort(current));
  }
  deserialize(reader) {
    this.iconId = reader.readShort();
    this.entityIds = [];
    const countEntityIds = reader.readShort();
    for (let i = 0; i < countEntityIds; i++) {
      this.entityIds.push(reader.readVarShort());
    }
  }
};
var DebtInformation = class extends DofusType {
  static id = 9735;
  id = 9735;
  timestamp = 0;
  id_ = 0;
  constructor(timestamp, id_) {
    super();
    this.timestamp = timestamp;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeDouble(this.timestamp);
    writer.writeDouble(this.id_);
  }
  deserialize(reader) {
    this.timestamp = reader.readDouble();
    this.id_ = reader.readDouble();
  }
};
var PaddockGuildedInformations = class extends PaddockBuyableInformations {
  static id = 6908;
  id = 6908;
  deserted = false;
  guildInfo;
  constructor(locked, price, deserted, guildInfo) {
    super(locked, price);
    this.deserted = deserted;
    this.guildInfo = guildInfo;
  }
  serialize(writer) {
    writer.writeBoolean(this.deserted);
    this.guildInfo.serialize(writer);
  }
  deserialize(reader) {
    this.deserted = reader.readBoolean();
    this.guildInfo = new GuildInformations();
    this.guildInfo.deserialize(reader);
  }
};
var KamaDebtInformation = class extends DebtInformation {
  static id = 2979;
  id = 2979;
  kamas = 0;
  constructor(timestamp, id_, kamas) {
    super(timestamp, id_);
    this.kamas = kamas;
  }
  serialize(writer) {
    writer.writeVarLong(this.kamas);
  }
  deserialize(reader) {
    this.kamas = reader.readVarLong();
  }
};
var StatisticDataString = class extends StatisticData {
  static id = 6983;
  id = 6983;
  value;
  constructor(value) {
    super();
    this.value = value;
  }
  serialize(writer) {
    writer.writeUTF(this.value);
  }
  deserialize(reader) {
    this.value = reader.readUTF();
  }
};
var PresetsContainerPreset = class extends Preset {
  static id = 4853;
  id = 4853;
  presets;
  constructor(id_, presets) {
    super(id_);
    this.presets = presets;
  }
  serialize(writer) {
    writer.writeShort(this.presets.length);
    this.presets.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.presets = [];
    const countPresets = reader.readShort();
    for (let i = 0; i < countPresets; i++) {
      const presetsTypeId = reader.readShort();
      const type = new types[presetsTypeId]();
      type.deserialize(reader);
      this.presets.push(type);
    }
  }
};
var IconNamedPreset = class extends PresetsContainerPreset {
  static id = 876;
  id = 876;
  name;
  iconId = 0;
  constructor(id_, presets, name, iconId) {
    super(id_, presets);
    this.name = name;
    this.iconId = iconId;
  }
  serialize(writer) {
    writer.writeUTF(this.name);
    writer.writeShort(this.iconId);
  }
  deserialize(reader) {
    this.name = reader.readUTF();
    this.iconId = reader.readShort();
  }
};
var ServerSessionConstantString = class extends ServerSessionConstant {
  static id = 8535;
  id = 8535;
  value;
  constructor(id_, value) {
    super(id_);
    this.value = value;
  }
  serialize(writer) {
    writer.writeUTF(this.value);
  }
  deserialize(reader) {
    this.value = reader.readUTF();
  }
};
var QuestActiveDetailedInformations = class extends QuestActiveInformations {
  static id = 2409;
  id = 2409;
  stepId = 0;
  objectives;
  constructor(questId, stepId, objectives) {
    super(questId);
    this.stepId = stepId;
    this.objectives = objectives;
  }
  serialize(writer) {
    writer.writeVarShort(this.stepId);
    writer.writeShort(this.objectives.length);
    this.objectives.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.stepId = reader.readVarShort();
    this.objectives = [];
    const countObjectives = reader.readShort();
    for (let i = 0; i < countObjectives; i++) {
      const objectivesTypeId = reader.readShort();
      const type = new types[objectivesTypeId]();
      type.deserialize(reader);
      this.objectives.push(type);
    }
  }
};
var ShortcutEntitiesPreset = class extends Shortcut {
  static id = 3590;
  id = 3590;
  presetId = 0;
  constructor(slot, presetId) {
    super(slot);
    this.presetId = presetId;
  }
  serialize(writer) {
    writer.writeShort(this.presetId);
  }
  deserialize(reader) {
    this.presetId = reader.readShort();
  }
};
var ObjectEffectCreature = class extends ObjectEffect {
  static id = 8829;
  id = 8829;
  monsterFamilyId = 0;
  constructor(actionId, monsterFamilyId) {
    super(actionId);
    this.monsterFamilyId = monsterFamilyId;
  }
  serialize(writer) {
    writer.writeVarShort(this.monsterFamilyId);
  }
  deserialize(reader) {
    this.monsterFamilyId = reader.readVarShort();
  }
};
var ObjectEffectLadder = class extends ObjectEffectCreature {
  static id = 7384;
  id = 7384;
  monsterCount = 0;
  constructor(actionId, monsterFamilyId, monsterCount) {
    super(actionId, monsterFamilyId);
    this.monsterCount = monsterCount;
  }
  serialize(writer) {
    writer.writeVarInt(this.monsterCount);
  }
  deserialize(reader) {
    this.monsterCount = reader.readVarInt();
  }
};
var FightTeamMemberMonsterInformations = class extends FightTeamMemberInformations {
  static id = 6386;
  id = 6386;
  grade = 0;
  monsterId = 0;
  constructor(id_, grade, monsterId) {
    super(id_);
    this.grade = grade;
    this.monsterId = monsterId;
  }
  serialize(writer) {
    writer.writeByte(this.grade);
    writer.writeInt(this.monsterId);
  }
  deserialize(reader) {
    this.grade = reader.readByte();
    this.monsterId = reader.readInt();
  }
};
var ShortcutObjectIdolsPreset = class extends ShortcutObject {
  static id = 83;
  id = 83;
  presetId = 0;
  constructor(slot, presetId) {
    super(slot);
    this.presetId = presetId;
  }
  serialize(writer) {
    writer.writeShort(this.presetId);
  }
  deserialize(reader) {
    this.presetId = reader.readShort();
  }
};
var ShortcutObjectPreset = class extends ShortcutObject {
  static id = 5044;
  id = 5044;
  presetId = 0;
  constructor(slot, presetId) {
    super(slot);
    this.presetId = presetId;
  }
  serialize(writer) {
    writer.writeShort(this.presetId);
  }
  deserialize(reader) {
    this.presetId = reader.readShort();
  }
};
var TaxCollectorGuildInformations = class extends TaxCollectorComplementaryInformations {
  static id = 2529;
  id = 2529;
  guild;
  constructor(guild) {
    super();
    this.guild = guild;
  }
  serialize(writer) {
    this.guild.serialize(writer);
  }
  deserialize(reader) {
    this.guild = new BasicGuildInformations();
    this.guild.deserialize(reader);
  }
};
var TaxCollectorWaitingForHelpInformations = class extends TaxCollectorComplementaryInformations {
  static id = 3199;
  id = 3199;
  waitingForHelpInfo;
  constructor(waitingForHelpInfo) {
    super();
    this.waitingForHelpInfo = waitingForHelpInfo;
  }
  serialize(writer) {
    this.waitingForHelpInfo.serialize(writer);
  }
  deserialize(reader) {
    this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
    this.waitingForHelpInfo.deserialize(reader);
  }
};
var StatsPreset = class extends Preset {
  static id = 6559;
  id = 6559;
  stats;
  constructor(id_, stats) {
    super(id_);
    this.stats = stats;
  }
  serialize(writer) {
    writer.writeShort(this.stats.length);
    this.stats.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.stats = [];
    const countStats = reader.readShort();
    for (let i = 0; i < countStats; i++) {
      const type = new SimpleCharacterCharacteristicForPreset();
      type.deserialize(reader);
      this.stats.push(type);
    }
  }
};
var ObjectEffectDuration = class extends ObjectEffect {
  static id = 5502;
  id = 5502;
  minutes = 0;
  days = 0;
  hours = 0;
  constructor(actionId, minutes, days, hours) {
    super(actionId);
    this.minutes = minutes;
    this.days = days;
    this.hours = hours;
  }
  serialize(writer) {
    writer.writeByte(this.minutes);
    writer.writeVarShort(this.days);
    writer.writeByte(this.hours);
  }
  deserialize(reader) {
    this.minutes = reader.readByte();
    this.days = reader.readVarShort();
    this.hours = reader.readByte();
  }
};
var GameFightFighterLightInformations = class extends DofusType {
  static id = 6482;
  id = 6482;
  wave = 0;
  id_ = 0;
  level = 0;
  breed = 0;
  sex = false;
  alive = false;
  constructor(wave, id_, level, breed, sex, alive) {
    super();
    this.wave = wave;
    this.id_ = id_;
    this.level = level;
    this.breed = breed;
    this.sex = sex;
    this.alive = alive;
  }
  serialize(writer) {
    writer.writeByte(this.wave);
    writer.writeDouble(this.id_);
    writer.writeVarShort(this.level);
    writer.writeByte(this.breed);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.sex);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.alive);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.wave = reader.readByte();
    this.id_ = reader.readDouble();
    this.level = reader.readVarShort();
    this.breed = reader.readByte();
    const box0 = reader.readByte();
    this.sex = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.alive = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var GameFightFighterMonsterLightInformations = class extends GameFightFighterLightInformations {
  static id = 4254;
  id = 4254;
  creatureGenericId = 0;
  constructor(wave, id_, level, breed, sex, alive, creatureGenericId) {
    super(wave, id_, level, breed, sex, alive);
    this.creatureGenericId = creatureGenericId;
  }
  serialize(writer) {
    writer.writeVarShort(this.creatureGenericId);
  }
  deserialize(reader) {
    this.creatureGenericId = reader.readVarShort();
  }
};
var GameFightFighterTaxCollectorLightInformations = class extends GameFightFighterLightInformations {
  static id = 6139;
  id = 6139;
  lastNameId = 0;
  firstNameId = 0;
  constructor(wave, id_, level, breed, sex, alive, lastNameId, firstNameId) {
    super(wave, id_, level, breed, sex, alive);
    this.lastNameId = lastNameId;
    this.firstNameId = firstNameId;
  }
  serialize(writer) {
    writer.writeVarShort(this.lastNameId);
    writer.writeVarShort(this.firstNameId);
  }
  deserialize(reader) {
    this.lastNameId = reader.readVarShort();
    this.firstNameId = reader.readVarShort();
  }
};
var FightAllianceTeamInformations = class extends FightTeamInformations {
  static id = 2398;
  id = 2398;
  relation = 0;
  constructor(nbWaves, teamId, teamTypeId, teamSide, leaderId, teamMembers, relation) {
    super(nbWaves, teamId, teamTypeId, teamSide, leaderId, teamMembers);
    this.relation = relation;
  }
  serialize(writer) {
    writer.writeByte(this.relation);
  }
  deserialize(reader) {
    this.relation = reader.readByte();
  }
};
var CharacterHardcoreOrEpicInformations = class extends CharacterBaseInformations {
  static id = 7850;
  id = 7850;
  deathMaxLevel = 0;
  deathState = 0;
  deathCount = 0;
  constructor(id_, name, level, entityLook, breed, sex, deathMaxLevel, deathState, deathCount) {
    super(id_, name, level, entityLook, breed, sex);
    this.deathMaxLevel = deathMaxLevel;
    this.deathState = deathState;
    this.deathCount = deathCount;
  }
  serialize(writer) {
    writer.writeVarShort(this.deathMaxLevel);
    writer.writeByte(this.deathState);
    writer.writeVarShort(this.deathCount);
  }
  deserialize(reader) {
    this.deathMaxLevel = reader.readVarShort();
    this.deathState = reader.readByte();
    this.deathCount = reader.readVarShort();
  }
};
var GameFightFighterEntityLightInformation = class extends GameFightFighterLightInformations {
  static id = 4268;
  id = 4268;
  masterId = 0;
  entityModelId = 0;
  constructor(wave, id_, level, breed, sex, alive, masterId, entityModelId) {
    super(wave, id_, level, breed, sex, alive);
    this.masterId = masterId;
    this.entityModelId = entityModelId;
  }
  serialize(writer) {
    writer.writeDouble(this.masterId);
    writer.writeByte(this.entityModelId);
  }
  deserialize(reader) {
    this.masterId = reader.readDouble();
    this.entityModelId = reader.readByte();
  }
};
var ServerSessionConstantLong = class extends ServerSessionConstant {
  static id = 4492;
  id = 4492;
  value = 0;
  constructor(id_, value) {
    super(id_);
    this.value = value;
  }
  serialize(writer) {
    writer.writeDouble(this.value);
  }
  deserialize(reader) {
    this.value = reader.readDouble();
  }
};
var InteractiveElementWithAgeBonus = class extends InteractiveElement {
  static id = 2510;
  id = 2510;
  ageBonus = 0;
  constructor(elementTypeId, elementId, disabledSkills, enabledSkills, onCurrentMap, ageBonus) {
    super(
      elementTypeId,
      elementId,
      disabledSkills,
      enabledSkills,
      onCurrentMap
    );
    this.ageBonus = ageBonus;
  }
  serialize(writer) {
    writer.writeShort(this.ageBonus);
  }
  deserialize(reader) {
    this.ageBonus = reader.readShort();
  }
};
var StatisticDataInt = class extends StatisticData {
  static id = 4720;
  id = 4720;
  value = 0;
  constructor(value) {
    super();
    this.value = value;
  }
  serialize(writer) {
    writer.writeInt(this.value);
  }
  deserialize(reader) {
    this.value = reader.readInt();
  }
};
var AllianceFactSheetInformations = class extends AllianceInformations {
  static id = 9654;
  id = 9654;
  creationDate = 0;
  constructor(allianceTag, allianceId, allianceName, allianceEmblem, creationDate) {
    super(allianceTag, allianceId, allianceName, allianceEmblem);
    this.creationDate = creationDate;
  }
  serialize(writer) {
    writer.writeInt(this.creationDate);
  }
  deserialize(reader) {
    this.creationDate = reader.readInt();
  }
};
var GameFightFighterNamedLightInformations = class extends GameFightFighterLightInformations {
  static id = 2754;
  id = 2754;
  name;
  constructor(wave, id_, level, breed, sex, alive, name) {
    super(wave, id_, level, breed, sex, alive);
    this.name = name;
  }
  serialize(writer) {
    writer.writeUTF(this.name);
  }
  deserialize(reader) {
    this.name = reader.readUTF();
  }
};
var TreasureHuntStepFollowDirectionToPOI = class extends TreasureHuntStep {
  static id = 2093;
  id = 2093;
  poiLabelId = 0;
  direction = 1;
  constructor(poiLabelId, direction) {
    super();
    this.poiLabelId = poiLabelId;
    this.direction = direction;
  }
  serialize(writer) {
    writer.writeVarShort(this.poiLabelId);
    writer.writeByte(this.direction);
  }
  deserialize(reader) {
    this.poiLabelId = reader.readVarShort();
    this.direction = reader.readByte();
  }
};
var StatisticDataBoolean = class extends StatisticData {
  static id = 8397;
  id = 8397;
  value = false;
  constructor(value) {
    super();
    this.value = value;
  }
  serialize(writer) {
    writer.writeBoolean(this.value);
  }
  deserialize(reader) {
    this.value = reader.readBoolean();
  }
};
var ExtendedLockedBreachBranch = class extends ExtendedBreachBranch {
  static id = 169;
  id = 169;
  unlockPrice = 0;
  constructor(monsters, relativeScore, room, bosses, map, element, score, prize, rewards, modifier, unlockPrice) {
    super(
      monsters,
      relativeScore,
      room,
      bosses,
      map,
      element,
      score,
      prize,
      rewards,
      modifier
    );
    this.unlockPrice = unlockPrice;
  }
  serialize(writer) {
    writer.writeVarInt(this.unlockPrice);
  }
  deserialize(reader) {
    this.unlockPrice = reader.readVarInt();
  }
};
var PartyIdol = class extends Idol {
  static id = 563;
  id = 563;
  ownersIds;
  constructor(dropBonusPercent, id_, xpBonusPercent, ownersIds) {
    super(dropBonusPercent, id_, xpBonusPercent);
    this.ownersIds = ownersIds;
  }
  serialize(writer) {
    writer.writeShort(this.ownersIds.length);
    this.ownersIds.forEach((current) => writer.writeVarLong(current));
  }
  deserialize(reader) {
    this.ownersIds = [];
    const countOwnersIds = reader.readShort();
    for (let i = 0; i < countOwnersIds; i++) {
      this.ownersIds.push(reader.readVarLong());
    }
  }
};
var GameFightMonsterWithAlignmentInformations = class extends GameFightMonsterInformations {
  static id = 108;
  id = 108;
  alignmentInfos;
  constructor(contextualId, disposition, look, wave, spawnInfo, previousPositions, stats, creatureLevel, creatureGenericId, creatureGrade, alignmentInfos) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats,
      creatureLevel,
      creatureGenericId,
      creatureGrade
    );
    this.alignmentInfos = alignmentInfos;
  }
  serialize(writer) {
    this.alignmentInfos.serialize(writer);
  }
  deserialize(reader) {
    this.alignmentInfos = new ActorAlignmentInformations();
    this.alignmentInfos.deserialize(reader);
  }
};
var MapCoordinatesExtended = class extends MapCoordinatesAndId {
  static id = 3550;
  id = 3550;
  subAreaId = 0;
  constructor(worldY, worldX, mapId, subAreaId) {
    super(worldY, worldX, mapId);
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.subAreaId = reader.readVarShort();
  }
};
var TreasureHuntStepFollowDirection = class extends TreasureHuntStep {
  static id = 5753;
  id = 5753;
  mapCount = 0;
  direction = 1;
  constructor(mapCount, direction) {
    super();
    this.mapCount = mapCount;
    this.direction = direction;
  }
  serialize(writer) {
    writer.writeVarShort(this.mapCount);
    writer.writeByte(this.direction);
  }
  deserialize(reader) {
    this.mapCount = reader.readVarShort();
    this.direction = reader.readByte();
  }
};
var ShortcutSmiley = class extends Shortcut {
  static id = 4590;
  id = 4590;
  smileyId = 0;
  constructor(slot, smileyId) {
    super(slot);
    this.smileyId = smileyId;
  }
  serialize(writer) {
    writer.writeVarShort(this.smileyId);
  }
  deserialize(reader) {
    this.smileyId = reader.readVarShort();
  }
};
var ObjectEffectMinMax = class extends ObjectEffect {
  static id = 5720;
  id = 5720;
  max = 0;
  min = 0;
  constructor(actionId, max, min) {
    super(actionId);
    this.max = max;
    this.min = min;
  }
  serialize(writer) {
    writer.writeVarInt(this.max);
    writer.writeVarInt(this.min);
  }
  deserialize(reader) {
    this.max = reader.readVarInt();
    this.min = reader.readVarInt();
  }
};
var SpellsPreset = class extends Preset {
  static id = 1337;
  id = 1337;
  spells;
  constructor(id_, spells) {
    super(id_);
    this.spells = spells;
  }
  serialize(writer) {
    writer.writeShort(this.spells.length);
    this.spells.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.spells = [];
    const countSpells = reader.readShort();
    for (let i = 0; i < countSpells; i++) {
      const type = new SpellForPreset();
      type.deserialize(reader);
      this.spells.push(type);
    }
  }
};
var ObjectEffectMount = class extends ObjectEffect {
  static id = 4916;
  id = 4916;
  owner;
  id_ = 0;
  capacities;
  expirationDate = 0;
  name;
  model = 0;
  level = 0;
  effects;
  reproductionCountMax = 0;
  reproductionCount = 0;
  sex = false;
  isRideable = false;
  isFeconded = false;
  isFecondationReady = false;
  constructor(actionId, owner, id_, capacities, expirationDate, name, model, level, effects, reproductionCountMax, reproductionCount, sex, isRideable, isFeconded, isFecondationReady) {
    super(actionId);
    this.owner = owner;
    this.id_ = id_;
    this.capacities = capacities;
    this.expirationDate = expirationDate;
    this.name = name;
    this.model = model;
    this.level = level;
    this.effects = effects;
    this.reproductionCountMax = reproductionCountMax;
    this.reproductionCount = reproductionCount;
    this.sex = sex;
    this.isRideable = isRideable;
    this.isFeconded = isFeconded;
    this.isFecondationReady = isFecondationReady;
  }
  serialize(writer) {
    writer.writeUTF(this.owner);
    writer.writeVarLong(this.id_);
    writer.writeShort(this.capacities.length);
    this.capacities.forEach((current) => writer.writeVarInt(current));
    writer.writeVarLong(this.expirationDate);
    writer.writeUTF(this.name);
    writer.writeVarInt(this.model);
    writer.writeByte(this.level);
    writer.writeShort(this.effects.length);
    this.effects.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarInt(this.reproductionCountMax);
    writer.writeVarInt(this.reproductionCount);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.sex);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.isRideable);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 2, this.isFeconded);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 3, this.isFecondationReady);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.owner = reader.readUTF();
    this.id_ = reader.readVarLong();
    this.capacities = [];
    const countCapacities = reader.readShort();
    for (let i = 0; i < countCapacities; i++) {
      this.capacities.push(reader.readVarInt());
    }
    this.expirationDate = reader.readVarLong();
    this.name = reader.readUTF();
    this.model = reader.readVarInt();
    this.level = reader.readByte();
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i = 0; i < countEffects; i++) {
      const type = new ObjectEffectInteger();
      type.deserialize(reader);
      this.effects.push(type);
    }
    this.reproductionCountMax = reader.readVarInt();
    this.reproductionCount = reader.readVarInt();
    const box0 = reader.readByte();
    this.sex = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.isRideable = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
    this.isFeconded = (0, import_hetwan2.bigEndianGetFlag)(box0, 2);
    this.isFecondationReady = (0, import_hetwan2.bigEndianGetFlag)(box0, 3);
  }
};
var ItemForPreset = class extends DofusType {
  static id = 4107;
  id = 4107;
  position = 63;
  objUid = 0;
  objGid = 0;
  constructor(position, objUid, objGid) {
    super();
    this.position = position;
    this.objUid = objUid;
    this.objGid = objGid;
  }
  serialize(writer) {
    writer.writeShort(this.position);
    writer.writeVarInt(this.objUid);
    writer.writeVarShort(this.objGid);
  }
  deserialize(reader) {
    this.position = reader.readShort();
    this.objUid = reader.readVarInt();
    this.objGid = reader.readVarShort();
  }
};
var ActorExtendedAlignmentInformations = class extends ActorAlignmentInformations {
  static id = 4302;
  id = 4302;
  aggressable = 0;
  honorNextGradeFloor = 0;
  honor = 0;
  honorGradeFloor = 0;
  constructor(characterPower, alignmentGrade, alignmentSide, alignmentValue, aggressable, honorNextGradeFloor, honor, honorGradeFloor) {
    super(characterPower, alignmentGrade, alignmentSide, alignmentValue);
    this.aggressable = aggressable;
    this.honorNextGradeFloor = honorNextGradeFloor;
    this.honor = honor;
    this.honorGradeFloor = honorGradeFloor;
  }
  serialize(writer) {
    writer.writeByte(this.aggressable);
    writer.writeVarShort(this.honorNextGradeFloor);
    writer.writeVarShort(this.honor);
    writer.writeVarShort(this.honorGradeFloor);
  }
  deserialize(reader) {
    this.aggressable = reader.readByte();
    this.honorNextGradeFloor = reader.readVarShort();
    this.honor = reader.readVarShort();
    this.honorGradeFloor = reader.readVarShort();
  }
};
var ApplicationPlayerInformation = class extends DofusType {
  static id = 3872;
  id = 3872;
  accountTag;
  playerName;
  accountId = 0;
  breed = 0;
  status;
  sex = false;
  accountNickname;
  playerId = 0;
  level = 0;
  constructor(accountTag, playerName, accountId, breed, status, sex, accountNickname, playerId, level) {
    super();
    this.accountTag = accountTag;
    this.playerName = playerName;
    this.accountId = accountId;
    this.breed = breed;
    this.status = status;
    this.sex = sex;
    this.accountNickname = accountNickname;
    this.playerId = playerId;
    this.level = level;
  }
  serialize(writer) {
    writer.writeUTF(this.accountTag);
    writer.writeUTF(this.playerName);
    writer.writeVarInt(this.accountId);
    writer.writeByte(this.breed);
    this.status.serialize(writer);
    writer.writeBoolean(this.sex);
    writer.writeUTF(this.accountNickname);
    writer.writeVarInt(this.playerId);
    writer.writeVarInt(this.level);
  }
  deserialize(reader) {
    this.accountTag = reader.readUTF();
    this.playerName = reader.readUTF();
    this.accountId = reader.readVarInt();
    this.breed = reader.readByte();
    this.status = new PlayerStatus();
    this.status.deserialize(reader);
    this.sex = reader.readBoolean();
    this.accountNickname = reader.readUTF();
    this.playerId = reader.readVarInt();
    this.level = reader.readVarInt();
  }
};
var GuildEmblem = class extends DofusType {
  static id = 2994;
  id = 2994;
  backgroundColor = 0;
  backgroundShape = 0;
  symbolShape = 0;
  symbolColor = 0;
  constructor(backgroundColor, backgroundShape, symbolShape, symbolColor) {
    super();
    this.backgroundColor = backgroundColor;
    this.backgroundShape = backgroundShape;
    this.symbolShape = symbolShape;
    this.symbolColor = symbolColor;
  }
  serialize(writer) {
    writer.writeInt(this.backgroundColor);
    writer.writeByte(this.backgroundShape);
    writer.writeVarShort(this.symbolShape);
    writer.writeInt(this.symbolColor);
  }
  deserialize(reader) {
    this.backgroundColor = reader.readInt();
    this.backgroundShape = reader.readByte();
    this.symbolShape = reader.readVarShort();
    this.symbolColor = reader.readInt();
  }
};
var MountClientData = class extends DofusType {
  static id = 9874;
  id = 9874;
  effectList;
  boostLimiter = 0;
  fecondationTime = 0;
  loveMax = 0;
  level = 0;
  experienceForNextLevel = 0;
  harnessGID = 0;
  reproductionCountMax = 0;
  model = 0;
  maxPods = 0;
  boostMax = 0;
  serenity = 0;
  energy = 0;
  name;
  id_ = 0;
  ancestor;
  experienceForLevel = 0;
  ownerId = 0;
  stamina = 0;
  love = 0;
  experience = 0;
  staminaMax = 0;
  behaviors;
  maturity = 0;
  reproductionCount = 0;
  maturityForAdult = 0;
  energyMax = 0;
  aggressivityMax = 0;
  serenityMax = 0;
  sex = false;
  isRideable = false;
  isWild = false;
  isFecondationReady = false;
  useHarnessColors = false;
  constructor(effectList, boostLimiter, fecondationTime, loveMax, level, experienceForNextLevel, harnessGID, reproductionCountMax, model, maxPods, boostMax, serenity, energy, name, id_, ancestor, experienceForLevel, ownerId, stamina, love, experience, staminaMax, behaviors, maturity, reproductionCount, maturityForAdult, energyMax, aggressivityMax, serenityMax, sex, isRideable, isWild, isFecondationReady, useHarnessColors) {
    super();
    this.effectList = effectList;
    this.boostLimiter = boostLimiter;
    this.fecondationTime = fecondationTime;
    this.loveMax = loveMax;
    this.level = level;
    this.experienceForNextLevel = experienceForNextLevel;
    this.harnessGID = harnessGID;
    this.reproductionCountMax = reproductionCountMax;
    this.model = model;
    this.maxPods = maxPods;
    this.boostMax = boostMax;
    this.serenity = serenity;
    this.energy = energy;
    this.name = name;
    this.id_ = id_;
    this.ancestor = ancestor;
    this.experienceForLevel = experienceForLevel;
    this.ownerId = ownerId;
    this.stamina = stamina;
    this.love = love;
    this.experience = experience;
    this.staminaMax = staminaMax;
    this.behaviors = behaviors;
    this.maturity = maturity;
    this.reproductionCount = reproductionCount;
    this.maturityForAdult = maturityForAdult;
    this.energyMax = energyMax;
    this.aggressivityMax = aggressivityMax;
    this.serenityMax = serenityMax;
    this.sex = sex;
    this.isRideable = isRideable;
    this.isWild = isWild;
    this.isFecondationReady = isFecondationReady;
    this.useHarnessColors = useHarnessColors;
  }
  serialize(writer) {
    writer.writeShort(this.effectList.length);
    this.effectList.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeInt(this.boostLimiter);
    writer.writeInt(this.fecondationTime);
    writer.writeVarInt(this.loveMax);
    writer.writeByte(this.level);
    writer.writeDouble(this.experienceForNextLevel);
    writer.writeVarShort(this.harnessGID);
    writer.writeVarInt(this.reproductionCountMax);
    writer.writeVarInt(this.model);
    writer.writeVarInt(this.maxPods);
    writer.writeDouble(this.boostMax);
    writer.writeInt(this.serenity);
    writer.writeVarInt(this.energy);
    writer.writeUTF(this.name);
    writer.writeDouble(this.id_);
    writer.writeShort(this.ancestor.length);
    this.ancestor.forEach((current) => writer.writeInt(current));
    writer.writeVarLong(this.experienceForLevel);
    writer.writeInt(this.ownerId);
    writer.writeVarInt(this.stamina);
    writer.writeVarInt(this.love);
    writer.writeVarLong(this.experience);
    writer.writeVarInt(this.staminaMax);
    writer.writeShort(this.behaviors.length);
    this.behaviors.forEach((current) => writer.writeInt(current));
    writer.writeVarInt(this.maturity);
    writer.writeInt(this.reproductionCount);
    writer.writeVarInt(this.maturityForAdult);
    writer.writeVarInt(this.energyMax);
    writer.writeInt(this.aggressivityMax);
    writer.writeVarInt(this.serenityMax);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.sex);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.isRideable);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 2, this.isWild);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 3, this.isFecondationReady);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 4, this.useHarnessColors);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.effectList = [];
    const countEffectList = reader.readShort();
    for (let i = 0; i < countEffectList; i++) {
      const type = new ObjectEffectInteger();
      type.deserialize(reader);
      this.effectList.push(type);
    }
    this.boostLimiter = reader.readInt();
    this.fecondationTime = reader.readInt();
    this.loveMax = reader.readVarInt();
    this.level = reader.readByte();
    this.experienceForNextLevel = reader.readDouble();
    this.harnessGID = reader.readVarShort();
    this.reproductionCountMax = reader.readVarInt();
    this.model = reader.readVarInt();
    this.maxPods = reader.readVarInt();
    this.boostMax = reader.readDouble();
    this.serenity = reader.readInt();
    this.energy = reader.readVarInt();
    this.name = reader.readUTF();
    this.id_ = reader.readDouble();
    this.ancestor = [];
    const countAncestor = reader.readShort();
    for (let i = 0; i < countAncestor; i++) {
      this.ancestor.push(reader.readInt());
    }
    this.experienceForLevel = reader.readVarLong();
    this.ownerId = reader.readInt();
    this.stamina = reader.readVarInt();
    this.love = reader.readVarInt();
    this.experience = reader.readVarLong();
    this.staminaMax = reader.readVarInt();
    this.behaviors = [];
    const countBehaviors = reader.readShort();
    for (let i = 0; i < countBehaviors; i++) {
      this.behaviors.push(reader.readInt());
    }
    this.maturity = reader.readVarInt();
    this.reproductionCount = reader.readInt();
    this.maturityForAdult = reader.readVarInt();
    this.energyMax = reader.readVarInt();
    this.aggressivityMax = reader.readInt();
    this.serenityMax = reader.readVarInt();
    const box0 = reader.readByte();
    this.sex = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.isRideable = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
    this.isWild = (0, import_hetwan2.bigEndianGetFlag)(box0, 2);
    this.isFecondationReady = (0, import_hetwan2.bigEndianGetFlag)(box0, 3);
    this.useHarnessColors = (0, import_hetwan2.bigEndianGetFlag)(box0, 4);
  }
};
var FightLoot = class extends DofusType {
  static id = 7224;
  id = 7224;
  objects;
  kamas = 0;
  constructor(objects, kamas) {
    super();
    this.objects = objects;
    this.kamas = kamas;
  }
  serialize(writer) {
    writer.writeShort(this.objects.length);
    this.objects.forEach((current) => writer.writeVarInt(current));
    writer.writeVarLong(this.kamas);
  }
  deserialize(reader) {
    this.objects = [];
    const countObjects = reader.readShort();
    for (let i = 0; i < countObjects; i++) {
      this.objects.push(reader.readVarInt());
    }
    this.kamas = reader.readVarLong();
  }
};
var TreasureHuntFlag = class extends DofusType {
  static id = 4191;
  id = 4191;
  state = 0;
  mapId = 0;
  constructor(state, mapId) {
    super();
    this.state = state;
    this.mapId = mapId;
  }
  serialize(writer) {
    writer.writeByte(this.state);
    writer.writeDouble(this.mapId);
  }
  deserialize(reader) {
    this.state = reader.readByte();
    this.mapId = reader.readDouble();
  }
};
var ObjectItemMinimalInformation = class extends Item {
  static id = 4918;
  id = 4918;
  objectGID = 0;
  effects;
  constructor(objectGID, effects) {
    super();
    this.objectGID = objectGID;
    this.effects = effects;
  }
  serialize(writer) {
    writer.writeVarShort(this.objectGID);
    writer.writeShort(this.effects.length);
    this.effects.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.objectGID = reader.readVarShort();
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i = 0; i < countEffects; i++) {
      const effectsTypeId = reader.readShort();
      const type = new types[effectsTypeId]();
      type.deserialize(reader);
      this.effects.push(type);
    }
  }
};
var ObjectItemInformationWithQuantity = class extends ObjectItemMinimalInformation {
  static id = 4715;
  id = 4715;
  quantity = 0;
  constructor(objectGID, effects, quantity) {
    super(objectGID, effects);
    this.quantity = quantity;
  }
  serialize(writer) {
    writer.writeVarInt(this.quantity);
  }
  deserialize(reader) {
    this.quantity = reader.readVarInt();
  }
};
var StartupActionAddObject = class extends DofusType {
  static id = 6157;
  id = 6157;
  items;
  title;
  uid = 0;
  text;
  pictureUrl;
  descUrl;
  constructor(items, title, uid, text, pictureUrl, descUrl) {
    super();
    this.items = items;
    this.title = title;
    this.uid = uid;
    this.text = text;
    this.pictureUrl = pictureUrl;
    this.descUrl = descUrl;
  }
  serialize(writer) {
    writer.writeShort(this.items.length);
    this.items.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeUTF(this.title);
    writer.writeInt(this.uid);
    writer.writeUTF(this.text);
    writer.writeUTF(this.pictureUrl);
    writer.writeUTF(this.descUrl);
  }
  deserialize(reader) {
    this.items = [];
    const countItems = reader.readShort();
    for (let i = 0; i < countItems; i++) {
      const type = new ObjectItemInformationWithQuantity();
      type.deserialize(reader);
      this.items.push(type);
    }
    this.title = reader.readUTF();
    this.uid = reader.readInt();
    this.text = reader.readUTF();
    this.pictureUrl = reader.readUTF();
    this.descUrl = reader.readUTF();
  }
};
var CharacterRemodelingInformation = class extends AbstractCharacterInformation {
  static id = 5402;
  id = 5402;
  breed = 0;
  sex = false;
  cosmeticId = 0;
  name;
  colors;
  constructor(id_, breed, sex, cosmeticId, name, colors) {
    super(id_);
    this.breed = breed;
    this.sex = sex;
    this.cosmeticId = cosmeticId;
    this.name = name;
    this.colors = colors;
  }
  serialize(writer) {
    writer.writeByte(this.breed);
    writer.writeBoolean(this.sex);
    writer.writeVarShort(this.cosmeticId);
    writer.writeUTF(this.name);
    writer.writeShort(this.colors.length);
    this.colors.forEach((current) => writer.writeInt(current));
  }
  deserialize(reader) {
    this.breed = reader.readByte();
    this.sex = reader.readBoolean();
    this.cosmeticId = reader.readVarShort();
    this.name = reader.readUTF();
    this.colors = [];
    const countColors = reader.readShort();
    for (let i = 0; i < countColors; i++) {
      this.colors.push(reader.readInt());
    }
  }
};
var CharacterToRemodelInformations = class extends CharacterRemodelingInformation {
  static id = 2646;
  id = 2646;
  mandatoryChangeMask = 0;
  possibleChangeMask = 0;
  constructor(id_, breed, sex, cosmeticId, name, colors, mandatoryChangeMask, possibleChangeMask) {
    super(id_, breed, sex, cosmeticId, name, colors);
    this.mandatoryChangeMask = mandatoryChangeMask;
    this.possibleChangeMask = possibleChangeMask;
  }
  serialize(writer) {
    writer.writeByte(this.mandatoryChangeMask);
    writer.writeByte(this.possibleChangeMask);
  }
  deserialize(reader) {
    this.mandatoryChangeMask = reader.readByte();
    this.possibleChangeMask = reader.readByte();
  }
};
var RemodelingInformation = class extends DofusType {
  static id = 8002;
  id = 8002;
  breed = 0;
  sex = false;
  cosmeticId = 0;
  name;
  colors;
  constructor(breed, sex, cosmeticId, name, colors) {
    super();
    this.breed = breed;
    this.sex = sex;
    this.cosmeticId = cosmeticId;
    this.name = name;
    this.colors = colors;
  }
  serialize(writer) {
    writer.writeByte(this.breed);
    writer.writeBoolean(this.sex);
    writer.writeVarShort(this.cosmeticId);
    writer.writeUTF(this.name);
    writer.writeShort(this.colors.length);
    this.colors.forEach((current) => writer.writeInt(current));
  }
  deserialize(reader) {
    this.breed = reader.readByte();
    this.sex = reader.readBoolean();
    this.cosmeticId = reader.readVarShort();
    this.name = reader.readUTF();
    this.colors = [];
    const countColors = reader.readShort();
    for (let i = 0; i < countColors; i++) {
      this.colors.push(reader.readInt());
    }
  }
};
var CharacterCharacteristics = class extends DofusType {
  static id = 5368;
  id = 5368;
  characteristics;
  constructor(characteristics) {
    super();
    this.characteristics = characteristics;
  }
  serialize(writer) {
    writer.writeShort(this.characteristics.length);
    this.characteristics.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.characteristics = [];
    const countCharacteristics = reader.readShort();
    for (let i = 0; i < countCharacteristics; i++) {
      const characteristicsTypeId = reader.readShort();
      const type = new types[characteristicsTypeId]();
      type.deserialize(reader);
      this.characteristics.push(type);
    }
  }
};
var SimpleCharacterCharacteristicForPreset = class extends DofusType {
  static id = 7495;
  id = 7495;
  additionnal = 0;
  keyword;
  base = 0;
  constructor(additionnal, keyword, base) {
    super();
    this.additionnal = additionnal;
    this.keyword = keyword;
    this.base = base;
  }
  serialize(writer) {
    writer.writeVarShort(this.additionnal);
    writer.writeUTF(this.keyword);
    writer.writeVarShort(this.base);
  }
  deserialize(reader) {
    this.additionnal = reader.readVarShort();
    this.keyword = reader.readUTF();
    this.base = reader.readVarShort();
  }
};
var CharacterCharacteristicForPreset = class extends SimpleCharacterCharacteristicForPreset {
  static id = 4303;
  id = 4303;
  stuff = 0;
  constructor(additionnal, keyword, base, stuff) {
    super(additionnal, keyword, base);
    this.stuff = stuff;
  }
  serialize(writer) {
    writer.writeVarShort(this.stuff);
  }
  deserialize(reader) {
    this.stuff = reader.readVarShort();
  }
};
var SpellForPreset = class extends DofusType {
  static id = 7500;
  id = 7500;
  spellId = 0;
  shortcuts;
  constructor(spellId, shortcuts) {
    super();
    this.spellId = spellId;
    this.shortcuts = shortcuts;
  }
  serialize(writer) {
    writer.writeVarShort(this.spellId);
    writer.writeShort(this.shortcuts.length);
    this.shortcuts.forEach((current) => writer.writeShort(current));
  }
  deserialize(reader) {
    this.spellId = reader.readVarShort();
    this.shortcuts = [];
    const countShortcuts = reader.readShort();
    for (let i = 0; i < countShortcuts; i++) {
      this.shortcuts.push(reader.readShort());
    }
  }
};
var Achievement = class extends DofusType {
  static id = 8621;
  id = 8621;
  startedObjectives;
  id_ = 0;
  finishedObjective;
  constructor(startedObjectives, id_, finishedObjective) {
    super();
    this.startedObjectives = startedObjectives;
    this.id_ = id_;
    this.finishedObjective = finishedObjective;
  }
  serialize(writer) {
    writer.writeShort(this.startedObjectives.length);
    this.startedObjectives.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.id_);
    writer.writeShort(this.finishedObjective.length);
    this.finishedObjective.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.startedObjectives = [];
    const countStartedObjectives = reader.readShort();
    for (let i = 0; i < countStartedObjectives; i++) {
      const type = new AchievementStartedObjective();
      type.deserialize(reader);
      this.startedObjectives.push(type);
    }
    this.id_ = reader.readVarShort();
    this.finishedObjective = [];
    const countFinishedObjective = reader.readShort();
    for (let i = 0; i < countFinishedObjective; i++) {
      const type = new AchievementObjective();
      type.deserialize(reader);
      this.finishedObjective.push(type);
    }
  }
};
var ObjectItemNotInContainer = class extends Item {
  static id = 8362;
  id = 8362;
  objectUID = 0;
  objectGID = 0;
  quantity = 0;
  effects;
  constructor(objectUID, objectGID, quantity, effects) {
    super();
    this.objectUID = objectUID;
    this.objectGID = objectGID;
    this.quantity = quantity;
    this.effects = effects;
  }
  serialize(writer) {
    writer.writeVarInt(this.objectUID);
    writer.writeVarShort(this.objectGID);
    writer.writeVarInt(this.quantity);
    writer.writeShort(this.effects.length);
    this.effects.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.objectUID = reader.readVarInt();
    this.objectGID = reader.readVarShort();
    this.quantity = reader.readVarInt();
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i = 0; i < countEffects; i++) {
      const effectsTypeId = reader.readShort();
      const type = new types[effectsTypeId]();
      type.deserialize(reader);
      this.effects.push(type);
    }
  }
};
var TaxCollectorFightersInformation = class extends DofusType {
  static id = 9650;
  id = 9650;
  enemyCharactersInformations;
  collectorId = 0;
  allyCharactersInformations;
  constructor(enemyCharactersInformations, collectorId, allyCharactersInformations) {
    super();
    this.enemyCharactersInformations = enemyCharactersInformations;
    this.collectorId = collectorId;
    this.allyCharactersInformations = allyCharactersInformations;
  }
  serialize(writer) {
    writer.writeShort(this.enemyCharactersInformations.length);
    this.enemyCharactersInformations.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeDouble(this.collectorId);
    writer.writeShort(this.allyCharactersInformations.length);
    this.allyCharactersInformations.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.enemyCharactersInformations = [];
    const countEnemyCharactersInformations = reader.readShort();
    for (let i = 0; i < countEnemyCharactersInformations; i++) {
      const enemyCharactersInformationsTypeId = reader.readShort();
      const type = new types[enemyCharactersInformationsTypeId]();
      type.deserialize(reader);
      this.enemyCharactersInformations.push(type);
    }
    this.collectorId = reader.readDouble();
    this.allyCharactersInformations = [];
    const countAllyCharactersInformations = reader.readShort();
    for (let i = 0; i < countAllyCharactersInformations; i++) {
      const allyCharactersInformationsTypeId = reader.readShort();
      const type = new types[allyCharactersInformationsTypeId]();
      type.deserialize(reader);
      this.allyCharactersInformations.push(type);
    }
  }
};
var TeleportDestination = class extends DofusType {
  static id = 9066;
  id = 9066;
  cost = 0;
  level = 0;
  subAreaId = 0;
  type = 0;
  mapId = 0;
  constructor(cost, level, subAreaId, type, mapId) {
    super();
    this.cost = cost;
    this.level = level;
    this.subAreaId = subAreaId;
    this.type = type;
    this.mapId = mapId;
  }
  serialize(writer) {
    writer.writeVarShort(this.cost);
    writer.writeVarShort(this.level);
    writer.writeVarShort(this.subAreaId);
    writer.writeByte(this.type);
    writer.writeDouble(this.mapId);
  }
  deserialize(reader) {
    this.cost = reader.readVarShort();
    this.level = reader.readVarShort();
    this.subAreaId = reader.readVarShort();
    this.type = reader.readByte();
    this.mapId = reader.readDouble();
  }
};
var MonsterBoosts = class extends DofusType {
  static id = 7719;
  id = 7719;
  dropBoost = 0;
  id_ = 0;
  xpBoost = 0;
  constructor(dropBoost, id_, xpBoost) {
    super();
    this.dropBoost = dropBoost;
    this.id_ = id_;
    this.xpBoost = xpBoost;
  }
  serialize(writer) {
    writer.writeVarShort(this.dropBoost);
    writer.writeVarInt(this.id_);
    writer.writeVarShort(this.xpBoost);
  }
  deserialize(reader) {
    this.dropBoost = reader.readVarShort();
    this.id_ = reader.readVarInt();
    this.xpBoost = reader.readVarShort();
  }
};
var DecraftedItemStackInfo = class extends DofusType {
  static id = 8215;
  id = 8215;
  bonusMin = 0;
  runesQty;
  objectUID = 0;
  bonusMax = 0;
  runesId;
  constructor(bonusMin, runesQty, objectUID, bonusMax, runesId) {
    super();
    this.bonusMin = bonusMin;
    this.runesQty = runesQty;
    this.objectUID = objectUID;
    this.bonusMax = bonusMax;
    this.runesId = runesId;
  }
  serialize(writer) {
    writer.writeFloat(this.bonusMin);
    writer.writeShort(this.runesQty.length);
    this.runesQty.forEach((current) => writer.writeVarInt(current));
    writer.writeVarInt(this.objectUID);
    writer.writeFloat(this.bonusMax);
    writer.writeShort(this.runesId.length);
    this.runesId.forEach((current) => writer.writeVarShort(current));
  }
  deserialize(reader) {
    this.bonusMin = reader.readFloat();
    this.runesQty = [];
    const countRunesQty = reader.readShort();
    for (let i = 0; i < countRunesQty; i++) {
      this.runesQty.push(reader.readVarInt());
    }
    this.objectUID = reader.readVarInt();
    this.bonusMax = reader.readFloat();
    this.runesId = [];
    const countRunesId = reader.readShort();
    for (let i = 0; i < countRunesId; i++) {
      this.runesId.push(reader.readVarShort());
    }
  }
};
var TaxCollectorBasicInformations = class extends DofusType {
  static id = 1488;
  id = 1488;
  subAreaId = 0;
  lastNameId = 0;
  worldY = 0;
  firstNameId = 0;
  mapId = 0;
  worldX = 0;
  constructor(subAreaId, lastNameId, worldY, firstNameId, mapId, worldX) {
    super();
    this.subAreaId = subAreaId;
    this.lastNameId = lastNameId;
    this.worldY = worldY;
    this.firstNameId = firstNameId;
    this.mapId = mapId;
    this.worldX = worldX;
  }
  serialize(writer) {
    writer.writeVarShort(this.subAreaId);
    writer.writeVarShort(this.lastNameId);
    writer.writeShort(this.worldY);
    writer.writeVarShort(this.firstNameId);
    writer.writeDouble(this.mapId);
    writer.writeShort(this.worldX);
  }
  deserialize(reader) {
    this.subAreaId = reader.readVarShort();
    this.lastNameId = reader.readVarShort();
    this.worldY = reader.readShort();
    this.firstNameId = reader.readVarShort();
    this.mapId = reader.readDouble();
    this.worldX = reader.readShort();
  }
};
var PartyMemberGeoPosition = class extends DofusType {
  static id = 6723;
  id = 6723;
  mapId = 0;
  worldY = 0;
  subAreaId = 0;
  memberId = 0;
  worldX = 0;
  constructor(mapId, worldY, subAreaId, memberId, worldX) {
    super();
    this.mapId = mapId;
    this.worldY = worldY;
    this.subAreaId = subAreaId;
    this.memberId = memberId;
    this.worldX = worldX;
  }
  serialize(writer) {
    writer.writeDouble(this.mapId);
    writer.writeShort(this.worldY);
    writer.writeVarShort(this.subAreaId);
    writer.writeInt(this.memberId);
    writer.writeShort(this.worldX);
  }
  deserialize(reader) {
    this.mapId = reader.readDouble();
    this.worldY = reader.readShort();
    this.subAreaId = reader.readVarShort();
    this.memberId = reader.readInt();
    this.worldX = reader.readShort();
  }
};
var ObjectItemToSellInNpcShop = class extends ObjectItemMinimalInformation {
  static id = 6097;
  id = 6097;
  buyCriterion;
  objectPrice = 0;
  constructor(objectGID, effects, buyCriterion, objectPrice) {
    super(objectGID, effects);
    this.buyCriterion = buyCriterion;
    this.objectPrice = objectPrice;
  }
  serialize(writer) {
    writer.writeUTF(this.buyCriterion);
    writer.writeVarLong(this.objectPrice);
  }
  deserialize(reader) {
    this.buyCriterion = reader.readUTF();
    this.objectPrice = reader.readVarLong();
  }
};
var JobCrafterDirectoryEntryPlayerInfo = class extends DofusType {
  static id = 4905;
  id = 4905;
  status;
  playerId = 0;
  isInWorkshop = false;
  canCraftLegendary = false;
  subAreaId = 0;
  sex = false;
  alignmentSide = 0;
  playerName;
  worldX = 0;
  worldY = 0;
  breed = 0;
  mapId = 0;
  constructor(status, playerId, isInWorkshop, canCraftLegendary, subAreaId, sex, alignmentSide, playerName, worldX, worldY, breed, mapId) {
    super();
    this.status = status;
    this.playerId = playerId;
    this.isInWorkshop = isInWorkshop;
    this.canCraftLegendary = canCraftLegendary;
    this.subAreaId = subAreaId;
    this.sex = sex;
    this.alignmentSide = alignmentSide;
    this.playerName = playerName;
    this.worldX = worldX;
    this.worldY = worldY;
    this.breed = breed;
    this.mapId = mapId;
  }
  serialize(writer) {
    writer.writeShort(this.status.id);
    this.status.serialize(writer);
    writer.writeVarLong(this.playerId);
    writer.writeBoolean(this.isInWorkshop);
    writer.writeBoolean(this.canCraftLegendary);
    writer.writeVarShort(this.subAreaId);
    writer.writeBoolean(this.sex);
    writer.writeByte(this.alignmentSide);
    writer.writeUTF(this.playerName);
    writer.writeShort(this.worldX);
    writer.writeShort(this.worldY);
    writer.writeByte(this.breed);
    writer.writeDouble(this.mapId);
  }
  deserialize(reader) {
    const statusTypeId = reader.readShort();
    this.status = new types[statusTypeId]();
    this.status.deserialize(reader);
    this.playerId = reader.readVarLong();
    this.isInWorkshop = reader.readBoolean();
    this.canCraftLegendary = reader.readBoolean();
    this.subAreaId = reader.readVarShort();
    this.sex = reader.readBoolean();
    this.alignmentSide = reader.readByte();
    this.playerName = reader.readUTF();
    this.worldX = reader.readShort();
    this.worldY = reader.readShort();
    this.breed = reader.readByte();
    this.mapId = reader.readDouble();
  }
};
var JobCrafterDirectoryEntryJobInfo = class extends DofusType {
  static id = 5220;
  id = 5220;
  minLevel = 0;
  free = false;
  jobId = 0;
  jobLevel = 0;
  constructor(minLevel, free, jobId, jobLevel) {
    super();
    this.minLevel = minLevel;
    this.free = free;
    this.jobId = jobId;
    this.jobLevel = jobLevel;
  }
  serialize(writer) {
    writer.writeByte(this.minLevel);
    writer.writeBoolean(this.free);
    writer.writeByte(this.jobId);
    writer.writeByte(this.jobLevel);
  }
  deserialize(reader) {
    this.minLevel = reader.readByte();
    this.free = reader.readBoolean();
    this.jobId = reader.readByte();
    this.jobLevel = reader.readByte();
  }
};
var JobCrafterDirectoryListEntry = class extends DofusType {
  static id = 3897;
  id = 3897;
  playerInfo;
  jobInfo;
  constructor(playerInfo, jobInfo) {
    super();
    this.playerInfo = playerInfo;
    this.jobInfo = jobInfo;
  }
  serialize(writer) {
    this.playerInfo.serialize(writer);
    this.jobInfo.serialize(writer);
  }
  deserialize(reader) {
    this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
    this.playerInfo.deserialize(reader);
    this.jobInfo = new JobCrafterDirectoryEntryJobInfo();
    this.jobInfo.deserialize(reader);
  }
};
var JobCrafterDirectorySettings = class extends DofusType {
  static id = 6079;
  id = 6079;
  free = false;
  jobId = 0;
  minLevel = 0;
  constructor(free, jobId, minLevel) {
    super();
    this.free = free;
    this.jobId = jobId;
    this.minLevel = minLevel;
  }
  serialize(writer) {
    writer.writeBoolean(this.free);
    writer.writeByte(this.jobId);
    writer.writeByte(this.minLevel);
  }
  deserialize(reader) {
    this.free = reader.readBoolean();
    this.jobId = reader.readByte();
    this.minLevel = reader.readByte();
  }
};
var LeagueFriendInformations = class extends AbstractContactInformations {
  static id = 107;
  id = 107;
  totalLeaguePoints = 0;
  leagueId = 0;
  ladderPosition = 0;
  playerName;
  breed = 0;
  sex = false;
  playerId = 0;
  level = 0;
  constructor(accountId, accountTag, totalLeaguePoints, leagueId, ladderPosition, playerName, breed, sex, playerId, level) {
    super(accountId, accountTag);
    this.totalLeaguePoints = totalLeaguePoints;
    this.leagueId = leagueId;
    this.ladderPosition = ladderPosition;
    this.playerName = playerName;
    this.breed = breed;
    this.sex = sex;
    this.playerId = playerId;
    this.level = level;
  }
  serialize(writer) {
    writer.writeVarShort(this.totalLeaguePoints);
    writer.writeVarShort(this.leagueId);
    writer.writeInt(this.ladderPosition);
    writer.writeUTF(this.playerName);
    writer.writeByte(this.breed);
    writer.writeBoolean(this.sex);
    writer.writeVarLong(this.playerId);
    writer.writeVarShort(this.level);
  }
  deserialize(reader) {
    this.totalLeaguePoints = reader.readVarShort();
    this.leagueId = reader.readVarShort();
    this.ladderPosition = reader.readInt();
    this.playerName = reader.readUTF();
    this.breed = reader.readByte();
    this.sex = reader.readBoolean();
    this.playerId = reader.readVarLong();
    this.level = reader.readVarShort();
  }
};
var ArenaRankInfos = class extends DofusType {
  static id = 750;
  id = 750;
  leagueRanking;
  ranking;
  victoryCount = 0;
  fightcount = 0;
  numFightNeededForLadder = 0;
  constructor(leagueRanking, ranking, victoryCount, fightcount, numFightNeededForLadder) {
    super();
    this.leagueRanking = leagueRanking;
    this.ranking = ranking;
    this.victoryCount = victoryCount;
    this.fightcount = fightcount;
    this.numFightNeededForLadder = numFightNeededForLadder;
  }
  serialize(writer) {
    this.leagueRanking.serialize(writer);
    this.ranking.serialize(writer);
    writer.writeVarShort(this.victoryCount);
    writer.writeVarShort(this.fightcount);
    writer.writeShort(this.numFightNeededForLadder);
  }
  deserialize(reader) {
    this.leagueRanking = new ArenaLeagueRanking();
    this.leagueRanking.deserialize(reader);
    this.ranking = new ArenaRanking();
    this.ranking.deserialize(reader);
    this.victoryCount = reader.readVarShort();
    this.fightcount = reader.readVarShort();
    this.numFightNeededForLadder = reader.readShort();
  }
};
var JobExperience = class extends DofusType {
  static id = 1579;
  id = 1579;
  jobXpNextLevelFloor = 0;
  jobId = 0;
  jobXpLevelFloor = 0;
  jobXP = 0;
  jobLevel = 0;
  constructor(jobXpNextLevelFloor, jobId, jobXpLevelFloor, jobXP, jobLevel) {
    super();
    this.jobXpNextLevelFloor = jobXpNextLevelFloor;
    this.jobId = jobId;
    this.jobXpLevelFloor = jobXpLevelFloor;
    this.jobXP = jobXP;
    this.jobLevel = jobLevel;
  }
  serialize(writer) {
    writer.writeVarLong(this.jobXpNextLevelFloor);
    writer.writeByte(this.jobId);
    writer.writeVarLong(this.jobXpLevelFloor);
    writer.writeVarLong(this.jobXP);
    writer.writeByte(this.jobLevel);
  }
  deserialize(reader) {
    this.jobXpNextLevelFloor = reader.readVarLong();
    this.jobId = reader.readByte();
    this.jobXpLevelFloor = reader.readVarLong();
    this.jobXP = reader.readVarLong();
    this.jobLevel = reader.readByte();
  }
};
var AllianceVersatileInformations = class extends DofusType {
  static id = 1207;
  id = 1207;
  nbSubarea = 0;
  nbMembers = 0;
  allianceId = 0;
  nbGuilds = 0;
  constructor(nbSubarea, nbMembers, allianceId, nbGuilds) {
    super();
    this.nbSubarea = nbSubarea;
    this.nbMembers = nbMembers;
    this.allianceId = allianceId;
    this.nbGuilds = nbGuilds;
  }
  serialize(writer) {
    writer.writeVarShort(this.nbSubarea);
    writer.writeVarShort(this.nbMembers);
    writer.writeVarInt(this.allianceId);
    writer.writeVarShort(this.nbGuilds);
  }
  deserialize(reader) {
    this.nbSubarea = reader.readVarShort();
    this.nbMembers = reader.readVarShort();
    this.allianceId = reader.readVarInt();
    this.nbGuilds = reader.readVarShort();
  }
};
var PrismFightersInformation = class extends DofusType {
  static id = 8909;
  id = 8909;
  allyCharactersInformations;
  enemyCharactersInformations;
  waitingForHelpInfo;
  subAreaId = 0;
  constructor(allyCharactersInformations, enemyCharactersInformations, waitingForHelpInfo, subAreaId) {
    super();
    this.allyCharactersInformations = allyCharactersInformations;
    this.enemyCharactersInformations = enemyCharactersInformations;
    this.waitingForHelpInfo = waitingForHelpInfo;
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeShort(this.allyCharactersInformations.length);
    this.allyCharactersInformations.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.enemyCharactersInformations.length);
    this.enemyCharactersInformations.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    this.waitingForHelpInfo.serialize(writer);
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.allyCharactersInformations = [];
    const countAllyCharactersInformations = reader.readShort();
    for (let i = 0; i < countAllyCharactersInformations; i++) {
      const allyCharactersInformationsTypeId = reader.readShort();
      const type = new types[allyCharactersInformationsTypeId]();
      type.deserialize(reader);
      this.allyCharactersInformations.push(type);
    }
    this.enemyCharactersInformations = [];
    const countEnemyCharactersInformations = reader.readShort();
    for (let i = 0; i < countEnemyCharactersInformations; i++) {
      const enemyCharactersInformationsTypeId = reader.readShort();
      const type = new types[enemyCharactersInformationsTypeId]();
      type.deserialize(reader);
      this.enemyCharactersInformations.push(type);
    }
    this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
    this.waitingForHelpInfo.deserialize(reader);
    this.subAreaId = reader.readVarShort();
  }
};
var HavenBagFurnitureInformation = class extends DofusType {
  static id = 3647;
  id = 3647;
  cellId = 0;
  orientation = 0;
  funitureId = 0;
  constructor(cellId, orientation, funitureId) {
    super();
    this.cellId = cellId;
    this.orientation = orientation;
    this.funitureId = funitureId;
  }
  serialize(writer) {
    writer.writeVarShort(this.cellId);
    writer.writeByte(this.orientation);
    writer.writeInt(this.funitureId);
  }
  deserialize(reader) {
    this.cellId = reader.readVarShort();
    this.orientation = reader.readByte();
    this.funitureId = reader.readInt();
  }
};
var BufferInformation = class extends DofusType {
  static id = 3684;
  id = 3684;
  amount = 0;
  id_ = 0;
  constructor(amount, id_) {
    super();
    this.amount = amount;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeVarLong(this.amount);
    writer.writeVarLong(this.id_);
  }
  deserialize(reader) {
    this.amount = reader.readVarLong();
    this.id_ = reader.readVarLong();
  }
};
var AnomalySubareaInformation = class extends DofusType {
  static id = 8338;
  id = 8338;
  anomalyClosingTime = 0;
  hasAnomaly = false;
  subAreaId = 0;
  rewardRate = 0;
  constructor(anomalyClosingTime, hasAnomaly, subAreaId, rewardRate) {
    super();
    this.anomalyClosingTime = anomalyClosingTime;
    this.hasAnomaly = hasAnomaly;
    this.subAreaId = subAreaId;
    this.rewardRate = rewardRate;
  }
  serialize(writer) {
    writer.writeVarLong(this.anomalyClosingTime);
    writer.writeBoolean(this.hasAnomaly);
    writer.writeVarShort(this.subAreaId);
    writer.writeVarShort(this.rewardRate);
  }
  deserialize(reader) {
    this.anomalyClosingTime = reader.readVarLong();
    this.hasAnomaly = reader.readBoolean();
    this.subAreaId = reader.readVarShort();
    this.rewardRate = reader.readVarShort();
  }
};
var PaddockInformationsForSell = class extends DofusType {
  static id = 1249;
  id = 1249;
  nbObject = 0;
  worldX = 0;
  worldY = 0;
  price = 0;
  guildOwner;
  nbMount = 0;
  subAreaId = 0;
  constructor(nbObject, worldX, worldY, price, guildOwner, nbMount, subAreaId) {
    super();
    this.nbObject = nbObject;
    this.worldX = worldX;
    this.worldY = worldY;
    this.price = price;
    this.guildOwner = guildOwner;
    this.nbMount = nbMount;
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeByte(this.nbObject);
    writer.writeShort(this.worldX);
    writer.writeShort(this.worldY);
    writer.writeVarLong(this.price);
    writer.writeUTF(this.guildOwner);
    writer.writeByte(this.nbMount);
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.nbObject = reader.readByte();
    this.worldX = reader.readShort();
    this.worldY = reader.readShort();
    this.price = reader.readVarLong();
    this.guildOwner = reader.readUTF();
    this.nbMount = reader.readByte();
    this.subAreaId = reader.readVarShort();
  }
};
var CharacterMinimalGuildPublicInformations = class extends CharacterMinimalInformations {
  static id = 393;
  id = 393;
  rank = 0;
  constructor(id_, name, level, rank) {
    super(id_, name, level);
    this.rank = rank;
  }
  serialize(writer) {
    writer.writeVarInt(this.rank);
  }
  deserialize(reader) {
    this.rank = reader.readVarInt();
  }
};
var EntityInformation = class extends DofusType {
  static id = 6041;
  id = 6041;
  status = false;
  id_ = 0;
  experience = 0;
  constructor(status, id_, experience) {
    super();
    this.status = status;
    this.id_ = id_;
    this.experience = experience;
  }
  serialize(writer) {
    writer.writeBoolean(this.status);
    writer.writeVarShort(this.id_);
    writer.writeVarInt(this.experience);
  }
  deserialize(reader) {
    this.status = reader.readBoolean();
    this.id_ = reader.readVarShort();
    this.experience = reader.readVarInt();
  }
};
var AlignmentWarEffortInformation = class extends DofusType {
  static id = 3356;
  id = 3356;
  alignmentWarEffort = 0;
  alignmentSide = 0;
  constructor(alignmentWarEffort, alignmentSide) {
    super();
    this.alignmentWarEffort = alignmentWarEffort;
    this.alignmentSide = alignmentSide;
  }
  serialize(writer) {
    writer.writeVarLong(this.alignmentWarEffort);
    writer.writeByte(this.alignmentSide);
  }
  deserialize(reader) {
    this.alignmentWarEffort = reader.readVarLong();
    this.alignmentSide = reader.readByte();
  }
};
var RecycledItem = class extends DofusType {
  static id = 161;
  id = 161;
  qty = 0;
  id_ = 0;
  constructor(qty, id_) {
    super();
    this.qty = qty;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeUInt(this.qty);
    writer.writeVarShort(this.id_);
  }
  deserialize(reader) {
    this.qty = reader.readUInt();
    this.id_ = reader.readVarShort();
  }
};
var HouseInformationsForSell = class extends DofusType {
  static id = 1011;
  id = 1011;
  skillListIds;
  ownerTag;
  price = 0;
  isLocked = false;
  modelId = 0;
  nbRoom = 0;
  secondHand = false;
  worldX = 0;
  ownerCharacterName;
  worldY = 0;
  hasOwner = false;
  instanceId = 0;
  nbChest = 0;
  subAreaId = 0;
  constructor(skillListIds, ownerTag, price, isLocked, modelId, nbRoom, secondHand, worldX, ownerCharacterName, worldY, hasOwner, instanceId, nbChest, subAreaId) {
    super();
    this.skillListIds = skillListIds;
    this.ownerTag = ownerTag;
    this.price = price;
    this.isLocked = isLocked;
    this.modelId = modelId;
    this.nbRoom = nbRoom;
    this.secondHand = secondHand;
    this.worldX = worldX;
    this.ownerCharacterName = ownerCharacterName;
    this.worldY = worldY;
    this.hasOwner = hasOwner;
    this.instanceId = instanceId;
    this.nbChest = nbChest;
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeShort(this.skillListIds.length);
    this.skillListIds.forEach((current) => writer.writeInt(current));
    this.ownerTag.serialize(writer);
    writer.writeVarLong(this.price);
    writer.writeBoolean(this.isLocked);
    writer.writeVarInt(this.modelId);
    writer.writeByte(this.nbRoom);
    writer.writeBoolean(this.secondHand);
    writer.writeShort(this.worldX);
    writer.writeUTF(this.ownerCharacterName);
    writer.writeShort(this.worldY);
    writer.writeBoolean(this.hasOwner);
    writer.writeInt(this.instanceId);
    writer.writeByte(this.nbChest);
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.skillListIds = [];
    const countSkillListIds = reader.readShort();
    for (let i = 0; i < countSkillListIds; i++) {
      this.skillListIds.push(reader.readInt());
    }
    this.ownerTag = new AccountTagInformation();
    this.ownerTag.deserialize(reader);
    this.price = reader.readVarLong();
    this.isLocked = reader.readBoolean();
    this.modelId = reader.readVarInt();
    this.nbRoom = reader.readByte();
    this.secondHand = reader.readBoolean();
    this.worldX = reader.readShort();
    this.ownerCharacterName = reader.readUTF();
    this.worldY = reader.readShort();
    this.hasOwner = reader.readBoolean();
    this.instanceId = reader.readInt();
    this.nbChest = reader.readByte();
    this.subAreaId = reader.readVarShort();
  }
};
var JobBookSubscription = class extends DofusType {
  static id = 6658;
  id = 6658;
  subscribed = false;
  jobId = 0;
  constructor(subscribed, jobId) {
    super();
    this.subscribed = subscribed;
    this.jobId = jobId;
  }
  serialize(writer) {
    writer.writeBoolean(this.subscribed);
    writer.writeByte(this.jobId);
  }
  deserialize(reader) {
    this.subscribed = reader.readBoolean();
    this.jobId = reader.readByte();
  }
};
var GoldItem = class extends Item {
  static id = 396;
  id = 396;
  sum = 0;
  constructor(sum) {
    super();
    this.sum = sum;
  }
  serialize(writer) {
    writer.writeVarLong(this.sum);
  }
  deserialize(reader) {
    this.sum = reader.readVarLong();
  }
};
var GuildRecruitmentInformation = class extends DofusType {
  static id = 4584;
  id = 4584;
  lastEditDate = 0;
  lastEditPlayerName;
  recruitmentText;
  guildId = 0;
  recruitmentType = 0;
  recruitmentTitle;
  selectedCriterion;
  minLevel = 0;
  minSuccess = 0;
  selectedLanguages;
  minLevelFacultative = false;
  minSuccessFacultative = false;
  invalidatedByModeration = false;
  recruitmentAutoLocked = false;
  constructor(lastEditDate, lastEditPlayerName, recruitmentText, guildId, recruitmentType, recruitmentTitle, selectedCriterion, minLevel, minSuccess, selectedLanguages, minLevelFacultative, minSuccessFacultative, invalidatedByModeration, recruitmentAutoLocked) {
    super();
    this.lastEditDate = lastEditDate;
    this.lastEditPlayerName = lastEditPlayerName;
    this.recruitmentText = recruitmentText;
    this.guildId = guildId;
    this.recruitmentType = recruitmentType;
    this.recruitmentTitle = recruitmentTitle;
    this.selectedCriterion = selectedCriterion;
    this.minLevel = minLevel;
    this.minSuccess = minSuccess;
    this.selectedLanguages = selectedLanguages;
    this.minLevelFacultative = minLevelFacultative;
    this.minSuccessFacultative = minSuccessFacultative;
    this.invalidatedByModeration = invalidatedByModeration;
    this.recruitmentAutoLocked = recruitmentAutoLocked;
  }
  serialize(writer) {
    writer.writeDouble(this.lastEditDate);
    writer.writeUTF(this.lastEditPlayerName);
    writer.writeUTF(this.recruitmentText);
    writer.writeVarInt(this.guildId);
    writer.writeByte(this.recruitmentType);
    writer.writeUTF(this.recruitmentTitle);
    writer.writeShort(this.selectedCriterion.length);
    this.selectedCriterion.forEach(
      (current) => writer.writeVarInt(current)
    );
    writer.writeShort(this.minLevel);
    writer.writeVarInt(this.minSuccess);
    writer.writeShort(this.selectedLanguages.length);
    this.selectedLanguages.forEach(
      (current) => writer.writeVarInt(current)
    );
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.minLevelFacultative);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.minSuccessFacultative);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 2, this.invalidatedByModeration);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 3, this.recruitmentAutoLocked);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.lastEditDate = reader.readDouble();
    this.lastEditPlayerName = reader.readUTF();
    this.recruitmentText = reader.readUTF();
    this.guildId = reader.readVarInt();
    this.recruitmentType = reader.readByte();
    this.recruitmentTitle = reader.readUTF();
    this.selectedCriterion = [];
    const countSelectedCriterion = reader.readShort();
    for (let i = 0; i < countSelectedCriterion; i++) {
      this.selectedCriterion.push(reader.readVarInt());
    }
    this.minLevel = reader.readShort();
    this.minSuccess = reader.readVarInt();
    this.selectedLanguages = [];
    const countSelectedLanguages = reader.readShort();
    for (let i = 0; i < countSelectedLanguages; i++) {
      this.selectedLanguages.push(reader.readVarInt());
    }
    const box0 = reader.readByte();
    this.minLevelFacultative = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.minSuccessFacultative = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
    this.invalidatedByModeration = (0, import_hetwan2.bigEndianGetFlag)(box0, 2);
    this.recruitmentAutoLocked = (0, import_hetwan2.bigEndianGetFlag)(box0, 3);
  }
};
var ObjectItemToSellInHumanVendorShop = class extends Item {
  static id = 3057;
  id = 3057;
  publicPrice = 0;
  effects;
  quantity = 0;
  objectGID = 0;
  objectUID = 0;
  objectPrice = 0;
  constructor(publicPrice, effects, quantity, objectGID, objectUID, objectPrice) {
    super();
    this.publicPrice = publicPrice;
    this.effects = effects;
    this.quantity = quantity;
    this.objectGID = objectGID;
    this.objectUID = objectUID;
    this.objectPrice = objectPrice;
  }
  serialize(writer) {
    writer.writeVarLong(this.publicPrice);
    writer.writeShort(this.effects.length);
    this.effects.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarInt(this.quantity);
    writer.writeVarShort(this.objectGID);
    writer.writeVarInt(this.objectUID);
    writer.writeVarLong(this.objectPrice);
  }
  deserialize(reader) {
    this.publicPrice = reader.readVarLong();
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i = 0; i < countEffects; i++) {
      const effectsTypeId = reader.readShort();
      const type = new types[effectsTypeId]();
      type.deserialize(reader);
      this.effects.push(type);
    }
    this.quantity = reader.readVarInt();
    this.objectGID = reader.readVarShort();
    this.objectUID = reader.readVarInt();
    this.objectPrice = reader.readVarLong();
  }
};
var ObjectItemQuantity = class extends Item {
  static id = 3674;
  id = 3674;
  quantity = 0;
  objectUID = 0;
  constructor(quantity, objectUID) {
    super();
    this.quantity = quantity;
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeVarInt(this.quantity);
    writer.writeVarInt(this.objectUID);
  }
  deserialize(reader) {
    this.quantity = reader.readVarInt();
    this.objectUID = reader.readVarInt();
  }
};
var EntityMovementInformations = class extends DofusType {
  static id = 7283;
  id = 7283;
  id_ = 0;
  steps;
  constructor(id_, steps) {
    super();
    this.id_ = id_;
    this.steps = steps;
  }
  serialize(writer) {
    writer.writeInt(this.id_);
    writer.writeShort(this.steps.length);
    this.steps.forEach((current) => writer.writeByte(current));
  }
  deserialize(reader) {
    this.id_ = reader.readInt();
    this.steps = [];
    const countSteps = reader.readShort();
    for (let i = 0; i < countSteps; i++) {
      this.steps.push(reader.readByte());
    }
  }
};
var BidExchangerObjectInfo = class extends DofusType {
  static id = 461;
  id = 461;
  objectGID = 0;
  prices;
  objectType = 0;
  objectUID = 0;
  effects;
  constructor(objectGID, prices, objectType, objectUID, effects) {
    super();
    this.objectGID = objectGID;
    this.prices = prices;
    this.objectType = objectType;
    this.objectUID = objectUID;
    this.effects = effects;
  }
  serialize(writer) {
    writer.writeVarShort(this.objectGID);
    writer.writeShort(this.prices.length);
    this.prices.forEach((current) => writer.writeVarLong(current));
    writer.writeInt(this.objectType);
    writer.writeVarInt(this.objectUID);
    writer.writeShort(this.effects.length);
    this.effects.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.objectGID = reader.readVarShort();
    this.prices = [];
    const countPrices = reader.readShort();
    for (let i = 0; i < countPrices; i++) {
      this.prices.push(reader.readVarLong());
    }
    this.objectType = reader.readInt();
    this.objectUID = reader.readVarInt();
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i = 0; i < countEffects; i++) {
      const effectsTypeId = reader.readShort();
      const type = new types[effectsTypeId]();
      type.deserialize(reader);
      this.effects.push(type);
    }
  }
};
var AtlasPointsInformations = class extends DofusType {
  static id = 4410;
  id = 4410;
  type = 0;
  coords;
  constructor(type, coords) {
    super();
    this.type = type;
    this.coords = coords;
  }
  serialize(writer) {
    writer.writeByte(this.type);
    writer.writeShort(this.coords.length);
    this.coords.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.type = reader.readByte();
    this.coords = [];
    const countCoords = reader.readShort();
    for (let i = 0; i < countCoords; i++) {
      const type = new MapCoordinatesExtended();
      type.deserialize(reader);
      this.coords.push(type);
    }
  }
};
var AdditionalTaxCollectorInformations = class extends DofusType {
  static id = 9432;
  id = 9432;
  date = 0;
  collectorCallerName;
  constructor(date, collectorCallerName) {
    super();
    this.date = date;
    this.collectorCallerName = collectorCallerName;
  }
  serialize(writer) {
    writer.writeInt(this.date);
    writer.writeUTF(this.collectorCallerName);
  }
  deserialize(reader) {
    this.date = reader.readInt();
    this.collectorCallerName = reader.readUTF();
  }
};
var ProtectedEntityWaitingForHelpInfo = class extends DofusType {
  static id = 2847;
  id = 2847;
  timeLeftBeforeFight = 0;
  nbPositionForDefensors = 0;
  waitTimeForPlacement = 0;
  constructor(timeLeftBeforeFight, nbPositionForDefensors, waitTimeForPlacement) {
    super();
    this.timeLeftBeforeFight = timeLeftBeforeFight;
    this.nbPositionForDefensors = nbPositionForDefensors;
    this.waitTimeForPlacement = waitTimeForPlacement;
  }
  serialize(writer) {
    writer.writeInt(this.timeLeftBeforeFight);
    writer.writeByte(this.nbPositionForDefensors);
    writer.writeInt(this.waitTimeForPlacement);
  }
  deserialize(reader) {
    this.timeLeftBeforeFight = reader.readInt();
    this.nbPositionForDefensors = reader.readByte();
    this.waitTimeForPlacement = reader.readInt();
  }
};
var MountInformationsForPaddock = class extends DofusType {
  static id = 1513;
  id = 1513;
  ownerName;
  modelId = 0;
  name;
  constructor(ownerName, modelId, name) {
    super();
    this.ownerName = ownerName;
    this.modelId = modelId;
    this.name = name;
  }
  serialize(writer) {
    writer.writeUTF(this.ownerName);
    writer.writeVarShort(this.modelId);
    writer.writeUTF(this.name);
  }
  deserialize(reader) {
    this.ownerName = reader.readUTF();
    this.modelId = reader.readVarShort();
    this.name = reader.readUTF();
  }
};
var FightTeamLightInformations = class extends AbstractFightTeamInformations {
  static id = 68;
  id = 68;
  meanLevel = 0;
  teamMembersCount = 0;
  hasFriend = false;
  hasGuildMember = false;
  hasAllianceMember = false;
  hasGroupMember = false;
  hasMyTaxCollector = false;
  constructor(nbWaves, teamId, teamTypeId, teamSide, leaderId, meanLevel, teamMembersCount, hasFriend, hasGuildMember, hasAllianceMember, hasGroupMember, hasMyTaxCollector) {
    super(nbWaves, teamId, teamTypeId, teamSide, leaderId);
    this.meanLevel = meanLevel;
    this.teamMembersCount = teamMembersCount;
    this.hasFriend = hasFriend;
    this.hasGuildMember = hasGuildMember;
    this.hasAllianceMember = hasAllianceMember;
    this.hasGroupMember = hasGroupMember;
    this.hasMyTaxCollector = hasMyTaxCollector;
  }
  serialize(writer) {
    writer.writeVarInt(this.meanLevel);
    writer.writeByte(this.teamMembersCount);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.hasFriend);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.hasGuildMember);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 2, this.hasAllianceMember);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 3, this.hasGroupMember);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 4, this.hasMyTaxCollector);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.meanLevel = reader.readVarInt();
    this.teamMembersCount = reader.readByte();
    const box0 = reader.readByte();
    this.hasFriend = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.hasGuildMember = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
    this.hasAllianceMember = (0, import_hetwan2.bigEndianGetFlag)(box0, 2);
    this.hasGroupMember = (0, import_hetwan2.bigEndianGetFlag)(box0, 3);
    this.hasMyTaxCollector = (0, import_hetwan2.bigEndianGetFlag)(box0, 4);
  }
};
var ObjectEffects = class extends DofusType {
  static id = 5613;
  id = 5613;
  effects;
  constructor(effects) {
    super();
    this.effects = effects;
  }
  serialize(writer) {
    writer.writeShort(this.effects.length);
    this.effects.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i = 0; i < countEffects; i++) {
      const effectsTypeId = reader.readShort();
      const type = new types[effectsTypeId]();
      type.deserialize(reader);
      this.effects.push(type);
    }
  }
};
var AchievementObjective = class extends DofusType {
  static id = 8917;
  id = 8917;
  maxValue = 0;
  id_ = 0;
  constructor(maxValue, id_) {
    super();
    this.maxValue = maxValue;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeVarShort(this.maxValue);
    writer.writeVarInt(this.id_);
  }
  deserialize(reader) {
    this.maxValue = reader.readVarShort();
    this.id_ = reader.readVarInt();
  }
};
var AchievementStartedObjective = class extends AchievementObjective {
  static id = 5823;
  id = 5823;
  value = 0;
  constructor(maxValue, id_, value) {
    super(maxValue, id_);
    this.value = value;
  }
  serialize(writer) {
    writer.writeVarShort(this.value);
  }
  deserialize(reader) {
    this.value = reader.readVarShort();
  }
};
var ArenaRanking = class extends DofusType {
  static id = 6311;
  id = 6311;
  bestRank = 0;
  rank = 0;
  constructor(bestRank, rank) {
    super();
    this.bestRank = bestRank;
    this.rank = rank;
  }
  serialize(writer) {
    writer.writeVarShort(this.bestRank);
    writer.writeVarShort(this.rank);
  }
  deserialize(reader) {
    this.bestRank = reader.readVarShort();
    this.rank = reader.readVarShort();
  }
};
var ArenaLeagueRanking = class extends DofusType {
  static id = 2820;
  id = 2820;
  leaguePoints = 0;
  ladderPosition = 0;
  totalLeaguePoints = 0;
  rank = 0;
  leagueId = 0;
  constructor(leaguePoints, ladderPosition, totalLeaguePoints, rank, leagueId) {
    super();
    this.leaguePoints = leaguePoints;
    this.ladderPosition = ladderPosition;
    this.totalLeaguePoints = totalLeaguePoints;
    this.rank = rank;
    this.leagueId = leagueId;
  }
  serialize(writer) {
    writer.writeVarShort(this.leaguePoints);
    writer.writeInt(this.ladderPosition);
    writer.writeVarShort(this.totalLeaguePoints);
    writer.writeVarShort(this.rank);
    writer.writeVarShort(this.leagueId);
  }
  deserialize(reader) {
    this.leaguePoints = reader.readVarShort();
    this.ladderPosition = reader.readInt();
    this.totalLeaguePoints = reader.readVarShort();
    this.rank = reader.readVarShort();
    this.leagueId = reader.readVarShort();
  }
};
var BasicPingMessage = class extends DofusMessage {
  static id = 8161;
  quiet = false;
  constructor(quiet) {
    super();
    this.quiet = quiet;
  }
  serialize(writer) {
    writer.writeBoolean(this.quiet);
  }
  deserialize(reader) {
    this.quiet = reader.readBoolean();
  }
};
var AbstractGameActionMessage = class extends DofusMessage {
  static id = 5037;
  sourceId = 0;
  actionId = 0;
  constructor(sourceId, actionId) {
    super();
    this.sourceId = sourceId;
    this.actionId = actionId;
  }
  serialize(writer) {
    writer.writeDouble(this.sourceId);
    writer.writeVarShort(this.actionId);
  }
  deserialize(reader) {
    this.sourceId = reader.readDouble();
    this.actionId = reader.readVarShort();
  }
};
var AbstractGameActionFightTargetedAbilityMessage = class extends AbstractGameActionMessage {
  static id = 8860;
  destinationCellId = 0;
  targetId = 0;
  critical = 1;
  silentCast = false;
  verboseCast = false;
  constructor(sourceId, actionId, destinationCellId, targetId, critical, silentCast, verboseCast) {
    super(sourceId, actionId);
    this.destinationCellId = destinationCellId;
    this.targetId = targetId;
    this.critical = critical;
    this.silentCast = silentCast;
    this.verboseCast = verboseCast;
  }
  serialize(writer) {
    writer.writeShort(this.destinationCellId);
    writer.writeDouble(this.targetId);
    writer.writeByte(this.critical);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.silentCast);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.verboseCast);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.destinationCellId = reader.readShort();
    this.targetId = reader.readDouble();
    this.critical = reader.readByte();
    const box0 = reader.readByte();
    this.silentCast = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.verboseCast = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var GameActionFightCloseCombatMessage = class extends AbstractGameActionFightTargetedAbilityMessage {
  static id = 9973;
  weaponGenericId = 0;
  constructor(sourceId, actionId, destinationCellId, targetId, critical, silentCast, verboseCast, weaponGenericId) {
    super(
      sourceId,
      actionId,
      destinationCellId,
      targetId,
      critical,
      silentCast,
      verboseCast
    );
    this.weaponGenericId = weaponGenericId;
  }
  serialize(writer) {
    writer.writeVarShort(this.weaponGenericId);
  }
  deserialize(reader) {
    this.weaponGenericId = reader.readVarShort();
  }
};
var GameActionFightReduceDamagesMessage = class extends AbstractGameActionMessage {
  static id = 3304;
  amount = 0;
  targetId = 0;
  constructor(sourceId, actionId, amount, targetId) {
    super(sourceId, actionId);
    this.amount = amount;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeVarInt(this.amount);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.amount = reader.readVarInt();
    this.targetId = reader.readDouble();
  }
};
var GameActionFightLifePointsGainMessage = class extends AbstractGameActionMessage {
  static id = 6777;
  delta = 0;
  targetId = 0;
  constructor(sourceId, actionId, delta, targetId) {
    super(sourceId, actionId);
    this.delta = delta;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeVarInt(this.delta);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.delta = reader.readVarInt();
    this.targetId = reader.readDouble();
  }
};
var GameActionFightModifyEffectsDurationMessage = class extends AbstractGameActionMessage {
  static id = 7980;
  delta = 0;
  targetId = 0;
  constructor(sourceId, actionId, delta, targetId) {
    super(sourceId, actionId);
    this.delta = delta;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeShort(this.delta);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.delta = reader.readShort();
    this.targetId = reader.readDouble();
  }
};
var GameActionFightInvisibleDetectedMessage = class extends AbstractGameActionMessage {
  static id = 5294;
  cellId = 0;
  targetId = 0;
  constructor(sourceId, actionId, cellId, targetId) {
    super(sourceId, actionId);
    this.cellId = cellId;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeShort(this.cellId);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.cellId = reader.readShort();
    this.targetId = reader.readDouble();
  }
};
var GameActionFightDispellMessage = class extends AbstractGameActionMessage {
  static id = 4560;
  verboseCast = false;
  targetId = 0;
  constructor(sourceId, actionId, verboseCast, targetId) {
    super(sourceId, actionId);
    this.verboseCast = verboseCast;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeBoolean(this.verboseCast);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.verboseCast = reader.readBoolean();
    this.targetId = reader.readDouble();
  }
};
var GameActionFightDispellEffectMessage = class extends GameActionFightDispellMessage {
  static id = 1560;
  boostUID = 0;
  constructor(sourceId, actionId, verboseCast, targetId, boostUID) {
    super(sourceId, actionId, verboseCast, targetId);
    this.boostUID = boostUID;
  }
  serialize(writer) {
    writer.writeInt(this.boostUID);
  }
  deserialize(reader) {
    this.boostUID = reader.readInt();
  }
};
var GameFightTurnListMessage = class extends DofusMessage {
  static id = 7238;
  deadsIds;
  ids;
  constructor(deadsIds, ids) {
    super();
    this.deadsIds = deadsIds;
    this.ids = ids;
  }
  serialize(writer) {
    writer.writeShort(this.deadsIds.length);
    this.deadsIds.forEach((current) => writer.writeDouble(current));
    writer.writeShort(this.ids.length);
    this.ids.forEach((current) => writer.writeDouble(current));
  }
  deserialize(reader) {
    this.deadsIds = [];
    const countDeadsIds = reader.readShort();
    for (let i = 0; i < countDeadsIds; i++) {
      this.deadsIds.push(reader.readDouble());
    }
    this.ids = [];
    const countIds = reader.readShort();
    for (let i = 0; i < countIds; i++) {
      this.ids.push(reader.readDouble());
    }
  }
};
var SequenceStartMessage = class extends DofusMessage {
  static id = 8598;
  authorId = 0;
  sequenceType = 0;
  constructor(authorId, sequenceType) {
    super();
    this.authorId = authorId;
    this.sequenceType = sequenceType;
  }
  serialize(writer) {
    writer.writeDouble(this.authorId);
    writer.writeByte(this.sequenceType);
  }
  deserialize(reader) {
    this.authorId = reader.readDouble();
    this.sequenceType = reader.readByte();
  }
};
var GameActionFightVanishMessage = class extends AbstractGameActionMessage {
  static id = 5414;
  targetId = 0;
  constructor(sourceId, actionId, targetId) {
    super(sourceId, actionId);
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.targetId = reader.readDouble();
  }
};
var GameActionFightMultipleSummonMessage = class extends AbstractGameActionMessage {
  static id = 710;
  summons;
  constructor(sourceId, actionId, summons) {
    super(sourceId, actionId);
    this.summons = summons;
  }
  serialize(writer) {
    writer.writeShort(this.summons.length);
    this.summons.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.summons = [];
    const countSummons = reader.readShort();
    for (let i = 0; i < countSummons; i++) {
      const summonsTypeId = reader.readShort();
      const type = new types[summonsTypeId]();
      type.deserialize(reader);
      this.summons.push(type);
    }
  }
};
var GameActionFightSlideMessage = class extends AbstractGameActionMessage {
  static id = 914;
  endCellId = 0;
  startCellId = 0;
  targetId = 0;
  constructor(sourceId, actionId, endCellId, startCellId, targetId) {
    super(sourceId, actionId);
    this.endCellId = endCellId;
    this.startCellId = startCellId;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeShort(this.endCellId);
    writer.writeShort(this.startCellId);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.endCellId = reader.readShort();
    this.startCellId = reader.readShort();
    this.targetId = reader.readDouble();
  }
};
var GameActionFightKillMessage = class extends AbstractGameActionMessage {
  static id = 8091;
  targetId = 0;
  constructor(sourceId, actionId, targetId) {
    super(sourceId, actionId);
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.targetId = reader.readDouble();
  }
};
var GameActionFightSpellCooldownVariationMessage = class extends AbstractGameActionMessage {
  static id = 2288;
  value = 0;
  spellId = 0;
  targetId = 0;
  constructor(sourceId, actionId, value, spellId, targetId) {
    super(sourceId, actionId);
    this.value = value;
    this.spellId = spellId;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeVarShort(this.value);
    writer.writeVarShort(this.spellId);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.value = reader.readVarShort();
    this.spellId = reader.readVarShort();
    this.targetId = reader.readDouble();
  }
};
var FighterStatsListMessage = class extends DofusMessage {
  static id = 534;
  stats;
  constructor(stats) {
    super();
    this.stats = stats;
  }
  serialize(writer) {
    this.stats.serialize(writer);
  }
  deserialize(reader) {
    this.stats = new CharacterCharacteristicsInformations();
    this.stats.deserialize(reader);
  }
};
var GameMapMovementMessage = class extends DofusMessage {
  static id = 1972;
  forcedDirection = 0;
  actorId = 0;
  keyMovements;
  constructor(forcedDirection, actorId, keyMovements) {
    super();
    this.forcedDirection = forcedDirection;
    this.actorId = actorId;
    this.keyMovements = keyMovements;
  }
  serialize(writer) {
    writer.writeShort(this.forcedDirection);
    writer.writeDouble(this.actorId);
    writer.writeShort(this.keyMovements.length);
    this.keyMovements.forEach((current) => writer.writeShort(current));
  }
  deserialize(reader) {
    this.forcedDirection = reader.readShort();
    this.actorId = reader.readDouble();
    this.keyMovements = [];
    const countKeyMovements = reader.readShort();
    for (let i = 0; i < countKeyMovements; i++) {
      this.keyMovements.push(reader.readShort());
    }
  }
};
var GameActionFightDropCharacterMessage = class extends AbstractGameActionMessage {
  static id = 2160;
  cellId = 0;
  targetId = 0;
  constructor(sourceId, actionId, cellId, targetId) {
    super(sourceId, actionId);
    this.cellId = cellId;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeShort(this.cellId);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.cellId = reader.readShort();
    this.targetId = reader.readDouble();
  }
};
var GameActionFightTriggerGlyphTrapMessage = class extends AbstractGameActionMessage {
  static id = 1777;
  triggeredSpellId = 0;
  triggeringCharacterId = 0;
  markImpactCell = 0;
  markId = 0;
  constructor(sourceId, actionId, triggeredSpellId, triggeringCharacterId, markImpactCell, markId) {
    super(sourceId, actionId);
    this.triggeredSpellId = triggeredSpellId;
    this.triggeringCharacterId = triggeringCharacterId;
    this.markImpactCell = markImpactCell;
    this.markId = markId;
  }
  serialize(writer) {
    writer.writeVarShort(this.triggeredSpellId);
    writer.writeDouble(this.triggeringCharacterId);
    writer.writeVarShort(this.markImpactCell);
    writer.writeShort(this.markId);
  }
  deserialize(reader) {
    this.triggeredSpellId = reader.readVarShort();
    this.triggeringCharacterId = reader.readDouble();
    this.markImpactCell = reader.readVarShort();
    this.markId = reader.readShort();
  }
};
var GameActionFightPointsVariationMessage = class extends AbstractGameActionMessage {
  static id = 7694;
  delta = 0;
  targetId = 0;
  constructor(sourceId, actionId, delta, targetId) {
    super(sourceId, actionId);
    this.delta = delta;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeShort(this.delta);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.delta = reader.readShort();
    this.targetId = reader.readDouble();
  }
};
var GameActionFightReflectSpellMessage = class extends AbstractGameActionMessage {
  static id = 8272;
  targetId = 0;
  constructor(sourceId, actionId, targetId) {
    super(sourceId, actionId);
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.targetId = reader.readDouble();
  }
};
var GameActionFightDeathMessage = class extends AbstractGameActionMessage {
  static id = 7663;
  targetId = 0;
  constructor(sourceId, actionId, targetId) {
    super(sourceId, actionId);
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.targetId = reader.readDouble();
  }
};
var GameActionFightActivateGlyphTrapMessage = class extends AbstractGameActionMessage {
  static id = 9234;
  active = false;
  markId = 0;
  constructor(sourceId, actionId, active, markId) {
    super(sourceId, actionId);
    this.active = active;
    this.markId = markId;
  }
  serialize(writer) {
    writer.writeBoolean(this.active);
    writer.writeShort(this.markId);
  }
  deserialize(reader) {
    this.active = reader.readBoolean();
    this.markId = reader.readShort();
  }
};
var GameFightSynchronizeMessage = class extends DofusMessage {
  static id = 3028;
  fighters;
  constructor(fighters) {
    super();
    this.fighters = fighters;
  }
  serialize(writer) {
    writer.writeShort(this.fighters.length);
    this.fighters.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.fighters = [];
    const countFighters = reader.readShort();
    for (let i = 0; i < countFighters; i++) {
      const fightersTypeId = reader.readShort();
      const type = new types[fightersTypeId]();
      type.deserialize(reader);
      this.fighters.push(type);
    }
  }
};
var GameActionFightSpellCastMessage = class extends AbstractGameActionFightTargetedAbilityMessage {
  static id = 2648;
  portalsIds;
  spellLevel = 0;
  spellId = 0;
  constructor(sourceId, actionId, destinationCellId, targetId, critical, silentCast, verboseCast, portalsIds, spellLevel, spellId) {
    super(
      sourceId,
      actionId,
      destinationCellId,
      targetId,
      critical,
      silentCast,
      verboseCast
    );
    this.portalsIds = portalsIds;
    this.spellLevel = spellLevel;
    this.spellId = spellId;
  }
  serialize(writer) {
    writer.writeShort(this.portalsIds.length);
    this.portalsIds.forEach((current) => writer.writeShort(current));
    writer.writeShort(this.spellLevel);
    writer.writeVarShort(this.spellId);
  }
  deserialize(reader) {
    this.portalsIds = [];
    const countPortalsIds = reader.readShort();
    for (let i = 0; i < countPortalsIds; i++) {
      this.portalsIds.push(reader.readShort());
    }
    this.spellLevel = reader.readShort();
    this.spellId = reader.readVarShort();
  }
};
var GameActionFightTriggerEffectMessage = class extends GameActionFightDispellEffectMessage {
  static id = 6409;
  constructor(sourceId, actionId, verboseCast, targetId, boostUID) {
    super(sourceId, actionId, verboseCast, targetId, boostUID);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GameActionFightTackledMessage = class extends AbstractGameActionMessage {
  static id = 4448;
  tacklersIds;
  constructor(sourceId, actionId, tacklersIds) {
    super(sourceId, actionId);
    this.tacklersIds = tacklersIds;
  }
  serialize(writer) {
    writer.writeShort(this.tacklersIds.length);
    this.tacklersIds.forEach((current) => writer.writeDouble(current));
  }
  deserialize(reader) {
    this.tacklersIds = [];
    const countTacklersIds = reader.readShort();
    for (let i = 0; i < countTacklersIds; i++) {
      this.tacklersIds.push(reader.readDouble());
    }
  }
};
var GameActionFightInvisibilityMessage = class extends AbstractGameActionMessage {
  static id = 7441;
  state = 0;
  targetId = 0;
  constructor(sourceId, actionId, state, targetId) {
    super(sourceId, actionId);
    this.state = state;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeByte(this.state);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.state = reader.readByte();
    this.targetId = reader.readDouble();
  }
};
var GameFightShowFighterMessage = class extends DofusMessage {
  static id = 2781;
  informations;
  constructor(informations) {
    super();
    this.informations = informations;
  }
  serialize(writer) {
    writer.writeShort(this.informations.id);
    this.informations.serialize(writer);
  }
  deserialize(reader) {
    const informationsTypeId = reader.readShort();
    this.informations = new types[informationsTypeId]();
    this.informations.deserialize(reader);
  }
};
var GameFightShowFighterRandomStaticPoseMessage = class extends GameFightShowFighterMessage {
  static id = 7534;
  constructor(informations) {
    super(informations);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GameActionFightTeleportOnSameMapMessage = class extends AbstractGameActionMessage {
  static id = 7589;
  cellId = 0;
  targetId = 0;
  constructor(sourceId, actionId, cellId, targetId) {
    super(sourceId, actionId);
    this.cellId = cellId;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeShort(this.cellId);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.cellId = reader.readShort();
    this.targetId = reader.readDouble();
  }
};
var GameActionFightDispellSpellMessage = class extends GameActionFightDispellMessage {
  static id = 6878;
  spellId = 0;
  constructor(sourceId, actionId, verboseCast, targetId, spellId) {
    super(sourceId, actionId, verboseCast, targetId);
    this.spellId = spellId;
  }
  serialize(writer) {
    writer.writeVarShort(this.spellId);
  }
  deserialize(reader) {
    this.spellId = reader.readVarShort();
  }
};
var GameActionFightChangeLookMessage = class extends AbstractGameActionMessage {
  static id = 4039;
  entityLook;
  targetId = 0;
  constructor(sourceId, actionId, entityLook, targetId) {
    super(sourceId, actionId);
    this.entityLook = entityLook;
    this.targetId = targetId;
  }
  serialize(writer) {
    this.entityLook.serialize(writer);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.entityLook = new EntityLook();
    this.entityLook.deserialize(reader);
    this.targetId = reader.readDouble();
  }
};
var GameActionFightDodgePointLossMessage = class extends AbstractGameActionMessage {
  static id = 7629;
  amount = 0;
  targetId = 0;
  constructor(sourceId, actionId, amount, targetId) {
    super(sourceId, actionId);
    this.amount = amount;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeVarShort(this.amount);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.amount = reader.readVarShort();
    this.targetId = reader.readDouble();
  }
};
var GameActionFightSpellImmunityMessage = class extends AbstractGameActionMessage {
  static id = 7640;
  spellId = 0;
  targetId = 0;
  constructor(sourceId, actionId, spellId, targetId) {
    super(sourceId, actionId);
    this.spellId = spellId;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeVarShort(this.spellId);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.spellId = reader.readVarShort();
    this.targetId = reader.readDouble();
  }
};
var RefreshCharacterStatsMessage = class extends DofusMessage {
  static id = 154;
  stats;
  fighterId = 0;
  constructor(stats, fighterId) {
    super();
    this.stats = stats;
    this.fighterId = fighterId;
  }
  serialize(writer) {
    this.stats.serialize(writer);
    writer.writeDouble(this.fighterId);
  }
  deserialize(reader) {
    this.stats = new GameFightCharacteristics();
    this.stats.deserialize(reader);
    this.fighterId = reader.readDouble();
  }
};
var GameActionFightDispellableEffectMessage = class extends AbstractGameActionMessage {
  static id = 9416;
  effect;
  constructor(sourceId, actionId, effect) {
    super(sourceId, actionId);
    this.effect = effect;
  }
  serialize(writer) {
    writer.writeShort(this.effect.id);
    this.effect.serialize(writer);
  }
  deserialize(reader) {
    const effectTypeId = reader.readShort();
    this.effect = new types[effectTypeId]();
    this.effect.deserialize(reader);
  }
};
var GameActionFightThrowCharacterMessage = class extends AbstractGameActionMessage {
  static id = 1069;
  cellId = 0;
  targetId = 0;
  constructor(sourceId, actionId, cellId, targetId) {
    super(sourceId, actionId);
    this.cellId = cellId;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeShort(this.cellId);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.cellId = reader.readShort();
    this.targetId = reader.readDouble();
  }
};
var GameFightRefreshFighterMessage = class extends DofusMessage {
  static id = 6738;
  informations;
  constructor(informations) {
    super();
    this.informations = informations;
  }
  serialize(writer) {
    writer.writeShort(this.informations.id);
    this.informations.serialize(writer);
  }
  deserialize(reader) {
    const informationsTypeId = reader.readShort();
    this.informations = new types[informationsTypeId]();
    this.informations.deserialize(reader);
  }
};
var GameActionFightMarkCellsMessage = class extends AbstractGameActionMessage {
  static id = 1180;
  mark;
  constructor(sourceId, actionId, mark) {
    super(sourceId, actionId);
    this.mark = mark;
  }
  serialize(writer) {
    this.mark.serialize(writer);
  }
  deserialize(reader) {
    this.mark = new GameActionMark();
    this.mark.deserialize(reader);
  }
};
var GameActionFightSummonMessage = class extends AbstractGameActionMessage {
  static id = 2879;
  summons;
  constructor(sourceId, actionId, summons) {
    super(sourceId, actionId);
    this.summons = summons;
  }
  serialize(writer) {
    writer.writeShort(this.summons.length);
    this.summons.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.summons = [];
    const countSummons = reader.readShort();
    for (let i = 0; i < countSummons; i++) {
      const summonsTypeId = reader.readShort();
      const type = new types[summonsTypeId]();
      type.deserialize(reader);
      this.summons.push(type);
    }
  }
};
var GameActionFightStealKamaMessage = class extends AbstractGameActionMessage {
  static id = 8847;
  amount = 0;
  targetId = 0;
  constructor(sourceId, actionId, amount, targetId) {
    super(sourceId, actionId);
    this.amount = amount;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeVarLong(this.amount);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.amount = reader.readVarLong();
    this.targetId = reader.readDouble();
  }
};
var SequenceEndMessage = class extends DofusMessage {
  static id = 5912;
  sequenceType = 0;
  authorId = 0;
  actionId = 0;
  constructor(sequenceType, authorId, actionId) {
    super();
    this.sequenceType = sequenceType;
    this.authorId = authorId;
    this.actionId = actionId;
  }
  serialize(writer) {
    writer.writeByte(this.sequenceType);
    writer.writeDouble(this.authorId);
    writer.writeVarShort(this.actionId);
  }
  deserialize(reader) {
    this.sequenceType = reader.readByte();
    this.authorId = reader.readDouble();
    this.actionId = reader.readVarShort();
  }
};
var GameActionFightLifePointsLostMessage = class extends AbstractGameActionMessage {
  static id = 4520;
  permanentDamages = 0;
  elementId = 0;
  loss = 0;
  targetId = 0;
  constructor(sourceId, actionId, permanentDamages, elementId, loss, targetId) {
    super(sourceId, actionId);
    this.permanentDamages = permanentDamages;
    this.elementId = elementId;
    this.loss = loss;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeVarInt(this.permanentDamages);
    writer.writeVarInt(this.elementId);
    writer.writeVarInt(this.loss);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.permanentDamages = reader.readVarInt();
    this.elementId = reader.readVarInt();
    this.loss = reader.readVarInt();
    this.targetId = reader.readDouble();
  }
};
var GameActionFightLifeAndShieldPointsLostMessage = class extends GameActionFightLifePointsLostMessage {
  static id = 6816;
  shieldLoss = 0;
  constructor(sourceId, actionId, permanentDamages, elementId, loss, targetId, shieldLoss) {
    super(sourceId, actionId, permanentDamages, elementId, loss, targetId);
    this.shieldLoss = shieldLoss;
  }
  serialize(writer) {
    writer.writeVarShort(this.shieldLoss);
  }
  deserialize(reader) {
    this.shieldLoss = reader.readVarShort();
  }
};
var GameActionFightCarryCharacterMessage = class extends AbstractGameActionMessage {
  static id = 5643;
  cellId = 0;
  targetId = 0;
  constructor(sourceId, actionId, cellId, targetId) {
    super(sourceId, actionId);
    this.cellId = cellId;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeShort(this.cellId);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.cellId = reader.readShort();
    this.targetId = reader.readDouble();
  }
};
var GameActionFightUnmarkCellsMessage = class extends AbstractGameActionMessage {
  static id = 302;
  markId = 0;
  constructor(sourceId, actionId, markId) {
    super(sourceId, actionId);
    this.markId = markId;
  }
  serialize(writer) {
    writer.writeShort(this.markId);
  }
  deserialize(reader) {
    this.markId = reader.readShort();
  }
};
var GameActionFightReflectDamagesMessage = class extends AbstractGameActionMessage {
  static id = 140;
  targetId = 0;
  constructor(sourceId, actionId, targetId) {
    super(sourceId, actionId);
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.targetId = reader.readDouble();
  }
};
var GameActionFightExchangePositionsMessage = class extends AbstractGameActionMessage {
  static id = 8844;
  targetCellId = 0;
  casterCellId = 0;
  targetId = 0;
  constructor(sourceId, actionId, targetCellId, casterCellId, targetId) {
    super(sourceId, actionId);
    this.targetCellId = targetCellId;
    this.casterCellId = casterCellId;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeShort(this.targetCellId);
    writer.writeShort(this.casterCellId);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.targetCellId = reader.readShort();
    this.casterCellId = reader.readShort();
    this.targetId = reader.readDouble();
  }
};
var MapComplementaryInformationsDataMessage = class extends DofusMessage {
  static id = 1182;
  actors;
  houses;
  mapId = 0;
  obstacles;
  subAreaId = 0;
  interactiveElements;
  statedElements;
  hasAggressiveMonsters = false;
  fightStartPositions;
  fights;
  constructor(actors, houses, mapId, obstacles, subAreaId, interactiveElements, statedElements, hasAggressiveMonsters, fightStartPositions, fights) {
    super();
    this.actors = actors;
    this.houses = houses;
    this.mapId = mapId;
    this.obstacles = obstacles;
    this.subAreaId = subAreaId;
    this.interactiveElements = interactiveElements;
    this.statedElements = statedElements;
    this.hasAggressiveMonsters = hasAggressiveMonsters;
    this.fightStartPositions = fightStartPositions;
    this.fights = fights;
  }
  serialize(writer) {
    writer.writeShort(this.actors.length);
    this.actors.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.houses.length);
    this.houses.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeDouble(this.mapId);
    writer.writeShort(this.obstacles.length);
    this.obstacles.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.subAreaId);
    writer.writeShort(this.interactiveElements.length);
    this.interactiveElements.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.statedElements.length);
    this.statedElements.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeBoolean(this.hasAggressiveMonsters);
    this.fightStartPositions.serialize(writer);
    writer.writeShort(this.fights.length);
    this.fights.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.actors = [];
    const countActors = reader.readShort();
    for (let i = 0; i < countActors; i++) {
      const actorsTypeId = reader.readShort();
      const type = new types[actorsTypeId]();
      type.deserialize(reader);
      this.actors.push(type);
    }
    this.houses = [];
    const countHouses = reader.readShort();
    for (let i = 0; i < countHouses; i++) {
      const housesTypeId = reader.readShort();
      const type = new types[housesTypeId]();
      type.deserialize(reader);
      this.houses.push(type);
    }
    this.mapId = reader.readDouble();
    this.obstacles = [];
    const countObstacles = reader.readShort();
    for (let i = 0; i < countObstacles; i++) {
      const type = new MapObstacle();
      type.deserialize(reader);
      this.obstacles.push(type);
    }
    this.subAreaId = reader.readVarShort();
    this.interactiveElements = [];
    const countInteractiveElements = reader.readShort();
    for (let i = 0; i < countInteractiveElements; i++) {
      const interactiveElementsTypeId = reader.readShort();
      const type = new types[interactiveElementsTypeId]();
      type.deserialize(reader);
      this.interactiveElements.push(type);
    }
    this.statedElements = [];
    const countStatedElements = reader.readShort();
    for (let i = 0; i < countStatedElements; i++) {
      const type = new StatedElement();
      type.deserialize(reader);
      this.statedElements.push(type);
    }
    this.hasAggressiveMonsters = reader.readBoolean();
    this.fightStartPositions = new FightStartingPositions();
    this.fightStartPositions.deserialize(reader);
    this.fights = [];
    const countFights = reader.readShort();
    for (let i = 0; i < countFights; i++) {
      const type = new FightCommonInformations();
      type.deserialize(reader);
      this.fights.push(type);
    }
  }
};
var MapComplementaryInformationsAnomalyMessage = class extends MapComplementaryInformationsDataMessage {
  static id = 6414;
  closingTime = 0;
  level = 0;
  constructor(actors, houses, mapId, obstacles, subAreaId, interactiveElements, statedElements, hasAggressiveMonsters, fightStartPositions, fights, closingTime, level) {
    super(
      actors,
      houses,
      mapId,
      obstacles,
      subAreaId,
      interactiveElements,
      statedElements,
      hasAggressiveMonsters,
      fightStartPositions,
      fights
    );
    this.closingTime = closingTime;
    this.level = level;
  }
  serialize(writer) {
    writer.writeVarLong(this.closingTime);
    writer.writeVarShort(this.level);
  }
  deserialize(reader) {
    this.closingTime = reader.readVarLong();
    this.level = reader.readVarShort();
  }
};
var GameFightUpdateTeamMessage = class extends DofusMessage {
  static id = 9785;
  team;
  fightId = 0;
  constructor(team, fightId) {
    super();
    this.team = team;
    this.fightId = fightId;
  }
  serialize(writer) {
    this.team.serialize(writer);
    writer.writeVarShort(this.fightId);
  }
  deserialize(reader) {
    this.team = new FightTeamInformations();
    this.team.deserialize(reader);
    this.fightId = reader.readVarShort();
  }
};
var GameDataPaddockObjectRemoveMessage = class extends DofusMessage {
  static id = 7808;
  cellId = 0;
  constructor(cellId) {
    super();
    this.cellId = cellId;
  }
  serialize(writer) {
    writer.writeVarShort(this.cellId);
  }
  deserialize(reader) {
    this.cellId = reader.readVarShort();
  }
};
var ObjectGroundRemovedMultipleMessage = class extends DofusMessage {
  static id = 6993;
  cells;
  constructor(cells) {
    super();
    this.cells = cells;
  }
  serialize(writer) {
    writer.writeShort(this.cells.length);
    this.cells.forEach((current) => writer.writeVarShort(current));
  }
  deserialize(reader) {
    this.cells = [];
    const countCells = reader.readShort();
    for (let i = 0; i < countCells; i++) {
      this.cells.push(reader.readVarShort());
    }
  }
};
var GameFightRemoveTeamMemberMessage = class extends DofusMessage {
  static id = 6697;
  charId = 0;
  teamId = 2;
  fightId = 0;
  constructor(charId, teamId, fightId) {
    super();
    this.charId = charId;
    this.teamId = teamId;
    this.fightId = fightId;
  }
  serialize(writer) {
    writer.writeDouble(this.charId);
    writer.writeByte(this.teamId);
    writer.writeVarShort(this.fightId);
  }
  deserialize(reader) {
    this.charId = reader.readDouble();
    this.teamId = reader.readByte();
    this.fightId = reader.readVarShort();
  }
};
var EmotePlayRequestMessage = class extends DofusMessage {
  static id = 5775;
  emoteId = 0;
  constructor(emoteId) {
    super();
    this.emoteId = emoteId;
  }
  serialize(writer) {
    writer.writeShort(this.emoteId);
  }
  deserialize(reader) {
    this.emoteId = reader.readShort();
  }
};
var UpdateMapPlayersAgressableStatusMessage = class extends DofusMessage {
  static id = 3658;
  enable;
  playerIds;
  constructor(enable, playerIds) {
    super();
    this.enable = enable;
    this.playerIds = playerIds;
  }
  serialize(writer) {
    writer.writeShort(this.enable.length);
    this.enable.forEach((current) => writer.writeByte(current));
    writer.writeShort(this.playerIds.length);
    this.playerIds.forEach((current) => writer.writeVarLong(current));
  }
  deserialize(reader) {
    this.enable = [];
    const countEnable = reader.readShort();
    for (let i = 0; i < countEnable; i++) {
      this.enable.push(reader.readByte());
    }
    this.playerIds = [];
    const countPlayerIds = reader.readShort();
    for (let i = 0; i < countPlayerIds; i++) {
      this.playerIds.push(reader.readVarLong());
    }
  }
};
var PaddockMoveItemRequestMessage = class extends DofusMessage {
  static id = 8484;
  newCellId = 0;
  oldCellId = 0;
  constructor(newCellId, oldCellId) {
    super();
    this.newCellId = newCellId;
    this.oldCellId = oldCellId;
  }
  serialize(writer) {
    writer.writeVarShort(this.newCellId);
    writer.writeVarShort(this.oldCellId);
  }
  deserialize(reader) {
    this.newCellId = reader.readVarShort();
    this.oldCellId = reader.readVarShort();
  }
};
var ObjectGroundListAddedMessage = class extends DofusMessage {
  static id = 6617;
  referenceIds;
  cells;
  constructor(referenceIds, cells) {
    super();
    this.referenceIds = referenceIds;
    this.cells = cells;
  }
  serialize(writer) {
    writer.writeShort(this.referenceIds.length);
    this.referenceIds.forEach(
      (current) => writer.writeVarShort(current)
    );
    writer.writeShort(this.cells.length);
    this.cells.forEach((current) => writer.writeVarShort(current));
  }
  deserialize(reader) {
    this.referenceIds = [];
    const countReferenceIds = reader.readShort();
    for (let i = 0; i < countReferenceIds; i++) {
      this.referenceIds.push(reader.readVarShort());
    }
    this.cells = [];
    const countCells = reader.readShort();
    for (let i = 0; i < countCells; i++) {
      this.cells.push(reader.readVarShort());
    }
  }
};
var UpdateSelfAgressableStatusMessage = class extends DofusMessage {
  static id = 4140;
  probationTime = 0;
  status = 0;
  constructor(probationTime, status) {
    super();
    this.probationTime = probationTime;
    this.status = status;
  }
  serialize(writer) {
    writer.writeInt(this.probationTime);
    writer.writeByte(this.status);
  }
  deserialize(reader) {
    this.probationTime = reader.readInt();
    this.status = reader.readByte();
  }
};
var MapComplementaryInformationsWithCoordsMessage = class extends MapComplementaryInformationsDataMessage {
  static id = 5440;
  worldY = 0;
  worldX = 0;
  constructor(actors, houses, mapId, obstacles, subAreaId, interactiveElements, statedElements, hasAggressiveMonsters, fightStartPositions, fights, worldY, worldX) {
    super(
      actors,
      houses,
      mapId,
      obstacles,
      subAreaId,
      interactiveElements,
      statedElements,
      hasAggressiveMonsters,
      fightStartPositions,
      fights
    );
    this.worldY = worldY;
    this.worldX = worldX;
  }
  serialize(writer) {
    writer.writeShort(this.worldY);
    writer.writeShort(this.worldX);
  }
  deserialize(reader) {
    this.worldY = reader.readShort();
    this.worldX = reader.readShort();
  }
};
var GameContextRefreshEntityLookMessage = class extends DofusMessage {
  static id = 5261;
  look;
  id_ = 0;
  constructor(look, id_) {
    super();
    this.look = look;
    this.id_ = id_;
  }
  serialize(writer) {
    this.look.serialize(writer);
    writer.writeDouble(this.id_);
  }
  deserialize(reader) {
    this.look = new EntityLook();
    this.look.deserialize(reader);
    this.id_ = reader.readDouble();
  }
};
var ListMapNpcsQuestStatusUpdateMessage = class extends DofusMessage {
  static id = 5996;
  mapInfo;
  constructor(mapInfo) {
    super();
    this.mapInfo = mapInfo;
  }
  serialize(writer) {
    writer.writeShort(this.mapInfo.length);
    this.mapInfo.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.mapInfo = [];
    const countMapInfo = reader.readShort();
    for (let i = 0; i < countMapInfo; i++) {
      const type = new MapNpcQuestInfo();
      type.deserialize(reader);
      this.mapInfo.push(type);
    }
  }
};
var MapComplementaryInformationsDataInHavenBagMessage = class extends MapComplementaryInformationsDataMessage {
  static id = 3738;
  ownerInformations;
  roomId = 0;
  theme = 0;
  maxRoomId = 0;
  constructor(actors, houses, mapId, obstacles, subAreaId, interactiveElements, statedElements, hasAggressiveMonsters, fightStartPositions, fights, ownerInformations, roomId, theme, maxRoomId) {
    super(
      actors,
      houses,
      mapId,
      obstacles,
      subAreaId,
      interactiveElements,
      statedElements,
      hasAggressiveMonsters,
      fightStartPositions,
      fights
    );
    this.ownerInformations = ownerInformations;
    this.roomId = roomId;
    this.theme = theme;
    this.maxRoomId = maxRoomId;
  }
  serialize(writer) {
    this.ownerInformations.serialize(writer);
    writer.writeByte(this.roomId);
    writer.writeByte(this.theme);
    writer.writeByte(this.maxRoomId);
  }
  deserialize(reader) {
    this.ownerInformations = new CharacterMinimalInformations();
    this.ownerInformations.deserialize(reader);
    this.roomId = reader.readByte();
    this.theme = reader.readByte();
    this.maxRoomId = reader.readByte();
  }
};
var BreachExitResponseMessage = class extends DofusMessage {
  static id = 7143;
  exited = false;
  constructor(exited) {
    super();
    this.exited = exited;
  }
  serialize(writer) {
    writer.writeBoolean(this.exited);
  }
  deserialize(reader) {
    this.exited = reader.readBoolean();
  }
};
var PaddockRemoveItemRequestMessage = class extends DofusMessage {
  static id = 9863;
  cellId = 0;
  constructor(cellId) {
    super();
    this.cellId = cellId;
  }
  serialize(writer) {
    writer.writeVarShort(this.cellId);
  }
  deserialize(reader) {
    this.cellId = reader.readVarShort();
  }
};
var GameMapChangeOrientationMessage = class extends DofusMessage {
  static id = 595;
  orientation;
  constructor(orientation) {
    super();
    this.orientation = orientation;
  }
  serialize(writer) {
    this.orientation.serialize(writer);
  }
  deserialize(reader) {
    this.orientation = new ActorOrientation();
    this.orientation.deserialize(reader);
  }
};
var ObjectGroundAddedMessage = class extends DofusMessage {
  static id = 3936;
  objectGID = 0;
  cellId = 0;
  constructor(objectGID, cellId) {
    super();
    this.objectGID = objectGID;
    this.cellId = cellId;
  }
  serialize(writer) {
    writer.writeVarShort(this.objectGID);
    writer.writeVarShort(this.cellId);
  }
  deserialize(reader) {
    this.objectGID = reader.readVarShort();
    this.cellId = reader.readVarShort();
  }
};
var BreachEnterMessage = class extends DofusMessage {
  static id = 6485;
  owner = 0;
  constructor(owner) {
    super();
    this.owner = owner;
  }
  serialize(writer) {
    writer.writeVarLong(this.owner);
  }
  deserialize(reader) {
    this.owner = reader.readVarLong();
  }
};
var GameRolePlayShowActorMessage = class extends DofusMessage {
  static id = 503;
  informations;
  constructor(informations) {
    super();
    this.informations = informations;
  }
  serialize(writer) {
    writer.writeShort(this.informations.id);
    this.informations.serialize(writer);
  }
  deserialize(reader) {
    const informationsTypeId = reader.readShort();
    this.informations = new types[informationsTypeId]();
    this.informations.deserialize(reader);
  }
};
var GameDataPlayFarmObjectAnimationMessage = class extends DofusMessage {
  static id = 7212;
  cellId;
  constructor(cellId) {
    super();
    this.cellId = cellId;
  }
  serialize(writer) {
    writer.writeShort(this.cellId.length);
    this.cellId.forEach((current) => writer.writeVarShort(current));
  }
  deserialize(reader) {
    this.cellId = [];
    const countCellId = reader.readShort();
    for (let i = 0; i < countCellId; i++) {
      this.cellId.push(reader.readVarShort());
    }
  }
};
var GameRolePlayShowChallengeMessage = class extends DofusMessage {
  static id = 5734;
  commonsInfos;
  constructor(commonsInfos) {
    super();
    this.commonsInfos = commonsInfos;
  }
  serialize(writer) {
    this.commonsInfos.serialize(writer);
  }
  deserialize(reader) {
    this.commonsInfos = new FightCommonInformations();
    this.commonsInfos.deserialize(reader);
  }
};
var GameRolePlayRemoveChallengeMessage = class extends DofusMessage {
  static id = 5911;
  fightId = 0;
  constructor(fightId) {
    super();
    this.fightId = fightId;
  }
  serialize(writer) {
    writer.writeVarShort(this.fightId);
  }
  deserialize(reader) {
    this.fightId = reader.readVarShort();
  }
};
var MapRewardRateMessage = class extends DofusMessage {
  static id = 1514;
  subAreaRate = 0;
  totalRate = 0;
  mapRate = 0;
  constructor(subAreaRate, totalRate, mapRate) {
    super();
    this.subAreaRate = subAreaRate;
    this.totalRate = totalRate;
    this.mapRate = mapRate;
  }
  serialize(writer) {
    writer.writeVarShort(this.subAreaRate);
    writer.writeVarShort(this.totalRate);
    writer.writeVarShort(this.mapRate);
  }
  deserialize(reader) {
    this.subAreaRate = reader.readVarShort();
    this.totalRate = reader.readVarShort();
    this.mapRate = reader.readVarShort();
  }
};
var GameRolePlayMonsterAngryAtPlayerMessage = class extends DofusMessage {
  static id = 465;
  attackTime = 0;
  angryStartTime = 0;
  monsterGroupId = 0;
  playerId = 0;
  constructor(attackTime, angryStartTime, monsterGroupId, playerId) {
    super();
    this.attackTime = attackTime;
    this.angryStartTime = angryStartTime;
    this.monsterGroupId = monsterGroupId;
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeDouble(this.attackTime);
    writer.writeDouble(this.angryStartTime);
    writer.writeDouble(this.monsterGroupId);
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.attackTime = reader.readDouble();
    this.angryStartTime = reader.readDouble();
    this.monsterGroupId = reader.readDouble();
    this.playerId = reader.readVarLong();
  }
};
var GameDataPaddockObjectAddMessage = class extends DofusMessage {
  static id = 8122;
  paddockItemDescription;
  constructor(paddockItemDescription) {
    super();
    this.paddockItemDescription = paddockItemDescription;
  }
  serialize(writer) {
    this.paddockItemDescription.serialize(writer);
  }
  deserialize(reader) {
    this.paddockItemDescription = new PaddockItem();
    this.paddockItemDescription.deserialize(reader);
  }
};
var MapComplementaryInformationsDataInHouseMessage = class extends MapComplementaryInformationsDataMessage {
  static id = 2024;
  currentHouse;
  constructor(actors, houses, mapId, obstacles, subAreaId, interactiveElements, statedElements, hasAggressiveMonsters, fightStartPositions, fights, currentHouse) {
    super(
      actors,
      houses,
      mapId,
      obstacles,
      subAreaId,
      interactiveElements,
      statedElements,
      hasAggressiveMonsters,
      fightStartPositions,
      fights
    );
    this.currentHouse = currentHouse;
  }
  serialize(writer) {
    this.currentHouse.serialize(writer);
  }
  deserialize(reader) {
    this.currentHouse = new HouseInformationsInside();
    this.currentHouse.deserialize(reader);
  }
};
var StatedMapUpdateMessage = class extends DofusMessage {
  static id = 8689;
  statedElements;
  constructor(statedElements) {
    super();
    this.statedElements = statedElements;
  }
  serialize(writer) {
    writer.writeShort(this.statedElements.length);
    this.statedElements.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.statedElements = [];
    const countStatedElements = reader.readShort();
    for (let i = 0; i < countStatedElements; i++) {
      const type = new StatedElement();
      type.deserialize(reader);
      this.statedElements.push(type);
    }
  }
};
var GameMapChangeOrientationsMessage = class extends DofusMessage {
  static id = 5656;
  orientations;
  constructor(orientations) {
    super();
    this.orientations = orientations;
  }
  serialize(writer) {
    writer.writeShort(this.orientations.length);
    this.orientations.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.orientations = [];
    const countOrientations = reader.readShort();
    for (let i = 0; i < countOrientations; i++) {
      const type = new ActorOrientation();
      type.deserialize(reader);
      this.orientations.push(type);
    }
  }
};
var ShowCellMessage = class extends DofusMessage {
  static id = 2286;
  cellId = 0;
  sourceId = 0;
  constructor(cellId, sourceId) {
    super();
    this.cellId = cellId;
    this.sourceId = sourceId;
  }
  serialize(writer) {
    writer.writeVarShort(this.cellId);
    writer.writeDouble(this.sourceId);
  }
  deserialize(reader) {
    this.cellId = reader.readVarShort();
    this.sourceId = reader.readDouble();
  }
};
var HousePropertiesMessage = class extends DofusMessage {
  static id = 3830;
  houseId = 0;
  properties;
  doorsOnMap;
  constructor(houseId, properties, doorsOnMap) {
    super();
    this.houseId = houseId;
    this.properties = properties;
    this.doorsOnMap = doorsOnMap;
  }
  serialize(writer) {
    writer.writeVarInt(this.houseId);
    writer.writeShort(this.properties.id);
    this.properties.serialize(writer);
    writer.writeShort(this.doorsOnMap.length);
    this.doorsOnMap.forEach((current) => writer.writeInt(current));
  }
  deserialize(reader) {
    this.houseId = reader.readVarInt();
    const propertiesTypeId = reader.readShort();
    this.properties = new types[propertiesTypeId]();
    this.properties.deserialize(reader);
    this.doorsOnMap = [];
    const countDoorsOnMap = reader.readShort();
    for (let i = 0; i < countDoorsOnMap; i++) {
      this.doorsOnMap.push(reader.readInt());
    }
  }
};
var GameRolePlayMonsterNotAngryAtPlayerMessage = class extends DofusMessage {
  static id = 7726;
  monsterGroupId = 0;
  playerId = 0;
  constructor(monsterGroupId, playerId) {
    super();
    this.monsterGroupId = monsterGroupId;
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeDouble(this.monsterGroupId);
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.monsterGroupId = reader.readDouble();
    this.playerId = reader.readVarLong();
  }
};
var BreachTeleportResponseMessage = class extends DofusMessage {
  static id = 4766;
  teleported = false;
  constructor(teleported) {
    super();
    this.teleported = teleported;
  }
  serialize(writer) {
    writer.writeBoolean(this.teleported);
  }
  deserialize(reader) {
    this.teleported = reader.readBoolean();
  }
};
var GameContextRemoveMultipleElementsMessage = class extends DofusMessage {
  static id = 9667;
  elementsIds;
  constructor(elementsIds) {
    super();
    this.elementsIds = elementsIds;
  }
  serialize(writer) {
    writer.writeShort(this.elementsIds.length);
    this.elementsIds.forEach((current) => writer.writeDouble(current));
  }
  deserialize(reader) {
    this.elementsIds = [];
    const countElementsIds = reader.readShort();
    for (let i = 0; i < countElementsIds; i++) {
      this.elementsIds.push(reader.readDouble());
    }
  }
};
var GameRolePlayShowMultipleActorsMessage = class extends DofusMessage {
  static id = 1377;
  informationsList;
  constructor(informationsList) {
    super();
    this.informationsList = informationsList;
  }
  serialize(writer) {
    writer.writeShort(this.informationsList.length);
    this.informationsList.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.informationsList = [];
    const countInformationsList = reader.readShort();
    for (let i = 0; i < countInformationsList; i++) {
      const informationsListTypeId = reader.readShort();
      const type = new types[informationsListTypeId]();
      type.deserialize(reader);
      this.informationsList.push(type);
    }
  }
};
var ObjectGroundRemovedMessage = class extends DofusMessage {
  static id = 7554;
  cell = 0;
  constructor(cell) {
    super();
    this.cell = cell;
  }
  serialize(writer) {
    writer.writeVarShort(this.cell);
  }
  deserialize(reader) {
    this.cell = reader.readVarShort();
  }
};
var GameDataPaddockObjectListAddMessage = class extends DofusMessage {
  static id = 6584;
  paddockItemDescription;
  constructor(paddockItemDescription) {
    super();
    this.paddockItemDescription = paddockItemDescription;
  }
  serialize(writer) {
    writer.writeShort(this.paddockItemDescription.length);
    this.paddockItemDescription.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.paddockItemDescription = [];
    const countPaddockItemDescription = reader.readShort();
    for (let i = 0; i < countPaddockItemDescription; i++) {
      const type = new PaddockItem();
      type.deserialize(reader);
      this.paddockItemDescription.push(type);
    }
  }
};
var AnomalyStateMessage = class extends DofusMessage {
  static id = 4879;
  closingTime = 0;
  open = false;
  subAreaId = 0;
  constructor(closingTime, open, subAreaId) {
    super();
    this.closingTime = closingTime;
    this.open = open;
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeVarLong(this.closingTime);
    writer.writeBoolean(this.open);
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.closingTime = reader.readVarLong();
    this.open = reader.readBoolean();
    this.subAreaId = reader.readVarShort();
  }
};
var MapInformationsRequestMessage = class extends DofusMessage {
  static id = 2396;
  mapId = 0;
  constructor(mapId) {
    super();
    this.mapId = mapId;
  }
  serialize(writer) {
    writer.writeDouble(this.mapId);
  }
  deserialize(reader) {
    this.mapId = reader.readDouble();
  }
};
var InteractiveUsedMessage = class extends DofusMessage {
  static id = 4971;
  entityId = 0;
  canMove = false;
  skillId = 0;
  elemId = 0;
  duration = 0;
  constructor(entityId, canMove, skillId, elemId, duration) {
    super();
    this.entityId = entityId;
    this.canMove = canMove;
    this.skillId = skillId;
    this.elemId = elemId;
    this.duration = duration;
  }
  serialize(writer) {
    writer.writeVarLong(this.entityId);
    writer.writeBoolean(this.canMove);
    writer.writeVarShort(this.skillId);
    writer.writeVarInt(this.elemId);
    writer.writeVarShort(this.duration);
  }
  deserialize(reader) {
    this.entityId = reader.readVarLong();
    this.canMove = reader.readBoolean();
    this.skillId = reader.readVarShort();
    this.elemId = reader.readVarInt();
    this.duration = reader.readVarShort();
  }
};
var MapFightCountMessage = class extends DofusMessage {
  static id = 9018;
  fightCount = 0;
  constructor(fightCount) {
    super();
    this.fightCount = fightCount;
  }
  serialize(writer) {
    writer.writeVarShort(this.fightCount);
  }
  deserialize(reader) {
    this.fightCount = reader.readVarShort();
  }
};
var InteractiveMapUpdateMessage = class extends DofusMessage {
  static id = 8375;
  interactiveElements;
  constructor(interactiveElements) {
    super();
    this.interactiveElements = interactiveElements;
  }
  serialize(writer) {
    writer.writeShort(this.interactiveElements.length);
    this.interactiveElements.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.interactiveElements = [];
    const countInteractiveElements = reader.readShort();
    for (let i = 0; i < countInteractiveElements; i++) {
      const interactiveElementsTypeId = reader.readShort();
      const type = new types[interactiveElementsTypeId]();
      type.deserialize(reader);
      this.interactiveElements.push(type);
    }
  }
};
var GameContextRemoveElementMessage = class extends DofusMessage {
  static id = 5284;
  id_ = 0;
  constructor(id_) {
    super();
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeDouble(this.id_);
  }
  deserialize(reader) {
    this.id_ = reader.readDouble();
  }
};
var GameFightOptionStateUpdateMessage = class extends DofusMessage {
  static id = 4608;
  state = false;
  option = 3;
  teamId = 2;
  fightId = 0;
  constructor(state, option, teamId, fightId) {
    super();
    this.state = state;
    this.option = option;
    this.teamId = teamId;
    this.fightId = fightId;
  }
  serialize(writer) {
    writer.writeBoolean(this.state);
    writer.writeByte(this.option);
    writer.writeByte(this.teamId);
    writer.writeVarShort(this.fightId);
  }
  deserialize(reader) {
    this.state = reader.readBoolean();
    this.option = reader.readByte();
    this.teamId = reader.readByte();
    this.fightId = reader.readVarShort();
  }
};
var BreachTeleportRequestMessage = class extends DofusMessage {
  static id = 2818;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var MapComplementaryInformationsBreachMessage = class extends MapComplementaryInformationsDataMessage {
  static id = 6429;
  floor = 0;
  room = 0;
  infinityMode = 0;
  branches;
  constructor(actors, houses, mapId, obstacles, subAreaId, interactiveElements, statedElements, hasAggressiveMonsters, fightStartPositions, fights, floor, room, infinityMode, branches) {
    super(
      actors,
      houses,
      mapId,
      obstacles,
      subAreaId,
      interactiveElements,
      statedElements,
      hasAggressiveMonsters,
      fightStartPositions,
      fights
    );
    this.floor = floor;
    this.room = room;
    this.infinityMode = infinityMode;
    this.branches = branches;
  }
  serialize(writer) {
    writer.writeVarInt(this.floor);
    writer.writeByte(this.room);
    writer.writeShort(this.infinityMode);
    writer.writeShort(this.branches.length);
    this.branches.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.floor = reader.readVarInt();
    this.room = reader.readByte();
    this.infinityMode = reader.readShort();
    this.branches = [];
    const countBranches = reader.readShort();
    for (let i = 0; i < countBranches; i++) {
      const branchesTypeId = reader.readShort();
      const type = new types[branchesTypeId]();
      type.deserialize(reader);
      this.branches.push(type);
    }
  }
};
var GameEntitiesDispositionMessage = class extends DofusMessage {
  static id = 853;
  dispositions;
  constructor(dispositions) {
    super();
    this.dispositions = dispositions;
  }
  serialize(writer) {
    writer.writeShort(this.dispositions.length);
    this.dispositions.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.dispositions = [];
    const countDispositions = reader.readShort();
    for (let i = 0; i < countDispositions; i++) {
      const type = new IdentifiedEntityDispositionInformations();
      type.deserialize(reader);
      this.dispositions.push(type);
    }
  }
};
var ShowCellSpectatorMessage = class extends ShowCellMessage {
  static id = 6320;
  playerName;
  constructor(cellId, sourceId, playerName) {
    super(cellId, sourceId);
    this.playerName = playerName;
  }
  serialize(writer) {
    writer.writeUTF(this.playerName);
  }
  deserialize(reader) {
    this.playerName = reader.readUTF();
  }
};
var GameFightPlacementSwapPositionsMessage = class extends DofusMessage {
  static id = 995;
  dispositions;
  constructor(dispositions) {
    super();
    this.dispositions = dispositions;
  }
  serialize(writer) {
    this.dispositions.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.dispositions = [];
    for (let i = 0; i < 2; i++) {
      const type = new IdentifiedEntityDispositionInformations();
      type.deserialize(reader);
      this.dispositions.push(type);
    }
  }
};
var GameEntityDispositionMessage = class extends DofusMessage {
  static id = 8701;
  disposition;
  constructor(disposition) {
    super();
    this.disposition = disposition;
  }
  serialize(writer) {
    this.disposition.serialize(writer);
  }
  deserialize(reader) {
    this.disposition = new IdentifiedEntityDispositionInformations();
    this.disposition.deserialize(reader);
  }
};
var GameFightHumanReadyStateMessage = class extends DofusMessage {
  static id = 4318;
  isReady = false;
  characterId = 0;
  constructor(isReady, characterId) {
    super();
    this.isReady = isReady;
    this.characterId = characterId;
  }
  serialize(writer) {
    writer.writeBoolean(this.isReady);
    writer.writeVarLong(this.characterId);
  }
  deserialize(reader) {
    this.isReady = reader.readBoolean();
    this.characterId = reader.readVarLong();
  }
};
var PlayerStatusUpdateMessage = class extends DofusMessage {
  static id = 120;
  status;
  playerId = 0;
  accountId = 0;
  constructor(status, playerId, accountId) {
    super();
    this.status = status;
    this.playerId = playerId;
    this.accountId = accountId;
  }
  serialize(writer) {
    writer.writeShort(this.status.id);
    this.status.serialize(writer);
    writer.writeVarLong(this.playerId);
    writer.writeInt(this.accountId);
  }
  deserialize(reader) {
    const statusTypeId = reader.readShort();
    this.status = new types[statusTypeId]();
    this.status.deserialize(reader);
    this.playerId = reader.readVarLong();
    this.accountId = reader.readInt();
  }
};
var GameFightEndMessage = class extends DofusMessage {
  static id = 5098;
  duration = 0;
  namedPartyTeamsOutcomes;
  results;
  rewardRate = 0;
  lootShareLimitMalus = 0;
  constructor(duration, namedPartyTeamsOutcomes, results, rewardRate, lootShareLimitMalus) {
    super();
    this.duration = duration;
    this.namedPartyTeamsOutcomes = namedPartyTeamsOutcomes;
    this.results = results;
    this.rewardRate = rewardRate;
    this.lootShareLimitMalus = lootShareLimitMalus;
  }
  serialize(writer) {
    writer.writeInt(this.duration);
    writer.writeShort(this.namedPartyTeamsOutcomes.length);
    this.namedPartyTeamsOutcomes.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.results.length);
    this.results.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarShort(this.rewardRate);
    writer.writeShort(this.lootShareLimitMalus);
  }
  deserialize(reader) {
    this.duration = reader.readInt();
    this.namedPartyTeamsOutcomes = [];
    const countNamedPartyTeamsOutcomes = reader.readShort();
    for (let i = 0; i < countNamedPartyTeamsOutcomes; i++) {
      const type = new NamedPartyTeamWithOutcome();
      type.deserialize(reader);
      this.namedPartyTeamsOutcomes.push(type);
    }
    this.results = [];
    const countResults = reader.readShort();
    for (let i = 0; i < countResults; i++) {
      const resultsTypeId = reader.readShort();
      const type = new types[resultsTypeId]();
      type.deserialize(reader);
      this.results.push(type);
    }
    this.rewardRate = reader.readVarShort();
    this.lootShareLimitMalus = reader.readShort();
  }
};
var BreachGameFightEndMessage = class extends GameFightEndMessage {
  static id = 7323;
  budget = 0;
  constructor(duration, namedPartyTeamsOutcomes, results, rewardRate, lootShareLimitMalus, budget) {
    super(
      duration,
      namedPartyTeamsOutcomes,
      results,
      rewardRate,
      lootShareLimitMalus
    );
    this.budget = budget;
  }
  serialize(writer) {
    writer.writeInt(this.budget);
  }
  deserialize(reader) {
    this.budget = reader.readInt();
  }
};
var ChallengeTargetUpdateMessage = class extends DofusMessage {
  static id = 1613;
  targetId = 0;
  challengeId = 0;
  constructor(targetId, challengeId) {
    super();
    this.targetId = targetId;
    this.challengeId = challengeId;
  }
  serialize(writer) {
    writer.writeDouble(this.targetId);
    writer.writeVarShort(this.challengeId);
  }
  deserialize(reader) {
    this.targetId = reader.readDouble();
    this.challengeId = reader.readVarShort();
  }
};
var GameFightLeaveMessage = class extends DofusMessage {
  static id = 4663;
  charId = 0;
  constructor(charId) {
    super();
    this.charId = charId;
  }
  serialize(writer) {
    writer.writeDouble(this.charId);
  }
  deserialize(reader) {
    this.charId = reader.readDouble();
  }
};
var GameFightSpectateMessage = class extends DofusMessage {
  static id = 8991;
  idols;
  effects;
  fxTriggerCounts;
  gameTurn = 0;
  marks;
  fightStart = 0;
  constructor(idols, effects, fxTriggerCounts, gameTurn, marks, fightStart) {
    super();
    this.idols = idols;
    this.effects = effects;
    this.fxTriggerCounts = fxTriggerCounts;
    this.gameTurn = gameTurn;
    this.marks = marks;
    this.fightStart = fightStart;
  }
  serialize(writer) {
    writer.writeShort(this.idols.length);
    this.idols.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.effects.length);
    this.effects.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.fxTriggerCounts.length);
    this.fxTriggerCounts.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.gameTurn);
    writer.writeShort(this.marks.length);
    this.marks.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeInt(this.fightStart);
  }
  deserialize(reader) {
    this.idols = [];
    const countIdols = reader.readShort();
    for (let i = 0; i < countIdols; i++) {
      const type = new Idol();
      type.deserialize(reader);
      this.idols.push(type);
    }
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i = 0; i < countEffects; i++) {
      const type = new FightDispellableEffectExtendedInformations();
      type.deserialize(reader);
      this.effects.push(type);
    }
    this.fxTriggerCounts = [];
    const countFxTriggerCounts = reader.readShort();
    for (let i = 0; i < countFxTriggerCounts; i++) {
      const type = new GameFightEffectTriggerCount();
      type.deserialize(reader);
      this.fxTriggerCounts.push(type);
    }
    this.gameTurn = reader.readVarShort();
    this.marks = [];
    const countMarks = reader.readShort();
    for (let i = 0; i < countMarks; i++) {
      const type = new GameActionMark();
      type.deserialize(reader);
      this.marks.push(type);
    }
    this.fightStart = reader.readInt();
  }
};
var GameFightResumeMessage = class extends GameFightSpectateMessage {
  static id = 4566;
  bombCount = 0;
  summonCount = 0;
  spellCooldowns;
  constructor(idols, effects, fxTriggerCounts, gameTurn, marks, fightStart, bombCount, summonCount, spellCooldowns) {
    super(idols, effects, fxTriggerCounts, gameTurn, marks, fightStart);
    this.bombCount = bombCount;
    this.summonCount = summonCount;
    this.spellCooldowns = spellCooldowns;
  }
  serialize(writer) {
    writer.writeByte(this.bombCount);
    writer.writeByte(this.summonCount);
    writer.writeShort(this.spellCooldowns.length);
    this.spellCooldowns.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.bombCount = reader.readByte();
    this.summonCount = reader.readByte();
    this.spellCooldowns = [];
    const countSpellCooldowns = reader.readShort();
    for (let i = 0; i < countSpellCooldowns; i++) {
      const type = new GameFightSpellCooldown();
      type.deserialize(reader);
      this.spellCooldowns.push(type);
    }
  }
};
var GameFightResumeWithSlavesMessage = class extends GameFightResumeMessage {
  static id = 6205;
  slavesInfo;
  constructor(idols, effects, fxTriggerCounts, gameTurn, marks, fightStart, bombCount, summonCount, spellCooldowns, slavesInfo) {
    super(
      idols,
      effects,
      fxTriggerCounts,
      gameTurn,
      marks,
      fightStart,
      bombCount,
      summonCount,
      spellCooldowns
    );
    this.slavesInfo = slavesInfo;
  }
  serialize(writer) {
    writer.writeShort(this.slavesInfo.length);
    this.slavesInfo.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.slavesInfo = [];
    const countSlavesInfo = reader.readShort();
    for (let i = 0; i < countSlavesInfo; i++) {
      const type = new GameFightResumeSlaveInfo();
      type.deserialize(reader);
      this.slavesInfo.push(type);
    }
  }
};
var CurrentMapMessage = class extends DofusMessage {
  static id = 9325;
  mapKey;
  mapId = 0;
  constructor(mapKey, mapId) {
    super();
    this.mapKey = mapKey;
    this.mapId = mapId;
  }
  serialize(writer) {
    writer.writeUTF(this.mapKey);
    writer.writeDouble(this.mapId);
  }
  deserialize(reader) {
    this.mapKey = reader.readUTF();
    this.mapId = reader.readDouble();
  }
};
var CurrentMapInstanceMessage = class extends CurrentMapMessage {
  static id = 7422;
  instantiatedMapId = 0;
  constructor(mapKey, mapId, instantiatedMapId) {
    super(mapKey, mapId);
    this.instantiatedMapId = instantiatedMapId;
  }
  serialize(writer) {
    writer.writeDouble(this.instantiatedMapId);
  }
  deserialize(reader) {
    this.instantiatedMapId = reader.readDouble();
  }
};
var GameFightStartingMessage = class extends DofusMessage {
  static id = 2951;
  containsBoss = false;
  fightType = 0;
  fightId = 0;
  attackerId = 0;
  defenderId = 0;
  constructor(containsBoss, fightType, fightId, attackerId, defenderId) {
    super();
    this.containsBoss = containsBoss;
    this.fightType = fightType;
    this.fightId = fightId;
    this.attackerId = attackerId;
    this.defenderId = defenderId;
  }
  serialize(writer) {
    writer.writeBoolean(this.containsBoss);
    writer.writeByte(this.fightType);
    writer.writeVarShort(this.fightId);
    writer.writeDouble(this.attackerId);
    writer.writeDouble(this.defenderId);
  }
  deserialize(reader) {
    this.containsBoss = reader.readBoolean();
    this.fightType = reader.readByte();
    this.fightId = reader.readVarShort();
    this.attackerId = reader.readDouble();
    this.defenderId = reader.readDouble();
  }
};
var GameFightJoinMessage = class extends DofusMessage {
  static id = 1185;
  timeMaxBeforeFightStart = 0;
  fightType = 0;
  isTeamPhase = false;
  canBeCancelled = false;
  canSayReady = false;
  isFightStarted = false;
  constructor(timeMaxBeforeFightStart, fightType, isTeamPhase, canBeCancelled, canSayReady, isFightStarted) {
    super();
    this.timeMaxBeforeFightStart = timeMaxBeforeFightStart;
    this.fightType = fightType;
    this.isTeamPhase = isTeamPhase;
    this.canBeCancelled = canBeCancelled;
    this.canSayReady = canSayReady;
    this.isFightStarted = isFightStarted;
  }
  serialize(writer) {
    writer.writeShort(this.timeMaxBeforeFightStart);
    writer.writeByte(this.fightType);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.isTeamPhase);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.canBeCancelled);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 2, this.canSayReady);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 3, this.isFightStarted);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.timeMaxBeforeFightStart = reader.readShort();
    this.fightType = reader.readByte();
    const box0 = reader.readByte();
    this.isTeamPhase = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.canBeCancelled = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
    this.canSayReady = (0, import_hetwan2.bigEndianGetFlag)(box0, 2);
    this.isFightStarted = (0, import_hetwan2.bigEndianGetFlag)(box0, 3);
  }
};
var ArenaFighterIdleMessage = class extends DofusMessage {
  static id = 1425;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ChallengeTargetsListRequestMessage = class extends DofusMessage {
  static id = 8411;
  challengeId = 0;
  constructor(challengeId) {
    super();
    this.challengeId = challengeId;
  }
  serialize(writer) {
    writer.writeVarShort(this.challengeId);
  }
  deserialize(reader) {
    this.challengeId = reader.readVarShort();
  }
};
var GameFightStartMessage = class extends DofusMessage {
  static id = 5357;
  idols;
  constructor(idols) {
    super();
    this.idols = idols;
  }
  serialize(writer) {
    writer.writeShort(this.idols.length);
    this.idols.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.idols = [];
    const countIdols = reader.readShort();
    for (let i = 0; i < countIdols; i++) {
      const type = new Idol();
      type.deserialize(reader);
      this.idols.push(type);
    }
  }
};
var GameActionFightNoSpellCastMessage = class extends DofusMessage {
  static id = 8111;
  spellLevelId = 0;
  constructor(spellLevelId) {
    super();
    this.spellLevelId = spellLevelId;
  }
  serialize(writer) {
    writer.writeVarInt(this.spellLevelId);
  }
  deserialize(reader) {
    this.spellLevelId = reader.readVarInt();
  }
};
var GameContextDestroyMessage = class extends DofusMessage {
  static id = 7855;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GameFightSpectatorJoinMessage = class extends GameFightJoinMessage {
  static id = 6927;
  namedPartyTeams;
  constructor(timeMaxBeforeFightStart, fightType, isTeamPhase, canBeCancelled, canSayReady, isFightStarted, namedPartyTeams) {
    super(
      timeMaxBeforeFightStart,
      fightType,
      isTeamPhase,
      canBeCancelled,
      canSayReady,
      isFightStarted
    );
    this.namedPartyTeams = namedPartyTeams;
  }
  serialize(writer) {
    writer.writeShort(this.namedPartyTeams.length);
    this.namedPartyTeams.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.namedPartyTeams = [];
    const countNamedPartyTeams = reader.readShort();
    for (let i = 0; i < countNamedPartyTeams; i++) {
      const type = new NamedPartyTeam();
      type.deserialize(reader);
      this.namedPartyTeams.push(type);
    }
  }
};
var ChallengeInfoMessage = class extends DofusMessage {
  static id = 638;
  dropBonus = 0;
  xpBonus = 0;
  targetId = 0;
  challengeId = 0;
  constructor(dropBonus, xpBonus, targetId, challengeId) {
    super();
    this.dropBonus = dropBonus;
    this.xpBonus = xpBonus;
    this.targetId = targetId;
    this.challengeId = challengeId;
  }
  serialize(writer) {
    writer.writeVarInt(this.dropBonus);
    writer.writeVarInt(this.xpBonus);
    writer.writeDouble(this.targetId);
    writer.writeVarShort(this.challengeId);
  }
  deserialize(reader) {
    this.dropBonus = reader.readVarInt();
    this.xpBonus = reader.readVarInt();
    this.targetId = reader.readDouble();
    this.challengeId = reader.readVarShort();
  }
};
var ChallengeTargetsListMessage = class extends DofusMessage {
  static id = 7386;
  targetCells;
  targetIds;
  constructor(targetCells, targetIds) {
    super();
    this.targetCells = targetCells;
    this.targetIds = targetIds;
  }
  serialize(writer) {
    writer.writeShort(this.targetCells.length);
    this.targetCells.forEach((current) => writer.writeShort(current));
    writer.writeShort(this.targetIds.length);
    this.targetIds.forEach((current) => writer.writeDouble(current));
  }
  deserialize(reader) {
    this.targetCells = [];
    const countTargetCells = reader.readShort();
    for (let i = 0; i < countTargetCells; i++) {
      this.targetCells.push(reader.readShort());
    }
    this.targetIds = [];
    const countTargetIds = reader.readShort();
    for (let i = 0; i < countTargetIds; i++) {
      this.targetIds.push(reader.readDouble());
    }
  }
};
var MapObstacleUpdateMessage = class extends DofusMessage {
  static id = 9984;
  obstacles;
  constructor(obstacles) {
    super();
    this.obstacles = obstacles;
  }
  serialize(writer) {
    writer.writeShort(this.obstacles.length);
    this.obstacles.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.obstacles = [];
    const countObstacles = reader.readShort();
    for (let i = 0; i < countObstacles; i++) {
      const type = new MapObstacle();
      type.deserialize(reader);
      this.obstacles.push(type);
    }
  }
};
var ArenaFighterLeaveMessage = class extends DofusMessage {
  static id = 1880;
  leaver;
  constructor(leaver) {
    super();
    this.leaver = leaver;
  }
  serialize(writer) {
    this.leaver.serialize(writer);
  }
  deserialize(reader) {
    this.leaver = new CharacterBasicMinimalInformations();
    this.leaver.deserialize(reader);
  }
};
var GameContextReadyMessage = class extends DofusMessage {
  static id = 912;
  mapId = 0;
  constructor(mapId) {
    super();
    this.mapId = mapId;
  }
  serialize(writer) {
    writer.writeDouble(this.mapId);
  }
  deserialize(reader) {
    this.mapId = reader.readDouble();
  }
};
var ChallengeResultMessage = class extends DofusMessage {
  static id = 7757;
  success = false;
  challengeId = 0;
  constructor(success, challengeId) {
    super();
    this.success = success;
    this.challengeId = challengeId;
  }
  serialize(writer) {
    writer.writeBoolean(this.success);
    writer.writeVarShort(this.challengeId);
  }
  deserialize(reader) {
    this.success = reader.readBoolean();
    this.challengeId = reader.readVarShort();
  }
};
var GameFightNewWaveMessage = class extends DofusMessage {
  static id = 1312;
  nbTurnBeforeNextWave = 0;
  teamId = 2;
  id_ = 0;
  constructor(nbTurnBeforeNextWave, teamId, id_) {
    super();
    this.nbTurnBeforeNextWave = nbTurnBeforeNextWave;
    this.teamId = teamId;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeShort(this.nbTurnBeforeNextWave);
    writer.writeByte(this.teamId);
    writer.writeByte(this.id_);
  }
  deserialize(reader) {
    this.nbTurnBeforeNextWave = reader.readShort();
    this.teamId = reader.readByte();
    this.id_ = reader.readByte();
  }
};
var GameFightPauseMessage = class extends DofusMessage {
  static id = 8818;
  isPaused = false;
  constructor(isPaused) {
    super();
    this.isPaused = isPaused;
  }
  serialize(writer) {
    writer.writeBoolean(this.isPaused);
  }
  deserialize(reader) {
    this.isPaused = reader.readBoolean();
  }
};
var UpdateSpellModifierMessage = class extends DofusMessage {
  static id = 1672;
  spellModifier;
  actorId = 0;
  constructor(spellModifier, actorId) {
    super();
    this.spellModifier = spellModifier;
    this.actorId = actorId;
  }
  serialize(writer) {
    this.spellModifier.serialize(writer);
    writer.writeDouble(this.actorId);
  }
  deserialize(reader) {
    this.spellModifier = new CharacterSpellModification();
    this.spellModifier.deserialize(reader);
    this.actorId = reader.readDouble();
  }
};
var GameFightTurnStartMessage = class extends DofusMessage {
  static id = 3772;
  waitTime = 0;
  id_ = 0;
  constructor(waitTime, id_) {
    super();
    this.waitTime = waitTime;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeVarInt(this.waitTime);
    writer.writeDouble(this.id_);
  }
  deserialize(reader) {
    this.waitTime = reader.readVarInt();
    this.id_ = reader.readDouble();
  }
};
var GameFightTurnReadyRequestMessage = class extends DofusMessage {
  static id = 4389;
  id_ = 0;
  constructor(id_) {
    super();
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeDouble(this.id_);
  }
  deserialize(reader) {
    this.id_ = reader.readDouble();
  }
};
var GameFightTurnEndMessage = class extends DofusMessage {
  static id = 4443;
  id_ = 0;
  constructor(id_) {
    super();
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeDouble(this.id_);
  }
  deserialize(reader) {
    this.id_ = reader.readDouble();
  }
};
var GameFightNewRoundMessage = class extends DofusMessage {
  static id = 1656;
  roundNumber = 0;
  constructor(roundNumber) {
    super();
    this.roundNumber = roundNumber;
  }
  serialize(writer) {
    writer.writeVarInt(this.roundNumber);
  }
  deserialize(reader) {
    this.roundNumber = reader.readVarInt();
  }
};
var SlaveSwitchContextMessage = class extends DofusMessage {
  static id = 6013;
  shortcuts;
  slaveStats;
  masterId = 0;
  slaveId = 0;
  slaveTurn = 0;
  slaveSpells;
  constructor(shortcuts, slaveStats, masterId, slaveId, slaveTurn, slaveSpells) {
    super();
    this.shortcuts = shortcuts;
    this.slaveStats = slaveStats;
    this.masterId = masterId;
    this.slaveId = slaveId;
    this.slaveTurn = slaveTurn;
    this.slaveSpells = slaveSpells;
  }
  serialize(writer) {
    writer.writeShort(this.shortcuts.length);
    this.shortcuts.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    this.slaveStats.serialize(writer);
    writer.writeDouble(this.masterId);
    writer.writeDouble(this.slaveId);
    writer.writeVarShort(this.slaveTurn);
    writer.writeShort(this.slaveSpells.length);
    this.slaveSpells.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.shortcuts = [];
    const countShortcuts = reader.readShort();
    for (let i = 0; i < countShortcuts; i++) {
      const shortcutsTypeId = reader.readShort();
      const type = new types[shortcutsTypeId]();
      type.deserialize(reader);
      this.shortcuts.push(type);
    }
    this.slaveStats = new CharacterCharacteristicsInformations();
    this.slaveStats.deserialize(reader);
    this.masterId = reader.readDouble();
    this.slaveId = reader.readDouble();
    this.slaveTurn = reader.readVarShort();
    this.slaveSpells = [];
    const countSlaveSpells = reader.readShort();
    for (let i = 0; i < countSlaveSpells; i++) {
      const type = new SpellItem();
      type.deserialize(reader);
      this.slaveSpells.push(type);
    }
  }
};
var GameFightTurnStartPlayingMessage = class extends DofusMessage {
  static id = 3275;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var SlaveNoLongerControledMessage = class extends DofusMessage {
  static id = 4540;
  slaveId = 0;
  masterId = 0;
  constructor(slaveId, masterId) {
    super();
    this.slaveId = slaveId;
    this.masterId = masterId;
  }
  serialize(writer) {
    writer.writeDouble(this.slaveId);
    writer.writeDouble(this.masterId);
  }
  deserialize(reader) {
    this.slaveId = reader.readDouble();
    this.masterId = reader.readDouble();
  }
};
var CharacterStatsListMessage = class extends DofusMessage {
  static id = 2227;
  stats;
  constructor(stats) {
    super();
    this.stats = stats;
  }
  serialize(writer) {
    this.stats.serialize(writer);
  }
  deserialize(reader) {
    this.stats = new CharacterCharacteristicsInformations();
    this.stats.deserialize(reader);
  }
};
var GameActionAcknowledgementMessage = class extends DofusMessage {
  static id = 3561;
  actionId = 0;
  valid = false;
  constructor(actionId, valid) {
    super();
    this.actionId = actionId;
    this.valid = valid;
  }
  serialize(writer) {
    writer.writeByte(this.actionId);
    writer.writeBoolean(this.valid);
  }
  deserialize(reader) {
    this.actionId = reader.readByte();
    this.valid = reader.readBoolean();
  }
};
var GameFightTurnResumeMessage = class extends GameFightTurnStartMessage {
  static id = 9827;
  remainingTime = 0;
  constructor(waitTime, id_, remainingTime) {
    super(waitTime, id_);
    this.remainingTime = remainingTime;
  }
  serialize(writer) {
    writer.writeVarInt(this.remainingTime);
  }
  deserialize(reader) {
    this.remainingTime = reader.readVarInt();
  }
};
var GameFightTurnReadyMessage = class extends DofusMessage {
  static id = 4043;
  isReady = false;
  constructor(isReady) {
    super();
    this.isReady = isReady;
  }
  serialize(writer) {
    writer.writeBoolean(this.isReady);
  }
  deserialize(reader) {
    this.isReady = reader.readBoolean();
  }
};
var GameActionUpdateEffectTriggerCountMessage = class extends DofusMessage {
  static id = 6461;
  targetIds;
  constructor(targetIds) {
    super();
    this.targetIds = targetIds;
  }
  serialize(writer) {
    writer.writeShort(this.targetIds.length);
    this.targetIds.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.targetIds = [];
    const countTargetIds = reader.readShort();
    for (let i = 0; i < countTargetIds; i++) {
      const type = new GameFightEffectTriggerCount();
      type.deserialize(reader);
      this.targetIds.push(type);
    }
  }
};
var HaapiApiKeyRequestMessage = class extends DofusMessage {
  static id = 6036;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var DebugClearHighlightCellsMessage = class extends DofusMessage {
  static id = 1639;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var DebugHighlightCellsMessage = class extends DofusMessage {
  static id = 307;
  cells;
  color = 0;
  constructor(cells, color) {
    super();
    this.cells = cells;
    this.color = color;
  }
  serialize(writer) {
    writer.writeShort(this.cells.length);
    this.cells.forEach((current) => writer.writeVarShort(current));
    writer.writeDouble(this.color);
  }
  deserialize(reader) {
    this.cells = [];
    const countCells = reader.readShort();
    for (let i = 0; i < countCells; i++) {
      this.cells.push(reader.readVarShort());
    }
    this.color = reader.readDouble();
  }
};
var DumpedEntityStatsMessage = class extends DofusMessage {
  static id = 3665;
  stats;
  actorId = 0;
  constructor(stats, actorId) {
    super();
    this.stats = stats;
    this.actorId = actorId;
  }
  serialize(writer) {
    this.stats.serialize(writer);
    writer.writeDouble(this.actorId);
  }
  deserialize(reader) {
    this.stats = new CharacterCharacteristics();
    this.stats.deserialize(reader);
    this.actorId = reader.readDouble();
  }
};
var DebugInClientMessage = class extends DofusMessage {
  static id = 6517;
  message;
  level = 0;
  constructor(message, level) {
    super();
    this.message = message;
    this.level = level;
  }
  serialize(writer) {
    writer.writeUTF(this.message);
    writer.writeByte(this.level);
  }
  deserialize(reader) {
    this.message = reader.readUTF();
    this.level = reader.readByte();
  }
};
var IdentificationMessage = class extends DofusMessage {
  static id = 4337;
  sessionOptionalSalt = 0;
  credentials;
  lang;
  serverId = 0;
  version;
  failedAttempts;
  autoconnect = false;
  useCertificate = false;
  useLoginToken = false;
  constructor(sessionOptionalSalt, credentials, lang, serverId, version, failedAttempts, autoconnect, useCertificate, useLoginToken) {
    super();
    this.sessionOptionalSalt = sessionOptionalSalt;
    this.credentials = credentials;
    this.lang = lang;
    this.serverId = serverId;
    this.version = version;
    this.failedAttempts = failedAttempts;
    this.autoconnect = autoconnect;
    this.useCertificate = useCertificate;
    this.useLoginToken = useLoginToken;
  }
  serialize(writer) {
    writer.writeVarLong(this.sessionOptionalSalt);
    writer.writeVarInt(this.credentials.length);
    this.credentials.forEach((current) => writer.writeByte(current));
    writer.writeUTF(this.lang);
    writer.writeShort(this.serverId);
    this.version.serialize(writer);
    writer.writeShort(this.failedAttempts.length);
    this.failedAttempts.forEach(
      (current) => writer.writeVarShort(current)
    );
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.autoconnect);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.useCertificate);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 2, this.useLoginToken);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.sessionOptionalSalt = reader.readVarLong();
    this.credentials = [];
    const countCredentials = reader.readVarInt();
    for (let i = 0; i < countCredentials; i++) {
      this.credentials.push(reader.readByte());
    }
    this.lang = reader.readUTF();
    this.serverId = reader.readShort();
    this.version = new Version();
    this.version.deserialize(reader);
    this.failedAttempts = [];
    const countFailedAttempts = reader.readShort();
    for (let i = 0; i < countFailedAttempts; i++) {
      this.failedAttempts.push(reader.readVarShort());
    }
    const box0 = reader.readByte();
    this.autoconnect = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.useCertificate = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
    this.useLoginToken = (0, import_hetwan2.bigEndianGetFlag)(box0, 2);
  }
};
var IdentificationAccountForceMessage = class extends IdentificationMessage {
  static id = 2449;
  forcedAccountLogin;
  constructor(sessionOptionalSalt, credentials, lang, serverId, version, failedAttempts, autoconnect, useCertificate, useLoginToken, forcedAccountLogin) {
    super(
      sessionOptionalSalt,
      credentials,
      lang,
      serverId,
      version,
      failedAttempts,
      autoconnect,
      useCertificate,
      useLoginToken
    );
    this.forcedAccountLogin = forcedAccountLogin;
  }
  serialize(writer) {
    writer.writeUTF(this.forcedAccountLogin);
  }
  deserialize(reader) {
    this.forcedAccountLogin = reader.readUTF();
  }
};
var BasicAckMessage = class extends DofusMessage {
  static id = 45;
  lastPacketId = 0;
  seq = 0;
  constructor(lastPacketId, seq) {
    super();
    this.lastPacketId = lastPacketId;
    this.seq = seq;
  }
  serialize(writer) {
    writer.writeVarShort(this.lastPacketId);
    writer.writeVarInt(this.seq);
  }
  deserialize(reader) {
    this.lastPacketId = reader.readVarShort();
    this.seq = reader.readVarInt();
  }
};
var BasicNoOperationMessage = class extends DofusMessage {
  static id = 2522;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var CredentialsAcknowledgementMessage = class extends DofusMessage {
  static id = 4834;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var OnConnectionEventMessage = class extends DofusMessage {
  static id = 4485;
  eventType = 0;
  constructor(eventType) {
    super();
    this.eventType = eventType;
  }
  serialize(writer) {
    writer.writeByte(this.eventType);
  }
  deserialize(reader) {
    this.eventType = reader.readByte();
  }
};
var ObjectJobAddedMessage = class extends DofusMessage {
  static id = 5325;
  jobId = 0;
  constructor(jobId) {
    super();
    this.jobId = jobId;
  }
  serialize(writer) {
    writer.writeByte(this.jobId);
  }
  deserialize(reader) {
    this.jobId = reader.readByte();
  }
};
var LivingObjectMessageRequestMessage = class extends DofusMessage {
  static id = 3223;
  livingObject = 0;
  parameters;
  msgId = 0;
  constructor(livingObject, parameters, msgId) {
    super();
    this.livingObject = livingObject;
    this.parameters = parameters;
    this.msgId = msgId;
  }
  serialize(writer) {
    writer.writeVarInt(this.livingObject);
    writer.writeShort(this.parameters.length);
    this.parameters.forEach((current) => writer.writeUTF(current));
    writer.writeVarShort(this.msgId);
  }
  deserialize(reader) {
    this.livingObject = reader.readVarInt();
    this.parameters = [];
    const countParameters = reader.readShort();
    for (let i = 0; i < countParameters; i++) {
      this.parameters.push(reader.readUTF());
    }
    this.msgId = reader.readVarShort();
  }
};
var IdentificationSuccessMessage = class extends DofusMessage {
  static id = 331;
  havenbagAvailableRoom = 0;
  subscriptionElapsedDuration = 0;
  communityId = 0;
  accountTag;
  accountId = 0;
  login;
  secretQuestion;
  subscriptionEndDate = 0;
  accountCreation = 0;
  hasRights = false;
  hasConsoleRight = false;
  wasAlreadyConnected = false;
  constructor(havenbagAvailableRoom, subscriptionElapsedDuration, communityId, accountTag, accountId, login, secretQuestion, subscriptionEndDate, accountCreation, hasRights, hasConsoleRight, wasAlreadyConnected) {
    super();
    this.havenbagAvailableRoom = havenbagAvailableRoom;
    this.subscriptionElapsedDuration = subscriptionElapsedDuration;
    this.communityId = communityId;
    this.accountTag = accountTag;
    this.accountId = accountId;
    this.login = login;
    this.secretQuestion = secretQuestion;
    this.subscriptionEndDate = subscriptionEndDate;
    this.accountCreation = accountCreation;
    this.hasRights = hasRights;
    this.hasConsoleRight = hasConsoleRight;
    this.wasAlreadyConnected = wasAlreadyConnected;
  }
  serialize(writer) {
    writer.writeByte(this.havenbagAvailableRoom);
    writer.writeDouble(this.subscriptionElapsedDuration);
    writer.writeByte(this.communityId);
    this.accountTag.serialize(writer);
    writer.writeInt(this.accountId);
    writer.writeUTF(this.login);
    writer.writeUTF(this.secretQuestion);
    writer.writeDouble(this.subscriptionEndDate);
    writer.writeDouble(this.accountCreation);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.hasRights);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.hasConsoleRight);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 2, this.wasAlreadyConnected);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.havenbagAvailableRoom = reader.readByte();
    this.subscriptionElapsedDuration = reader.readDouble();
    this.communityId = reader.readByte();
    this.accountTag = new AccountTagInformation();
    this.accountTag.deserialize(reader);
    this.accountId = reader.readInt();
    this.login = reader.readUTF();
    this.secretQuestion = reader.readUTF();
    this.subscriptionEndDate = reader.readDouble();
    this.accountCreation = reader.readDouble();
    const box0 = reader.readByte();
    this.hasRights = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.hasConsoleRight = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
    this.wasAlreadyConnected = (0, import_hetwan2.bigEndianGetFlag)(box0, 2);
  }
};
var RawDataMessage = class extends DofusMessage {
  static id = 6253;
  content;
  constructor(content) {
    super();
    this.content = content;
  }
  serialize(writer) {
    writer.writeByte(this.content);
  }
  deserialize(reader) {
    this.content = reader.readByte();
  }
};
var TrustStatusMessage = class extends DofusMessage {
  static id = 8156;
  trusted = false;
  certified = false;
  constructor(trusted, certified) {
    super();
    this.trusted = trusted;
    this.certified = certified;
  }
  serialize(writer) {
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.trusted);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.certified);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    const box0 = reader.readByte();
    this.trusted = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.certified = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var ServersListMessage = class extends DofusMessage {
  static id = 786;
  canCreateNewCharacter = false;
  alreadyConnectedToServerId = 0;
  servers;
  constructor(canCreateNewCharacter, alreadyConnectedToServerId, servers) {
    super();
    this.canCreateNewCharacter = canCreateNewCharacter;
    this.alreadyConnectedToServerId = alreadyConnectedToServerId;
    this.servers = servers;
  }
  serialize(writer) {
    writer.writeBoolean(this.canCreateNewCharacter);
    writer.writeVarShort(this.alreadyConnectedToServerId);
    writer.writeShort(this.servers.length);
    this.servers.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.canCreateNewCharacter = reader.readBoolean();
    this.alreadyConnectedToServerId = reader.readVarShort();
    this.servers = [];
    const countServers = reader.readShort();
    for (let i = 0; i < countServers; i++) {
      const type = new GameServerInformations();
      type.deserialize(reader);
      this.servers.push(type);
    }
  }
};
var BasicPongMessage = class extends DofusMessage {
  static id = 2330;
  quiet = false;
  constructor(quiet) {
    super();
    this.quiet = quiet;
  }
  serialize(writer) {
    writer.writeBoolean(this.quiet);
  }
  deserialize(reader) {
    this.quiet = reader.readBoolean();
  }
};
var BasicLatencyStatsRequestMessage = class extends DofusMessage {
  static id = 1245;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var BasicLatencyStatsMessage = class extends DofusMessage {
  static id = 3831;
  sampleCount = 0;
  max = 0;
  latency = 0;
  constructor(sampleCount, max, latency) {
    super();
    this.sampleCount = sampleCount;
    this.max = max;
    this.latency = latency;
  }
  serialize(writer) {
    writer.writeVarShort(this.sampleCount);
    writer.writeVarShort(this.max);
    writer.writeShort(this.latency);
  }
  deserialize(reader) {
    this.sampleCount = reader.readVarShort();
    this.max = reader.readVarShort();
    this.latency = reader.readShort();
  }
};
var CheckIntegrityMessage = class extends DofusMessage {
  static id = 1296;
  data;
  constructor(data) {
    super();
    this.data = data;
  }
  serialize(writer) {
    writer.writeVarInt(this.data.length);
    this.data.forEach((current) => writer.writeByte(current));
  }
  deserialize(reader) {
    this.data = [];
    const countData = reader.readVarInt();
    for (let i = 0; i < countData; i++) {
      this.data.push(reader.readByte());
    }
  }
};
var AdminCommandMessage = class extends DofusMessage {
  static id = 4583;
  content;
  constructor(content) {
    super();
    this.content = content;
  }
  serialize(writer) {
    writer.writeUTF(this.content);
  }
  deserialize(reader) {
    this.content = reader.readUTF();
  }
};
var ConsoleMessage = class extends DofusMessage {
  static id = 3282;
  content;
  type = 0;
  constructor(content, type) {
    super();
    this.content = content;
    this.type = type;
  }
  serialize(writer) {
    writer.writeUTF(this.content);
    writer.writeByte(this.type);
  }
  deserialize(reader) {
    this.content = reader.readUTF();
    this.type = reader.readByte();
  }
};
var QuestListMessage = class extends DofusMessage {
  static id = 5774;
  finishedQuestsIds;
  finishedQuestsCounts;
  activeQuests;
  reinitDoneQuestsIds;
  constructor(finishedQuestsIds, finishedQuestsCounts, activeQuests, reinitDoneQuestsIds) {
    super();
    this.finishedQuestsIds = finishedQuestsIds;
    this.finishedQuestsCounts = finishedQuestsCounts;
    this.activeQuests = activeQuests;
    this.reinitDoneQuestsIds = reinitDoneQuestsIds;
  }
  serialize(writer) {
    writer.writeShort(this.finishedQuestsIds.length);
    this.finishedQuestsIds.forEach(
      (current) => writer.writeVarShort(current)
    );
    writer.writeShort(this.finishedQuestsCounts.length);
    this.finishedQuestsCounts.forEach(
      (current) => writer.writeVarShort(current)
    );
    writer.writeShort(this.activeQuests.length);
    this.activeQuests.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.reinitDoneQuestsIds.length);
    this.reinitDoneQuestsIds.forEach(
      (current) => writer.writeVarShort(current)
    );
  }
  deserialize(reader) {
    this.finishedQuestsIds = [];
    const countFinishedQuestsIds = reader.readShort();
    for (let i = 0; i < countFinishedQuestsIds; i++) {
      this.finishedQuestsIds.push(reader.readVarShort());
    }
    this.finishedQuestsCounts = [];
    const countFinishedQuestsCounts = reader.readShort();
    for (let i = 0; i < countFinishedQuestsCounts; i++) {
      this.finishedQuestsCounts.push(reader.readVarShort());
    }
    this.activeQuests = [];
    const countActiveQuests = reader.readShort();
    for (let i = 0; i < countActiveQuests; i++) {
      const activeQuestsTypeId = reader.readShort();
      const type = new types[activeQuestsTypeId]();
      type.deserialize(reader);
      this.activeQuests.push(type);
    }
    this.reinitDoneQuestsIds = [];
    const countReinitDoneQuestsIds = reader.readShort();
    for (let i = 0; i < countReinitDoneQuestsIds; i++) {
      this.reinitDoneQuestsIds.push(reader.readVarShort());
    }
  }
};
var QuestValidatedMessage = class extends DofusMessage {
  static id = 1984;
  questId = 0;
  constructor(questId) {
    super();
    this.questId = questId;
  }
  serialize(writer) {
    writer.writeVarShort(this.questId);
  }
  deserialize(reader) {
    this.questId = reader.readVarShort();
  }
};
var CharacterCreationResultMessage = class extends DofusMessage {
  static id = 110;
  result = 1;
  constructor(result) {
    super();
    this.result = result;
  }
  serialize(writer) {
    writer.writeByte(this.result);
  }
  deserialize(reader) {
    this.result = reader.readByte();
  }
};
var NicknameRefusedMessage = class extends DofusMessage {
  static id = 2705;
  reason = 99;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var NicknameAcceptedMessage = class extends DofusMessage {
  static id = 9067;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var HelloGameMessage = class extends DofusMessage {
  static id = 5237;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GuildFactsErrorMessage = class extends DofusMessage {
  static id = 9196;
  guildId = 0;
  constructor(guildId) {
    super();
    this.guildId = guildId;
  }
  serialize(writer) {
    writer.writeVarInt(this.guildId);
  }
  deserialize(reader) {
    this.guildId = reader.readVarInt();
  }
};
var AchievementDetailedListMessage = class extends DofusMessage {
  static id = 9855;
  finishedAchievements;
  startedAchievements;
  constructor(finishedAchievements, startedAchievements) {
    super();
    this.finishedAchievements = finishedAchievements;
    this.startedAchievements = startedAchievements;
  }
  serialize(writer) {
    writer.writeShort(this.finishedAchievements.length);
    this.finishedAchievements.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.startedAchievements.length);
    this.startedAchievements.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.finishedAchievements = [];
    const countFinishedAchievements = reader.readShort();
    for (let i = 0; i < countFinishedAchievements; i++) {
      const type = new Achievement();
      type.deserialize(reader);
      this.finishedAchievements.push(type);
    }
    this.startedAchievements = [];
    const countStartedAchievements = reader.readShort();
    for (let i = 0; i < countStartedAchievements; i++) {
      const type = new Achievement();
      type.deserialize(reader);
      this.startedAchievements.push(type);
    }
  }
};
var AuthenticationTicketAcceptedMessage = class extends DofusMessage {
  static id = 6407;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GuildInvitationStateRecrutedMessage = class extends DofusMessage {
  static id = 621;
  invitationState = 0;
  constructor(invitationState) {
    super();
    this.invitationState = invitationState;
  }
  serialize(writer) {
    writer.writeByte(this.invitationState);
  }
  deserialize(reader) {
    this.invitationState = reader.readByte();
  }
};
var ChatAbstractServerMessage = class extends DofusMessage {
  static id = 3393;
  fingerprint;
  timestamp = 0;
  content;
  channel = 0;
  constructor(fingerprint, timestamp, content, channel) {
    super();
    this.fingerprint = fingerprint;
    this.timestamp = timestamp;
    this.content = content;
    this.channel = channel;
  }
  serialize(writer) {
    writer.writeUTF(this.fingerprint);
    writer.writeInt(this.timestamp);
    writer.writeUTF(this.content);
    writer.writeByte(this.channel);
  }
  deserialize(reader) {
    this.fingerprint = reader.readUTF();
    this.timestamp = reader.readInt();
    this.content = reader.readUTF();
    this.channel = reader.readByte();
  }
};
var ChatServerMessage = class extends ChatAbstractServerMessage {
  static id = 8853;
  senderAccountId = 0;
  prefix;
  senderName;
  senderId = 0;
  constructor(fingerprint, timestamp, content, channel, senderAccountId, prefix, senderName, senderId) {
    super(fingerprint, timestamp, content, channel);
    this.senderAccountId = senderAccountId;
    this.prefix = prefix;
    this.senderName = senderName;
    this.senderId = senderId;
  }
  serialize(writer) {
    writer.writeInt(this.senderAccountId);
    writer.writeUTF(this.prefix);
    writer.writeUTF(this.senderName);
    writer.writeDouble(this.senderId);
  }
  deserialize(reader) {
    this.senderAccountId = reader.readInt();
    this.prefix = reader.readUTF();
    this.senderName = reader.readUTF();
    this.senderId = reader.readDouble();
  }
};
var ChatKolizeumServerMessage = class extends ChatServerMessage {
  static id = 4380;
  originServerId = 0;
  constructor(fingerprint, timestamp, content, channel, senderAccountId, prefix, senderName, senderId, originServerId) {
    super(
      fingerprint,
      timestamp,
      content,
      channel,
      senderAccountId,
      prefix,
      senderName,
      senderId
    );
    this.originServerId = originServerId;
  }
  serialize(writer) {
    writer.writeShort(this.originServerId);
  }
  deserialize(reader) {
    this.originServerId = reader.readShort();
  }
};
var KnownZaapListMessage = class extends DofusMessage {
  static id = 4096;
  destinations;
  constructor(destinations) {
    super();
    this.destinations = destinations;
  }
  serialize(writer) {
    writer.writeShort(this.destinations.length);
    this.destinations.forEach(
      (current) => writer.writeDouble(current)
    );
  }
  deserialize(reader) {
    this.destinations = [];
    const countDestinations = reader.readShort();
    for (let i = 0; i < countDestinations; i++) {
      this.destinations.push(reader.readDouble());
    }
  }
};
var KamasUpdateMessage = class extends DofusMessage {
  static id = 4370;
  kamasTotal = 0;
  constructor(kamasTotal) {
    super();
    this.kamasTotal = kamasTotal;
  }
  serialize(writer) {
    writer.writeVarLong(this.kamasTotal);
  }
  deserialize(reader) {
    this.kamasTotal = reader.readVarLong();
  }
};
var StorageObjectsUpdateMessage = class extends DofusMessage {
  static id = 7209;
  objectList;
  constructor(objectList) {
    super();
    this.objectList = objectList;
  }
  serialize(writer) {
    writer.writeShort(this.objectList.length);
    this.objectList.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.objectList = [];
    const countObjectList = reader.readShort();
    for (let i = 0; i < countObjectList; i++) {
      const type = new ObjectItem();
      type.deserialize(reader);
      this.objectList.push(type);
    }
  }
};
var GuildInvitedMessage = class extends DofusMessage {
  static id = 7582;
  guildInfo;
  recruterName;
  recruterId = 0;
  constructor(guildInfo, recruterName, recruterId) {
    super();
    this.guildInfo = guildInfo;
    this.recruterName = recruterName;
    this.recruterId = recruterId;
  }
  serialize(writer) {
    this.guildInfo.serialize(writer);
    writer.writeUTF(this.recruterName);
    writer.writeVarLong(this.recruterId);
  }
  deserialize(reader) {
    this.guildInfo = new BasicGuildInformations();
    this.guildInfo.deserialize(reader);
    this.recruterName = reader.readUTF();
    this.recruterId = reader.readVarLong();
  }
};
var ActivitySuggestionsMessage = class extends DofusMessage {
  static id = 5931;
  unlockedActivitiesIds;
  lockedActivitiesIds;
  constructor(unlockedActivitiesIds, lockedActivitiesIds) {
    super();
    this.unlockedActivitiesIds = unlockedActivitiesIds;
    this.lockedActivitiesIds = lockedActivitiesIds;
  }
  serialize(writer) {
    writer.writeShort(this.unlockedActivitiesIds.length);
    this.unlockedActivitiesIds.forEach(
      (current) => writer.writeVarShort(current)
    );
    writer.writeShort(this.lockedActivitiesIds.length);
    this.lockedActivitiesIds.forEach(
      (current) => writer.writeVarShort(current)
    );
  }
  deserialize(reader) {
    this.unlockedActivitiesIds = [];
    const countUnlockedActivitiesIds = reader.readShort();
    for (let i = 0; i < countUnlockedActivitiesIds; i++) {
      this.unlockedActivitiesIds.push(reader.readVarShort());
    }
    this.lockedActivitiesIds = [];
    const countLockedActivitiesIds = reader.readShort();
    for (let i = 0; i < countLockedActivitiesIds; i++) {
      this.lockedActivitiesIds.push(reader.readVarShort());
    }
  }
};
var ShortcutBarContentMessage = class extends DofusMessage {
  static id = 7910;
  shortcuts;
  barType = 0;
  constructor(shortcuts, barType) {
    super();
    this.shortcuts = shortcuts;
    this.barType = barType;
  }
  serialize(writer) {
    writer.writeShort(this.shortcuts.length);
    this.shortcuts.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeByte(this.barType);
  }
  deserialize(reader) {
    this.shortcuts = [];
    const countShortcuts = reader.readShort();
    for (let i = 0; i < countShortcuts; i++) {
      const shortcutsTypeId = reader.readShort();
      const type = new types[shortcutsTypeId]();
      type.deserialize(reader);
      this.shortcuts.push(type);
    }
    this.barType = reader.readByte();
  }
};
var ObjectsAddedMessage = class extends DofusMessage {
  static id = 1568;
  object_;
  constructor(object_) {
    super();
    this.object_ = object_;
  }
  serialize(writer) {
    writer.writeShort(this.object_.length);
    this.object_.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.object_ = [];
    const countObject_ = reader.readShort();
    for (let i = 0; i < countObject_; i++) {
      const type = new ObjectItem();
      type.deserialize(reader);
      this.object_.push(type);
    }
  }
};
var CharacterSelectedSuccessMessage = class extends DofusMessage {
  static id = 9833;
  isCollectingStats = false;
  infos;
  constructor(isCollectingStats, infos) {
    super();
    this.isCollectingStats = isCollectingStats;
    this.infos = infos;
  }
  serialize(writer) {
    writer.writeBoolean(this.isCollectingStats);
    this.infos.serialize(writer);
  }
  deserialize(reader) {
    this.isCollectingStats = reader.readBoolean();
    this.infos = new CharacterBaseInformations();
    this.infos.deserialize(reader);
  }
};
var ExchangeCraftResultMessage = class extends DofusMessage {
  static id = 8524;
  craftResult = 0;
  constructor(craftResult) {
    super();
    this.craftResult = craftResult;
  }
  serialize(writer) {
    writer.writeByte(this.craftResult);
  }
  deserialize(reader) {
    this.craftResult = reader.readByte();
  }
};
var ExchangeCraftResultWithObjectDescMessage = class extends ExchangeCraftResultMessage {
  static id = 118;
  objectInfo;
  constructor(craftResult, objectInfo) {
    super(craftResult);
    this.objectInfo = objectInfo;
  }
  serialize(writer) {
    this.objectInfo.serialize(writer);
  }
  deserialize(reader) {
    this.objectInfo = new ObjectItemNotInContainer();
    this.objectInfo.deserialize(reader);
  }
};
var AbstractPartyMessage = class extends DofusMessage {
  static id = 3299;
  partyId = 0;
  constructor(partyId) {
    super();
    this.partyId = partyId;
  }
  serialize(writer) {
    writer.writeVarInt(this.partyId);
  }
  deserialize(reader) {
    this.partyId = reader.readVarInt();
  }
};
var AbstractPartyEventMessage = class extends AbstractPartyMessage {
  static id = 2544;
  constructor(partyId) {
    super(partyId);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PartyMemberRemoveMessage = class extends AbstractPartyEventMessage {
  static id = 9078;
  leavingPlayerId = 0;
  constructor(partyId, leavingPlayerId) {
    super(partyId);
    this.leavingPlayerId = leavingPlayerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.leavingPlayerId);
  }
  deserialize(reader) {
    this.leavingPlayerId = reader.readVarLong();
  }
};
var GameRolePlayPlayerFightFriendlyAnsweredMessage = class extends DofusMessage {
  static id = 5417;
  sourceId = 0;
  accept = false;
  targetId = 0;
  fightId = 0;
  constructor(sourceId, accept, targetId, fightId) {
    super();
    this.sourceId = sourceId;
    this.accept = accept;
    this.targetId = targetId;
    this.fightId = fightId;
  }
  serialize(writer) {
    writer.writeVarLong(this.sourceId);
    writer.writeBoolean(this.accept);
    writer.writeVarLong(this.targetId);
    writer.writeVarShort(this.fightId);
  }
  deserialize(reader) {
    this.sourceId = reader.readVarLong();
    this.accept = reader.readBoolean();
    this.targetId = reader.readVarLong();
    this.fightId = reader.readVarShort();
  }
};
var BasicWhoIsNoMatchMessage = class extends DofusMessage {
  static id = 7631;
  target;
  constructor(target) {
    super();
    this.target = target;
  }
  serialize(writer) {
    writer.writeShort(this.target.id);
    this.target.serialize(writer);
  }
  deserialize(reader) {
    const targetTypeId = reader.readShort();
    this.target = new types[targetTypeId]();
    this.target.deserialize(reader);
  }
};
var InteractiveUseErrorMessage = class extends DofusMessage {
  static id = 778;
  skillInstanceUid = 0;
  elemId = 0;
  constructor(skillInstanceUid, elemId) {
    super();
    this.skillInstanceUid = skillInstanceUid;
    this.elemId = elemId;
  }
  serialize(writer) {
    writer.writeVarInt(this.skillInstanceUid);
    writer.writeVarInt(this.elemId);
  }
  deserialize(reader) {
    this.skillInstanceUid = reader.readVarInt();
    this.elemId = reader.readVarInt();
  }
};
var GameRolePlayGameOverMessage = class extends DofusMessage {
  static id = 2042;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var NotificationByServerMessage = class extends DofusMessage {
  static id = 2613;
  forceOpen = false;
  parameters;
  id_ = 0;
  constructor(forceOpen, parameters, id_) {
    super();
    this.forceOpen = forceOpen;
    this.parameters = parameters;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeBoolean(this.forceOpen);
    writer.writeShort(this.parameters.length);
    this.parameters.forEach((current) => writer.writeUTF(current));
    writer.writeVarShort(this.id_);
  }
  deserialize(reader) {
    this.forceOpen = reader.readBoolean();
    this.parameters = [];
    const countParameters = reader.readShort();
    for (let i = 0; i < countParameters; i++) {
      this.parameters.push(reader.readUTF());
    }
    this.id_ = reader.readVarShort();
  }
};
var GuildMemberOnlineStatusMessage = class extends DofusMessage {
  static id = 4570;
  online = false;
  memberId = 0;
  constructor(online, memberId) {
    super();
    this.online = online;
    this.memberId = memberId;
  }
  serialize(writer) {
    writer.writeBoolean(this.online);
    writer.writeVarLong(this.memberId);
  }
  deserialize(reader) {
    this.online = reader.readBoolean();
    this.memberId = reader.readVarLong();
  }
};
var ExchangeMountsPaddockRemoveMessage = class extends DofusMessage {
  static id = 2113;
  mountsId;
  constructor(mountsId) {
    super();
    this.mountsId = mountsId;
  }
  serialize(writer) {
    writer.writeShort(this.mountsId.length);
    this.mountsId.forEach((current) => writer.writeVarInt(current));
  }
  deserialize(reader) {
    this.mountsId = [];
    const countMountsId = reader.readShort();
    for (let i = 0; i < countMountsId; i++) {
      this.mountsId.push(reader.readVarInt());
    }
  }
};
var SocialNoticeMessage = class extends DofusMessage {
  static id = 8560;
  memberName;
  memberId = 0;
  timestamp = 0;
  content;
  constructor(memberName, memberId, timestamp, content) {
    super();
    this.memberName = memberName;
    this.memberId = memberId;
    this.timestamp = timestamp;
    this.content = content;
  }
  serialize(writer) {
    writer.writeUTF(this.memberName);
    writer.writeVarLong(this.memberId);
    writer.writeInt(this.timestamp);
    writer.writeUTF(this.content);
  }
  deserialize(reader) {
    this.memberName = reader.readUTF();
    this.memberId = reader.readVarLong();
    this.timestamp = reader.readInt();
    this.content = reader.readUTF();
  }
};
var GameRolePlaySpellAnimMessage = class extends DofusMessage {
  static id = 8430;
  targetCellId = 0;
  spellLevel = 0;
  spellId = 0;
  casterId = 0;
  constructor(targetCellId, spellLevel, spellId, casterId) {
    super();
    this.targetCellId = targetCellId;
    this.spellLevel = spellLevel;
    this.spellId = spellId;
    this.casterId = casterId;
  }
  serialize(writer) {
    writer.writeVarShort(this.targetCellId);
    writer.writeShort(this.spellLevel);
    writer.writeVarShort(this.spellId);
    writer.writeVarLong(this.casterId);
  }
  deserialize(reader) {
    this.targetCellId = reader.readVarShort();
    this.spellLevel = reader.readShort();
    this.spellId = reader.readVarShort();
    this.casterId = reader.readVarLong();
  }
};
var EmotePlayAbstractMessage = class extends DofusMessage {
  static id = 4497;
  emoteStartTime = 0;
  emoteId = 0;
  constructor(emoteStartTime, emoteId) {
    super();
    this.emoteStartTime = emoteStartTime;
    this.emoteId = emoteId;
  }
  serialize(writer) {
    writer.writeDouble(this.emoteStartTime);
    writer.writeShort(this.emoteId);
  }
  deserialize(reader) {
    this.emoteStartTime = reader.readDouble();
    this.emoteId = reader.readShort();
  }
};
var OrnamentGainedMessage = class extends DofusMessage {
  static id = 3920;
  ornamentId = 0;
  constructor(ornamentId) {
    super();
    this.ornamentId = ornamentId;
  }
  serialize(writer) {
    writer.writeShort(this.ornamentId);
  }
  deserialize(reader) {
    this.ornamentId = reader.readShort();
  }
};
var ExchangeBidHouseUnsoldItemsMessage = class extends DofusMessage {
  static id = 5576;
  items;
  constructor(items) {
    super();
    this.items = items;
  }
  serialize(writer) {
    writer.writeShort(this.items.length);
    this.items.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.items = [];
    const countItems = reader.readShort();
    for (let i = 0; i < countItems; i++) {
      const type = new ObjectItemGenericQuantity();
      type.deserialize(reader);
      this.items.push(type);
    }
  }
};
var ExchangeShopStockMovementRemovedMessage = class extends DofusMessage {
  static id = 7025;
  objectId = 0;
  constructor(objectId) {
    super();
    this.objectId = objectId;
  }
  serialize(writer) {
    writer.writeVarInt(this.objectId);
  }
  deserialize(reader) {
    this.objectId = reader.readVarInt();
  }
};
var IdolSelectErrorMessage = class extends DofusMessage {
  static id = 4378;
  idolId = 0;
  reason = 0;
  activate = false;
  party = false;
  constructor(idolId, reason, activate, party) {
    super();
    this.idolId = idolId;
    this.reason = reason;
    this.activate = activate;
    this.party = party;
  }
  serialize(writer) {
    writer.writeVarShort(this.idolId);
    writer.writeByte(this.reason);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.activate);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.party);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.idolId = reader.readVarShort();
    this.reason = reader.readByte();
    const box0 = reader.readByte();
    this.activate = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.party = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var SymbioticObjectAssociatedMessage = class extends DofusMessage {
  static id = 4986;
  hostUID = 0;
  constructor(hostUID) {
    super();
    this.hostUID = hostUID;
  }
  serialize(writer) {
    writer.writeVarInt(this.hostUID);
  }
  deserialize(reader) {
    this.hostUID = reader.readVarInt();
  }
};
var MimicryObjectAssociatedMessage = class extends SymbioticObjectAssociatedMessage {
  static id = 8169;
  constructor(hostUID) {
    super(hostUID);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var BasicCharactersListMessage = class extends DofusMessage {
  static id = 8228;
  characters;
  constructor(characters) {
    super();
    this.characters = characters;
  }
  serialize(writer) {
    writer.writeShort(this.characters.length);
    this.characters.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.characters = [];
    const countCharacters = reader.readShort();
    for (let i = 0; i < countCharacters; i++) {
      const charactersTypeId = reader.readShort();
      const type = new types[charactersTypeId]();
      type.deserialize(reader);
      this.characters.push(type);
    }
  }
};
var TreasureHuntAvailableRetryCountUpdateMessage = class extends DofusMessage {
  static id = 3416;
  availableRetryCount = 0;
  questType = 0;
  constructor(availableRetryCount, questType) {
    super();
    this.availableRetryCount = availableRetryCount;
    this.questType = questType;
  }
  serialize(writer) {
    writer.writeInt(this.availableRetryCount);
    writer.writeByte(this.questType);
  }
  deserialize(reader) {
    this.availableRetryCount = reader.readInt();
    this.questType = reader.readByte();
  }
};
var LoginQueueStatusMessage = class extends DofusMessage {
  static id = 2063;
  total = 0;
  position = 0;
  constructor(total, position) {
    super();
    this.total = total;
    this.position = position;
  }
  serialize(writer) {
    writer.writeShort(this.total);
    writer.writeShort(this.position);
  }
  deserialize(reader) {
    this.total = reader.readShort();
    this.position = reader.readShort();
  }
};
var PartyCancelInvitationNotificationMessage = class extends AbstractPartyEventMessage {
  static id = 1489;
  guestId = 0;
  cancelerId = 0;
  constructor(partyId, guestId, cancelerId) {
    super(partyId);
    this.guestId = guestId;
    this.cancelerId = cancelerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.guestId);
    writer.writeVarLong(this.cancelerId);
  }
  deserialize(reader) {
    this.guestId = reader.readVarLong();
    this.cancelerId = reader.readVarLong();
  }
};
var PaginationAnswerAbstractMessage = class extends DofusMessage {
  static id = 2864;
  count = 0;
  total = 0;
  offset = 0;
  constructor(count, total, offset) {
    super();
    this.count = count;
    this.total = total;
    this.offset = offset;
  }
  serialize(writer) {
    writer.writeUInt(this.count);
    writer.writeUInt(this.total);
    writer.writeDouble(this.offset);
  }
  deserialize(reader) {
    this.count = reader.readUInt();
    this.total = reader.readUInt();
    this.offset = reader.readDouble();
  }
};
var DungeonPartyFinderListenErrorMessage = class extends DofusMessage {
  static id = 7331;
  dungeonId = 0;
  constructor(dungeonId) {
    super();
    this.dungeonId = dungeonId;
  }
  serialize(writer) {
    writer.writeVarShort(this.dungeonId);
  }
  deserialize(reader) {
    this.dungeonId = reader.readVarShort();
  }
};
var ExchangeObjectMessage = class extends DofusMessage {
  static id = 1966;
  remote = false;
  constructor(remote) {
    super();
    this.remote = remote;
  }
  serialize(writer) {
    writer.writeBoolean(this.remote);
  }
  deserialize(reader) {
    this.remote = reader.readBoolean();
  }
};
var ExchangeObjectsRemovedMessage = class extends ExchangeObjectMessage {
  static id = 4841;
  objectUID;
  constructor(remote, objectUID) {
    super(remote);
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeShort(this.objectUID.length);
    this.objectUID.forEach((current) => writer.writeVarInt(current));
  }
  deserialize(reader) {
    this.objectUID = [];
    const countObjectUID = reader.readShort();
    for (let i = 0; i < countObjectUID; i++) {
      this.objectUID.push(reader.readVarInt());
    }
  }
};
var TextInformationMessage = class extends DofusMessage {
  static id = 3712;
  parameters;
  msgId = 0;
  msgType = 0;
  constructor(parameters, msgId, msgType) {
    super();
    this.parameters = parameters;
    this.msgId = msgId;
    this.msgType = msgType;
  }
  serialize(writer) {
    writer.writeShort(this.parameters.length);
    this.parameters.forEach((current) => writer.writeUTF(current));
    writer.writeVarShort(this.msgId);
    writer.writeByte(this.msgType);
  }
  deserialize(reader) {
    this.parameters = [];
    const countParameters = reader.readShort();
    for (let i = 0; i < countParameters; i++) {
      this.parameters.push(reader.readUTF());
    }
    this.msgId = reader.readVarShort();
    this.msgType = reader.readByte();
  }
};
var WarnOnPermaDeathStateMessage = class extends DofusMessage {
  static id = 8629;
  enable = false;
  constructor(enable) {
    super();
    this.enable = enable;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
  }
};
var ExchangeOfflineSoldItemsMessage = class extends DofusMessage {
  static id = 5671;
  merchantItems;
  bidHouseItems;
  constructor(merchantItems, bidHouseItems) {
    super();
    this.merchantItems = merchantItems;
    this.bidHouseItems = bidHouseItems;
  }
  serialize(writer) {
    writer.writeShort(this.merchantItems.length);
    this.merchantItems.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.bidHouseItems.length);
    this.bidHouseItems.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.merchantItems = [];
    const countMerchantItems = reader.readShort();
    for (let i = 0; i < countMerchantItems; i++) {
      const type = new ObjectItemQuantityPriceDateEffects();
      type.deserialize(reader);
      this.merchantItems.push(type);
    }
    this.bidHouseItems = [];
    const countBidHouseItems = reader.readShort();
    for (let i = 0; i < countBidHouseItems; i++) {
      const type = new ObjectItemQuantityPriceDateEffects();
      type.deserialize(reader);
      this.bidHouseItems.push(type);
    }
  }
};
var PartyLeaveMessage = class extends AbstractPartyMessage {
  static id = 4001;
  constructor(partyId) {
    super(partyId);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var QueueStatusMessage = class extends DofusMessage {
  static id = 2197;
  total = 0;
  position = 0;
  constructor(total, position) {
    super();
    this.total = total;
    this.position = position;
  }
  serialize(writer) {
    writer.writeShort(this.total);
    writer.writeShort(this.position);
  }
  deserialize(reader) {
    this.total = reader.readShort();
    this.position = reader.readShort();
  }
};
var ExchangeObjectAddedMessage = class extends ExchangeObjectMessage {
  static id = 2329;
  object_;
  constructor(remote, object_) {
    super(remote);
    this.object_ = object_;
  }
  serialize(writer) {
    this.object_.serialize(writer);
  }
  deserialize(reader) {
    this.object_ = new ObjectItem();
    this.object_.deserialize(reader);
  }
};
var ExchangeShopStockMovementUpdatedMessage = class extends DofusMessage {
  static id = 9932;
  objectInfo;
  constructor(objectInfo) {
    super();
    this.objectInfo = objectInfo;
  }
  serialize(writer) {
    this.objectInfo.serialize(writer);
  }
  deserialize(reader) {
    this.objectInfo = new ObjectItemToSell();
    this.objectInfo.deserialize(reader);
  }
};
var AbstractTaxCollectorListMessage = class extends DofusMessage {
  static id = 6496;
  informations;
  constructor(informations) {
    super();
    this.informations = informations;
  }
  serialize(writer) {
    writer.writeShort(this.informations.length);
    this.informations.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.informations = [];
    const countInformations = reader.readShort();
    for (let i = 0; i < countInformations; i++) {
      const informationsTypeId = reader.readShort();
      const type = new types[informationsTypeId]();
      type.deserialize(reader);
      this.informations.push(type);
    }
  }
};
var TaxCollectorListMessage = class extends AbstractTaxCollectorListMessage {
  static id = 4811;
  fightersInformations;
  infoType = 0;
  nbcollectorMax = 0;
  constructor(informations, fightersInformations, infoType, nbcollectorMax) {
    super(informations);
    this.fightersInformations = fightersInformations;
    this.infoType = infoType;
    this.nbcollectorMax = nbcollectorMax;
  }
  serialize(writer) {
    writer.writeShort(this.fightersInformations.length);
    this.fightersInformations.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeByte(this.infoType);
    writer.writeByte(this.nbcollectorMax);
  }
  deserialize(reader) {
    this.fightersInformations = [];
    const countFightersInformations = reader.readShort();
    for (let i = 0; i < countFightersInformations; i++) {
      const type = new TaxCollectorFightersInformation();
      type.deserialize(reader);
      this.fightersInformations.push(type);
    }
    this.infoType = reader.readByte();
    this.nbcollectorMax = reader.readByte();
  }
};
var GameRolePlayDelayedActionMessage = class extends DofusMessage {
  static id = 1161;
  delayTypeId = 0;
  delayEndTime = 0;
  delayedCharacterId = 0;
  constructor(delayTypeId, delayEndTime, delayedCharacterId) {
    super();
    this.delayTypeId = delayTypeId;
    this.delayEndTime = delayEndTime;
    this.delayedCharacterId = delayedCharacterId;
  }
  serialize(writer) {
    writer.writeByte(this.delayTypeId);
    writer.writeDouble(this.delayEndTime);
    writer.writeDouble(this.delayedCharacterId);
  }
  deserialize(reader) {
    this.delayTypeId = reader.readByte();
    this.delayEndTime = reader.readDouble();
    this.delayedCharacterId = reader.readDouble();
  }
};
var PauseDialogMessage = class extends DofusMessage {
  static id = 8906;
  dialogType = 0;
  constructor(dialogType) {
    super();
    this.dialogType = dialogType;
  }
  serialize(writer) {
    writer.writeByte(this.dialogType);
  }
  deserialize(reader) {
    this.dialogType = reader.readByte();
  }
};
var TeleportDestinationsMessage = class extends DofusMessage {
  static id = 5651;
  destinations;
  type = 0;
  constructor(destinations, type) {
    super();
    this.destinations = destinations;
    this.type = type;
  }
  serialize(writer) {
    writer.writeShort(this.destinations.length);
    this.destinations.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeByte(this.type);
  }
  deserialize(reader) {
    this.destinations = [];
    const countDestinations = reader.readShort();
    for (let i = 0; i < countDestinations; i++) {
      const type = new TeleportDestination();
      type.deserialize(reader);
      this.destinations.push(type);
    }
    this.type = reader.readByte();
  }
};
var LifePointsRegenBeginMessage = class extends DofusMessage {
  static id = 9626;
  regenRate = 0;
  constructor(regenRate) {
    super();
    this.regenRate = regenRate;
  }
  serialize(writer) {
    writer.writeByte(this.regenRate);
  }
  deserialize(reader) {
    this.regenRate = reader.readByte();
  }
};
var BreachBranchesMessage = class extends DofusMessage {
  static id = 2907;
  branches;
  constructor(branches) {
    super();
    this.branches = branches;
  }
  serialize(writer) {
    writer.writeShort(this.branches.length);
    this.branches.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.branches = [];
    const countBranches = reader.readShort();
    for (let i = 0; i < countBranches; i++) {
      const branchesTypeId = reader.readShort();
      const type = new types[branchesTypeId]();
      type.deserialize(reader);
      this.branches.push(type);
    }
  }
};
var GuildApplicationDeletedMessage = class extends DofusMessage {
  static id = 5546;
  deleted = false;
  constructor(deleted) {
    super();
    this.deleted = deleted;
  }
  serialize(writer) {
    writer.writeBoolean(this.deleted);
  }
  deserialize(reader) {
    this.deleted = reader.readBoolean();
  }
};
var CheckFileRequestMessage = class extends DofusMessage {
  static id = 7075;
  type = 0;
  filename;
  constructor(type, filename) {
    super();
    this.type = type;
    this.filename = filename;
  }
  serialize(writer) {
    writer.writeByte(this.type);
    writer.writeUTF(this.filename);
  }
  deserialize(reader) {
    this.type = reader.readByte();
    this.filename = reader.readUTF();
  }
};
var ForgettableSpellListUpdateMessage = class extends DofusMessage {
  static id = 9946;
  spells;
  action = 0;
  constructor(spells, action) {
    super();
    this.spells = spells;
    this.action = action;
  }
  serialize(writer) {
    writer.writeShort(this.spells.length);
    this.spells.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeByte(this.action);
  }
  deserialize(reader) {
    this.spells = [];
    const countSpells = reader.readShort();
    for (let i = 0; i < countSpells; i++) {
      const type = new ForgettableSpellItem();
      type.deserialize(reader);
      this.spells.push(type);
    }
    this.action = reader.readByte();
  }
};
var CharactersListMessage = class extends BasicCharactersListMessage {
  static id = 269;
  hasStartupActions = false;
  constructor(characters, hasStartupActions) {
    super(characters);
    this.hasStartupActions = hasStartupActions;
  }
  serialize(writer) {
    writer.writeBoolean(this.hasStartupActions);
  }
  deserialize(reader) {
    this.hasStartupActions = reader.readBoolean();
  }
};
var CharactersListWithRemodelingMessage = class extends CharactersListMessage {
  static id = 3532;
  charactersToRemodel;
  constructor(characters, hasStartupActions, charactersToRemodel) {
    super(characters, hasStartupActions);
    this.charactersToRemodel = charactersToRemodel;
  }
  serialize(writer) {
    writer.writeShort(this.charactersToRemodel.length);
    this.charactersToRemodel.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.charactersToRemodel = [];
    const countCharactersToRemodel = reader.readShort();
    for (let i = 0; i < countCharactersToRemodel; i++) {
      const type = new CharacterToRemodelInformations();
      type.deserialize(reader);
      this.charactersToRemodel.push(type);
    }
  }
};
var InteractiveElementUpdatedMessage = class extends DofusMessage {
  static id = 7321;
  interactiveElement;
  constructor(interactiveElement) {
    super();
    this.interactiveElement = interactiveElement;
  }
  serialize(writer) {
    this.interactiveElement.serialize(writer);
  }
  deserialize(reader) {
    this.interactiveElement = new InteractiveElement();
    this.interactiveElement.deserialize(reader);
  }
};
var GameRolePlayFightRequestCanceledMessage = class extends DofusMessage {
  static id = 4478;
  sourceId = 0;
  targetId = 0;
  fightId = 0;
  constructor(sourceId, targetId, fightId) {
    super();
    this.sourceId = sourceId;
    this.targetId = targetId;
    this.fightId = fightId;
  }
  serialize(writer) {
    writer.writeDouble(this.sourceId);
    writer.writeDouble(this.targetId);
    writer.writeVarShort(this.fightId);
  }
  deserialize(reader) {
    this.sourceId = reader.readDouble();
    this.targetId = reader.readDouble();
    this.fightId = reader.readVarShort();
  }
};
var BreachSavedMessage = class extends DofusMessage {
  static id = 4537;
  saved = false;
  constructor(saved) {
    super();
    this.saved = saved;
  }
  serialize(writer) {
    writer.writeBoolean(this.saved);
  }
  deserialize(reader) {
    this.saved = reader.readBoolean();
  }
};
var GuildFightPlayersHelpersLeaveMessage = class extends DofusMessage {
  static id = 5749;
  playerId = 0;
  fightId = 0;
  constructor(playerId, fightId) {
    super();
    this.playerId = playerId;
    this.fightId = fightId;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
    writer.writeDouble(this.fightId);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
    this.fightId = reader.readDouble();
  }
};
var HaapiApiKeyMessage = class extends DofusMessage {
  static id = 9970;
  token;
  constructor(token) {
    super();
    this.token = token;
  }
  serialize(writer) {
    writer.writeUTF(this.token);
  }
  deserialize(reader) {
    this.token = reader.readUTF();
  }
};
var TopTaxCollectorListMessage = class extends AbstractTaxCollectorListMessage {
  static id = 3617;
  isDungeon = false;
  constructor(informations, isDungeon) {
    super(informations);
    this.isDungeon = isDungeon;
  }
  serialize(writer) {
    writer.writeBoolean(this.isDungeon);
  }
  deserialize(reader) {
    this.isDungeon = reader.readBoolean();
  }
};
var GameRolePlayArenaFighterStatusMessage = class extends DofusMessage {
  static id = 5125;
  accepted = false;
  playerId = 0;
  fightId = 0;
  constructor(accepted, playerId, fightId) {
    super();
    this.accepted = accepted;
    this.playerId = playerId;
    this.fightId = fightId;
  }
  serialize(writer) {
    writer.writeBoolean(this.accepted);
    writer.writeDouble(this.playerId);
    writer.writeVarShort(this.fightId);
  }
  deserialize(reader) {
    this.accepted = reader.readBoolean();
    this.playerId = reader.readDouble();
    this.fightId = reader.readVarShort();
  }
};
var ChatServerCopyMessage = class extends ChatAbstractServerMessage {
  static id = 5344;
  receiverName;
  receiverId = 0;
  constructor(fingerprint, timestamp, content, channel, receiverName, receiverId) {
    super(fingerprint, timestamp, content, channel);
    this.receiverName = receiverName;
    this.receiverId = receiverId;
  }
  serialize(writer) {
    writer.writeUTF(this.receiverName);
    writer.writeVarLong(this.receiverId);
  }
  deserialize(reader) {
    this.receiverName = reader.readUTF();
    this.receiverId = reader.readVarLong();
  }
};
var ChatSmileyMessage = class extends DofusMessage {
  static id = 5518;
  accountId = 0;
  smileyId = 0;
  entityId = 0;
  constructor(accountId, smileyId, entityId) {
    super();
    this.accountId = accountId;
    this.smileyId = smileyId;
    this.entityId = entityId;
  }
  serialize(writer) {
    writer.writeInt(this.accountId);
    writer.writeVarShort(this.smileyId);
    writer.writeDouble(this.entityId);
  }
  deserialize(reader) {
    this.accountId = reader.readInt();
    this.smileyId = reader.readVarShort();
    this.entityId = reader.readDouble();
  }
};
var LocalizedChatSmileyMessage = class extends ChatSmileyMessage {
  static id = 5134;
  cellId = 0;
  constructor(accountId, smileyId, entityId, cellId) {
    super(accountId, smileyId, entityId);
    this.cellId = cellId;
  }
  serialize(writer) {
    writer.writeVarShort(this.cellId);
  }
  deserialize(reader) {
    this.cellId = reader.readVarShort();
  }
};
var GameRolePlayArenaSwitchToFightServerMessage = class extends DofusMessage {
  static id = 3316;
  address;
  ports;
  ticket;
  constructor(address, ports, ticket) {
    super();
    this.address = address;
    this.ports = ports;
    this.ticket = ticket;
  }
  serialize(writer) {
    writer.writeUTF(this.address);
    writer.writeShort(this.ports.length);
    this.ports.forEach((current) => writer.writeVarShort(current));
    writer.writeVarInt(this.ticket.length);
    this.ticket.forEach((current) => writer.writeByte(current));
  }
  deserialize(reader) {
    this.address = reader.readUTF();
    this.ports = [];
    const countPorts = reader.readShort();
    for (let i = 0; i < countPorts; i++) {
      this.ports.push(reader.readVarShort());
    }
    this.ticket = [];
    const countTicket = reader.readVarInt();
    for (let i = 0; i < countTicket; i++) {
      this.ticket.push(reader.readByte());
    }
  }
};
var ProtocolRequired = class extends DofusMessage {
  static id = 5716;
  version;
  constructor(version) {
    super();
    this.version = version;
  }
  serialize(writer) {
    writer.writeUTF(this.version);
  }
  deserialize(reader) {
    this.version = reader.readUTF();
  }
};
var CompassUpdateMessage = class extends DofusMessage {
  static id = 8716;
  coords;
  type = 0;
  constructor(coords, type) {
    super();
    this.coords = coords;
    this.type = type;
  }
  serialize(writer) {
    writer.writeShort(this.coords.id);
    this.coords.serialize(writer);
    writer.writeByte(this.type);
  }
  deserialize(reader) {
    const coordsTypeId = reader.readShort();
    this.coords = new types[coordsTypeId]();
    this.coords.deserialize(reader);
    this.type = reader.readByte();
  }
};
var GameRefreshMonsterBoostsMessage = class extends DofusMessage {
  static id = 2110;
  familyBoosts;
  monsterBoosts;
  constructor(familyBoosts, monsterBoosts) {
    super();
    this.familyBoosts = familyBoosts;
    this.monsterBoosts = monsterBoosts;
  }
  serialize(writer) {
    writer.writeShort(this.familyBoosts.length);
    this.familyBoosts.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.monsterBoosts.length);
    this.monsterBoosts.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.familyBoosts = [];
    const countFamilyBoosts = reader.readShort();
    for (let i = 0; i < countFamilyBoosts; i++) {
      const type = new MonsterBoosts();
      type.deserialize(reader);
      this.familyBoosts.push(type);
    }
    this.monsterBoosts = [];
    const countMonsterBoosts = reader.readShort();
    for (let i = 0; i < countMonsterBoosts; i++) {
      const type = new MonsterBoosts();
      type.deserialize(reader);
      this.monsterBoosts.push(type);
    }
  }
};
var GuildPlayerApplicationAbstractMessage = class extends DofusMessage {
  static id = 5896;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GuildPlayerApplicationInformationMessage = class extends GuildPlayerApplicationAbstractMessage {
  static id = 9380;
  apply;
  guildInformation;
  constructor(apply, guildInformation) {
    super();
    this.apply = apply;
    this.guildInformation = guildInformation;
  }
  serialize(writer) {
    this.apply.serialize(writer);
    this.guildInformation.serialize(writer);
  }
  deserialize(reader) {
    this.apply = new GuildApplicationInformation();
    this.apply.deserialize(reader);
    this.guildInformation = new GuildInformations();
    this.guildInformation.deserialize(reader);
  }
};
var DungeonPartyFinderRegisterSuccessMessage = class extends DofusMessage {
  static id = 2385;
  dungeonIds;
  constructor(dungeonIds) {
    super();
    this.dungeonIds = dungeonIds;
  }
  serialize(writer) {
    writer.writeShort(this.dungeonIds.length);
    this.dungeonIds.forEach(
      (current) => writer.writeVarShort(current)
    );
  }
  deserialize(reader) {
    this.dungeonIds = [];
    const countDungeonIds = reader.readShort();
    for (let i = 0; i < countDungeonIds; i++) {
      this.dungeonIds.push(reader.readVarShort());
    }
  }
};
var SpellVariantActivationMessage = class extends DofusMessage {
  static id = 8666;
  result = false;
  spellId = 0;
  constructor(result, spellId) {
    super();
    this.result = result;
    this.spellId = spellId;
  }
  serialize(writer) {
    writer.writeBoolean(this.result);
    writer.writeVarShort(this.spellId);
  }
  deserialize(reader) {
    this.result = reader.readBoolean();
    this.spellId = reader.readVarShort();
  }
};
var StorageObjectsRemoveMessage = class extends DofusMessage {
  static id = 7044;
  objectUIDList;
  constructor(objectUIDList) {
    super();
    this.objectUIDList = objectUIDList;
  }
  serialize(writer) {
    writer.writeShort(this.objectUIDList.length);
    this.objectUIDList.forEach(
      (current) => writer.writeVarInt(current)
    );
  }
  deserialize(reader) {
    this.objectUIDList = [];
    const countObjectUIDList = reader.readShort();
    for (let i = 0; i < countObjectUIDList; i++) {
      this.objectUIDList.push(reader.readVarInt());
    }
  }
};
var MountReleasedMessage = class extends DofusMessage {
  static id = 843;
  mountId = 0;
  constructor(mountId) {
    super();
    this.mountId = mountId;
  }
  serialize(writer) {
    writer.writeVarInt(this.mountId);
  }
  deserialize(reader) {
    this.mountId = reader.readVarInt();
  }
};
var DecraftResultMessage = class extends DofusMessage {
  static id = 7257;
  results;
  constructor(results) {
    super();
    this.results = results;
  }
  serialize(writer) {
    writer.writeShort(this.results.length);
    this.results.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.results = [];
    const countResults = reader.readShort();
    for (let i = 0; i < countResults; i++) {
      const type = new DecraftedItemStackInfo();
      type.deserialize(reader);
      this.results.push(type);
    }
  }
};
var MapFightStartPositionsUpdateMessage = class extends DofusMessage {
  static id = 5408;
  fightStartPositions;
  mapId = 0;
  constructor(fightStartPositions, mapId) {
    super();
    this.fightStartPositions = fightStartPositions;
    this.mapId = mapId;
  }
  serialize(writer) {
    this.fightStartPositions.serialize(writer);
    writer.writeDouble(this.mapId);
  }
  deserialize(reader) {
    this.fightStartPositions = new FightStartingPositions();
    this.fightStartPositions.deserialize(reader);
    this.mapId = reader.readDouble();
  }
};
var OrnamentLostMessage = class extends DofusMessage {
  static id = 94;
  ornamentId = 0;
  constructor(ornamentId) {
    super();
    this.ornamentId = ornamentId;
  }
  serialize(writer) {
    writer.writeShort(this.ornamentId);
  }
  deserialize(reader) {
    this.ornamentId = reader.readShort();
  }
};
var NetworkDataContainerMessage = class extends DofusMessage {
  static id = 2;
  constructor() {
    super();
  }
  serialize(writer) {
  }
  deserialize(reader) {
  }
};
var GuildPaddockBoughtMessage = class extends DofusMessage {
  static id = 6217;
  paddockInfo;
  constructor(paddockInfo) {
    super();
    this.paddockInfo = paddockInfo;
  }
  serialize(writer) {
    this.paddockInfo.serialize(writer);
  }
  deserialize(reader) {
    this.paddockInfo = new PaddockContentInformations();
    this.paddockInfo.deserialize(reader);
  }
};
var AbstractPartyMemberInFightMessage = class extends AbstractPartyMessage {
  static id = 1888;
  timeBeforeFightStart = 0;
  reason = 0;
  memberAccountId = 0;
  fightId = 0;
  memberId = 0;
  memberName;
  constructor(partyId, timeBeforeFightStart, reason, memberAccountId, fightId, memberId, memberName) {
    super(partyId);
    this.timeBeforeFightStart = timeBeforeFightStart;
    this.reason = reason;
    this.memberAccountId = memberAccountId;
    this.fightId = fightId;
    this.memberId = memberId;
    this.memberName = memberName;
  }
  serialize(writer) {
    writer.writeVarShort(this.timeBeforeFightStart);
    writer.writeByte(this.reason);
    writer.writeInt(this.memberAccountId);
    writer.writeVarShort(this.fightId);
    writer.writeVarLong(this.memberId);
    writer.writeUTF(this.memberName);
  }
  deserialize(reader) {
    this.timeBeforeFightStart = reader.readVarShort();
    this.reason = reader.readByte();
    this.memberAccountId = reader.readInt();
    this.fightId = reader.readVarShort();
    this.memberId = reader.readVarLong();
    this.memberName = reader.readUTF();
  }
};
var PartyMemberInStandardFightMessage = class extends AbstractPartyMemberInFightMessage {
  static id = 6653;
  fightMap;
  constructor(partyId, timeBeforeFightStart, reason, memberAccountId, fightId, memberId, memberName, fightMap) {
    super(
      partyId,
      timeBeforeFightStart,
      reason,
      memberAccountId,
      fightId,
      memberId,
      memberName
    );
    this.fightMap = fightMap;
  }
  serialize(writer) {
    this.fightMap.serialize(writer);
  }
  deserialize(reader) {
    this.fightMap = new MapCoordinatesExtended();
    this.fightMap.deserialize(reader);
  }
};
var ExchangeStartedMessage = class extends DofusMessage {
  static id = 8540;
  exchangeType = 0;
  constructor(exchangeType) {
    super();
    this.exchangeType = exchangeType;
  }
  serialize(writer) {
    writer.writeByte(this.exchangeType);
  }
  deserialize(reader) {
    this.exchangeType = reader.readByte();
  }
};
var SpouseStatusMessage = class extends DofusMessage {
  static id = 5406;
  hasSpouse = false;
  constructor(hasSpouse) {
    super();
    this.hasSpouse = hasSpouse;
  }
  serialize(writer) {
    writer.writeBoolean(this.hasSpouse);
  }
  deserialize(reader) {
    this.hasSpouse = reader.readBoolean();
  }
};
var SubscriptionLimitationMessage = class extends DofusMessage {
  static id = 969;
  reason = 0;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var ExchangeBidPriceMessage = class extends DofusMessage {
  static id = 8533;
  averagePrice = 0;
  genericId = 0;
  constructor(averagePrice, genericId) {
    super();
    this.averagePrice = averagePrice;
    this.genericId = genericId;
  }
  serialize(writer) {
    writer.writeVarLong(this.averagePrice);
    writer.writeVarShort(this.genericId);
  }
  deserialize(reader) {
    this.averagePrice = reader.readVarLong();
    this.genericId = reader.readVarShort();
  }
};
var ExchangeBidPriceForSellerMessage = class extends ExchangeBidPriceMessage {
  static id = 8645;
  minimalPrices;
  allIdentical = false;
  constructor(averagePrice, genericId, minimalPrices, allIdentical) {
    super(averagePrice, genericId);
    this.minimalPrices = minimalPrices;
    this.allIdentical = allIdentical;
  }
  serialize(writer) {
    writer.writeShort(this.minimalPrices.length);
    this.minimalPrices.forEach(
      (current) => writer.writeVarLong(current)
    );
    writer.writeBoolean(this.allIdentical);
  }
  deserialize(reader) {
    this.minimalPrices = [];
    const countMinimalPrices = reader.readShort();
    for (let i = 0; i < countMinimalPrices; i++) {
      this.minimalPrices.push(reader.readVarLong());
    }
    this.allIdentical = reader.readBoolean();
  }
};
var LockableShowCodeDialogMessage = class extends DofusMessage {
  static id = 3045;
  codeSize = 0;
  changeOrUse = false;
  constructor(codeSize, changeOrUse) {
    super();
    this.codeSize = codeSize;
    this.changeOrUse = changeOrUse;
  }
  serialize(writer) {
    writer.writeByte(this.codeSize);
    writer.writeBoolean(this.changeOrUse);
  }
  deserialize(reader) {
    this.codeSize = reader.readByte();
    this.changeOrUse = reader.readBoolean();
  }
};
var GuildFightPlayersHelpersJoinMessage = class extends DofusMessage {
  static id = 4751;
  playerInfo;
  fightId = 0;
  constructor(playerInfo, fightId) {
    super();
    this.playerInfo = playerInfo;
    this.fightId = fightId;
  }
  serialize(writer) {
    this.playerInfo.serialize(writer);
    writer.writeDouble(this.fightId);
  }
  deserialize(reader) {
    this.playerInfo = new CharacterMinimalPlusLookInformations();
    this.playerInfo.deserialize(reader);
    this.fightId = reader.readDouble();
  }
};
var TaxCollectorMovementsOfflineMessage = class extends DofusMessage {
  static id = 3016;
  movements;
  constructor(movements) {
    super();
    this.movements = movements;
  }
  serialize(writer) {
    writer.writeShort(this.movements.length);
    this.movements.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.movements = [];
    const countMovements = reader.readShort();
    for (let i = 0; i < countMovements; i++) {
      const type = new TaxCollectorMovement();
      type.deserialize(reader);
      this.movements.push(type);
    }
  }
};
var UpdateLifePointsMessage = class extends DofusMessage {
  static id = 1857;
  maxLifePoints = 0;
  lifePoints = 0;
  constructor(maxLifePoints, lifePoints) {
    super();
    this.maxLifePoints = maxLifePoints;
    this.lifePoints = lifePoints;
  }
  serialize(writer) {
    writer.writeVarInt(this.maxLifePoints);
    writer.writeVarInt(this.lifePoints);
  }
  deserialize(reader) {
    this.maxLifePoints = reader.readVarInt();
    this.lifePoints = reader.readVarInt();
  }
};
var ReloginTokenStatusMessage = class extends DofusMessage {
  static id = 3172;
  ticket;
  validToken = false;
  constructor(ticket, validToken) {
    super();
    this.ticket = ticket;
    this.validToken = validToken;
  }
  serialize(writer) {
    writer.writeVarInt(this.ticket.length);
    this.ticket.forEach((current) => writer.writeByte(current));
    writer.writeBoolean(this.validToken);
  }
  deserialize(reader) {
    this.ticket = [];
    const countTicket = reader.readVarInt();
    for (let i = 0; i < countTicket; i++) {
      this.ticket.push(reader.readByte());
    }
    this.validToken = reader.readBoolean();
  }
};
var TitleGainedMessage = class extends DofusMessage {
  static id = 3386;
  titleId = 0;
  constructor(titleId) {
    super();
    this.titleId = titleId;
  }
  serialize(writer) {
    writer.writeVarShort(this.titleId);
  }
  deserialize(reader) {
    this.titleId = reader.readVarShort();
  }
};
var InventoryContentMessage = class extends DofusMessage {
  static id = 4197;
  kamas = 0;
  objects;
  constructor(kamas, objects) {
    super();
    this.kamas = kamas;
    this.objects = objects;
  }
  serialize(writer) {
    writer.writeVarLong(this.kamas);
    writer.writeShort(this.objects.length);
    this.objects.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.kamas = reader.readVarLong();
    this.objects = [];
    const countObjects = reader.readShort();
    for (let i = 0; i < countObjects; i++) {
      const type = new ObjectItem();
      type.deserialize(reader);
      this.objects.push(type);
    }
  }
};
var StorageInventoryContentMessage = class extends InventoryContentMessage {
  static id = 561;
  constructor(kamas, objects) {
    super(kamas, objects);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ExchangeShopStockMultiMovementRemovedMessage = class extends DofusMessage {
  static id = 3309;
  objectIdList;
  constructor(objectIdList) {
    super();
    this.objectIdList = objectIdList;
  }
  serialize(writer) {
    writer.writeShort(this.objectIdList.length);
    this.objectIdList.forEach(
      (current) => writer.writeVarInt(current)
    );
  }
  deserialize(reader) {
    this.objectIdList = [];
    const countObjectIdList = reader.readShort();
    for (let i = 0; i < countObjectIdList; i++) {
      this.objectIdList.push(reader.readVarInt());
    }
  }
};
var TaxCollectorAttackedResultMessage = class extends DofusMessage {
  static id = 7270;
  deadOrAlive = false;
  guild;
  basicInfos;
  constructor(deadOrAlive, guild, basicInfos) {
    super();
    this.deadOrAlive = deadOrAlive;
    this.guild = guild;
    this.basicInfos = basicInfos;
  }
  serialize(writer) {
    writer.writeBoolean(this.deadOrAlive);
    this.guild.serialize(writer);
    this.basicInfos.serialize(writer);
  }
  deserialize(reader) {
    this.deadOrAlive = reader.readBoolean();
    this.guild = new BasicGuildInformations();
    this.guild.deserialize(reader);
    this.basicInfos = new TaxCollectorBasicInformations();
    this.basicInfos.deserialize(reader);
  }
};
var ExchangeObjectRemovedMessage = class extends ExchangeObjectMessage {
  static id = 7006;
  objectUID = 0;
  constructor(remote, objectUID) {
    super(remote);
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeVarInt(this.objectUID);
  }
  deserialize(reader) {
    this.objectUID = reader.readVarInt();
  }
};
var PrismFightAttackerAddMessage = class extends DofusMessage {
  static id = 3086;
  attacker;
  fightId = 0;
  subAreaId = 0;
  constructor(attacker, fightId, subAreaId) {
    super();
    this.attacker = attacker;
    this.fightId = fightId;
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeShort(this.attacker.id);
    this.attacker.serialize(writer);
    writer.writeVarShort(this.fightId);
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    const attackerTypeId = reader.readShort();
    this.attacker = new types[attackerTypeId]();
    this.attacker.deserialize(reader);
    this.fightId = reader.readVarShort();
    this.subAreaId = reader.readVarShort();
  }
};
var LivingObjectMessageMessage = class extends DofusMessage {
  static id = 2593;
  objectGenericId = 0;
  owner;
  timeStamp = 0;
  msgId = 0;
  constructor(objectGenericId, owner, timeStamp, msgId) {
    super();
    this.objectGenericId = objectGenericId;
    this.owner = owner;
    this.timeStamp = timeStamp;
    this.msgId = msgId;
  }
  serialize(writer) {
    writer.writeVarShort(this.objectGenericId);
    writer.writeUTF(this.owner);
    writer.writeInt(this.timeStamp);
    writer.writeVarShort(this.msgId);
  }
  deserialize(reader) {
    this.objectGenericId = reader.readVarShort();
    this.owner = reader.readUTF();
    this.timeStamp = reader.readInt();
    this.msgId = reader.readVarShort();
  }
};
var PartyInvitationMessage = class extends AbstractPartyMessage {
  static id = 1660;
  toId = 0;
  fromName;
  partyType = 0;
  partyName;
  maxParticipants = 0;
  fromId = 0;
  constructor(partyId, toId, fromName, partyType, partyName, maxParticipants, fromId) {
    super(partyId);
    this.toId = toId;
    this.fromName = fromName;
    this.partyType = partyType;
    this.partyName = partyName;
    this.maxParticipants = maxParticipants;
    this.fromId = fromId;
  }
  serialize(writer) {
    writer.writeVarLong(this.toId);
    writer.writeUTF(this.fromName);
    writer.writeByte(this.partyType);
    writer.writeUTF(this.partyName);
    writer.writeByte(this.maxParticipants);
    writer.writeVarLong(this.fromId);
  }
  deserialize(reader) {
    this.toId = reader.readVarLong();
    this.fromName = reader.readUTF();
    this.partyType = reader.readByte();
    this.partyName = reader.readUTF();
    this.maxParticipants = reader.readByte();
    this.fromId = reader.readVarLong();
  }
};
var TreasureHuntRequestAnswerMessage = class extends DofusMessage {
  static id = 1019;
  result = 0;
  questType = 0;
  constructor(result, questType) {
    super();
    this.result = result;
    this.questType = questType;
  }
  serialize(writer) {
    writer.writeByte(this.result);
    writer.writeByte(this.questType);
  }
  deserialize(reader) {
    this.result = reader.readByte();
    this.questType = reader.readByte();
  }
};
var CharacterLoadingCompleteMessage = class extends DofusMessage {
  static id = 9063;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GameRolePlayArenaPlayerBehavioursMessage = class extends DofusMessage {
  static id = 92;
  flags;
  sanctions;
  banDuration = 0;
  constructor(flags, sanctions, banDuration) {
    super();
    this.flags = flags;
    this.sanctions = sanctions;
    this.banDuration = banDuration;
  }
  serialize(writer) {
    writer.writeShort(this.flags.length);
    this.flags.forEach((current) => writer.writeUTF(current));
    writer.writeShort(this.sanctions.length);
    this.sanctions.forEach((current) => writer.writeUTF(current));
    writer.writeInt(this.banDuration);
  }
  deserialize(reader) {
    this.flags = [];
    const countFlags = reader.readShort();
    for (let i = 0; i < countFlags; i++) {
      this.flags.push(reader.readUTF());
    }
    this.sanctions = [];
    const countSanctions = reader.readShort();
    for (let i = 0; i < countSanctions; i++) {
      this.sanctions.push(reader.readUTF());
    }
    this.banDuration = reader.readInt();
  }
};
var TreasureHuntFlagRequestAnswerMessage = class extends DofusMessage {
  static id = 8784;
  index = 0;
  result = 0;
  questType = 0;
  constructor(index, result, questType) {
    super();
    this.index = index;
    this.result = result;
    this.questType = questType;
  }
  serialize(writer) {
    writer.writeByte(this.index);
    writer.writeByte(this.result);
    writer.writeByte(this.questType);
  }
  deserialize(reader) {
    this.index = reader.readByte();
    this.result = reader.readByte();
    this.questType = reader.readByte();
  }
};
var ExchangeIsReadyMessage = class extends DofusMessage {
  static id = 6263;
  ready = false;
  id_ = 0;
  constructor(ready, id_) {
    super();
    this.ready = ready;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeBoolean(this.ready);
    writer.writeDouble(this.id_);
  }
  deserialize(reader) {
    this.ready = reader.readBoolean();
    this.id_ = reader.readDouble();
  }
};
var AchievementAlmostFinishedDetailedListMessage = class extends DofusMessage {
  static id = 6475;
  almostFinishedAchievements;
  constructor(almostFinishedAchievements) {
    super();
    this.almostFinishedAchievements = almostFinishedAchievements;
  }
  serialize(writer) {
    writer.writeShort(this.almostFinishedAchievements.length);
    this.almostFinishedAchievements.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.almostFinishedAchievements = [];
    const countAlmostFinishedAchievements = reader.readShort();
    for (let i = 0; i < countAlmostFinishedAchievements; i++) {
      const type = new Achievement();
      type.deserialize(reader);
      this.almostFinishedAchievements.push(type);
    }
  }
};
var AllianceFactsErrorMessage = class extends DofusMessage {
  static id = 8954;
  allianceId = 0;
  constructor(allianceId) {
    super();
    this.allianceId = allianceId;
  }
  serialize(writer) {
    writer.writeVarInt(this.allianceId);
  }
  deserialize(reader) {
    this.allianceId = reader.readVarInt();
  }
};
var InteractiveUseEndedMessage = class extends DofusMessage {
  static id = 4234;
  skillId = 0;
  elemId = 0;
  constructor(skillId, elemId) {
    super();
    this.skillId = skillId;
    this.elemId = elemId;
  }
  serialize(writer) {
    writer.writeVarShort(this.skillId);
    writer.writeVarInt(this.elemId);
  }
  deserialize(reader) {
    this.skillId = reader.readVarShort();
    this.elemId = reader.readVarInt();
  }
};
var AllianceInvitedMessage = class extends DofusMessage {
  static id = 6009;
  recruterName;
  allianceInfo;
  recruterId = 0;
  constructor(recruterName, allianceInfo, recruterId) {
    super();
    this.recruterName = recruterName;
    this.allianceInfo = allianceInfo;
    this.recruterId = recruterId;
  }
  serialize(writer) {
    writer.writeUTF(this.recruterName);
    this.allianceInfo.serialize(writer);
    writer.writeVarLong(this.recruterId);
  }
  deserialize(reader) {
    this.recruterName = reader.readUTF();
    this.allianceInfo = new BasicNamedAllianceInformations();
    this.allianceInfo.deserialize(reader);
    this.recruterId = reader.readVarLong();
  }
};
var ExchangeStartOkCraftMessage = class extends DofusMessage {
  static id = 3864;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PartyLocateMembersMessage = class extends AbstractPartyMessage {
  static id = 3205;
  geopositions;
  constructor(partyId, geopositions) {
    super(partyId);
    this.geopositions = geopositions;
  }
  serialize(writer) {
    writer.writeShort(this.geopositions.length);
    this.geopositions.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.geopositions = [];
    const countGeopositions = reader.readShort();
    for (let i = 0; i < countGeopositions; i++) {
      const type = new PartyMemberGeoPosition();
      type.deserialize(reader);
      this.geopositions.push(type);
    }
  }
};
var ObjectsDeletedMessage = class extends DofusMessage {
  static id = 9871;
  objectUID;
  constructor(objectUID) {
    super();
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeShort(this.objectUID.length);
    this.objectUID.forEach((current) => writer.writeVarInt(current));
  }
  deserialize(reader) {
    this.objectUID = [];
    const countObjectUID = reader.readShort();
    for (let i = 0; i < countObjectUID; i++) {
      this.objectUID.push(reader.readVarInt());
    }
  }
};
var PaddockPropertiesMessage = class extends DofusMessage {
  static id = 3194;
  properties;
  constructor(properties) {
    super();
    this.properties = properties;
  }
  serialize(writer) {
    this.properties.serialize(writer);
  }
  deserialize(reader) {
    this.properties = new PaddockInstancesInformations();
    this.properties.deserialize(reader);
  }
};
var GameContextRemoveMultipleElementsWithEventsMessage = class extends GameContextRemoveMultipleElementsMessage {
  static id = 7428;
  elementEventIds;
  constructor(elementsIds, elementEventIds) {
    super(elementsIds);
    this.elementEventIds = elementEventIds;
  }
  serialize(writer) {
    writer.writeShort(this.elementEventIds.length);
    this.elementEventIds.forEach(
      (current) => writer.writeByte(current)
    );
  }
  deserialize(reader) {
    this.elementEventIds = [];
    const countElementEventIds = reader.readShort();
    for (let i = 0; i < countElementEventIds; i++) {
      this.elementEventIds.push(reader.readByte());
    }
  }
};
var ExchangeStartOkMulticraftCustomerMessage = class extends DofusMessage {
  static id = 3514;
  crafterJobLevel = 0;
  skillId = 0;
  constructor(crafterJobLevel, skillId) {
    super();
    this.crafterJobLevel = crafterJobLevel;
    this.skillId = skillId;
  }
  serialize(writer) {
    writer.writeByte(this.crafterJobLevel);
    writer.writeVarInt(this.skillId);
  }
  deserialize(reader) {
    this.crafterJobLevel = reader.readByte();
    this.skillId = reader.readVarInt();
  }
};
var SocialNoticeSetErrorMessage = class extends DofusMessage {
  static id = 3378;
  reason = 0;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var GuildBulletinSetErrorMessage = class extends SocialNoticeSetErrorMessage {
  static id = 1255;
  constructor(reason) {
    super(reason);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var AccessoryPreviewMessage = class extends DofusMessage {
  static id = 5355;
  look;
  constructor(look) {
    super();
    this.look = look;
  }
  serialize(writer) {
    this.look.serialize(writer);
  }
  deserialize(reader) {
    this.look = new EntityLook();
    this.look.deserialize(reader);
  }
};
var ExchangeStartOkNpcShopMessage = class extends DofusMessage {
  static id = 8584;
  objectsInfos;
  tokenId = 0;
  npcSellerId = 0;
  constructor(objectsInfos, tokenId, npcSellerId) {
    super();
    this.objectsInfos = objectsInfos;
    this.tokenId = tokenId;
    this.npcSellerId = npcSellerId;
  }
  serialize(writer) {
    writer.writeShort(this.objectsInfos.length);
    this.objectsInfos.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.tokenId);
    writer.writeDouble(this.npcSellerId);
  }
  deserialize(reader) {
    this.objectsInfos = [];
    const countObjectsInfos = reader.readShort();
    for (let i = 0; i < countObjectsInfos; i++) {
      const type = new ObjectItemToSellInNpcShop();
      type.deserialize(reader);
      this.objectsInfos.push(type);
    }
    this.tokenId = reader.readVarShort();
    this.npcSellerId = reader.readDouble();
  }
};
var PartyUpdateMessage = class extends AbstractPartyEventMessage {
  static id = 1769;
  memberInformations;
  constructor(partyId, memberInformations) {
    super(partyId);
    this.memberInformations = memberInformations;
  }
  serialize(writer) {
    writer.writeShort(this.memberInformations.id);
    this.memberInformations.serialize(writer);
  }
  deserialize(reader) {
    const memberInformationsTypeId = reader.readShort();
    this.memberInformations = new types[memberInformationsTypeId]();
    this.memberInformations.deserialize(reader);
  }
};
var PartyNewMemberMessage = class extends PartyUpdateMessage {
  static id = 7610;
  constructor(partyId, memberInformations) {
    super(partyId, memberInformations);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var InviteInHavenBagMessage = class extends DofusMessage {
  static id = 2929;
  accept = false;
  guestInformations;
  constructor(accept, guestInformations) {
    super();
    this.accept = accept;
    this.guestInformations = guestInformations;
  }
  serialize(writer) {
    writer.writeBoolean(this.accept);
    this.guestInformations.serialize(writer);
  }
  deserialize(reader) {
    this.accept = reader.readBoolean();
    this.guestInformations = new CharacterMinimalInformations();
    this.guestInformations.deserialize(reader);
  }
};
var AllianceInvitationStateRecruterMessage = class extends DofusMessage {
  static id = 2498;
  invitationState = 0;
  recrutedName;
  constructor(invitationState, recrutedName) {
    super();
    this.invitationState = invitationState;
    this.recrutedName = recrutedName;
  }
  serialize(writer) {
    writer.writeByte(this.invitationState);
    writer.writeUTF(this.recrutedName);
  }
  deserialize(reader) {
    this.invitationState = reader.readByte();
    this.recrutedName = reader.readUTF();
  }
};
var ExchangeCrafterJobLevelupMessage = class extends DofusMessage {
  static id = 6591;
  crafterJobLevel = 0;
  constructor(crafterJobLevel) {
    super();
    this.crafterJobLevel = crafterJobLevel;
  }
  serialize(writer) {
    writer.writeByte(this.crafterJobLevel);
  }
  deserialize(reader) {
    this.crafterJobLevel = reader.readByte();
  }
};
var IgnoredAddFailureMessage = class extends DofusMessage {
  static id = 4052;
  reason = 0;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var ExchangeStartedBidSellerMessage = class extends DofusMessage {
  static id = 7532;
  objectsInfos;
  sellerDescriptor;
  constructor(objectsInfos, sellerDescriptor) {
    super();
    this.objectsInfos = objectsInfos;
    this.sellerDescriptor = sellerDescriptor;
  }
  serialize(writer) {
    writer.writeShort(this.objectsInfos.length);
    this.objectsInfos.forEach((current) => {
      current.serialize(writer);
    });
    this.sellerDescriptor.serialize(writer);
  }
  deserialize(reader) {
    this.objectsInfos = [];
    const countObjectsInfos = reader.readShort();
    for (let i = 0; i < countObjectsInfos; i++) {
      const type = new ObjectItemToSellInBid();
      type.deserialize(reader);
      this.objectsInfos.push(type);
    }
    this.sellerDescriptor = new SellerBuyerDescriptor();
    this.sellerDescriptor.deserialize(reader);
  }
};
var EmotePlayMassiveMessage = class extends EmotePlayAbstractMessage {
  static id = 7780;
  actorIds;
  constructor(emoteStartTime, emoteId, actorIds) {
    super(emoteStartTime, emoteId);
    this.actorIds = actorIds;
  }
  serialize(writer) {
    writer.writeShort(this.actorIds.length);
    this.actorIds.forEach((current) => writer.writeDouble(current));
  }
  deserialize(reader) {
    this.actorIds = [];
    const countActorIds = reader.readShort();
    for (let i = 0; i < countActorIds; i++) {
      this.actorIds.push(reader.readDouble());
    }
  }
};
var HaapiValidationMessage = class extends DofusMessage {
  static id = 8710;
  code = 0;
  action = 0;
  constructor(code, action) {
    super();
    this.code = code;
    this.action = action;
  }
  serialize(writer) {
    writer.writeByte(this.code);
    writer.writeByte(this.action);
  }
  deserialize(reader) {
    this.code = reader.readByte();
    this.action = reader.readByte();
  }
};
var IgnoredDeleteResultMessage = class extends DofusMessage {
  static id = 9652;
  tag;
  success = false;
  session = false;
  constructor(tag, success, session) {
    super();
    this.tag = tag;
    this.success = success;
    this.session = session;
  }
  serialize(writer) {
    this.tag.serialize(writer);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.success);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.session);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.tag = new AccountTagInformation();
    this.tag.deserialize(reader);
    const box0 = reader.readByte();
    this.success = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.session = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var CompassUpdatePartyMemberMessage = class extends CompassUpdateMessage {
  static id = 9272;
  active = false;
  memberId = 0;
  constructor(coords, type, active, memberId) {
    super(coords, type);
    this.active = active;
    this.memberId = memberId;
  }
  serialize(writer) {
    writer.writeBoolean(this.active);
    writer.writeVarLong(this.memberId);
  }
  deserialize(reader) {
    this.active = reader.readBoolean();
    this.memberId = reader.readVarLong();
  }
};
var ExchangeObjectPutInBagMessage = class extends ExchangeObjectMessage {
  static id = 9901;
  object_;
  constructor(remote, object_) {
    super(remote);
    this.object_ = object_;
  }
  serialize(writer) {
    this.object_.serialize(writer);
  }
  deserialize(reader) {
    this.object_ = new ObjectItem();
    this.object_.deserialize(reader);
  }
};
var GuildFightPlayersEnemiesListMessage = class extends DofusMessage {
  static id = 9360;
  playerInfo;
  fightId = 0;
  constructor(playerInfo, fightId) {
    super();
    this.playerInfo = playerInfo;
    this.fightId = fightId;
  }
  serialize(writer) {
    writer.writeShort(this.playerInfo.length);
    this.playerInfo.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeDouble(this.fightId);
  }
  deserialize(reader) {
    this.playerInfo = [];
    const countPlayerInfo = reader.readShort();
    for (let i = 0; i < countPlayerInfo; i++) {
      const type = new CharacterMinimalPlusLookInformations();
      type.deserialize(reader);
      this.playerInfo.push(type);
    }
    this.fightId = reader.readDouble();
  }
};
var GameCautiousMapMovementMessage = class extends GameMapMovementMessage {
  static id = 431;
  constructor(forcedDirection, actorId, keyMovements) {
    super(forcedDirection, actorId, keyMovements);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var AchievementFinishedMessage = class extends DofusMessage {
  static id = 8970;
  achievement;
  constructor(achievement) {
    super();
    this.achievement = achievement;
  }
  serialize(writer) {
    this.achievement.serialize(writer);
  }
  deserialize(reader) {
    this.achievement = new AchievementAchievedRewardable();
    this.achievement.deserialize(reader);
  }
};
var AchievementFinishedInformationMessage = class extends AchievementFinishedMessage {
  static id = 9768;
  playerId = 0;
  name;
  constructor(achievement, playerId, name) {
    super(achievement);
    this.playerId = playerId;
    this.name = name;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
    writer.writeUTF(this.name);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
    this.name = reader.readUTF();
  }
};
var EntityTalkMessage = class extends DofusMessage {
  static id = 4321;
  parameters;
  textId = 0;
  entityId = 0;
  constructor(parameters, textId, entityId) {
    super();
    this.parameters = parameters;
    this.textId = textId;
    this.entityId = entityId;
  }
  serialize(writer) {
    writer.writeShort(this.parameters.length);
    this.parameters.forEach((current) => writer.writeUTF(current));
    writer.writeVarShort(this.textId);
    writer.writeDouble(this.entityId);
  }
  deserialize(reader) {
    this.parameters = [];
    const countParameters = reader.readShort();
    for (let i = 0; i < countParameters; i++) {
      this.parameters.push(reader.readUTF());
    }
    this.textId = reader.readVarShort();
    this.entityId = reader.readDouble();
  }
};
var LockableStateUpdateAbstractMessage = class extends DofusMessage {
  static id = 5676;
  locked = false;
  constructor(locked) {
    super();
    this.locked = locked;
  }
  serialize(writer) {
    writer.writeBoolean(this.locked);
  }
  deserialize(reader) {
    this.locked = reader.readBoolean();
  }
};
var LockableStateUpdateStorageMessage = class extends LockableStateUpdateAbstractMessage {
  static id = 5127;
  elementId = 0;
  mapId = 0;
  constructor(locked, elementId, mapId) {
    super(locked);
    this.elementId = elementId;
    this.mapId = mapId;
  }
  serialize(writer) {
    writer.writeVarInt(this.elementId);
    writer.writeDouble(this.mapId);
  }
  deserialize(reader) {
    this.elementId = reader.readVarInt();
    this.mapId = reader.readDouble();
  }
};
var ExchangeStartedBidBuyerMessage = class extends DofusMessage {
  static id = 9037;
  buyerDescriptor;
  constructor(buyerDescriptor) {
    super();
    this.buyerDescriptor = buyerDescriptor;
  }
  serialize(writer) {
    this.buyerDescriptor.serialize(writer);
  }
  deserialize(reader) {
    this.buyerDescriptor = new SellerBuyerDescriptor();
    this.buyerDescriptor.deserialize(reader);
  }
};
var AllianceListMessage = class extends DofusMessage {
  static id = 3861;
  alliances;
  constructor(alliances) {
    super();
    this.alliances = alliances;
  }
  serialize(writer) {
    writer.writeShort(this.alliances.length);
    this.alliances.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.alliances = [];
    const countAlliances = reader.readShort();
    for (let i = 0; i < countAlliances; i++) {
      const type = new AllianceFactSheetInformations();
      type.deserialize(reader);
      this.alliances.push(type);
    }
  }
};
var JobCrafterDirectoryEntryMessage = class extends DofusMessage {
  static id = 3827;
  playerInfo;
  playerLook;
  jobInfoList;
  constructor(playerInfo, playerLook, jobInfoList) {
    super();
    this.playerInfo = playerInfo;
    this.playerLook = playerLook;
    this.jobInfoList = jobInfoList;
  }
  serialize(writer) {
    this.playerInfo.serialize(writer);
    this.playerLook.serialize(writer);
    writer.writeShort(this.jobInfoList.length);
    this.jobInfoList.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
    this.playerInfo.deserialize(reader);
    this.playerLook = new EntityLook();
    this.playerLook.deserialize(reader);
    this.jobInfoList = [];
    const countJobInfoList = reader.readShort();
    for (let i = 0; i < countJobInfoList; i++) {
      const type = new JobCrafterDirectoryEntryJobInfo();
      type.deserialize(reader);
      this.jobInfoList.push(type);
    }
  }
};
var ObtainedItemMessage = class extends DofusMessage {
  static id = 4201;
  baseQuantity = 0;
  genericId = 0;
  constructor(baseQuantity, genericId) {
    super();
    this.baseQuantity = baseQuantity;
    this.genericId = genericId;
  }
  serialize(writer) {
    writer.writeVarInt(this.baseQuantity);
    writer.writeVarShort(this.genericId);
  }
  deserialize(reader) {
    this.baseQuantity = reader.readVarInt();
    this.genericId = reader.readVarShort();
  }
};
var ObtainedItemWithBonusMessage = class extends ObtainedItemMessage {
  static id = 7390;
  bonusQuantity = 0;
  constructor(baseQuantity, genericId, bonusQuantity) {
    super(baseQuantity, genericId);
    this.bonusQuantity = bonusQuantity;
  }
  serialize(writer) {
    writer.writeVarInt(this.bonusQuantity);
  }
  deserialize(reader) {
    this.bonusQuantity = reader.readVarInt();
  }
};
var SpellListMessage = class extends DofusMessage {
  static id = 4091;
  spells;
  spellPrevisualization = false;
  constructor(spells, spellPrevisualization) {
    super();
    this.spells = spells;
    this.spellPrevisualization = spellPrevisualization;
  }
  serialize(writer) {
    writer.writeShort(this.spells.length);
    this.spells.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeBoolean(this.spellPrevisualization);
  }
  deserialize(reader) {
    this.spells = [];
    const countSpells = reader.readShort();
    for (let i = 0; i < countSpells; i++) {
      const type = new SpellItem();
      type.deserialize(reader);
      this.spells.push(type);
    }
    this.spellPrevisualization = reader.readBoolean();
  }
};
var GuildPaddockRemovedMessage = class extends DofusMessage {
  static id = 9960;
  paddockId = 0;
  constructor(paddockId) {
    super();
    this.paddockId = paddockId;
  }
  serialize(writer) {
    writer.writeDouble(this.paddockId);
  }
  deserialize(reader) {
    this.paddockId = reader.readDouble();
  }
};
var BreachInvitationResponseMessage = class extends DofusMessage {
  static id = 6585;
  accept = false;
  guest;
  constructor(accept, guest) {
    super();
    this.accept = accept;
    this.guest = guest;
  }
  serialize(writer) {
    writer.writeBoolean(this.accept);
    this.guest.serialize(writer);
  }
  deserialize(reader) {
    this.accept = reader.readBoolean();
    this.guest = new CharacterMinimalInformations();
    this.guest.deserialize(reader);
  }
};
var GuildLeftMessage = class extends DofusMessage {
  static id = 2770;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var EditHavenBagStartMessage = class extends DofusMessage {
  static id = 7113;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PartyRefuseInvitationNotificationMessage = class extends AbstractPartyEventMessage {
  static id = 349;
  guestId = 0;
  constructor(partyId, guestId) {
    super(partyId);
    this.guestId = guestId;
  }
  serialize(writer) {
    writer.writeVarLong(this.guestId);
  }
  deserialize(reader) {
    this.guestId = reader.readVarLong();
  }
};
var CharacterNameSuggestionFailureMessage = class extends DofusMessage {
  static id = 3074;
  reason = 1;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var SelectedServerRefusedMessage = class extends DofusMessage {
  static id = 8116;
  serverStatus = 1;
  error = 1;
  serverId = 0;
  constructor(serverStatus, error, serverId) {
    super();
    this.serverStatus = serverStatus;
    this.error = error;
    this.serverId = serverId;
  }
  serialize(writer) {
    writer.writeByte(this.serverStatus);
    writer.writeByte(this.error);
    writer.writeVarShort(this.serverId);
  }
  deserialize(reader) {
    this.serverStatus = reader.readByte();
    this.error = reader.readByte();
    this.serverId = reader.readVarShort();
  }
};
var PrismInfoInValidMessage = class extends DofusMessage {
  static id = 7307;
  reason = 0;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var ExchangeBidHouseBuyResultMessage = class extends DofusMessage {
  static id = 3743;
  bought = false;
  uid = 0;
  constructor(bought, uid) {
    super();
    this.bought = bought;
    this.uid = uid;
  }
  serialize(writer) {
    writer.writeBoolean(this.bought);
    writer.writeVarInt(this.uid);
  }
  deserialize(reader) {
    this.bought = reader.readBoolean();
    this.uid = reader.readVarInt();
  }
};
var ChatCommunityChannelCommunityMessage = class extends DofusMessage {
  static id = 9671;
  communityId = 0;
  constructor(communityId) {
    super();
    this.communityId = communityId;
  }
  serialize(writer) {
    writer.writeShort(this.communityId);
  }
  deserialize(reader) {
    this.communityId = reader.readShort();
  }
};
var IdolPartyLostMessage = class extends DofusMessage {
  static id = 7502;
  idolId = 0;
  constructor(idolId) {
    super();
    this.idolId = idolId;
  }
  serialize(writer) {
    writer.writeVarShort(this.idolId);
  }
  deserialize(reader) {
    this.idolId = reader.readVarShort();
  }
};
var ExchangePodsModifiedMessage = class extends ExchangeObjectMessage {
  static id = 7130;
  maxWeight = 0;
  currentWeight = 0;
  constructor(remote, maxWeight, currentWeight) {
    super(remote);
    this.maxWeight = maxWeight;
    this.currentWeight = currentWeight;
  }
  serialize(writer) {
    writer.writeVarInt(this.maxWeight);
    writer.writeVarInt(this.currentWeight);
  }
  deserialize(reader) {
    this.maxWeight = reader.readVarInt();
    this.currentWeight = reader.readVarInt();
  }
};
var TaxCollectorDialogQuestionBasicMessage = class extends DofusMessage {
  static id = 1694;
  guildInfo;
  constructor(guildInfo) {
    super();
    this.guildInfo = guildInfo;
  }
  serialize(writer) {
    this.guildInfo.serialize(writer);
  }
  deserialize(reader) {
    this.guildInfo = new BasicGuildInformations();
    this.guildInfo.deserialize(reader);
  }
};
var TaxCollectorDialogQuestionExtendedMessage = class extends TaxCollectorDialogQuestionBasicMessage {
  static id = 625;
  pods = 0;
  experience = 0;
  kamas = 0;
  maxPods = 0;
  taxCollectorAttack = 0;
  wisdom = 0;
  itemsValue = 0;
  prospecting = 0;
  taxCollectorsCount = 0;
  constructor(guildInfo, pods, experience, kamas, maxPods, taxCollectorAttack, wisdom, itemsValue, prospecting, taxCollectorsCount) {
    super(guildInfo);
    this.pods = pods;
    this.experience = experience;
    this.kamas = kamas;
    this.maxPods = maxPods;
    this.taxCollectorAttack = taxCollectorAttack;
    this.wisdom = wisdom;
    this.itemsValue = itemsValue;
    this.prospecting = prospecting;
    this.taxCollectorsCount = taxCollectorsCount;
  }
  serialize(writer) {
    writer.writeVarInt(this.pods);
    writer.writeVarLong(this.experience);
    writer.writeVarLong(this.kamas);
    writer.writeVarShort(this.maxPods);
    writer.writeInt(this.taxCollectorAttack);
    writer.writeVarShort(this.wisdom);
    writer.writeVarLong(this.itemsValue);
    writer.writeVarShort(this.prospecting);
    writer.writeByte(this.taxCollectorsCount);
  }
  deserialize(reader) {
    this.pods = reader.readVarInt();
    this.experience = reader.readVarLong();
    this.kamas = reader.readVarLong();
    this.maxPods = reader.readVarShort();
    this.taxCollectorAttack = reader.readInt();
    this.wisdom = reader.readVarShort();
    this.itemsValue = reader.readVarLong();
    this.prospecting = reader.readVarShort();
    this.taxCollectorsCount = reader.readByte();
  }
};
var AllianceTaxCollectorDialogQuestionExtendedMessage = class extends TaxCollectorDialogQuestionExtendedMessage {
  static id = 7917;
  alliance;
  constructor(guildInfo, pods, experience, kamas, maxPods, taxCollectorAttack, wisdom, itemsValue, prospecting, taxCollectorsCount, alliance) {
    super(
      guildInfo,
      pods,
      experience,
      kamas,
      maxPods,
      taxCollectorAttack,
      wisdom,
      itemsValue,
      prospecting,
      taxCollectorsCount
    );
    this.alliance = alliance;
  }
  serialize(writer) {
    this.alliance.serialize(writer);
  }
  deserialize(reader) {
    this.alliance = new BasicNamedAllianceInformations();
    this.alliance.deserialize(reader);
  }
};
var TaxCollectorStateUpdateMessage = class extends DofusMessage {
  static id = 7095;
  state = 0;
  uniqueId = 0;
  constructor(state, uniqueId) {
    super();
    this.state = state;
    this.uniqueId = uniqueId;
  }
  serialize(writer) {
    writer.writeByte(this.state);
    writer.writeDouble(this.uniqueId);
  }
  deserialize(reader) {
    this.state = reader.readByte();
    this.uniqueId = reader.readDouble();
  }
};
var ExchangeBidHouseGenericItemRemovedMessage = class extends DofusMessage {
  static id = 9780;
  objGenericId = 0;
  constructor(objGenericId) {
    super();
    this.objGenericId = objGenericId;
  }
  serialize(writer) {
    writer.writeVarShort(this.objGenericId);
  }
  deserialize(reader) {
    this.objGenericId = reader.readVarShort();
  }
};
var QuestStepInfoMessage = class extends DofusMessage {
  static id = 7690;
  infos;
  constructor(infos) {
    super();
    this.infos = infos;
  }
  serialize(writer) {
    writer.writeShort(this.infos.id);
    this.infos.serialize(writer);
  }
  deserialize(reader) {
    const infosTypeId = reader.readShort();
    this.infos = new types[infosTypeId]();
    this.infos.deserialize(reader);
  }
};
var ServerOptionalFeaturesMessage = class extends DofusMessage {
  static id = 189;
  features;
  constructor(features) {
    super();
    this.features = features;
  }
  serialize(writer) {
    writer.writeShort(this.features.length);
    this.features.forEach((current) => writer.writeByte(current));
  }
  deserialize(reader) {
    this.features = [];
    const countFeatures = reader.readShort();
    for (let i = 0; i < countFeatures; i++) {
      this.features.push(reader.readByte());
    }
  }
};
var BreachRoomUnlockResultMessage = class extends DofusMessage {
  static id = 3212;
  result = 0;
  roomId = 0;
  constructor(result, roomId) {
    super();
    this.result = result;
    this.roomId = roomId;
  }
  serialize(writer) {
    writer.writeByte(this.result);
    writer.writeByte(this.roomId);
  }
  deserialize(reader) {
    this.result = reader.readByte();
    this.roomId = reader.readByte();
  }
};
var DungeonPartyFinderRoomContentUpdateMessage = class extends DofusMessage {
  static id = 6719;
  addedPlayers;
  dungeonId = 0;
  removedPlayersIds;
  constructor(addedPlayers, dungeonId, removedPlayersIds) {
    super();
    this.addedPlayers = addedPlayers;
    this.dungeonId = dungeonId;
    this.removedPlayersIds = removedPlayersIds;
  }
  serialize(writer) {
    writer.writeShort(this.addedPlayers.length);
    this.addedPlayers.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.dungeonId);
    writer.writeShort(this.removedPlayersIds.length);
    this.removedPlayersIds.forEach(
      (current) => writer.writeVarLong(current)
    );
  }
  deserialize(reader) {
    this.addedPlayers = [];
    const countAddedPlayers = reader.readShort();
    for (let i = 0; i < countAddedPlayers; i++) {
      const type = new DungeonPartyFinderPlayer();
      type.deserialize(reader);
      this.addedPlayers.push(type);
    }
    this.dungeonId = reader.readVarShort();
    this.removedPlayersIds = [];
    const countRemovedPlayersIds = reader.readShort();
    for (let i = 0; i < countRemovedPlayersIds; i++) {
      this.removedPlayersIds.push(reader.readVarLong());
    }
  }
};
var QuestStepValidatedMessage = class extends DofusMessage {
  static id = 6173;
  stepId = 0;
  questId = 0;
  constructor(stepId, questId) {
    super();
    this.stepId = stepId;
    this.questId = questId;
  }
  serialize(writer) {
    writer.writeVarShort(this.stepId);
    writer.writeVarShort(this.questId);
  }
  deserialize(reader) {
    this.stepId = reader.readVarShort();
    this.questId = reader.readVarShort();
  }
};
var CompassUpdatePvpSeekMessage = class extends CompassUpdateMessage {
  static id = 5714;
  memberName;
  memberId = 0;
  constructor(coords, type, memberName, memberId) {
    super(coords, type);
    this.memberName = memberName;
    this.memberId = memberId;
  }
  serialize(writer) {
    writer.writeUTF(this.memberName);
    writer.writeVarLong(this.memberId);
  }
  deserialize(reader) {
    this.memberName = reader.readUTF();
    this.memberId = reader.readVarLong();
  }
};
var AllianceFactsMessage = class extends DofusMessage {
  static id = 6820;
  leaderCharacterName;
  infos;
  guilds;
  controlledSubareaIds;
  leaderCharacterId = 0;
  constructor(leaderCharacterName, infos, guilds, controlledSubareaIds, leaderCharacterId) {
    super();
    this.leaderCharacterName = leaderCharacterName;
    this.infos = infos;
    this.guilds = guilds;
    this.controlledSubareaIds = controlledSubareaIds;
    this.leaderCharacterId = leaderCharacterId;
  }
  serialize(writer) {
    writer.writeUTF(this.leaderCharacterName);
    writer.writeShort(this.infos.id);
    this.infos.serialize(writer);
    writer.writeShort(this.guilds.length);
    this.guilds.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.controlledSubareaIds.length);
    this.controlledSubareaIds.forEach(
      (current) => writer.writeVarShort(current)
    );
    writer.writeVarLong(this.leaderCharacterId);
  }
  deserialize(reader) {
    this.leaderCharacterName = reader.readUTF();
    const infosTypeId = reader.readShort();
    this.infos = new types[infosTypeId]();
    this.infos.deserialize(reader);
    this.guilds = [];
    const countGuilds = reader.readShort();
    for (let i = 0; i < countGuilds; i++) {
      const type = new GuildInAllianceInformations();
      type.deserialize(reader);
      this.guilds.push(type);
    }
    this.controlledSubareaIds = [];
    const countControlledSubareaIds = reader.readShort();
    for (let i = 0; i < countControlledSubareaIds; i++) {
      this.controlledSubareaIds.push(reader.readVarShort());
    }
    this.leaderCharacterId = reader.readVarLong();
  }
};
var PrismFightDefenderAddMessage = class extends DofusMessage {
  static id = 58;
  fightId = 0;
  defender;
  subAreaId = 0;
  constructor(fightId, defender, subAreaId) {
    super();
    this.fightId = fightId;
    this.defender = defender;
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeVarShort(this.fightId);
    writer.writeShort(this.defender.id);
    this.defender.serialize(writer);
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.fightId = reader.readVarShort();
    const defenderTypeId = reader.readShort();
    this.defender = new types[defenderTypeId]();
    this.defender.deserialize(reader);
    this.subAreaId = reader.readVarShort();
  }
};
var JobCrafterDirectoryAddMessage = class extends DofusMessage {
  static id = 1829;
  listEntry;
  constructor(listEntry) {
    super();
    this.listEntry = listEntry;
  }
  serialize(writer) {
    this.listEntry.serialize(writer);
  }
  deserialize(reader) {
    this.listEntry = new JobCrafterDirectoryListEntry();
    this.listEntry.deserialize(reader);
  }
};
var ShortcutBarSwapErrorMessage = class extends DofusMessage {
  static id = 3330;
  error = 0;
  constructor(error) {
    super();
    this.error = error;
  }
  serialize(writer) {
    writer.writeByte(this.error);
  }
  deserialize(reader) {
    this.error = reader.readByte();
  }
};
var PartyInvitationDungeonMessage = class extends PartyInvitationMessage {
  static id = 9837;
  dungeonId = 0;
  constructor(partyId, toId, fromName, partyType, partyName, maxParticipants, fromId, dungeonId) {
    super(
      partyId,
      toId,
      fromName,
      partyType,
      partyName,
      maxParticipants,
      fromId
    );
    this.dungeonId = dungeonId;
  }
  serialize(writer) {
    writer.writeVarShort(this.dungeonId);
  }
  deserialize(reader) {
    this.dungeonId = reader.readVarShort();
  }
};
var BreachBudgetMessage = class extends DofusMessage {
  static id = 1903;
  bugdet = 0;
  constructor(bugdet) {
    super();
    this.bugdet = bugdet;
  }
  serialize(writer) {
    writer.writeVarInt(this.bugdet);
  }
  deserialize(reader) {
    this.bugdet = reader.readVarInt();
  }
};
var JobAllowMultiCraftRequestMessage = class extends DofusMessage {
  static id = 5111;
  enabled = false;
  constructor(enabled) {
    super();
    this.enabled = enabled;
  }
  serialize(writer) {
    writer.writeBoolean(this.enabled);
  }
  deserialize(reader) {
    this.enabled = reader.readBoolean();
  }
};
var JobMultiCraftAvailableSkillsMessage = class extends JobAllowMultiCraftRequestMessage {
  static id = 1246;
  skills;
  playerId = 0;
  constructor(enabled, skills, playerId) {
    super(enabled);
    this.skills = skills;
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeShort(this.skills.length);
    this.skills.forEach((current) => writer.writeVarShort(current));
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.skills = [];
    const countSkills = reader.readShort();
    for (let i = 0; i < countSkills; i++) {
      this.skills.push(reader.readVarShort());
    }
    this.playerId = reader.readVarLong();
  }
};
var ExchangeMountsStableAddMessage = class extends DofusMessage {
  static id = 8697;
  mountDescription;
  constructor(mountDescription) {
    super();
    this.mountDescription = mountDescription;
  }
  serialize(writer) {
    writer.writeShort(this.mountDescription.length);
    this.mountDescription.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.mountDescription = [];
    const countMountDescription = reader.readShort();
    for (let i = 0; i < countMountDescription; i++) {
      const type = new MountClientData();
      type.deserialize(reader);
      this.mountDescription.push(type);
    }
  }
};
var FriendAddedMessage = class extends DofusMessage {
  static id = 9476;
  friendAdded;
  constructor(friendAdded) {
    super();
    this.friendAdded = friendAdded;
  }
  serialize(writer) {
    writer.writeShort(this.friendAdded.id);
    this.friendAdded.serialize(writer);
  }
  deserialize(reader) {
    const friendAddedTypeId = reader.readShort();
    this.friendAdded = new types[friendAddedTypeId]();
    this.friendAdded.deserialize(reader);
  }
};
var CharacterCanBeCreatedResultMessage = class extends DofusMessage {
  static id = 9527;
  yesYouCan = false;
  constructor(yesYouCan) {
    super();
    this.yesYouCan = yesYouCan;
  }
  serialize(writer) {
    writer.writeBoolean(this.yesYouCan);
  }
  deserialize(reader) {
    this.yesYouCan = reader.readBoolean();
  }
};
var NpcGenericActionFailureMessage = class extends DofusMessage {
  static id = 1901;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var AccountHouseMessage = class extends DofusMessage {
  static id = 7236;
  houses;
  constructor(houses) {
    super();
    this.houses = houses;
  }
  serialize(writer) {
    writer.writeShort(this.houses.length);
    this.houses.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.houses = [];
    const countHouses = reader.readShort();
    for (let i = 0; i < countHouses; i++) {
      const type = new AccountHouseInformations();
      type.deserialize(reader);
      this.houses.push(type);
    }
  }
};
var AcquaintanceSearchErrorMessage = class extends DofusMessage {
  static id = 6994;
  reason = 0;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var ExchangeStartOkRecycleTradeMessage = class extends DofusMessage {
  static id = 9169;
  percentToPlayer = 0;
  percentToPrism = 0;
  constructor(percentToPlayer, percentToPrism) {
    super();
    this.percentToPlayer = percentToPlayer;
    this.percentToPrism = percentToPrism;
  }
  serialize(writer) {
    writer.writeShort(this.percentToPlayer);
    writer.writeShort(this.percentToPrism);
  }
  deserialize(reader) {
    this.percentToPlayer = reader.readShort();
    this.percentToPrism = reader.readShort();
  }
};
var StatsUpgradeResultMessage = class extends DofusMessage {
  static id = 4083;
  nbCharacBoost = 0;
  result = 0;
  constructor(nbCharacBoost, result) {
    super();
    this.nbCharacBoost = nbCharacBoost;
    this.result = result;
  }
  serialize(writer) {
    writer.writeVarShort(this.nbCharacBoost);
    writer.writeByte(this.result);
  }
  deserialize(reader) {
    this.nbCharacBoost = reader.readVarShort();
    this.result = reader.readByte();
  }
};
var MapRunningFightListMessage = class extends DofusMessage {
  static id = 1018;
  fights;
  constructor(fights) {
    super();
    this.fights = fights;
  }
  serialize(writer) {
    writer.writeShort(this.fights.length);
    this.fights.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.fights = [];
    const countFights = reader.readShort();
    for (let i = 0; i < countFights; i++) {
      const type = new FightExternalInformations();
      type.deserialize(reader);
      this.fights.push(type);
    }
  }
};
var SequenceNumberRequestMessage = class extends DofusMessage {
  static id = 8200;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PartyInvitationDetailsMessage = class extends AbstractPartyMessage {
  static id = 3615;
  guests;
  partyType = 0;
  leaderId = 0;
  members;
  partyName;
  fromId = 0;
  fromName;
  constructor(partyId, guests, partyType, leaderId, members, partyName, fromId, fromName) {
    super(partyId);
    this.guests = guests;
    this.partyType = partyType;
    this.leaderId = leaderId;
    this.members = members;
    this.partyName = partyName;
    this.fromId = fromId;
    this.fromName = fromName;
  }
  serialize(writer) {
    writer.writeShort(this.guests.length);
    this.guests.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeByte(this.partyType);
    writer.writeVarLong(this.leaderId);
    writer.writeShort(this.members.length);
    this.members.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeUTF(this.partyName);
    writer.writeVarLong(this.fromId);
    writer.writeUTF(this.fromName);
  }
  deserialize(reader) {
    this.guests = [];
    const countGuests = reader.readShort();
    for (let i = 0; i < countGuests; i++) {
      const type = new PartyGuestInformations();
      type.deserialize(reader);
      this.guests.push(type);
    }
    this.partyType = reader.readByte();
    this.leaderId = reader.readVarLong();
    this.members = [];
    const countMembers = reader.readShort();
    for (let i = 0; i < countMembers; i++) {
      const membersTypeId = reader.readShort();
      const type = new types[membersTypeId]();
      type.deserialize(reader);
      this.members.push(type);
    }
    this.partyName = reader.readUTF();
    this.fromId = reader.readVarLong();
    this.fromName = reader.readUTF();
  }
};
var PartyInvitationDungeonDetailsMessage = class extends PartyInvitationDetailsMessage {
  static id = 7340;
  playersDungeonReady;
  dungeonId = 0;
  constructor(partyId, guests, partyType, leaderId, members, partyName, fromId, fromName, playersDungeonReady, dungeonId) {
    super(
      partyId,
      guests,
      partyType,
      leaderId,
      members,
      partyName,
      fromId,
      fromName
    );
    this.playersDungeonReady = playersDungeonReady;
    this.dungeonId = dungeonId;
  }
  serialize(writer) {
    writer.writeShort(this.playersDungeonReady.length);
    this.playersDungeonReady.forEach(
      (current) => writer.writeBoolean(current)
    );
    writer.writeVarShort(this.dungeonId);
  }
  deserialize(reader) {
    this.playersDungeonReady = [];
    const countPlayersDungeonReady = reader.readShort();
    for (let i = 0; i < countPlayersDungeonReady; i++) {
      this.playersDungeonReady.push(reader.readBoolean());
    }
    this.dungeonId = reader.readVarShort();
  }
};
var ExchangeTypesExchangerDescriptionForUserMessage = class extends DofusMessage {
  static id = 8522;
  typeDescription;
  objectType = 0;
  constructor(typeDescription, objectType) {
    super();
    this.typeDescription = typeDescription;
    this.objectType = objectType;
  }
  serialize(writer) {
    writer.writeShort(this.typeDescription.length);
    this.typeDescription.forEach(
      (current) => writer.writeVarInt(current)
    );
    writer.writeInt(this.objectType);
  }
  deserialize(reader) {
    this.typeDescription = [];
    const countTypeDescription = reader.readShort();
    for (let i = 0; i < countTypeDescription; i++) {
      this.typeDescription.push(reader.readVarInt());
    }
    this.objectType = reader.readInt();
  }
};
var JobCrafterDirectorySettingsMessage = class extends DofusMessage {
  static id = 8518;
  craftersSettings;
  constructor(craftersSettings) {
    super();
    this.craftersSettings = craftersSettings;
  }
  serialize(writer) {
    writer.writeShort(this.craftersSettings.length);
    this.craftersSettings.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.craftersSettings = [];
    const countCraftersSettings = reader.readShort();
    for (let i = 0; i < countCraftersSettings; i++) {
      const type = new JobCrafterDirectorySettings();
      type.deserialize(reader);
      this.craftersSettings.push(type);
    }
  }
};
var MoodSmileyUpdateMessage = class extends DofusMessage {
  static id = 8249;
  smileyId = 0;
  playerId = 0;
  accountId = 0;
  constructor(smileyId, playerId, accountId) {
    super();
    this.smileyId = smileyId;
    this.playerId = playerId;
    this.accountId = accountId;
  }
  serialize(writer) {
    writer.writeVarShort(this.smileyId);
    writer.writeVarLong(this.playerId);
    writer.writeInt(this.accountId);
  }
  deserialize(reader) {
    this.smileyId = reader.readVarShort();
    this.playerId = reader.readVarLong();
    this.accountId = reader.readInt();
  }
};
var GameRolePlayArenaInvitationCandidatesAnswerMessage = class extends DofusMessage {
  static id = 4913;
  candidates;
  constructor(candidates) {
    super();
    this.candidates = candidates;
  }
  serialize(writer) {
    writer.writeShort(this.candidates.length);
    this.candidates.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.candidates = [];
    const countCandidates = reader.readShort();
    for (let i = 0; i < countCandidates; i++) {
      const type = new LeagueFriendInformations();
      type.deserialize(reader);
      this.candidates.push(type);
    }
  }
};
var EmotePlayMessage = class extends EmotePlayAbstractMessage {
  static id = 9462;
  accountId = 0;
  actorId = 0;
  constructor(emoteStartTime, emoteId, accountId, actorId) {
    super(emoteStartTime, emoteId);
    this.accountId = accountId;
    this.actorId = actorId;
  }
  serialize(writer) {
    writer.writeInt(this.accountId);
    writer.writeDouble(this.actorId);
  }
  deserialize(reader) {
    this.accountId = reader.readInt();
    this.actorId = reader.readDouble();
  }
};
var SelectedServerDataMessage = class extends DofusMessage {
  static id = 3966;
  serverId = 0;
  address;
  ports;
  ticket;
  canCreateNewCharacter = false;
  constructor(serverId, address, ports, ticket, canCreateNewCharacter) {
    super();
    this.serverId = serverId;
    this.address = address;
    this.ports = ports;
    this.ticket = ticket;
    this.canCreateNewCharacter = canCreateNewCharacter;
  }
  serialize(writer) {
    writer.writeVarShort(this.serverId);
    writer.writeUTF(this.address);
    writer.writeShort(this.ports.length);
    this.ports.forEach((current) => writer.writeVarShort(current));
    writer.writeVarInt(this.ticket.length);
    this.ticket.forEach((current) => writer.writeByte(current));
    writer.writeBoolean(this.canCreateNewCharacter);
  }
  deserialize(reader) {
    this.serverId = reader.readVarShort();
    this.address = reader.readUTF();
    this.ports = [];
    const countPorts = reader.readShort();
    for (let i = 0; i < countPorts; i++) {
      this.ports.push(reader.readVarShort());
    }
    this.ticket = [];
    const countTicket = reader.readVarInt();
    for (let i = 0; i < countTicket; i++) {
      this.ticket.push(reader.readByte());
    }
    this.canCreateNewCharacter = reader.readBoolean();
  }
};
var SelectedServerDataExtendedMessage = class extends SelectedServerDataMessage {
  static id = 2850;
  servers;
  constructor(serverId, address, ports, ticket, canCreateNewCharacter, servers) {
    super(serverId, address, ports, ticket, canCreateNewCharacter);
    this.servers = servers;
  }
  serialize(writer) {
    writer.writeShort(this.servers.length);
    this.servers.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.servers = [];
    const countServers = reader.readShort();
    for (let i = 0; i < countServers; i++) {
      const type = new GameServerInformations();
      type.deserialize(reader);
      this.servers.push(type);
    }
  }
};
var FriendWarnOnConnectionStateMessage = class extends DofusMessage {
  static id = 6412;
  enable = false;
  constructor(enable) {
    super();
    this.enable = enable;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
  }
};
var DungeonPartyFinderRoomContentMessage = class extends DofusMessage {
  static id = 5100;
  players;
  dungeonId = 0;
  constructor(players, dungeonId) {
    super();
    this.players = players;
    this.dungeonId = dungeonId;
  }
  serialize(writer) {
    writer.writeShort(this.players.length);
    this.players.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.dungeonId);
  }
  deserialize(reader) {
    this.players = [];
    const countPlayers = reader.readShort();
    for (let i = 0; i < countPlayers; i++) {
      const type = new DungeonPartyFinderPlayer();
      type.deserialize(reader);
      this.players.push(type);
    }
    this.dungeonId = reader.readVarShort();
  }
};
var BasicDateMessage = class extends DofusMessage {
  static id = 4911;
  year = 0;
  month = 0;
  day = 0;
  constructor(year, month, day) {
    super();
    this.year = year;
    this.month = month;
    this.day = day;
  }
  serialize(writer) {
    writer.writeShort(this.year);
    writer.writeByte(this.month);
    writer.writeByte(this.day);
  }
  deserialize(reader) {
    this.year = reader.readShort();
    this.month = reader.readByte();
    this.day = reader.readByte();
  }
};
var GuildApplicationReceivedMessage = class extends DofusMessage {
  static id = 3891;
  playerId = 0;
  playerName;
  constructor(playerId, playerName) {
    super();
    this.playerId = playerId;
    this.playerName = playerName;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
    writer.writeUTF(this.playerName);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
    this.playerName = reader.readUTF();
  }
};
var ExchangeMountsStableBornAddMessage = class extends ExchangeMountsStableAddMessage {
  static id = 1340;
  constructor(mountDescription) {
    super(mountDescription);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var JobDescriptionMessage = class extends DofusMessage {
  static id = 8838;
  jobsDescription;
  constructor(jobsDescription) {
    super();
    this.jobsDescription = jobsDescription;
  }
  serialize(writer) {
    writer.writeShort(this.jobsDescription.length);
    this.jobsDescription.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.jobsDescription = [];
    const countJobsDescription = reader.readShort();
    for (let i = 0; i < countJobsDescription; i++) {
      const type = new JobDescription();
      type.deserialize(reader);
      this.jobsDescription.push(type);
    }
  }
};
var AccountLoggingKickedMessage = class extends DofusMessage {
  static id = 7661;
  minutes = 0;
  hours = 0;
  days = 0;
  constructor(minutes, hours, days) {
    super();
    this.minutes = minutes;
    this.hours = hours;
    this.days = days;
  }
  serialize(writer) {
    writer.writeByte(this.minutes);
    writer.writeByte(this.hours);
    writer.writeVarShort(this.days);
  }
  deserialize(reader) {
    this.minutes = reader.readByte();
    this.hours = reader.readByte();
    this.days = reader.readVarShort();
  }
};
var ExchangeObjectModifiedInBagMessage = class extends ExchangeObjectMessage {
  static id = 1456;
  object_;
  constructor(remote, object_) {
    super(remote);
    this.object_ = object_;
  }
  serialize(writer) {
    this.object_.serialize(writer);
  }
  deserialize(reader) {
    this.object_ = new ObjectItem();
    this.object_.deserialize(reader);
  }
};
var DebtsUpdateMessage = class extends DofusMessage {
  static id = 2524;
  debts;
  action = 0;
  constructor(debts, action) {
    super();
    this.debts = debts;
    this.action = action;
  }
  serialize(writer) {
    writer.writeShort(this.debts.length);
    this.debts.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeByte(this.action);
  }
  deserialize(reader) {
    this.debts = [];
    const countDebts = reader.readShort();
    for (let i = 0; i < countDebts; i++) {
      const debtsTypeId = reader.readShort();
      const type = new types[debtsTypeId]();
      type.deserialize(reader);
      this.debts.push(type);
    }
    this.action = reader.readByte();
  }
};
var GameRolePlayArenaUpdatePlayerInfosMessage = class extends DofusMessage {
  static id = 8202;
  solo;
  constructor(solo) {
    super();
    this.solo = solo;
  }
  serialize(writer) {
    this.solo.serialize(writer);
  }
  deserialize(reader) {
    this.solo = new ArenaRankInfos();
    this.solo.deserialize(reader);
  }
};
var GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage = class extends GameRolePlayArenaUpdatePlayerInfosMessage {
  static id = 6540;
  duel;
  team;
  constructor(solo, duel, team) {
    super(solo);
    this.duel = duel;
    this.team = team;
  }
  serialize(writer) {
    this.duel.serialize(writer);
    this.team.serialize(writer);
  }
  deserialize(reader) {
    this.duel = new ArenaRankInfos();
    this.duel.deserialize(reader);
    this.team = new ArenaRankInfos();
    this.team.deserialize(reader);
  }
};
var GuildCreationResultMessage = class extends DofusMessage {
  static id = 42;
  result = 0;
  constructor(result) {
    super();
    this.result = result;
  }
  serialize(writer) {
    writer.writeByte(this.result);
  }
  deserialize(reader) {
    this.result = reader.readByte();
  }
};
var ExchangeStoppedMessage = class extends DofusMessage {
  static id = 8743;
  id_ = 0;
  constructor(id_) {
    super();
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeVarLong(this.id_);
  }
  deserialize(reader) {
    this.id_ = reader.readVarLong();
  }
};
var ExchangeShopStockMultiMovementUpdatedMessage = class extends DofusMessage {
  static id = 8646;
  objectInfoList;
  constructor(objectInfoList) {
    super();
    this.objectInfoList = objectInfoList;
  }
  serialize(writer) {
    writer.writeShort(this.objectInfoList.length);
    this.objectInfoList.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.objectInfoList = [];
    const countObjectInfoList = reader.readShort();
    for (let i = 0; i < countObjectInfoList; i++) {
      const type = new ObjectItemToSell();
      type.deserialize(reader);
      this.objectInfoList.push(type);
    }
  }
};
var AccountInformationsUpdateMessage = class extends DofusMessage {
  static id = 3664;
  subscriptionEndDate = 0;
  constructor(subscriptionEndDate) {
    super();
    this.subscriptionEndDate = subscriptionEndDate;
  }
  serialize(writer) {
    writer.writeDouble(this.subscriptionEndDate);
  }
  deserialize(reader) {
    this.subscriptionEndDate = reader.readDouble();
  }
};
var TitleSelectErrorMessage = class extends DofusMessage {
  static id = 2014;
  reason = 0;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var AccountCapabilitiesMessage = class extends DofusMessage {
  static id = 8644;
  status = -1;
  breedsVisible = 0;
  accountId = 0;
  breedsAvailable = 0;
  tutorialAvailable = false;
  canCreateNewCharacter = false;
  constructor(status, breedsVisible, accountId, breedsAvailable, tutorialAvailable, canCreateNewCharacter) {
    super();
    this.status = status;
    this.breedsVisible = breedsVisible;
    this.accountId = accountId;
    this.breedsAvailable = breedsAvailable;
    this.tutorialAvailable = tutorialAvailable;
    this.canCreateNewCharacter = canCreateNewCharacter;
  }
  serialize(writer) {
    writer.writeByte(this.status);
    writer.writeVarInt(this.breedsVisible);
    writer.writeInt(this.accountId);
    writer.writeVarInt(this.breedsAvailable);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.tutorialAvailable);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.canCreateNewCharacter);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.status = reader.readByte();
    this.breedsVisible = reader.readVarInt();
    this.accountId = reader.readInt();
    this.breedsAvailable = reader.readVarInt();
    const box0 = reader.readByte();
    this.tutorialAvailable = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.canCreateNewCharacter = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var TreasureHuntDigRequestAnswerMessage = class extends DofusMessage {
  static id = 8845;
  result = 0;
  questType = 0;
  constructor(result, questType) {
    super();
    this.result = result;
    this.questType = questType;
  }
  serialize(writer) {
    writer.writeByte(this.result);
    writer.writeByte(this.questType);
  }
  deserialize(reader) {
    this.result = reader.readByte();
    this.questType = reader.readByte();
  }
};
var TreasureHuntDigRequestAnswerFailedMessage = class extends TreasureHuntDigRequestAnswerMessage {
  static id = 862;
  wrongFlagCount = 0;
  constructor(result, questType, wrongFlagCount) {
    super(result, questType);
    this.wrongFlagCount = wrongFlagCount;
  }
  serialize(writer) {
    writer.writeByte(this.wrongFlagCount);
  }
  deserialize(reader) {
    this.wrongFlagCount = reader.readByte();
  }
};
var GameEntityDispositionErrorMessage = class extends DofusMessage {
  static id = 209;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var EmoteAddMessage = class extends DofusMessage {
  static id = 8736;
  emoteId = 0;
  constructor(emoteId) {
    super();
    this.emoteId = emoteId;
  }
  serialize(writer) {
    writer.writeShort(this.emoteId);
  }
  deserialize(reader) {
    this.emoteId = reader.readShort();
  }
};
var GuildMotdMessage = class extends SocialNoticeMessage {
  static id = 4202;
  constructor(memberName, memberId, timestamp, content) {
    super(memberName, memberId, timestamp, content);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PartyLeaderUpdateMessage = class extends AbstractPartyEventMessage {
  static id = 4003;
  partyLeaderId = 0;
  constructor(partyId, partyLeaderId) {
    super(partyId);
    this.partyLeaderId = partyLeaderId;
  }
  serialize(writer) {
    writer.writeVarLong(this.partyLeaderId);
  }
  deserialize(reader) {
    this.partyLeaderId = reader.readVarLong();
  }
};
var ChatAdminServerMessage = class extends ChatServerMessage {
  static id = 6581;
  constructor(fingerprint, timestamp, content, channel, senderAccountId, prefix, senderName, senderId) {
    super(
      fingerprint,
      timestamp,
      content,
      channel,
      senderAccountId,
      prefix,
      senderName,
      senderId
    );
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var MountSterilizedMessage = class extends DofusMessage {
  static id = 3777;
  mountId = 0;
  constructor(mountId) {
    super();
    this.mountId = mountId;
  }
  serialize(writer) {
    writer.writeVarInt(this.mountId);
  }
  deserialize(reader) {
    this.mountId = reader.readVarInt();
  }
};
var BasicWhoIsMessage = class extends DofusMessage {
  static id = 7169;
  playerState = 99;
  accountId = 0;
  playerName;
  position = -1;
  socialGroups;
  accountTag;
  areaId = 0;
  serverId = 0;
  playerId = 0;
  originServerId = 0;
  self = false;
  verbose = false;
  constructor(playerState, accountId, playerName, position, socialGroups, accountTag, areaId, serverId, playerId, originServerId, self, verbose) {
    super();
    this.playerState = playerState;
    this.accountId = accountId;
    this.playerName = playerName;
    this.position = position;
    this.socialGroups = socialGroups;
    this.accountTag = accountTag;
    this.areaId = areaId;
    this.serverId = serverId;
    this.playerId = playerId;
    this.originServerId = originServerId;
    this.self = self;
    this.verbose = verbose;
  }
  serialize(writer) {
    writer.writeByte(this.playerState);
    writer.writeInt(this.accountId);
    writer.writeUTF(this.playerName);
    writer.writeByte(this.position);
    writer.writeShort(this.socialGroups.length);
    this.socialGroups.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    this.accountTag.serialize(writer);
    writer.writeShort(this.areaId);
    writer.writeShort(this.serverId);
    writer.writeVarLong(this.playerId);
    writer.writeShort(this.originServerId);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.self);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.verbose);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.playerState = reader.readByte();
    this.accountId = reader.readInt();
    this.playerName = reader.readUTF();
    this.position = reader.readByte();
    this.socialGroups = [];
    const countSocialGroups = reader.readShort();
    for (let i = 0; i < countSocialGroups; i++) {
      const socialGroupsTypeId = reader.readShort();
      const type = new types[socialGroupsTypeId]();
      type.deserialize(reader);
      this.socialGroups.push(type);
    }
    this.accountTag = new AccountTagInformation();
    this.accountTag.deserialize(reader);
    this.areaId = reader.readShort();
    this.serverId = reader.readShort();
    this.playerId = reader.readVarLong();
    this.originServerId = reader.readShort();
    const box0 = reader.readByte();
    this.self = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.verbose = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var ObjectAddedMessage = class extends DofusMessage {
  static id = 9659;
  origin = 0;
  object_;
  constructor(origin, object_) {
    super();
    this.origin = origin;
    this.object_ = object_;
  }
  serialize(writer) {
    writer.writeByte(this.origin);
    this.object_.serialize(writer);
  }
  deserialize(reader) {
    this.origin = reader.readByte();
    this.object_ = new ObjectItem();
    this.object_.deserialize(reader);
  }
};
var GameActionNoopMessage = class extends DofusMessage {
  static id = 8877;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PopupWarningMessage = class extends DofusMessage {
  static id = 941;
  content;
  author;
  lockDuration = 0;
  constructor(content, author, lockDuration) {
    super();
    this.content = content;
    this.author = author;
    this.lockDuration = lockDuration;
  }
  serialize(writer) {
    writer.writeUTF(this.content);
    writer.writeUTF(this.author);
    writer.writeByte(this.lockDuration);
  }
  deserialize(reader) {
    this.content = reader.readUTF();
    this.author = reader.readUTF();
    this.lockDuration = reader.readByte();
  }
};
var JobExperienceUpdateMessage = class extends DofusMessage {
  static id = 3940;
  experiencesUpdate;
  constructor(experiencesUpdate) {
    super();
    this.experiencesUpdate = experiencesUpdate;
  }
  serialize(writer) {
    this.experiencesUpdate.serialize(writer);
  }
  deserialize(reader) {
    this.experiencesUpdate = new JobExperience();
    this.experiencesUpdate.deserialize(reader);
  }
};
var GuildInformationsPaddocksMessage = class extends DofusMessage {
  static id = 178;
  paddocksInformations;
  nbPaddockMax = 0;
  constructor(paddocksInformations, nbPaddockMax) {
    super();
    this.paddocksInformations = paddocksInformations;
    this.nbPaddockMax = nbPaddockMax;
  }
  serialize(writer) {
    writer.writeShort(this.paddocksInformations.length);
    this.paddocksInformations.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeByte(this.nbPaddockMax);
  }
  deserialize(reader) {
    this.paddocksInformations = [];
    const countPaddocksInformations = reader.readShort();
    for (let i = 0; i < countPaddocksInformations; i++) {
      const type = new PaddockContentInformations();
      type.deserialize(reader);
      this.paddocksInformations.push(type);
    }
    this.nbPaddockMax = reader.readByte();
  }
};
var GuildVersatileInfoListMessage = class extends DofusMessage {
  static id = 211;
  guilds;
  constructor(guilds) {
    super();
    this.guilds = guilds;
  }
  serialize(writer) {
    writer.writeShort(this.guilds.length);
    this.guilds.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.guilds = [];
    const countGuilds = reader.readShort();
    for (let i = 0; i < countGuilds; i++) {
      const guildsTypeId = reader.readShort();
      const type = new types[guildsTypeId]();
      type.deserialize(reader);
      this.guilds.push(type);
    }
  }
};
var IdentificationFailedMessage = class extends DofusMessage {
  static id = 7135;
  reason = 99;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var IdentificationFailedForBadVersionMessage = class extends IdentificationFailedMessage {
  static id = 7294;
  requiredVersion;
  constructor(reason, requiredVersion) {
    super(reason);
    this.requiredVersion = requiredVersion;
  }
  serialize(writer) {
    this.requiredVersion.serialize(writer);
  }
  deserialize(reader) {
    this.requiredVersion = new Version();
    this.requiredVersion.deserialize(reader);
  }
};
var JobLevelUpMessage = class extends DofusMessage {
  static id = 8401;
  jobsDescription;
  newLevel = 0;
  constructor(jobsDescription, newLevel) {
    super();
    this.jobsDescription = jobsDescription;
    this.newLevel = newLevel;
  }
  serialize(writer) {
    this.jobsDescription.serialize(writer);
    writer.writeByte(this.newLevel);
  }
  deserialize(reader) {
    this.jobsDescription = new JobDescription();
    this.jobsDescription.deserialize(reader);
    this.newLevel = reader.readByte();
  }
};
var ExchangeBidHouseInListAddedMessage = class extends DofusMessage {
  static id = 213;
  prices;
  objectGID = 0;
  objectType = 0;
  itemUID = 0;
  effects;
  constructor(prices, objectGID, objectType, itemUID, effects) {
    super();
    this.prices = prices;
    this.objectGID = objectGID;
    this.objectType = objectType;
    this.itemUID = itemUID;
    this.effects = effects;
  }
  serialize(writer) {
    writer.writeShort(this.prices.length);
    this.prices.forEach((current) => writer.writeVarLong(current));
    writer.writeVarShort(this.objectGID);
    writer.writeInt(this.objectType);
    writer.writeInt(this.itemUID);
    writer.writeShort(this.effects.length);
    this.effects.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.prices = [];
    const countPrices = reader.readShort();
    for (let i = 0; i < countPrices; i++) {
      this.prices.push(reader.readVarLong());
    }
    this.objectGID = reader.readVarShort();
    this.objectType = reader.readInt();
    this.itemUID = reader.readInt();
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i = 0; i < countEffects; i++) {
      const effectsTypeId = reader.readShort();
      const type = new types[effectsTypeId]();
      type.deserialize(reader);
      this.effects.push(type);
    }
  }
};
var ExchangeStartedMountStockMessage = class extends DofusMessage {
  static id = 5729;
  objectsInfos;
  constructor(objectsInfos) {
    super();
    this.objectsInfos = objectsInfos;
  }
  serialize(writer) {
    writer.writeShort(this.objectsInfos.length);
    this.objectsInfos.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.objectsInfos = [];
    const countObjectsInfos = reader.readShort();
    for (let i = 0; i < countObjectsInfos; i++) {
      const type = new ObjectItem();
      type.deserialize(reader);
      this.objectsInfos.push(type);
    }
  }
};
var BreachCharactersMessage = class extends DofusMessage {
  static id = 6300;
  characters;
  constructor(characters) {
    super();
    this.characters = characters;
  }
  serialize(writer) {
    writer.writeShort(this.characters.length);
    this.characters.forEach((current) => writer.writeVarLong(current));
  }
  deserialize(reader) {
    this.characters = [];
    const countCharacters = reader.readShort();
    for (let i = 0; i < countCharacters; i++) {
      this.characters.push(reader.readVarLong());
    }
  }
};
var AllianceVersatileInfoListMessage = class extends DofusMessage {
  static id = 9853;
  alliances;
  constructor(alliances) {
    super();
    this.alliances = alliances;
  }
  serialize(writer) {
    writer.writeShort(this.alliances.length);
    this.alliances.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.alliances = [];
    const countAlliances = reader.readShort();
    for (let i = 0; i < countAlliances; i++) {
      const type = new AllianceVersatileInformations();
      type.deserialize(reader);
      this.alliances.push(type);
    }
  }
};
var HaapiShopApiKeyMessage = class extends DofusMessage {
  static id = 6787;
  token;
  constructor(token) {
    super();
    this.token = token;
  }
  serialize(writer) {
    writer.writeUTF(this.token);
  }
  deserialize(reader) {
    this.token = reader.readUTF();
  }
};
var ObjectErrorMessage = class extends DofusMessage {
  static id = 9603;
  reason = 0;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var SymbioticObjectErrorMessage = class extends ObjectErrorMessage {
  static id = 8441;
  errorCode = 0;
  constructor(reason, errorCode) {
    super(reason);
    this.errorCode = errorCode;
  }
  serialize(writer) {
    writer.writeByte(this.errorCode);
  }
  deserialize(reader) {
    this.errorCode = reader.readByte();
  }
};
var MimicryObjectErrorMessage = class extends SymbioticObjectErrorMessage {
  static id = 5767;
  preview = false;
  constructor(reason, errorCode, preview) {
    super(reason, errorCode);
    this.preview = preview;
  }
  serialize(writer) {
    writer.writeBoolean(this.preview);
  }
  deserialize(reader) {
    this.preview = reader.readBoolean();
  }
};
var KohUpdateMessage = class extends DofusMessage {
  static id = 6530;
  allianceMatchScore;
  allianceNbMembers;
  allianceMapMyAllianceScore = 0;
  alliances;
  allianceMapWinners;
  allianceMapWinnerScore = 0;
  allianceRoundWeigth;
  nextTickTime = 0;
  constructor(allianceMatchScore, allianceNbMembers, allianceMapMyAllianceScore, alliances, allianceMapWinners, allianceMapWinnerScore, allianceRoundWeigth, nextTickTime) {
    super();
    this.allianceMatchScore = allianceMatchScore;
    this.allianceNbMembers = allianceNbMembers;
    this.allianceMapMyAllianceScore = allianceMapMyAllianceScore;
    this.alliances = alliances;
    this.allianceMapWinners = allianceMapWinners;
    this.allianceMapWinnerScore = allianceMapWinnerScore;
    this.allianceRoundWeigth = allianceRoundWeigth;
    this.nextTickTime = nextTickTime;
  }
  serialize(writer) {
    writer.writeShort(this.allianceMatchScore.length);
    this.allianceMatchScore.forEach(
      (current) => writer.writeByte(current)
    );
    writer.writeShort(this.allianceNbMembers.length);
    this.allianceNbMembers.forEach(
      (current) => writer.writeVarShort(current)
    );
    writer.writeVarInt(this.allianceMapMyAllianceScore);
    writer.writeShort(this.alliances.length);
    this.alliances.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.allianceMapWinners.length);
    this.allianceMapWinners.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarInt(this.allianceMapWinnerScore);
    writer.writeShort(this.allianceRoundWeigth.length);
    this.allianceRoundWeigth.forEach(
      (current) => writer.writeVarInt(current)
    );
    writer.writeDouble(this.nextTickTime);
  }
  deserialize(reader) {
    this.allianceMatchScore = [];
    const countAllianceMatchScore = reader.readShort();
    for (let i = 0; i < countAllianceMatchScore; i++) {
      this.allianceMatchScore.push(reader.readByte());
    }
    this.allianceNbMembers = [];
    const countAllianceNbMembers = reader.readShort();
    for (let i = 0; i < countAllianceNbMembers; i++) {
      this.allianceNbMembers.push(reader.readVarShort());
    }
    this.allianceMapMyAllianceScore = reader.readVarInt();
    this.alliances = [];
    const countAlliances = reader.readShort();
    for (let i = 0; i < countAlliances; i++) {
      const type = new AllianceInformations();
      type.deserialize(reader);
      this.alliances.push(type);
    }
    this.allianceMapWinners = [];
    const countAllianceMapWinners = reader.readShort();
    for (let i = 0; i < countAllianceMapWinners; i++) {
      const type = new BasicAllianceInformations();
      type.deserialize(reader);
      this.allianceMapWinners.push(type);
    }
    this.allianceMapWinnerScore = reader.readVarInt();
    this.allianceRoundWeigth = [];
    const countAllianceRoundWeigth = reader.readShort();
    for (let i = 0; i < countAllianceRoundWeigth; i++) {
      this.allianceRoundWeigth.push(reader.readVarInt());
    }
    this.nextTickTime = reader.readDouble();
  }
};
var ClientUIOpenedMessage = class extends DofusMessage {
  static id = 7354;
  type = 0;
  constructor(type) {
    super();
    this.type = type;
  }
  serialize(writer) {
    writer.writeByte(this.type);
  }
  deserialize(reader) {
    this.type = reader.readByte();
  }
};
var ClientUIOpenedByObjectMessage = class extends ClientUIOpenedMessage {
  static id = 8823;
  uid = 0;
  constructor(type, uid) {
    super(type);
    this.uid = uid;
  }
  serialize(writer) {
    writer.writeVarInt(this.uid);
  }
  deserialize(reader) {
    this.uid = reader.readVarInt();
  }
};
var TeleportBuddiesRequestedMessage = class extends DofusMessage {
  static id = 9435;
  invalidBuddiesIds;
  inviterId = 0;
  dungeonId = 0;
  constructor(invalidBuddiesIds, inviterId, dungeonId) {
    super();
    this.invalidBuddiesIds = invalidBuddiesIds;
    this.inviterId = inviterId;
    this.dungeonId = dungeonId;
  }
  serialize(writer) {
    writer.writeShort(this.invalidBuddiesIds.length);
    this.invalidBuddiesIds.forEach(
      (current) => writer.writeVarLong(current)
    );
    writer.writeVarLong(this.inviterId);
    writer.writeVarShort(this.dungeonId);
  }
  deserialize(reader) {
    this.invalidBuddiesIds = [];
    const countInvalidBuddiesIds = reader.readShort();
    for (let i = 0; i < countInvalidBuddiesIds; i++) {
      this.invalidBuddiesIds.push(reader.readVarLong());
    }
    this.inviterId = reader.readVarLong();
    this.dungeonId = reader.readVarShort();
  }
};
var ExchangeStartOkEvolutiveObjectRecycleTradeMessage = class extends DofusMessage {
  static id = 7744;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ExchangeCraftPaymentModifiedMessage = class extends DofusMessage {
  static id = 8641;
  goldSum = 0;
  constructor(goldSum) {
    super();
    this.goldSum = goldSum;
  }
  serialize(writer) {
    writer.writeVarLong(this.goldSum);
  }
  deserialize(reader) {
    this.goldSum = reader.readVarLong();
  }
};
var AllianceMotdSetErrorMessage = class extends SocialNoticeSetErrorMessage {
  static id = 9723;
  constructor(reason) {
    super(reason);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var LeaveDialogMessage = class extends DofusMessage {
  static id = 2209;
  dialogType = 0;
  constructor(dialogType) {
    super();
    this.dialogType = dialogType;
  }
  serialize(writer) {
    writer.writeByte(this.dialogType);
  }
  deserialize(reader) {
    this.dialogType = reader.readByte();
  }
};
var ExchangeLeaveMessage = class extends LeaveDialogMessage {
  static id = 8813;
  success = false;
  constructor(dialogType, success) {
    super(dialogType);
    this.success = success;
  }
  serialize(writer) {
    writer.writeBoolean(this.success);
  }
  deserialize(reader) {
    this.success = reader.readBoolean();
  }
};
var TaxCollectorErrorMessage = class extends DofusMessage {
  static id = 4836;
  reason = 0;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var BreachRoomLockedMessage = class extends DofusMessage {
  static id = 7221;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var IdolListMessage = class extends DofusMessage {
  static id = 9410;
  chosenIdols;
  partyChosenIdols;
  partyIdols;
  constructor(chosenIdols, partyChosenIdols, partyIdols) {
    super();
    this.chosenIdols = chosenIdols;
    this.partyChosenIdols = partyChosenIdols;
    this.partyIdols = partyIdols;
  }
  serialize(writer) {
    writer.writeShort(this.chosenIdols.length);
    this.chosenIdols.forEach(
      (current) => writer.writeVarShort(current)
    );
    writer.writeShort(this.partyChosenIdols.length);
    this.partyChosenIdols.forEach(
      (current) => writer.writeVarShort(current)
    );
    writer.writeShort(this.partyIdols.length);
    this.partyIdols.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.chosenIdols = [];
    const countChosenIdols = reader.readShort();
    for (let i = 0; i < countChosenIdols; i++) {
      this.chosenIdols.push(reader.readVarShort());
    }
    this.partyChosenIdols = [];
    const countPartyChosenIdols = reader.readShort();
    for (let i = 0; i < countPartyChosenIdols; i++) {
      this.partyChosenIdols.push(reader.readVarShort());
    }
    this.partyIdols = [];
    const countPartyIdols = reader.readShort();
    for (let i = 0; i < countPartyIdols; i++) {
      const partyIdolsTypeId = reader.readShort();
      const type = new types[partyIdolsTypeId]();
      type.deserialize(reader);
      this.partyIdols.push(type);
    }
  }
};
var EmoteRemoveMessage = class extends DofusMessage {
  static id = 8124;
  emoteId = 0;
  constructor(emoteId) {
    super();
    this.emoteId = emoteId;
  }
  serialize(writer) {
    writer.writeShort(this.emoteId);
  }
  deserialize(reader) {
    this.emoteId = reader.readShort();
  }
};
var ExchangeGuildTaxCollectorGetMessage = class extends DofusMessage {
  static id = 962;
  mapId = 0;
  worldY = 0;
  worldX = 0;
  collectorName;
  callerId = 0;
  userName;
  objectsInfos;
  experience = 0;
  subAreaId = 0;
  callerName;
  pods = 0;
  constructor(mapId, worldY, worldX, collectorName, callerId, userName, objectsInfos, experience, subAreaId, callerName, pods) {
    super();
    this.mapId = mapId;
    this.worldY = worldY;
    this.worldX = worldX;
    this.collectorName = collectorName;
    this.callerId = callerId;
    this.userName = userName;
    this.objectsInfos = objectsInfos;
    this.experience = experience;
    this.subAreaId = subAreaId;
    this.callerName = callerName;
    this.pods = pods;
  }
  serialize(writer) {
    writer.writeDouble(this.mapId);
    writer.writeShort(this.worldY);
    writer.writeShort(this.worldX);
    writer.writeUTF(this.collectorName);
    writer.writeVarLong(this.callerId);
    writer.writeUTF(this.userName);
    writer.writeShort(this.objectsInfos.length);
    this.objectsInfos.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeDouble(this.experience);
    writer.writeVarShort(this.subAreaId);
    writer.writeUTF(this.callerName);
    writer.writeVarShort(this.pods);
  }
  deserialize(reader) {
    this.mapId = reader.readDouble();
    this.worldY = reader.readShort();
    this.worldX = reader.readShort();
    this.collectorName = reader.readUTF();
    this.callerId = reader.readVarLong();
    this.userName = reader.readUTF();
    this.objectsInfos = [];
    const countObjectsInfos = reader.readShort();
    for (let i = 0; i < countObjectsInfos; i++) {
      const type = new ObjectItemGenericQuantity();
      type.deserialize(reader);
      this.objectsInfos.push(type);
    }
    this.experience = reader.readDouble();
    this.subAreaId = reader.readVarShort();
    this.callerName = reader.readUTF();
    this.pods = reader.readVarShort();
  }
};
var GuildMotdSetErrorMessage = class extends SocialNoticeSetErrorMessage {
  static id = 1049;
  constructor(reason) {
    super(reason);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GameRolePlayArenaSwitchToGameServerMessage = class extends DofusMessage {
  static id = 651;
  ticket;
  homeServerId = 0;
  validToken = false;
  constructor(ticket, homeServerId, validToken) {
    super();
    this.ticket = ticket;
    this.homeServerId = homeServerId;
    this.validToken = validToken;
  }
  serialize(writer) {
    writer.writeVarInt(this.ticket.length);
    this.ticket.forEach((current) => writer.writeByte(current));
    writer.writeShort(this.homeServerId);
    writer.writeBoolean(this.validToken);
  }
  deserialize(reader) {
    this.ticket = [];
    const countTicket = reader.readVarInt();
    for (let i = 0; i < countTicket; i++) {
      this.ticket.push(reader.readByte());
    }
    this.homeServerId = reader.readShort();
    this.validToken = reader.readBoolean();
  }
};
var ContactLookMessage = class extends DofusMessage {
  static id = 6590;
  requestId = 0;
  playerName;
  look;
  playerId = 0;
  constructor(requestId, playerName, look, playerId) {
    super();
    this.requestId = requestId;
    this.playerName = playerName;
    this.look = look;
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeVarInt(this.requestId);
    writer.writeUTF(this.playerName);
    this.look.serialize(writer);
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.requestId = reader.readVarInt();
    this.playerName = reader.readUTF();
    this.look = new EntityLook();
    this.look.deserialize(reader);
    this.playerId = reader.readVarLong();
  }
};
var AlliancePartialListMessage = class extends AllianceListMessage {
  static id = 2592;
  constructor(alliances) {
    super(alliances);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var MapRunningFightDetailsMessage = class extends DofusMessage {
  static id = 3380;
  defenders;
  fightId = 0;
  attackers;
  constructor(defenders, fightId, attackers) {
    super();
    this.defenders = defenders;
    this.fightId = fightId;
    this.attackers = attackers;
  }
  serialize(writer) {
    writer.writeShort(this.defenders.length);
    this.defenders.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarShort(this.fightId);
    writer.writeShort(this.attackers.length);
    this.attackers.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.defenders = [];
    const countDefenders = reader.readShort();
    for (let i = 0; i < countDefenders; i++) {
      const defendersTypeId = reader.readShort();
      const type = new types[defendersTypeId]();
      type.deserialize(reader);
      this.defenders.push(type);
    }
    this.fightId = reader.readVarShort();
    this.attackers = [];
    const countAttackers = reader.readShort();
    for (let i = 0; i < countAttackers; i++) {
      const attackersTypeId = reader.readShort();
      const type = new types[attackersTypeId]();
      type.deserialize(reader);
      this.attackers.push(type);
    }
  }
};
var MapRunningFightDetailsExtendedMessage = class extends MapRunningFightDetailsMessage {
  static id = 9456;
  namedPartyTeams;
  constructor(defenders, fightId, attackers, namedPartyTeams) {
    super(defenders, fightId, attackers);
    this.namedPartyTeams = namedPartyTeams;
  }
  serialize(writer) {
    writer.writeShort(this.namedPartyTeams.length);
    this.namedPartyTeams.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.namedPartyTeams = [];
    const countNamedPartyTeams = reader.readShort();
    for (let i = 0; i < countNamedPartyTeams; i++) {
      const type = new NamedPartyTeam();
      type.deserialize(reader);
      this.namedPartyTeams.push(type);
    }
  }
};
var AcquaintanceServerListMessage = class extends DofusMessage {
  static id = 8752;
  servers;
  constructor(servers) {
    super();
    this.servers = servers;
  }
  serialize(writer) {
    writer.writeShort(this.servers.length);
    this.servers.forEach((current) => writer.writeVarShort(current));
  }
  deserialize(reader) {
    this.servers = [];
    const countServers = reader.readShort();
    for (let i = 0; i < countServers; i++) {
      this.servers.push(reader.readVarShort());
    }
  }
};
var DungeonPartyFinderRegisterErrorMessage = class extends DofusMessage {
  static id = 5482;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var EmoteListMessage = class extends DofusMessage {
  static id = 9032;
  emoteIds;
  constructor(emoteIds) {
    super();
    this.emoteIds = emoteIds;
  }
  serialize(writer) {
    writer.writeShort(this.emoteIds.length);
    this.emoteIds.forEach((current) => writer.writeShort(current));
  }
  deserialize(reader) {
    this.emoteIds = [];
    const countEmoteIds = reader.readShort();
    for (let i = 0; i < countEmoteIds; i++) {
      this.emoteIds.push(reader.readShort());
    }
  }
};
var TitlesAndOrnamentsListMessage = class extends DofusMessage {
  static id = 6204;
  ornaments;
  titles;
  activeTitle = 0;
  activeOrnament = 0;
  constructor(ornaments, titles, activeTitle, activeOrnament) {
    super();
    this.ornaments = ornaments;
    this.titles = titles;
    this.activeTitle = activeTitle;
    this.activeOrnament = activeOrnament;
  }
  serialize(writer) {
    writer.writeShort(this.ornaments.length);
    this.ornaments.forEach((current) => writer.writeVarShort(current));
    writer.writeShort(this.titles.length);
    this.titles.forEach((current) => writer.writeVarShort(current));
    writer.writeVarShort(this.activeTitle);
    writer.writeVarShort(this.activeOrnament);
  }
  deserialize(reader) {
    this.ornaments = [];
    const countOrnaments = reader.readShort();
    for (let i = 0; i < countOrnaments; i++) {
      this.ornaments.push(reader.readVarShort());
    }
    this.titles = [];
    const countTitles = reader.readShort();
    for (let i = 0; i < countTitles; i++) {
      this.titles.push(reader.readVarShort());
    }
    this.activeTitle = reader.readVarShort();
    this.activeOrnament = reader.readVarShort();
  }
};
var HaapiConfirmationMessage = class extends DofusMessage {
  static id = 5733;
  kamas = 0;
  transaction;
  amount = 0;
  action = 0;
  rate = 0;
  constructor(kamas, transaction, amount, action, rate) {
    super();
    this.kamas = kamas;
    this.transaction = transaction;
    this.amount = amount;
    this.action = action;
    this.rate = rate;
  }
  serialize(writer) {
    writer.writeVarLong(this.kamas);
    writer.writeUTF(this.transaction);
    writer.writeVarLong(this.amount);
    writer.writeByte(this.action);
    writer.writeVarShort(this.rate);
  }
  deserialize(reader) {
    this.kamas = reader.readVarLong();
    this.transaction = reader.readUTF();
    this.amount = reader.readVarLong();
    this.action = reader.readByte();
    this.rate = reader.readVarShort();
  }
};
var PrismsInfoValidMessage = class extends DofusMessage {
  static id = 9294;
  fights;
  constructor(fights) {
    super();
    this.fights = fights;
  }
  serialize(writer) {
    writer.writeShort(this.fights.length);
    this.fights.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.fights = [];
    const countFights = reader.readShort();
    for (let i = 0; i < countFights; i++) {
      const type = new PrismFightersInformation();
      type.deserialize(reader);
      this.fights.push(type);
    }
  }
};
var InviteInHavenBagOfferMessage = class extends DofusMessage {
  static id = 2440;
  timeLeftBeforeCancel = 0;
  hostInformations;
  constructor(timeLeftBeforeCancel, hostInformations) {
    super();
    this.timeLeftBeforeCancel = timeLeftBeforeCancel;
    this.hostInformations = hostInformations;
  }
  serialize(writer) {
    writer.writeVarInt(this.timeLeftBeforeCancel);
    this.hostInformations.serialize(writer);
  }
  deserialize(reader) {
    this.timeLeftBeforeCancel = reader.readVarInt();
    this.hostInformations = new CharacterMinimalInformations();
    this.hostInformations.deserialize(reader);
  }
};
var HavenBagPackListMessage = class extends DofusMessage {
  static id = 268;
  packIds;
  constructor(packIds) {
    super();
    this.packIds = packIds;
  }
  serialize(writer) {
    writer.writeShort(this.packIds.length);
    this.packIds.forEach((current) => writer.writeByte(current));
  }
  deserialize(reader) {
    this.packIds = [];
    const countPackIds = reader.readShort();
    for (let i = 0; i < countPackIds; i++) {
      this.packIds.push(reader.readByte());
    }
  }
};
var CharacterDeletionErrorMessage = class extends DofusMessage {
  static id = 4473;
  reason = 1;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var HavenBagFurnituresMessage = class extends DofusMessage {
  static id = 6373;
  furnituresInfos;
  constructor(furnituresInfos) {
    super();
    this.furnituresInfos = furnituresInfos;
  }
  serialize(writer) {
    writer.writeShort(this.furnituresInfos.length);
    this.furnituresInfos.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.furnituresInfos = [];
    const countFurnituresInfos = reader.readShort();
    for (let i = 0; i < countFurnituresInfos; i++) {
      const type = new HavenBagFurnitureInformation();
      type.deserialize(reader);
      this.furnituresInfos.push(type);
    }
  }
};
var AcquaintancesListMessage = class extends DofusMessage {
  static id = 2842;
  acquaintanceList;
  constructor(acquaintanceList) {
    super();
    this.acquaintanceList = acquaintanceList;
  }
  serialize(writer) {
    writer.writeShort(this.acquaintanceList.length);
    this.acquaintanceList.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.acquaintanceList = [];
    const countAcquaintanceList = reader.readShort();
    for (let i = 0; i < countAcquaintanceList; i++) {
      const acquaintanceListTypeId = reader.readShort();
      const type = new types[acquaintanceListTypeId]();
      type.deserialize(reader);
      this.acquaintanceList.push(type);
    }
  }
};
var ExchangeStartedTaxCollectorShopMessage = class extends DofusMessage {
  static id = 2236;
  kamas = 0;
  objects;
  constructor(kamas, objects) {
    super();
    this.kamas = kamas;
    this.objects = objects;
  }
  serialize(writer) {
    writer.writeVarLong(this.kamas);
    writer.writeShort(this.objects.length);
    this.objects.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.kamas = reader.readVarLong();
    this.objects = [];
    const countObjects = reader.readShort();
    for (let i = 0; i < countObjects; i++) {
      const type = new ObjectItem();
      type.deserialize(reader);
      this.objects.push(type);
    }
  }
};
var GuildHouseRemoveMessage = class extends DofusMessage {
  static id = 1802;
  instanceId = 0;
  secondHand = false;
  houseId = 0;
  constructor(instanceId, secondHand, houseId) {
    super();
    this.instanceId = instanceId;
    this.secondHand = secondHand;
    this.houseId = houseId;
  }
  serialize(writer) {
    writer.writeInt(this.instanceId);
    writer.writeBoolean(this.secondHand);
    writer.writeVarInt(this.houseId);
  }
  deserialize(reader) {
    this.instanceId = reader.readInt();
    this.secondHand = reader.readBoolean();
    this.houseId = reader.readVarInt();
  }
};
var TreasureHuntFinishedMessage = class extends DofusMessage {
  static id = 5016;
  questType = 0;
  constructor(questType) {
    super();
    this.questType = questType;
  }
  serialize(writer) {
    writer.writeByte(this.questType);
  }
  deserialize(reader) {
    this.questType = reader.readByte();
  }
};
var HaapiBufferListMessage = class extends DofusMessage {
  static id = 518;
  buffers;
  constructor(buffers) {
    super();
    this.buffers = buffers;
  }
  serialize(writer) {
    writer.writeShort(this.buffers.length);
    this.buffers.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.buffers = [];
    const countBuffers = reader.readShort();
    for (let i = 0; i < countBuffers; i++) {
      const type = new BufferInformation();
      type.deserialize(reader);
      this.buffers.push(type);
    }
  }
};
var WrapperObjectAssociatedMessage = class extends SymbioticObjectAssociatedMessage {
  static id = 3987;
  constructor(hostUID) {
    super(hostUID);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ObjectDeletedMessage = class extends DofusMessage {
  static id = 7574;
  objectUID = 0;
  constructor(objectUID) {
    super();
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeVarInt(this.objectUID);
  }
  deserialize(reader) {
    this.objectUID = reader.readVarInt();
  }
};
var PartyMemberEjectedMessage = class extends PartyMemberRemoveMessage {
  static id = 7777;
  kickerId = 0;
  constructor(partyId, leavingPlayerId, kickerId) {
    super(partyId, leavingPlayerId);
    this.kickerId = kickerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.kickerId);
  }
  deserialize(reader) {
    this.kickerId = reader.readVarLong();
  }
};
var ExchangeMountsStableRemoveMessage = class extends DofusMessage {
  static id = 9668;
  mountsId;
  constructor(mountsId) {
    super();
    this.mountsId = mountsId;
  }
  serialize(writer) {
    writer.writeShort(this.mountsId.length);
    this.mountsId.forEach((current) => writer.writeVarInt(current));
  }
  deserialize(reader) {
    this.mountsId = [];
    const countMountsId = reader.readShort();
    for (let i = 0; i < countMountsId; i++) {
      this.mountsId.push(reader.readVarInt());
    }
  }
};
var AllianceCreationStartedMessage = class extends DofusMessage {
  static id = 389;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var InventoryWeightMessage = class extends DofusMessage {
  static id = 3751;
  weightMax = 0;
  shopWeight = 0;
  inventoryWeight = 0;
  constructor(weightMax, shopWeight, inventoryWeight) {
    super();
    this.weightMax = weightMax;
    this.shopWeight = shopWeight;
    this.inventoryWeight = inventoryWeight;
  }
  serialize(writer) {
    writer.writeVarInt(this.weightMax);
    writer.writeVarInt(this.shopWeight);
    writer.writeVarInt(this.inventoryWeight);
  }
  deserialize(reader) {
    this.weightMax = reader.readVarInt();
    this.shopWeight = reader.readVarInt();
    this.inventoryWeight = reader.readVarInt();
  }
};
var MountDataErrorMessage = class extends DofusMessage {
  static id = 24;
  reason = 0;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var ExchangeMoneyMovementInformationMessage = class extends DofusMessage {
  static id = 6336;
  limit = 0;
  constructor(limit) {
    super();
    this.limit = limit;
  }
  serialize(writer) {
    writer.writeVarLong(this.limit);
  }
  deserialize(reader) {
    this.limit = reader.readVarLong();
  }
};
var ZaapRespawnUpdatedMessage = class extends DofusMessage {
  static id = 2988;
  mapId = 0;
  constructor(mapId) {
    super();
    this.mapId = mapId;
  }
  serialize(writer) {
    writer.writeDouble(this.mapId);
  }
  deserialize(reader) {
    this.mapId = reader.readDouble();
  }
};
var ExchangeMultiCraftCrafterCanUseHisRessourcesMessage = class extends DofusMessage {
  static id = 264;
  allowed = false;
  constructor(allowed) {
    super();
    this.allowed = allowed;
  }
  serialize(writer) {
    writer.writeBoolean(this.allowed);
  }
  deserialize(reader) {
    this.allowed = reader.readBoolean();
  }
};
var InvalidPresetsMessage = class extends DofusMessage {
  static id = 5030;
  presetIds;
  constructor(presetIds) {
    super();
    this.presetIds = presetIds;
  }
  serialize(writer) {
    writer.writeShort(this.presetIds.length);
    this.presetIds.forEach((current) => writer.writeShort(current));
  }
  deserialize(reader) {
    this.presetIds = [];
    const countPresetIds = reader.readShort();
    for (let i = 0; i < countPresetIds; i++) {
      this.presetIds.push(reader.readShort());
    }
  }
};
var PresetSaveErrorMessage = class extends DofusMessage {
  static id = 2325;
  code = 2;
  presetId = 0;
  constructor(code, presetId) {
    super();
    this.code = code;
    this.presetId = presetId;
  }
  serialize(writer) {
    writer.writeByte(this.code);
    writer.writeShort(this.presetId);
  }
  deserialize(reader) {
    this.code = reader.readByte();
    this.presetId = reader.readShort();
  }
};
var GuildInformationsMemberUpdateMessage = class extends DofusMessage {
  static id = 6301;
  member;
  constructor(member) {
    super();
    this.member = member;
  }
  serialize(writer) {
    this.member.serialize(writer);
  }
  deserialize(reader) {
    this.member = new GuildMember();
    this.member.deserialize(reader);
  }
};
var ExchangeStartedWithStorageMessage = class extends ExchangeStartedMessage {
  static id = 7302;
  storageMaxSlot = 0;
  constructor(exchangeType, storageMaxSlot) {
    super(exchangeType);
    this.storageMaxSlot = storageMaxSlot;
  }
  serialize(writer) {
    writer.writeVarInt(this.storageMaxSlot);
  }
  deserialize(reader) {
    this.storageMaxSlot = reader.readVarInt();
  }
};
var TeleportToBuddyOfferMessage = class extends DofusMessage {
  static id = 4009;
  timeLeft = 0;
  buddyId = 0;
  dungeonId = 0;
  constructor(timeLeft, buddyId, dungeonId) {
    super();
    this.timeLeft = timeLeft;
    this.buddyId = buddyId;
    this.dungeonId = dungeonId;
  }
  serialize(writer) {
    writer.writeVarInt(this.timeLeft);
    writer.writeVarLong(this.buddyId);
    writer.writeVarShort(this.dungeonId);
  }
  deserialize(reader) {
    this.timeLeft = reader.readVarInt();
    this.buddyId = reader.readVarLong();
    this.dungeonId = reader.readVarShort();
  }
};
var PartyLoyaltyStatusMessage = class extends AbstractPartyMessage {
  static id = 5410;
  loyal = false;
  constructor(partyId, loyal) {
    super(partyId);
    this.loyal = loyal;
  }
  serialize(writer) {
    writer.writeBoolean(this.loyal);
  }
  deserialize(reader) {
    this.loyal = reader.readBoolean();
  }
};
var PopupWarningClosedMessage = class extends DofusMessage {
  static id = 863;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var JobCrafterDirectoryRemoveMessage = class extends DofusMessage {
  static id = 890;
  playerId = 0;
  jobId = 0;
  constructor(playerId, jobId) {
    super();
    this.playerId = playerId;
    this.jobId = jobId;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
    writer.writeByte(this.jobId);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
    this.jobId = reader.readByte();
  }
};
var ExchangeObjectModifiedMessage = class extends ExchangeObjectMessage {
  static id = 3598;
  object_;
  constructor(remote, object_) {
    super(remote);
    this.object_ = object_;
  }
  serialize(writer) {
    this.object_.serialize(writer);
  }
  deserialize(reader) {
    this.object_ = new ObjectItem();
    this.object_.deserialize(reader);
  }
};
var AnomalySubareaInformationResponseMessage = class extends DofusMessage {
  static id = 6030;
  subareas;
  constructor(subareas) {
    super();
    this.subareas = subareas;
  }
  serialize(writer) {
    writer.writeShort(this.subareas.length);
    this.subareas.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.subareas = [];
    const countSubareas = reader.readShort();
    for (let i = 0; i < countSubareas; i++) {
      const type = new AnomalySubareaInformation();
      type.deserialize(reader);
      this.subareas.push(type);
    }
  }
};
var FriendAddFailureMessage = class extends DofusMessage {
  static id = 4074;
  reason = 0;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var GuildListApplicationModifiedMessage = class extends DofusMessage {
  static id = 8105;
  state = 0;
  playerId = 0;
  apply;
  constructor(state, playerId, apply) {
    super();
    this.state = state;
    this.playerId = playerId;
    this.apply = apply;
  }
  serialize(writer) {
    writer.writeByte(this.state);
    writer.writeVarLong(this.playerId);
    this.apply.serialize(writer);
  }
  deserialize(reader) {
    this.state = reader.readByte();
    this.playerId = reader.readVarLong();
    this.apply = new GuildApplicationInformation();
    this.apply.deserialize(reader);
  }
};
var HavenBagRoomUpdateMessage = class extends DofusMessage {
  static id = 1606;
  roomsPreview;
  action = 0;
  constructor(roomsPreview, action) {
    super();
    this.roomsPreview = roomsPreview;
    this.action = action;
  }
  serialize(writer) {
    writer.writeShort(this.roomsPreview.length);
    this.roomsPreview.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeByte(this.action);
  }
  deserialize(reader) {
    this.roomsPreview = [];
    const countRoomsPreview = reader.readShort();
    for (let i = 0; i < countRoomsPreview; i++) {
      const type = new HavenBagRoomPreviewInformation();
      type.deserialize(reader);
      this.roomsPreview.push(type);
    }
    this.action = reader.readByte();
  }
};
var BulletinMessage = class extends SocialNoticeMessage {
  static id = 9541;
  lastNotifiedTimestamp = 0;
  constructor(memberName, memberId, timestamp, content, lastNotifiedTimestamp) {
    super(memberName, memberId, timestamp, content);
    this.lastNotifiedTimestamp = lastNotifiedTimestamp;
  }
  serialize(writer) {
    writer.writeInt(this.lastNotifiedTimestamp);
  }
  deserialize(reader) {
    this.lastNotifiedTimestamp = reader.readInt();
  }
};
var GuildBulletinMessage = class extends BulletinMessage {
  static id = 981;
  constructor(memberName, memberId, timestamp, content, lastNotifiedTimestamp) {
    super(memberName, memberId, timestamp, content, lastNotifiedTimestamp);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PartyUpdateLightMessage = class extends AbstractPartyEventMessage {
  static id = 585;
  id_ = 0;
  regenRate = 0;
  maxLifePoints = 0;
  lifePoints = 0;
  prospecting = 0;
  constructor(partyId, id_, regenRate, maxLifePoints, lifePoints, prospecting) {
    super(partyId);
    this.id_ = id_;
    this.regenRate = regenRate;
    this.maxLifePoints = maxLifePoints;
    this.lifePoints = lifePoints;
    this.prospecting = prospecting;
  }
  serialize(writer) {
    writer.writeVarLong(this.id_);
    writer.writeByte(this.regenRate);
    writer.writeVarInt(this.maxLifePoints);
    writer.writeVarInt(this.lifePoints);
    writer.writeVarShort(this.prospecting);
  }
  deserialize(reader) {
    this.id_ = reader.readVarLong();
    this.regenRate = reader.readByte();
    this.maxLifePoints = reader.readVarInt();
    this.lifePoints = reader.readVarInt();
    this.prospecting = reader.readVarShort();
  }
};
var BreachInvitationOfferMessage = class extends DofusMessage {
  static id = 6717;
  timeLeftBeforeCancel = 0;
  host;
  constructor(timeLeftBeforeCancel, host) {
    super();
    this.timeLeftBeforeCancel = timeLeftBeforeCancel;
    this.host = host;
  }
  serialize(writer) {
    writer.writeVarInt(this.timeLeftBeforeCancel);
    this.host.serialize(writer);
  }
  deserialize(reader) {
    this.timeLeftBeforeCancel = reader.readVarInt();
    this.host = new CharacterMinimalInformations();
    this.host.deserialize(reader);
  }
};
var GuildJoinedMessage = class extends DofusMessage {
  static id = 1218;
  memberRights = 0;
  guildInfo;
  constructor(memberRights, guildInfo) {
    super();
    this.memberRights = memberRights;
    this.guildInfo = guildInfo;
  }
  serialize(writer) {
    writer.writeVarInt(this.memberRights);
    this.guildInfo.serialize(writer);
  }
  deserialize(reader) {
    this.memberRights = reader.readVarInt();
    this.guildInfo = new GuildInformations();
    this.guildInfo.deserialize(reader);
  }
};
var GuildMembershipMessage = class extends GuildJoinedMessage {
  static id = 6499;
  constructor(memberRights, guildInfo) {
    super(memberRights, guildInfo);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var SubscriptionZoneMessage = class extends DofusMessage {
  static id = 3082;
  active = false;
  constructor(active) {
    super();
    this.active = active;
  }
  serialize(writer) {
    writer.writeBoolean(this.active);
  }
  deserialize(reader) {
    this.active = reader.readBoolean();
  }
};
var GameFightPlacementSwapPositionsErrorMessage = class extends DofusMessage {
  static id = 3778;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ExchangeReplyTaxVendorMessage = class extends DofusMessage {
  static id = 7870;
  totalTaxValue = 0;
  objectValue = 0;
  constructor(totalTaxValue, objectValue) {
    super();
    this.totalTaxValue = totalTaxValue;
    this.objectValue = objectValue;
  }
  serialize(writer) {
    writer.writeVarLong(this.totalTaxValue);
    writer.writeVarLong(this.objectValue);
  }
  deserialize(reader) {
    this.totalTaxValue = reader.readVarLong();
    this.objectValue = reader.readVarLong();
  }
};
var PresetUseResultMessage = class extends DofusMessage {
  static id = 8808;
  code = 3;
  presetId = 0;
  constructor(code, presetId) {
    super();
    this.code = code;
    this.presetId = presetId;
  }
  serialize(writer) {
    writer.writeByte(this.code);
    writer.writeShort(this.presetId);
  }
  deserialize(reader) {
    this.code = reader.readByte();
    this.presetId = reader.readShort();
  }
};
var IdentificationFailedBannedMessage = class extends IdentificationFailedMessage {
  static id = 4124;
  banEndDate = 0;
  constructor(reason, banEndDate) {
    super(reason);
    this.banEndDate = banEndDate;
  }
  serialize(writer) {
    writer.writeDouble(this.banEndDate);
  }
  deserialize(reader) {
    this.banEndDate = reader.readDouble();
  }
};
var BreachRewardsMessage = class extends DofusMessage {
  static id = 3565;
  rewards;
  constructor(rewards) {
    super();
    this.rewards = rewards;
  }
  serialize(writer) {
    writer.writeShort(this.rewards.length);
    this.rewards.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.rewards = [];
    const countRewards = reader.readShort();
    for (let i = 0; i < countRewards; i++) {
      const type = new BreachReward();
      type.deserialize(reader);
      this.rewards.push(type);
    }
  }
};
var ObjectAveragePricesMessage = class extends DofusMessage {
  static id = 5921;
  avgPrices;
  ids;
  constructor(avgPrices, ids) {
    super();
    this.avgPrices = avgPrices;
    this.ids = ids;
  }
  serialize(writer) {
    writer.writeShort(this.avgPrices.length);
    this.avgPrices.forEach((current) => writer.writeVarLong(current));
    writer.writeShort(this.ids.length);
    this.ids.forEach((current) => writer.writeVarShort(current));
  }
  deserialize(reader) {
    this.avgPrices = [];
    const countAvgPrices = reader.readShort();
    for (let i = 0; i < countAvgPrices; i++) {
      this.avgPrices.push(reader.readVarLong());
    }
    this.ids = [];
    const countIds = reader.readShort();
    for (let i = 0; i < countIds; i++) {
      this.ids.push(reader.readVarShort());
    }
  }
};
var GuildHousesInformationMessage = class extends DofusMessage {
  static id = 9308;
  housesInformations;
  constructor(housesInformations) {
    super();
    this.housesInformations = housesInformations;
  }
  serialize(writer) {
    writer.writeShort(this.housesInformations.length);
    this.housesInformations.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.housesInformations = [];
    const countHousesInformations = reader.readShort();
    for (let i = 0; i < countHousesInformations; i++) {
      const type = new HouseInformationsForGuild();
      type.deserialize(reader);
      this.housesInformations.push(type);
    }
  }
};
var DisplayNumericalValuePaddockMessage = class extends DofusMessage {
  static id = 5348;
  type = 0;
  value = 0;
  rideId = 0;
  constructor(type, value, rideId) {
    super();
    this.type = type;
    this.value = value;
    this.rideId = rideId;
  }
  serialize(writer) {
    writer.writeByte(this.type);
    writer.writeInt(this.value);
    writer.writeInt(this.rideId);
  }
  deserialize(reader) {
    this.type = reader.readByte();
    this.value = reader.readInt();
    this.rideId = reader.readInt();
  }
};
var MountEquipedErrorMessage = class extends DofusMessage {
  static id = 1774;
  errorType = 0;
  constructor(errorType) {
    super();
    this.errorType = errorType;
  }
  serialize(writer) {
    writer.writeByte(this.errorType);
  }
  deserialize(reader) {
    this.errorType = reader.readByte();
  }
};
var AchievementRewardErrorMessage = class extends DofusMessage {
  static id = 8883;
  achievementId = 0;
  constructor(achievementId) {
    super();
    this.achievementId = achievementId;
  }
  serialize(writer) {
    writer.writeShort(this.achievementId);
  }
  deserialize(reader) {
    this.achievementId = reader.readShort();
  }
};
var ChallengeFightJoinRefusedMessage = class extends DofusMessage {
  static id = 2066;
  reason = 0;
  playerId = 0;
  constructor(reason, playerId) {
    super();
    this.reason = reason;
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
    this.playerId = reader.readVarLong();
  }
};
var GuildMemberLeavingMessage = class extends DofusMessage {
  static id = 419;
  memberId = 0;
  kicked = false;
  constructor(memberId, kicked) {
    super();
    this.memberId = memberId;
    this.kicked = kicked;
  }
  serialize(writer) {
    writer.writeVarLong(this.memberId);
    writer.writeBoolean(this.kicked);
  }
  deserialize(reader) {
    this.memberId = reader.readVarLong();
    this.kicked = reader.readBoolean();
  }
};
var ForgettableSpellEquipmentSlotsMessage = class extends DofusMessage {
  static id = 7772;
  quantity = 0;
  constructor(quantity) {
    super();
    this.quantity = quantity;
  }
  serialize(writer) {
    writer.writeVarShort(this.quantity);
  }
  deserialize(reader) {
    this.quantity = reader.readVarShort();
  }
};
var GameActionSpamMessage = class extends DofusMessage {
  static id = 6276;
  cells;
  constructor(cells) {
    super();
    this.cells = cells;
  }
  serialize(writer) {
    writer.writeShort(this.cells.length);
    this.cells.forEach((current) => writer.writeShort(current));
  }
  deserialize(reader) {
    this.cells = [];
    const countCells = reader.readShort();
    for (let i = 0; i < countCells; i++) {
      this.cells.push(reader.readShort());
    }
  }
};
var GuildLevelUpMessage = class extends DofusMessage {
  static id = 7669;
  newLevel = 0;
  constructor(newLevel) {
    super();
    this.newLevel = newLevel;
  }
  serialize(writer) {
    writer.writeByte(this.newLevel);
  }
  deserialize(reader) {
    this.newLevel = reader.readByte();
  }
};
var AllianceJoinedMessage = class extends DofusMessage {
  static id = 1981;
  enabled = false;
  leadingGuildId = 0;
  allianceInfo;
  constructor(enabled, leadingGuildId, allianceInfo) {
    super();
    this.enabled = enabled;
    this.leadingGuildId = leadingGuildId;
    this.allianceInfo = allianceInfo;
  }
  serialize(writer) {
    writer.writeBoolean(this.enabled);
    writer.writeVarInt(this.leadingGuildId);
    this.allianceInfo.serialize(writer);
  }
  deserialize(reader) {
    this.enabled = reader.readBoolean();
    this.leadingGuildId = reader.readVarInt();
    this.allianceInfo = new AllianceInformations();
    this.allianceInfo.deserialize(reader);
  }
};
var NumericWhoIsMessage = class extends DofusMessage {
  static id = 7592;
  accountId = 0;
  playerId = 0;
  constructor(accountId, playerId) {
    super();
    this.accountId = accountId;
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeInt(this.accountId);
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.accountId = reader.readInt();
    this.playerId = reader.readVarLong();
  }
};
var ExchangeBidSearchOkMessage = class extends DofusMessage {
  static id = 2955;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PaddockToSellListMessage = class extends DofusMessage {
  static id = 3451;
  totalPage = 0;
  paddockList;
  pageIndex = 0;
  constructor(totalPage, paddockList, pageIndex) {
    super();
    this.totalPage = totalPage;
    this.paddockList = paddockList;
    this.pageIndex = pageIndex;
  }
  serialize(writer) {
    writer.writeVarShort(this.totalPage);
    writer.writeShort(this.paddockList.length);
    this.paddockList.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.pageIndex);
  }
  deserialize(reader) {
    this.totalPage = reader.readVarShort();
    this.paddockList = [];
    const countPaddockList = reader.readShort();
    for (let i = 0; i < countPaddockList; i++) {
      const type = new PaddockInformationsForSell();
      type.deserialize(reader);
      this.paddockList.push(type);
    }
    this.pageIndex = reader.readVarShort();
  }
};
var HavenBagDailyLoteryMessage = class extends DofusMessage {
  static id = 2198;
  gameActionId;
  returnType = 0;
  constructor(gameActionId, returnType) {
    super();
    this.gameActionId = gameActionId;
    this.returnType = returnType;
  }
  serialize(writer) {
    writer.writeUTF(this.gameActionId);
    writer.writeByte(this.returnType);
  }
  deserialize(reader) {
    this.gameActionId = reader.readUTF();
    this.returnType = reader.readByte();
  }
};
var GuildRecruitmentInvalidateMessage = class extends DofusMessage {
  static id = 5759;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PurchasableDialogMessage = class extends DofusMessage {
  static id = 582;
  price = 0;
  purchasableId = 0;
  purchasableInstanceId = 0;
  buyOrSell = false;
  secondHand = false;
  constructor(price, purchasableId, purchasableInstanceId, buyOrSell, secondHand) {
    super();
    this.price = price;
    this.purchasableId = purchasableId;
    this.purchasableInstanceId = purchasableInstanceId;
    this.buyOrSell = buyOrSell;
    this.secondHand = secondHand;
  }
  serialize(writer) {
    writer.writeVarLong(this.price);
    writer.writeDouble(this.purchasableId);
    writer.writeInt(this.purchasableInstanceId);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.buyOrSell);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.secondHand);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.price = reader.readVarLong();
    this.purchasableId = reader.readDouble();
    this.purchasableInstanceId = reader.readInt();
    const box0 = reader.readByte();
    this.buyOrSell = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.secondHand = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var AlignmentWarEffortDonationResultMessage = class extends DofusMessage {
  static id = 6010;
  result = 4;
  constructor(result) {
    super();
    this.result = result;
  }
  serialize(writer) {
    writer.writeByte(this.result);
  }
  deserialize(reader) {
    this.result = reader.readByte();
  }
};
var AllianceMotdMessage = class extends SocialNoticeMessage {
  static id = 4427;
  constructor(memberName, memberId, timestamp, content) {
    super(memberName, memberId, timestamp, content);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GameRolePlayArenaLeagueRewardsMessage = class extends DofusMessage {
  static id = 2090;
  endSeasonReward = false;
  leagueId = 0;
  ladderPosition = 0;
  seasonId = 0;
  constructor(endSeasonReward, leagueId, ladderPosition, seasonId) {
    super();
    this.endSeasonReward = endSeasonReward;
    this.leagueId = leagueId;
    this.ladderPosition = ladderPosition;
    this.seasonId = seasonId;
  }
  serialize(writer) {
    writer.writeBoolean(this.endSeasonReward);
    writer.writeVarShort(this.leagueId);
    writer.writeInt(this.ladderPosition);
    writer.writeVarShort(this.seasonId);
  }
  deserialize(reader) {
    this.endSeasonReward = reader.readBoolean();
    this.leagueId = reader.readVarShort();
    this.ladderPosition = reader.readInt();
    this.seasonId = reader.readVarShort();
  }
};
var GameRolePlayShowActorWithEventMessage = class extends GameRolePlayShowActorMessage {
  static id = 2684;
  actorEventId = 0;
  constructor(informations, actorEventId) {
    super(informations);
    this.actorEventId = actorEventId;
  }
  serialize(writer) {
    writer.writeByte(this.actorEventId);
  }
  deserialize(reader) {
    this.actorEventId = reader.readByte();
  }
};
var HaapiAuthErrorMessage = class extends DofusMessage {
  static id = 5003;
  type = 0;
  constructor(type) {
    super();
    this.type = type;
  }
  serialize(writer) {
    writer.writeByte(this.type);
  }
  deserialize(reader) {
    this.type = reader.readByte();
  }
};
var PartyDeletedMessage = class extends AbstractPartyMessage {
  static id = 1436;
  constructor(partyId) {
    super(partyId);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GuildFactsMessage = class extends DofusMessage {
  static id = 2464;
  infos;
  nbTaxCollectors = 0;
  creationDate = 0;
  members;
  constructor(infos, nbTaxCollectors, creationDate, members) {
    super();
    this.infos = infos;
    this.nbTaxCollectors = nbTaxCollectors;
    this.creationDate = creationDate;
    this.members = members;
  }
  serialize(writer) {
    writer.writeShort(this.infos.id);
    this.infos.serialize(writer);
    writer.writeVarShort(this.nbTaxCollectors);
    writer.writeInt(this.creationDate);
    writer.writeShort(this.members.length);
    this.members.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    const infosTypeId = reader.readShort();
    this.infos = new types[infosTypeId]();
    this.infos.deserialize(reader);
    this.nbTaxCollectors = reader.readVarShort();
    this.creationDate = reader.readInt();
    this.members = [];
    const countMembers = reader.readShort();
    for (let i = 0; i < countMembers; i++) {
      const type = new CharacterMinimalGuildPublicInformations();
      type.deserialize(reader);
      this.members.push(type);
    }
  }
};
var GuildInAllianceFactsMessage = class extends GuildFactsMessage {
  static id = 6925;
  allianceInfos;
  constructor(infos, nbTaxCollectors, creationDate, members, allianceInfos) {
    super(infos, nbTaxCollectors, creationDate, members);
    this.allianceInfos = allianceInfos;
  }
  serialize(writer) {
    this.allianceInfos.serialize(writer);
  }
  deserialize(reader) {
    this.allianceInfos = new BasicNamedAllianceInformations();
    this.allianceInfos.deserialize(reader);
  }
};
var HouseBuyResultMessage = class extends DofusMessage {
  static id = 9533;
  houseId = 0;
  realPrice = 0;
  instanceId = 0;
  secondHand = false;
  bought = false;
  constructor(houseId, realPrice, instanceId, secondHand, bought) {
    super();
    this.houseId = houseId;
    this.realPrice = realPrice;
    this.instanceId = instanceId;
    this.secondHand = secondHand;
    this.bought = bought;
  }
  serialize(writer) {
    writer.writeVarInt(this.houseId);
    writer.writeVarLong(this.realPrice);
    writer.writeInt(this.instanceId);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.secondHand);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.bought);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.houseId = reader.readVarInt();
    this.realPrice = reader.readVarLong();
    this.instanceId = reader.readInt();
    const box0 = reader.readByte();
    this.secondHand = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.bought = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var SystemMessageDisplayMessage = class extends DofusMessage {
  static id = 4698;
  parameters;
  msgId = 0;
  hangUp = false;
  constructor(parameters, msgId, hangUp) {
    super();
    this.parameters = parameters;
    this.msgId = msgId;
    this.hangUp = hangUp;
  }
  serialize(writer) {
    writer.writeShort(this.parameters.length);
    this.parameters.forEach((current) => writer.writeUTF(current));
    writer.writeVarShort(this.msgId);
    writer.writeBoolean(this.hangUp);
  }
  deserialize(reader) {
    this.parameters = [];
    const countParameters = reader.readShort();
    for (let i = 0; i < countParameters; i++) {
      this.parameters.push(reader.readUTF());
    }
    this.msgId = reader.readVarShort();
    this.hangUp = reader.readBoolean();
  }
};
var GameMapSpeedMovementMessage = class extends DofusMessage {
  static id = 8414;
  speedMultiplier = 0;
  constructor(speedMultiplier) {
    super();
    this.speedMultiplier = speedMultiplier;
  }
  serialize(writer) {
    writer.writeInt(this.speedMultiplier);
  }
  deserialize(reader) {
    this.speedMultiplier = reader.readInt();
  }
};
var ExchangeBidHouseInListUpdatedMessage = class extends ExchangeBidHouseInListAddedMessage {
  static id = 5031;
  constructor(prices, objectGID, objectType, itemUID, effects) {
    super(prices, objectGID, objectType, itemUID, effects);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var AllianceModificationStartedMessage = class extends DofusMessage {
  static id = 6240;
  canChangeName = false;
  canChangeTag = false;
  canChangeEmblem = false;
  constructor(canChangeName, canChangeTag, canChangeEmblem) {
    super();
    this.canChangeName = canChangeName;
    this.canChangeTag = canChangeTag;
    this.canChangeEmblem = canChangeEmblem;
  }
  serialize(writer) {
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.canChangeName);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.canChangeTag);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 2, this.canChangeEmblem);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    const box0 = reader.readByte();
    this.canChangeName = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.canChangeTag = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
    this.canChangeEmblem = (0, import_hetwan2.bigEndianGetFlag)(box0, 2);
  }
};
var GameRolePlayArenaRegistrationWarningMessage = class extends DofusMessage {
  static id = 1528;
  battleMode = 3;
  constructor(battleMode) {
    super();
    this.battleMode = battleMode;
  }
  serialize(writer) {
    writer.writeInt(this.battleMode);
  }
  deserialize(reader) {
    this.battleMode = reader.readInt();
  }
};
var ExchangeMountsTakenFromPaddockMessage = class extends DofusMessage {
  static id = 2526;
  worldY = 0;
  ownername;
  worldX = 0;
  name;
  constructor(worldY, ownername, worldX, name) {
    super();
    this.worldY = worldY;
    this.ownername = ownername;
    this.worldX = worldX;
    this.name = name;
  }
  serialize(writer) {
    writer.writeShort(this.worldY);
    writer.writeUTF(this.ownername);
    writer.writeShort(this.worldX);
    writer.writeUTF(this.name);
  }
  deserialize(reader) {
    this.worldY = reader.readShort();
    this.ownername = reader.readUTF();
    this.worldX = reader.readShort();
    this.name = reader.readUTF();
  }
};
var RecycleResultMessage = class extends DofusMessage {
  static id = 2853;
  nuggetsForPlayer = 0;
  nuggetsForPrism = 0;
  constructor(nuggetsForPlayer, nuggetsForPrism) {
    super();
    this.nuggetsForPlayer = nuggetsForPlayer;
    this.nuggetsForPrism = nuggetsForPrism;
  }
  serialize(writer) {
    writer.writeVarInt(this.nuggetsForPlayer);
    writer.writeVarInt(this.nuggetsForPrism);
  }
  deserialize(reader) {
    this.nuggetsForPlayer = reader.readVarInt();
    this.nuggetsForPrism = reader.readVarInt();
  }
};
var HaapiTokenMessage = class extends DofusMessage {
  static id = 8938;
  token;
  constructor(token) {
    super();
    this.token = token;
  }
  serialize(writer) {
    writer.writeUTF(this.token);
  }
  deserialize(reader) {
    this.token = reader.readUTF();
  }
};
var CurrentServerStatusUpdateMessage = class extends DofusMessage {
  static id = 547;
  status = 1;
  constructor(status) {
    super();
    this.status = status;
  }
  serialize(writer) {
    writer.writeByte(this.status);
  }
  deserialize(reader) {
    this.status = reader.readByte();
  }
};
var PartyCannotJoinErrorMessage = class extends AbstractPartyMessage {
  static id = 8807;
  reason = 0;
  constructor(partyId, reason) {
    super(partyId);
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var AllianceGuildLeavingMessage = class extends DofusMessage {
  static id = 129;
  guildId = 0;
  kicked = false;
  constructor(guildId, kicked) {
    super();
    this.guildId = guildId;
    this.kicked = kicked;
  }
  serialize(writer) {
    writer.writeVarInt(this.guildId);
    writer.writeBoolean(this.kicked);
  }
  deserialize(reader) {
    this.guildId = reader.readVarInt();
    this.kicked = reader.readBoolean();
  }
};
var GuildInvitationStateRecruterMessage = class extends DofusMessage {
  static id = 5086;
  invitationState = 0;
  recrutedName;
  constructor(invitationState, recrutedName) {
    super();
    this.invitationState = invitationState;
    this.recrutedName = recrutedName;
  }
  serialize(writer) {
    writer.writeByte(this.invitationState);
    writer.writeUTF(this.recrutedName);
  }
  deserialize(reader) {
    this.invitationState = reader.readByte();
    this.recrutedName = reader.readUTF();
  }
};
var IgnoredListMessage = class extends DofusMessage {
  static id = 1938;
  ignoredList;
  constructor(ignoredList) {
    super();
    this.ignoredList = ignoredList;
  }
  serialize(writer) {
    writer.writeShort(this.ignoredList.length);
    this.ignoredList.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.ignoredList = [];
    const countIgnoredList = reader.readShort();
    for (let i = 0; i < countIgnoredList; i++) {
      const ignoredListTypeId = reader.readShort();
      const type = new types[ignoredListTypeId]();
      type.deserialize(reader);
      this.ignoredList.push(type);
    }
  }
};
var IgnoredAddedMessage = class extends DofusMessage {
  static id = 6480;
  session = false;
  ignoreAdded;
  constructor(session, ignoreAdded) {
    super();
    this.session = session;
    this.ignoreAdded = ignoreAdded;
  }
  serialize(writer) {
    writer.writeBoolean(this.session);
    writer.writeShort(this.ignoreAdded.id);
    this.ignoreAdded.serialize(writer);
  }
  deserialize(reader) {
    this.session = reader.readBoolean();
    const ignoreAddedTypeId = reader.readShort();
    this.ignoreAdded = new types[ignoreAddedTypeId]();
    this.ignoreAdded.deserialize(reader);
  }
};
var EntityInformationMessage = class extends DofusMessage {
  static id = 7474;
  entity;
  constructor(entity) {
    super();
    this.entity = entity;
  }
  serialize(writer) {
    this.entity.serialize(writer);
  }
  deserialize(reader) {
    this.entity = new EntityInformation();
    this.entity.deserialize(reader);
  }
};
var AchievementListMessage = class extends DofusMessage {
  static id = 4607;
  finishedAchievements;
  constructor(finishedAchievements) {
    super();
    this.finishedAchievements = finishedAchievements;
  }
  serialize(writer) {
    writer.writeShort(this.finishedAchievements.length);
    this.finishedAchievements.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.finishedAchievements = [];
    const countFinishedAchievements = reader.readShort();
    for (let i = 0; i < countFinishedAchievements; i++) {
      const finishedAchievementsTypeId = reader.readShort();
      const type = new types[finishedAchievementsTypeId]();
      type.deserialize(reader);
      this.finishedAchievements.push(type);
    }
  }
};
var AlignmentWarEffortProgressionMessage = class extends DofusMessage {
  static id = 2084;
  effortProgressions;
  constructor(effortProgressions) {
    super();
    this.effortProgressions = effortProgressions;
  }
  serialize(writer) {
    writer.writeShort(this.effortProgressions.length);
    this.effortProgressions.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.effortProgressions = [];
    const countEffortProgressions = reader.readShort();
    for (let i = 0; i < countEffortProgressions; i++) {
      const type = new AlignmentWarEffortInformation();
      type.deserialize(reader);
      this.effortProgressions.push(type);
    }
  }
};
var GuildHouseUpdateInformationMessage = class extends DofusMessage {
  static id = 6703;
  housesInformations;
  constructor(housesInformations) {
    super();
    this.housesInformations = housesInformations;
  }
  serialize(writer) {
    this.housesInformations.serialize(writer);
  }
  deserialize(reader) {
    this.housesInformations = new HouseInformationsForGuild();
    this.housesInformations.deserialize(reader);
  }
};
var MountDataMessage = class extends DofusMessage {
  static id = 5244;
  mountData;
  constructor(mountData) {
    super();
    this.mountData = mountData;
  }
  serialize(writer) {
    this.mountData.serialize(writer);
  }
  deserialize(reader) {
    this.mountData = new MountClientData();
    this.mountData.deserialize(reader);
  }
};
var NpcDialogCreationMessage = class extends DofusMessage {
  static id = 5848;
  npcId = 0;
  mapId = 0;
  constructor(npcId, mapId) {
    super();
    this.npcId = npcId;
    this.mapId = mapId;
  }
  serialize(writer) {
    writer.writeInt(this.npcId);
    writer.writeDouble(this.mapId);
  }
  deserialize(reader) {
    this.npcId = reader.readInt();
    this.mapId = reader.readDouble();
  }
};
var PortalDialogCreationMessage = class extends NpcDialogCreationMessage {
  static id = 2919;
  type = 0;
  constructor(npcId, mapId, type) {
    super(npcId, mapId);
    this.type = type;
  }
  serialize(writer) {
    writer.writeInt(this.type);
  }
  deserialize(reader) {
    this.type = reader.readInt();
  }
};
var PrismSetSabotagedRefusedMessage = class extends DofusMessage {
  static id = 5200;
  reason = 0;
  subAreaId = 0;
  constructor(reason, subAreaId) {
    super();
    this.reason = reason;
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
    this.subAreaId = reader.readVarShort();
  }
};
var MountSetMessage = class extends DofusMessage {
  static id = 5922;
  mountData;
  constructor(mountData) {
    super();
    this.mountData = mountData;
  }
  serialize(writer) {
    this.mountData.serialize(writer);
  }
  deserialize(reader) {
    this.mountData = new MountClientData();
    this.mountData.deserialize(reader);
  }
};
var PartyInvitationCancelledForGuestMessage = class extends AbstractPartyMessage {
  static id = 1943;
  cancelerId = 0;
  constructor(partyId, cancelerId) {
    super(partyId);
    this.cancelerId = cancelerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.cancelerId);
  }
  deserialize(reader) {
    this.cancelerId = reader.readVarLong();
  }
};
var ExchangeCraftCountModifiedMessage = class extends DofusMessage {
  static id = 2567;
  count = 0;
  constructor(count) {
    super();
    this.count = count;
  }
  serialize(writer) {
    writer.writeVarInt(this.count);
  }
  deserialize(reader) {
    this.count = reader.readVarInt();
  }
};
var ExchangeSellOkMessage = class extends DofusMessage {
  static id = 968;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GuildCreationStartedMessage = class extends DofusMessage {
  static id = 2607;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var MimicryObjectPreviewMessage = class extends DofusMessage {
  static id = 1198;
  result;
  constructor(result) {
    super();
    this.result = result;
  }
  serialize(writer) {
    this.result.serialize(writer);
  }
  deserialize(reader) {
    this.result = new ObjectItem();
    this.result.deserialize(reader);
  }
};
var NotificationListMessage = class extends DofusMessage {
  static id = 7026;
  flags;
  constructor(flags) {
    super();
    this.flags = flags;
  }
  serialize(writer) {
    writer.writeShort(this.flags.length);
    this.flags.forEach((current) => writer.writeVarInt(current));
  }
  deserialize(reader) {
    this.flags = [];
    const countFlags = reader.readShort();
    for (let i = 0; i < countFlags; i++) {
      this.flags.push(reader.readVarInt());
    }
  }
};
var StorageObjectUpdateMessage = class extends DofusMessage {
  static id = 728;
  object_;
  constructor(object_) {
    super();
    this.object_ = object_;
  }
  serialize(writer) {
    this.object_.serialize(writer);
  }
  deserialize(reader) {
    this.object_ = new ObjectItem();
    this.object_.deserialize(reader);
  }
};
var CharactersListErrorMessage = class extends DofusMessage {
  static id = 6129;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var JobCrafterDirectoryListMessage = class extends DofusMessage {
  static id = 7620;
  listEntries;
  constructor(listEntries) {
    super();
    this.listEntries = listEntries;
  }
  serialize(writer) {
    writer.writeShort(this.listEntries.length);
    this.listEntries.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.listEntries = [];
    const countListEntries = reader.readShort();
    for (let i = 0; i < countListEntries; i++) {
      const type = new JobCrafterDirectoryListEntry();
      type.deserialize(reader);
      this.listEntries.push(type);
    }
  }
};
var EditHavenBagFinishedMessage = class extends DofusMessage {
  static id = 2273;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var StatedElementUpdatedMessage = class extends DofusMessage {
  static id = 3961;
  statedElement;
  constructor(statedElement) {
    super();
    this.statedElement = statedElement;
  }
  serialize(writer) {
    this.statedElement.serialize(writer);
  }
  deserialize(reader) {
    this.statedElement = new StatedElement();
    this.statedElement.deserialize(reader);
  }
};
var IdolPartyRefreshMessage = class extends DofusMessage {
  static id = 7517;
  partyIdol;
  constructor(partyIdol) {
    super();
    this.partyIdol = partyIdol;
  }
  serialize(writer) {
    this.partyIdol.serialize(writer);
  }
  deserialize(reader) {
    this.partyIdol = new PartyIdol();
    this.partyIdol.deserialize(reader);
  }
};
var ClientYouAreDrunkMessage = class extends DebugInClientMessage {
  static id = 159;
  constructor(message, level) {
    super(message, level);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GameContextCreateErrorMessage = class extends DofusMessage {
  static id = 5698;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ObjectQuantityMessage = class extends DofusMessage {
  static id = 80;
  origin = 0;
  quantity = 0;
  objectUID = 0;
  constructor(origin, quantity, objectUID) {
    super();
    this.origin = origin;
    this.quantity = quantity;
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeByte(this.origin);
    writer.writeVarInt(this.quantity);
    writer.writeVarInt(this.objectUID);
  }
  deserialize(reader) {
    this.origin = reader.readByte();
    this.quantity = reader.readVarInt();
    this.objectUID = reader.readVarInt();
  }
};
var CharacterLevelUpMessage = class extends DofusMessage {
  static id = 6501;
  newLevel = 0;
  constructor(newLevel) {
    super();
    this.newLevel = newLevel;
  }
  serialize(writer) {
    writer.writeVarShort(this.newLevel);
  }
  deserialize(reader) {
    this.newLevel = reader.readVarShort();
  }
};
var CharacterLevelUpInformationMessage = class extends CharacterLevelUpMessage {
  static id = 2461;
  id_ = 0;
  name;
  constructor(newLevel, id_, name) {
    super(newLevel);
    this.id_ = id_;
    this.name = name;
  }
  serialize(writer) {
    writer.writeVarLong(this.id_);
    writer.writeUTF(this.name);
  }
  deserialize(reader) {
    this.id_ = reader.readVarLong();
    this.name = reader.readUTF();
  }
};
var GuildMemberWarnOnConnectionStateMessage = class extends DofusMessage {
  static id = 2986;
  enable = false;
  constructor(enable) {
    super();
    this.enable = enable;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
  }
};
var FriendUpdateMessage = class extends DofusMessage {
  static id = 2011;
  friendUpdated;
  constructor(friendUpdated) {
    super();
    this.friendUpdated = friendUpdated;
  }
  serialize(writer) {
    writer.writeShort(this.friendUpdated.id);
    this.friendUpdated.serialize(writer);
  }
  deserialize(reader) {
    const friendUpdatedTypeId = reader.readShort();
    this.friendUpdated = new types[friendUpdatedTypeId]();
    this.friendUpdated.deserialize(reader);
  }
};
var HavenBagPermissionsUpdateMessage = class extends DofusMessage {
  static id = 3186;
  permissions = 0;
  constructor(permissions) {
    super();
    this.permissions = permissions;
  }
  serialize(writer) {
    writer.writeInt(this.permissions);
  }
  deserialize(reader) {
    this.permissions = reader.readInt();
  }
};
var AuthenticationTicketRefusedMessage = class extends DofusMessage {
  static id = 2775;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var AchievementDetailsMessage = class extends DofusMessage {
  static id = 5303;
  achievement;
  constructor(achievement) {
    super();
    this.achievement = achievement;
  }
  serialize(writer) {
    this.achievement.serialize(writer);
  }
  deserialize(reader) {
    this.achievement = new Achievement();
    this.achievement.deserialize(reader);
  }
};
var TaxCollectorMovementMessage = class extends DofusMessage {
  static id = 4589;
  movementType = 0;
  basicInfos;
  playerId = 0;
  playerName;
  constructor(movementType, basicInfos, playerId, playerName) {
    super();
    this.movementType = movementType;
    this.basicInfos = basicInfos;
    this.playerId = playerId;
    this.playerName = playerName;
  }
  serialize(writer) {
    writer.writeByte(this.movementType);
    this.basicInfos.serialize(writer);
    writer.writeVarLong(this.playerId);
    writer.writeUTF(this.playerName);
  }
  deserialize(reader) {
    this.movementType = reader.readByte();
    this.basicInfos = new TaxCollectorBasicInformations();
    this.basicInfos.deserialize(reader);
    this.playerId = reader.readVarLong();
    this.playerName = reader.readUTF();
  }
};
var AlliancePrismDialogQuestionMessage = class extends DofusMessage {
  static id = 738;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ExchangeStartOkMountWithOutPaddockMessage = class extends DofusMessage {
  static id = 9985;
  stabledMountsDescription;
  constructor(stabledMountsDescription) {
    super();
    this.stabledMountsDescription = stabledMountsDescription;
  }
  serialize(writer) {
    writer.writeShort(this.stabledMountsDescription.length);
    this.stabledMountsDescription.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.stabledMountsDescription = [];
    const countStabledMountsDescription = reader.readShort();
    for (let i = 0; i < countStabledMountsDescription; i++) {
      const type = new MountClientData();
      type.deserialize(reader);
      this.stabledMountsDescription.push(type);
    }
  }
};
var TreasureHuntMessage = class extends DofusMessage {
  static id = 4513;
  availableRetryCount = 0;
  checkPointTotal = 0;
  checkPointCurrent = 0;
  questType = 0;
  flags;
  knownStepsList;
  startMapId = 0;
  totalStepCount = 0;
  constructor(availableRetryCount, checkPointTotal, checkPointCurrent, questType, flags, knownStepsList, startMapId, totalStepCount) {
    super();
    this.availableRetryCount = availableRetryCount;
    this.checkPointTotal = checkPointTotal;
    this.checkPointCurrent = checkPointCurrent;
    this.questType = questType;
    this.flags = flags;
    this.knownStepsList = knownStepsList;
    this.startMapId = startMapId;
    this.totalStepCount = totalStepCount;
  }
  serialize(writer) {
    writer.writeInt(this.availableRetryCount);
    writer.writeVarInt(this.checkPointTotal);
    writer.writeVarInt(this.checkPointCurrent);
    writer.writeByte(this.questType);
    writer.writeShort(this.flags.length);
    this.flags.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.knownStepsList.length);
    this.knownStepsList.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeDouble(this.startMapId);
    writer.writeByte(this.totalStepCount);
  }
  deserialize(reader) {
    this.availableRetryCount = reader.readInt();
    this.checkPointTotal = reader.readVarInt();
    this.checkPointCurrent = reader.readVarInt();
    this.questType = reader.readByte();
    this.flags = [];
    const countFlags = reader.readShort();
    for (let i = 0; i < countFlags; i++) {
      const type = new TreasureHuntFlag();
      type.deserialize(reader);
      this.flags.push(type);
    }
    this.knownStepsList = [];
    const countKnownStepsList = reader.readShort();
    for (let i = 0; i < countKnownStepsList; i++) {
      const knownStepsListTypeId = reader.readShort();
      const type = new types[knownStepsListTypeId]();
      type.deserialize(reader);
      this.knownStepsList.push(type);
    }
    this.startMapId = reader.readDouble();
    this.totalStepCount = reader.readByte();
  }
};
var ExchangeStartedWithPodsMessage = class extends ExchangeStartedMessage {
  static id = 2123;
  secondCharacterMaxWeight = 0;
  secondCharacterCurrentWeight = 0;
  firstCharacterCurrentWeight = 0;
  firstCharacterMaxWeight = 0;
  firstCharacterId = 0;
  secondCharacterId = 0;
  constructor(exchangeType, secondCharacterMaxWeight, secondCharacterCurrentWeight, firstCharacterCurrentWeight, firstCharacterMaxWeight, firstCharacterId, secondCharacterId) {
    super(exchangeType);
    this.secondCharacterMaxWeight = secondCharacterMaxWeight;
    this.secondCharacterCurrentWeight = secondCharacterCurrentWeight;
    this.firstCharacterCurrentWeight = firstCharacterCurrentWeight;
    this.firstCharacterMaxWeight = firstCharacterMaxWeight;
    this.firstCharacterId = firstCharacterId;
    this.secondCharacterId = secondCharacterId;
  }
  serialize(writer) {
    writer.writeVarInt(this.secondCharacterMaxWeight);
    writer.writeVarInt(this.secondCharacterCurrentWeight);
    writer.writeVarInt(this.firstCharacterCurrentWeight);
    writer.writeVarInt(this.firstCharacterMaxWeight);
    writer.writeDouble(this.firstCharacterId);
    writer.writeDouble(this.secondCharacterId);
  }
  deserialize(reader) {
    this.secondCharacterMaxWeight = reader.readVarInt();
    this.secondCharacterCurrentWeight = reader.readVarInt();
    this.firstCharacterCurrentWeight = reader.readVarInt();
    this.firstCharacterMaxWeight = reader.readVarInt();
    this.firstCharacterId = reader.readDouble();
    this.secondCharacterId = reader.readDouble();
  }
};
var GameRolePlayArenaFightPropositionMessage = class extends DofusMessage {
  static id = 2533;
  alliesId;
  duration = 0;
  fightId = 0;
  constructor(alliesId, duration, fightId) {
    super();
    this.alliesId = alliesId;
    this.duration = duration;
    this.fightId = fightId;
  }
  serialize(writer) {
    writer.writeShort(this.alliesId.length);
    this.alliesId.forEach((current) => writer.writeDouble(current));
    writer.writeVarShort(this.duration);
    writer.writeVarShort(this.fightId);
  }
  deserialize(reader) {
    this.alliesId = [];
    const countAlliesId = reader.readShort();
    for (let i = 0; i < countAlliesId; i++) {
      this.alliesId.push(reader.readDouble());
    }
    this.duration = reader.readVarShort();
    this.fightId = reader.readVarShort();
  }
};
var StartupActionAddMessage = class extends DofusMessage {
  static id = 1592;
  newAction;
  constructor(newAction) {
    super();
    this.newAction = newAction;
  }
  serialize(writer) {
    this.newAction.serialize(writer);
  }
  deserialize(reader) {
    this.newAction = new StartupActionAddObject();
    this.newAction.deserialize(reader);
  }
};
var PrismFightRemovedMessage = class extends DofusMessage {
  static id = 9563;
  subAreaId = 0;
  constructor(subAreaId) {
    super();
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.subAreaId = reader.readVarShort();
  }
};
var ItemNoMoreAvailableMessage = class extends DofusMessage {
  static id = 3384;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ChatServerWithObjectMessage = class extends ChatServerMessage {
  static id = 5967;
  objects;
  constructor(fingerprint, timestamp, content, channel, senderAccountId, prefix, senderName, senderId, objects) {
    super(
      fingerprint,
      timestamp,
      content,
      channel,
      senderAccountId,
      prefix,
      senderName,
      senderId
    );
    this.objects = objects;
  }
  serialize(writer) {
    writer.writeShort(this.objects.length);
    this.objects.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.objects = [];
    const countObjects = reader.readShort();
    for (let i = 0; i < countObjects; i++) {
      const type = new ObjectItem();
      type.deserialize(reader);
      this.objects.push(type);
    }
  }
};
var TaxCollectorMovementAddMessage = class extends DofusMessage {
  static id = 6509;
  informations;
  constructor(informations) {
    super();
    this.informations = informations;
  }
  serialize(writer) {
    writer.writeShort(this.informations.id);
    this.informations.serialize(writer);
  }
  deserialize(reader) {
    const informationsTypeId = reader.readShort();
    this.informations = new types[informationsTypeId]();
    this.informations.deserialize(reader);
  }
};
var EvolutiveObjectRecycleResultMessage = class extends DofusMessage {
  static id = 8805;
  recycledItems;
  constructor(recycledItems) {
    super();
    this.recycledItems = recycledItems;
  }
  serialize(writer) {
    writer.writeShort(this.recycledItems.length);
    this.recycledItems.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.recycledItems = [];
    const countRecycledItems = reader.readShort();
    for (let i = 0; i < countRecycledItems; i++) {
      const type = new RecycledItem();
      type.deserialize(reader);
      this.recycledItems.push(type);
    }
  }
};
var MoodSmileyResultMessage = class extends DofusMessage {
  static id = 6e3;
  smileyId = 0;
  resultCode = 1;
  constructor(smileyId, resultCode) {
    super();
    this.smileyId = smileyId;
    this.resultCode = resultCode;
  }
  serialize(writer) {
    writer.writeVarShort(this.smileyId);
    writer.writeByte(this.resultCode);
  }
  deserialize(reader) {
    this.smileyId = reader.readVarShort();
    this.resultCode = reader.readByte();
  }
};
var HaapiSessionMessage = class extends DofusMessage {
  static id = 5486;
  type = 0;
  key;
  constructor(type, key) {
    super();
    this.type = type;
    this.key = key;
  }
  serialize(writer) {
    writer.writeByte(this.type);
    writer.writeUTF(this.key);
  }
  deserialize(reader) {
    this.type = reader.readByte();
    this.key = reader.readUTF();
  }
};
var ExchangeStartOkMountMessage = class extends ExchangeStartOkMountWithOutPaddockMessage {
  static id = 9690;
  paddockedMountsDescription;
  constructor(stabledMountsDescription, paddockedMountsDescription) {
    super(stabledMountsDescription);
    this.paddockedMountsDescription = paddockedMountsDescription;
  }
  serialize(writer) {
    writer.writeShort(this.paddockedMountsDescription.length);
    this.paddockedMountsDescription.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.paddockedMountsDescription = [];
    const countPaddockedMountsDescription = reader.readShort();
    for (let i = 0; i < countPaddockedMountsDescription; i++) {
      const type = new MountClientData();
      type.deserialize(reader);
      this.paddockedMountsDescription.push(type);
    }
  }
};
var DocumentReadingBeginMessage = class extends DofusMessage {
  static id = 3768;
  documentId = 0;
  constructor(documentId) {
    super();
    this.documentId = documentId;
  }
  serialize(writer) {
    writer.writeVarShort(this.documentId);
  }
  deserialize(reader) {
    this.documentId = reader.readVarShort();
  }
};
var ServerExperienceModificatorMessage = class extends DofusMessage {
  static id = 7180;
  experiencePercent = 0;
  constructor(experiencePercent) {
    super();
    this.experiencePercent = experiencePercent;
  }
  serialize(writer) {
    writer.writeVarShort(this.experiencePercent);
  }
  deserialize(reader) {
    this.experiencePercent = reader.readVarShort();
  }
};
var ExchangeKamaModifiedMessage = class extends ExchangeObjectMessage {
  static id = 1705;
  quantity = 0;
  constructor(remote, quantity) {
    super(remote);
    this.quantity = quantity;
  }
  serialize(writer) {
    writer.writeVarLong(this.quantity);
  }
  deserialize(reader) {
    this.quantity = reader.readVarLong();
  }
};
var IdentificationSuccessWithLoginTokenMessage = class extends IdentificationSuccessMessage {
  static id = 2204;
  loginToken;
  constructor(havenbagAvailableRoom, subscriptionElapsedDuration, communityId, accountTag, accountId, login, secretQuestion, subscriptionEndDate, accountCreation, hasRights, hasConsoleRight, wasAlreadyConnected, loginToken) {
    super(
      havenbagAvailableRoom,
      subscriptionElapsedDuration,
      communityId,
      accountTag,
      accountId,
      login,
      secretQuestion,
      subscriptionEndDate,
      accountCreation,
      hasRights,
      hasConsoleRight,
      wasAlreadyConnected
    );
    this.loginToken = loginToken;
  }
  serialize(writer) {
    writer.writeUTF(this.loginToken);
  }
  deserialize(reader) {
    this.loginToken = reader.readUTF();
  }
};
var GameRolePlayDelayedObjectUseMessage = class extends GameRolePlayDelayedActionMessage {
  static id = 1157;
  objectGID = 0;
  constructor(delayTypeId, delayEndTime, delayedCharacterId, objectGID) {
    super(delayTypeId, delayEndTime, delayedCharacterId);
    this.objectGID = objectGID;
  }
  serialize(writer) {
    writer.writeVarShort(this.objectGID);
  }
  deserialize(reader) {
    this.objectGID = reader.readVarShort();
  }
};
var CharacterCapabilitiesMessage = class extends DofusMessage {
  static id = 344;
  guildEmblemSymbolCategories = 0;
  constructor(guildEmblemSymbolCategories) {
    super();
    this.guildEmblemSymbolCategories = guildEmblemSymbolCategories;
  }
  serialize(writer) {
    writer.writeVarInt(this.guildEmblemSymbolCategories);
  }
  deserialize(reader) {
    this.guildEmblemSymbolCategories = reader.readVarInt();
  }
};
var PaddockBuyResultMessage = class extends DofusMessage {
  static id = 6835;
  realPrice = 0;
  bought = false;
  paddockId = 0;
  constructor(realPrice, bought, paddockId) {
    super();
    this.realPrice = realPrice;
    this.bought = bought;
    this.paddockId = paddockId;
  }
  serialize(writer) {
    writer.writeVarLong(this.realPrice);
    writer.writeBoolean(this.bought);
    writer.writeDouble(this.paddockId);
  }
  deserialize(reader) {
    this.realPrice = reader.readVarLong();
    this.bought = reader.readBoolean();
    this.paddockId = reader.readDouble();
  }
};
var AllianceCreationResultMessage = class extends DofusMessage {
  static id = 4954;
  result = 0;
  constructor(result) {
    super();
    this.result = result;
  }
  serialize(writer) {
    writer.writeByte(this.result);
  }
  deserialize(reader) {
    this.result = reader.readByte();
  }
};
var PartyMemberInBreachFightMessage = class extends AbstractPartyMemberInFightMessage {
  static id = 9876;
  room = 0;
  floor = 0;
  constructor(partyId, timeBeforeFightStart, reason, memberAccountId, fightId, memberId, memberName, room, floor) {
    super(
      partyId,
      timeBeforeFightStart,
      reason,
      memberAccountId,
      fightId,
      memberId,
      memberName
    );
    this.room = room;
    this.floor = floor;
  }
  serialize(writer) {
    writer.writeByte(this.room);
    writer.writeVarInt(this.floor);
  }
  deserialize(reader) {
    this.room = reader.readByte();
    this.floor = reader.readVarInt();
  }
};
var PartyNameUpdateMessage = class extends AbstractPartyMessage {
  static id = 4910;
  partyName;
  constructor(partyId, partyName) {
    super(partyId);
    this.partyName = partyName;
  }
  serialize(writer) {
    writer.writeUTF(this.partyName);
  }
  deserialize(reader) {
    this.partyName = reader.readUTF();
  }
};
var StartupActionFinishedMessage = class extends DofusMessage {
  static id = 6394;
  actionId = 0;
  success = false;
  automaticAction = false;
  constructor(actionId, success, automaticAction) {
    super();
    this.actionId = actionId;
    this.success = success;
    this.automaticAction = automaticAction;
  }
  serialize(writer) {
    writer.writeInt(this.actionId);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.success);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.automaticAction);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.actionId = reader.readInt();
    const box0 = reader.readByte();
    this.success = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.automaticAction = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var ExchangeStartOkNpcTradeMessage = class extends DofusMessage {
  static id = 4055;
  npcId = 0;
  constructor(npcId) {
    super();
    this.npcId = npcId;
  }
  serialize(writer) {
    writer.writeDouble(this.npcId);
  }
  deserialize(reader) {
    this.npcId = reader.readDouble();
  }
};
var ChatErrorMessage = class extends DofusMessage {
  static id = 5479;
  reason = 0;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var HouseGuildRightsMessage = class extends DofusMessage {
  static id = 5258;
  houseId = 0;
  secondHand = false;
  rights = 0;
  instanceId = 0;
  guildInfo;
  constructor(houseId, secondHand, rights, instanceId, guildInfo) {
    super();
    this.houseId = houseId;
    this.secondHand = secondHand;
    this.rights = rights;
    this.instanceId = instanceId;
    this.guildInfo = guildInfo;
  }
  serialize(writer) {
    writer.writeVarInt(this.houseId);
    writer.writeBoolean(this.secondHand);
    writer.writeVarInt(this.rights);
    writer.writeInt(this.instanceId);
    this.guildInfo.serialize(writer);
  }
  deserialize(reader) {
    this.houseId = reader.readVarInt();
    this.secondHand = reader.readBoolean();
    this.rights = reader.readVarInt();
    this.instanceId = reader.readInt();
    this.guildInfo = new GuildInformations();
    this.guildInfo.deserialize(reader);
  }
};
var DungeonKeyRingUpdateMessage = class extends DofusMessage {
  static id = 2874;
  available = false;
  dungeonId = 0;
  constructor(available, dungeonId) {
    super();
    this.available = available;
    this.dungeonId = dungeonId;
  }
  serialize(writer) {
    writer.writeBoolean(this.available);
    writer.writeVarShort(this.dungeonId);
  }
  deserialize(reader) {
    this.available = reader.readBoolean();
    this.dungeonId = reader.readVarShort();
  }
};
var PrismFightAttackerRemoveMessage = class extends DofusMessage {
  static id = 300;
  fighterToRemoveId = 0;
  fightId = 0;
  subAreaId = 0;
  constructor(fighterToRemoveId, fightId, subAreaId) {
    super();
    this.fighterToRemoveId = fighterToRemoveId;
    this.fightId = fightId;
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeVarLong(this.fighterToRemoveId);
    writer.writeVarShort(this.fightId);
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.fighterToRemoveId = reader.readVarLong();
    this.fightId = reader.readVarShort();
    this.subAreaId = reader.readVarShort();
  }
};
var AllianceLeftMessage = class extends DofusMessage {
  static id = 1278;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var AllianceInvitationStateRecrutedMessage = class extends DofusMessage {
  static id = 7918;
  invitationState = 0;
  constructor(invitationState) {
    super();
    this.invitationState = invitationState;
  }
  serialize(writer) {
    writer.writeByte(this.invitationState);
  }
  deserialize(reader) {
    this.invitationState = reader.readByte();
  }
};
var ExchangeStartOkCraftWithInformationMessage = class extends ExchangeStartOkCraftMessage {
  static id = 9154;
  skillId = 0;
  constructor(skillId) {
    super();
    this.skillId = skillId;
  }
  serialize(writer) {
    writer.writeVarInt(this.skillId);
  }
  deserialize(reader) {
    this.skillId = reader.readVarInt();
  }
};
var MountUnSetMessage = class extends DofusMessage {
  static id = 5361;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var MountXpRatioMessage = class extends DofusMessage {
  static id = 1527;
  ratio = 0;
  constructor(ratio) {
    super();
    this.ratio = ratio;
  }
  serialize(writer) {
    writer.writeByte(this.ratio);
  }
  deserialize(reader) {
    this.ratio = reader.readByte();
  }
};
var JobExperienceMultiUpdateMessage = class extends DofusMessage {
  static id = 4771;
  experiencesUpdate;
  constructor(experiencesUpdate) {
    super();
    this.experiencesUpdate = experiencesUpdate;
  }
  serialize(writer) {
    writer.writeShort(this.experiencesUpdate.length);
    this.experiencesUpdate.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.experiencesUpdate = [];
    const countExperiencesUpdate = reader.readShort();
    for (let i = 0; i < countExperiencesUpdate; i++) {
      const type = new JobExperience();
      type.deserialize(reader);
      this.experiencesUpdate.push(type);
    }
  }
};
var AlmanachCalendarDateMessage = class extends DofusMessage {
  static id = 2577;
  date = 0;
  constructor(date) {
    super();
    this.date = date;
  }
  serialize(writer) {
    writer.writeInt(this.date);
  }
  deserialize(reader) {
    this.date = reader.readInt();
  }
};
var ContactLookErrorMessage = class extends DofusMessage {
  static id = 9873;
  requestId = 0;
  constructor(requestId) {
    super();
    this.requestId = requestId;
  }
  serialize(writer) {
    writer.writeVarInt(this.requestId);
  }
  deserialize(reader) {
    this.requestId = reader.readVarInt();
  }
};
var ObjectModifiedMessage = class extends DofusMessage {
  static id = 2793;
  object_;
  constructor(object_) {
    super();
    this.object_ = object_;
  }
  serialize(writer) {
    this.object_.serialize(writer);
  }
  deserialize(reader) {
    this.object_ = new ObjectItem();
    this.object_.deserialize(reader);
  }
};
var ExchangeWeightMessage = class extends DofusMessage {
  static id = 5653;
  maxWeight = 0;
  currentWeight = 0;
  constructor(maxWeight, currentWeight) {
    super();
    this.maxWeight = maxWeight;
    this.currentWeight = currentWeight;
  }
  serialize(writer) {
    writer.writeVarInt(this.maxWeight);
    writer.writeVarInt(this.currentWeight);
  }
  deserialize(reader) {
    this.maxWeight = reader.readVarInt();
    this.currentWeight = reader.readVarInt();
  }
};
var PartyNewGuestMessage = class extends AbstractPartyEventMessage {
  static id = 1263;
  guest;
  constructor(partyId, guest) {
    super(partyId);
    this.guest = guest;
  }
  serialize(writer) {
    this.guest.serialize(writer);
  }
  deserialize(reader) {
    this.guest = new PartyGuestInformations();
    this.guest.deserialize(reader);
  }
};
var HelloConnectMessage = class extends DofusMessage {
  static id = 6739;
  key;
  salt;
  constructor(key, salt) {
    super();
    this.key = key;
    this.salt = salt;
  }
  serialize(writer) {
    writer.writeVarInt(this.key.length);
    this.key.forEach((current) => writer.writeByte(current));
    writer.writeUTF(this.salt);
  }
  deserialize(reader) {
    this.key = [];
    const countKey = reader.readVarInt();
    for (let i = 0; i < countKey; i++) {
      this.key.push(reader.readByte());
    }
    this.salt = reader.readUTF();
  }
};
var FriendStatusShareStateMessage = class extends DofusMessage {
  static id = 433;
  share = false;
  constructor(share) {
    super();
    this.share = share;
  }
  serialize(writer) {
    writer.writeBoolean(this.share);
  }
  deserialize(reader) {
    this.share = reader.readBoolean();
  }
};
var HouseGuildNoneMessage = class extends DofusMessage {
  static id = 9562;
  instanceId = 0;
  secondHand = false;
  houseId = 0;
  constructor(instanceId, secondHand, houseId) {
    super();
    this.instanceId = instanceId;
    this.secondHand = secondHand;
    this.houseId = houseId;
  }
  serialize(writer) {
    writer.writeInt(this.instanceId);
    writer.writeBoolean(this.secondHand);
    writer.writeVarInt(this.houseId);
  }
  deserialize(reader) {
    this.instanceId = reader.readInt();
    this.secondHand = reader.readBoolean();
    this.houseId = reader.readVarInt();
  }
};
var ChatServerCopyWithObjectMessage = class extends ChatServerCopyMessage {
  static id = 9930;
  objects;
  constructor(fingerprint, timestamp, content, channel, receiverName, receiverId, objects) {
    super(fingerprint, timestamp, content, channel, receiverName, receiverId);
    this.objects = objects;
  }
  serialize(writer) {
    writer.writeShort(this.objects.length);
    this.objects.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.objects = [];
    const countObjects = reader.readShort();
    for (let i = 0; i < countObjects; i++) {
      const type = new ObjectItem();
      type.deserialize(reader);
      this.objects.push(type);
    }
  }
};
var MountRidingMessage = class extends DofusMessage {
  static id = 6231;
  isRiding = false;
  isAutopilot = false;
  constructor(isRiding, isAutopilot) {
    super();
    this.isRiding = isRiding;
    this.isAutopilot = isAutopilot;
  }
  serialize(writer) {
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.isRiding);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.isAutopilot);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    const box0 = reader.readByte();
    this.isRiding = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.isAutopilot = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var ShortcutBarRemoveErrorMessage = class extends DofusMessage {
  static id = 5661;
  error = 0;
  constructor(error) {
    super();
    this.error = error;
  }
  serialize(writer) {
    writer.writeByte(this.error);
  }
  deserialize(reader) {
    this.error = reader.readByte();
  }
};
var ChannelEnablingChangeMessage = class extends DofusMessage {
  static id = 4041;
  enable = false;
  channel = 0;
  constructor(enable, channel) {
    super();
    this.enable = enable;
    this.channel = channel;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
    writer.writeByte(this.channel);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
    this.channel = reader.readByte();
  }
};
var PartyNameSetErrorMessage = class extends AbstractPartyMessage {
  static id = 9899;
  result = 0;
  constructor(partyId, result) {
    super(partyId);
    this.result = result;
  }
  serialize(writer) {
    writer.writeByte(this.result);
  }
  deserialize(reader) {
    this.result = reader.readByte();
  }
};
var GameFightPlacementSwapPositionsOfferMessage = class extends DofusMessage {
  static id = 519;
  requestId = 0;
  requestedCellId = 0;
  requestedId = 0;
  requesterId = 0;
  requesterCellId = 0;
  constructor(requestId, requestedCellId, requestedId, requesterId, requesterCellId) {
    super();
    this.requestId = requestId;
    this.requestedCellId = requestedCellId;
    this.requestedId = requestedId;
    this.requesterId = requesterId;
    this.requesterCellId = requesterCellId;
  }
  serialize(writer) {
    writer.writeInt(this.requestId);
    writer.writeVarShort(this.requestedCellId);
    writer.writeDouble(this.requestedId);
    writer.writeDouble(this.requesterId);
    writer.writeVarShort(this.requesterCellId);
  }
  deserialize(reader) {
    this.requestId = reader.readInt();
    this.requestedCellId = reader.readVarShort();
    this.requestedId = reader.readDouble();
    this.requesterId = reader.readDouble();
    this.requesterCellId = reader.readVarShort();
  }
};
var AllianceInsiderInfoMessage = class extends DofusMessage {
  static id = 3553;
  allianceInfos;
  prisms;
  guilds;
  constructor(allianceInfos, prisms, guilds) {
    super();
    this.allianceInfos = allianceInfos;
    this.prisms = prisms;
    this.guilds = guilds;
  }
  serialize(writer) {
    this.allianceInfos.serialize(writer);
    writer.writeShort(this.prisms.length);
    this.prisms.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.guilds.length);
    this.guilds.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.allianceInfos = new AllianceFactSheetInformations();
    this.allianceInfos.deserialize(reader);
    this.prisms = [];
    const countPrisms = reader.readShort();
    for (let i = 0; i < countPrisms; i++) {
      const prismsTypeId = reader.readShort();
      const type = new types[prismsTypeId]();
      type.deserialize(reader);
      this.prisms.push(type);
    }
    this.guilds = [];
    const countGuilds = reader.readShort();
    for (let i = 0; i < countGuilds; i++) {
      const type = new GuildInsiderFactSheetInformations();
      type.deserialize(reader);
      this.guilds.push(type);
    }
  }
};
var HouseToSellListMessage = class extends DofusMessage {
  static id = 4515;
  houseList;
  totalPage = 0;
  pageIndex = 0;
  constructor(houseList, totalPage, pageIndex) {
    super();
    this.houseList = houseList;
    this.totalPage = totalPage;
    this.pageIndex = pageIndex;
  }
  serialize(writer) {
    writer.writeShort(this.houseList.length);
    this.houseList.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.totalPage);
    writer.writeVarShort(this.pageIndex);
  }
  deserialize(reader) {
    this.houseList = [];
    const countHouseList = reader.readShort();
    for (let i = 0; i < countHouseList; i++) {
      const type = new HouseInformationsForSell();
      type.deserialize(reader);
      this.houseList.push(type);
    }
    this.totalPage = reader.readVarShort();
    this.pageIndex = reader.readVarShort();
  }
};
var BreachRewardBoughtMessage = class extends DofusMessage {
  static id = 3950;
  bought = false;
  id_ = 0;
  constructor(bought, id_) {
    super();
    this.bought = bought;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeBoolean(this.bought);
    writer.writeVarInt(this.id_);
  }
  deserialize(reader) {
    this.bought = reader.readBoolean();
    this.id_ = reader.readVarInt();
  }
};
var ExchangeMountFreeFromPaddockMessage = class extends DofusMessage {
  static id = 4810;
  liberator;
  worldY = 0;
  worldX = 0;
  name;
  constructor(liberator, worldY, worldX, name) {
    super();
    this.liberator = liberator;
    this.worldY = worldY;
    this.worldX = worldX;
    this.name = name;
  }
  serialize(writer) {
    writer.writeUTF(this.liberator);
    writer.writeShort(this.worldY);
    writer.writeShort(this.worldX);
    writer.writeUTF(this.name);
  }
  deserialize(reader) {
    this.liberator = reader.readUTF();
    this.worldY = reader.readShort();
    this.worldX = reader.readShort();
    this.name = reader.readUTF();
  }
};
var EnabledChannelsMessage = class extends DofusMessage {
  static id = 9261;
  disallowed;
  channels;
  constructor(disallowed, channels) {
    super();
    this.disallowed = disallowed;
    this.channels = channels;
  }
  serialize(writer) {
    writer.writeShort(this.disallowed.length);
    this.disallowed.forEach((current) => writer.writeByte(current));
    writer.writeShort(this.channels.length);
    this.channels.forEach((current) => writer.writeByte(current));
  }
  deserialize(reader) {
    this.disallowed = [];
    const countDisallowed = reader.readShort();
    for (let i = 0; i < countDisallowed; i++) {
      this.disallowed.push(reader.readByte());
    }
    this.channels = [];
    const countChannels = reader.readShort();
    for (let i = 0; i < countChannels; i++) {
      this.channels.push(reader.readByte());
    }
  }
};
var CinematicMessage = class extends DofusMessage {
  static id = 5054;
  cinematicId = 0;
  constructor(cinematicId) {
    super();
    this.cinematicId = cinematicId;
  }
  serialize(writer) {
    writer.writeVarShort(this.cinematicId);
  }
  deserialize(reader) {
    this.cinematicId = reader.readVarShort();
  }
};
var ExchangeStartOkJobIndexMessage = class extends DofusMessage {
  static id = 1146;
  jobs;
  constructor(jobs) {
    super();
    this.jobs = jobs;
  }
  serialize(writer) {
    writer.writeShort(this.jobs.length);
    this.jobs.forEach((current) => writer.writeVarInt(current));
  }
  deserialize(reader) {
    this.jobs = [];
    const countJobs = reader.readShort();
    for (let i = 0; i < countJobs; i++) {
      this.jobs.push(reader.readVarInt());
    }
  }
};
var GameFightPlacementPossiblePositionsMessage = class extends DofusMessage {
  static id = 3019;
  positionsForChallengers;
  teamNumber = 2;
  positionsForDefenders;
  constructor(positionsForChallengers, teamNumber, positionsForDefenders) {
    super();
    this.positionsForChallengers = positionsForChallengers;
    this.teamNumber = teamNumber;
    this.positionsForDefenders = positionsForDefenders;
  }
  serialize(writer) {
    writer.writeShort(this.positionsForChallengers.length);
    this.positionsForChallengers.forEach(
      (current) => writer.writeVarShort(current)
    );
    writer.writeByte(this.teamNumber);
    writer.writeShort(this.positionsForDefenders.length);
    this.positionsForDefenders.forEach(
      (current) => writer.writeVarShort(current)
    );
  }
  deserialize(reader) {
    this.positionsForChallengers = [];
    const countPositionsForChallengers = reader.readShort();
    for (let i = 0; i < countPositionsForChallengers; i++) {
      this.positionsForChallengers.push(reader.readVarShort());
    }
    this.teamNumber = reader.readByte();
    this.positionsForDefenders = [];
    const countPositionsForDefenders = reader.readShort();
    for (let i = 0; i < countPositionsForDefenders; i++) {
      this.positionsForDefenders.push(reader.readVarShort());
    }
  }
};
var CharacterSelectedErrorMessage = class extends DofusMessage {
  static id = 9221;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var AccountLinkRequiredMessage = class extends DofusMessage {
  static id = 5437;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var AchievementRewardSuccessMessage = class extends DofusMessage {
  static id = 2669;
  achievementId = 0;
  constructor(achievementId) {
    super();
    this.achievementId = achievementId;
  }
  serialize(writer) {
    writer.writeShort(this.achievementId);
  }
  deserialize(reader) {
    this.achievementId = reader.readShort();
  }
};
var MigratedServerListMessage = class extends DofusMessage {
  static id = 970;
  migratedServerIds;
  constructor(migratedServerIds) {
    super();
    this.migratedServerIds = migratedServerIds;
  }
  serialize(writer) {
    writer.writeShort(this.migratedServerIds.length);
    this.migratedServerIds.forEach(
      (current) => writer.writeVarShort(current)
    );
  }
  deserialize(reader) {
    this.migratedServerIds = [];
    const countMigratedServerIds = reader.readShort();
    for (let i = 0; i < countMigratedServerIds; i++) {
      this.migratedServerIds.push(reader.readVarShort());
    }
  }
};
var CompassResetMessage = class extends DofusMessage {
  static id = 4432;
  type = 0;
  constructor(type) {
    super();
    this.type = type;
  }
  serialize(writer) {
    writer.writeByte(this.type);
  }
  deserialize(reader) {
    this.type = reader.readByte();
  }
};
var ExchangeObjectRemovedFromBagMessage = class extends ExchangeObjectMessage {
  static id = 1851;
  objectUID = 0;
  constructor(remote, objectUID) {
    super(remote);
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeVarInt(this.objectUID);
  }
  deserialize(reader) {
    this.objectUID = reader.readVarInt();
  }
};
var PartyJoinMessage = class extends AbstractPartyMessage {
  static id = 2536;
  restricted = false;
  guests;
  partyType = 0;
  partyName;
  members;
  partyLeaderId = 0;
  maxParticipants = 0;
  constructor(partyId, restricted, guests, partyType, partyName, members, partyLeaderId, maxParticipants) {
    super(partyId);
    this.restricted = restricted;
    this.guests = guests;
    this.partyType = partyType;
    this.partyName = partyName;
    this.members = members;
    this.partyLeaderId = partyLeaderId;
    this.maxParticipants = maxParticipants;
  }
  serialize(writer) {
    writer.writeBoolean(this.restricted);
    writer.writeShort(this.guests.length);
    this.guests.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeByte(this.partyType);
    writer.writeUTF(this.partyName);
    writer.writeShort(this.members.length);
    this.members.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarLong(this.partyLeaderId);
    writer.writeByte(this.maxParticipants);
  }
  deserialize(reader) {
    this.restricted = reader.readBoolean();
    this.guests = [];
    const countGuests = reader.readShort();
    for (let i = 0; i < countGuests; i++) {
      const type = new PartyGuestInformations();
      type.deserialize(reader);
      this.guests.push(type);
    }
    this.partyType = reader.readByte();
    this.partyName = reader.readUTF();
    this.members = [];
    const countMembers = reader.readShort();
    for (let i = 0; i < countMembers; i++) {
      const membersTypeId = reader.readShort();
      const type = new types[membersTypeId]();
      type.deserialize(reader);
      this.members.push(type);
    }
    this.partyLeaderId = reader.readVarLong();
    this.maxParticipants = reader.readByte();
  }
};
var WatchInventoryContentMessage = class extends InventoryContentMessage {
  static id = 8233;
  constructor(kamas, objects) {
    super(kamas, objects);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var StorageKamasUpdateMessage = class extends DofusMessage {
  static id = 4689;
  kamasTotal = 0;
  constructor(kamasTotal) {
    super();
    this.kamasTotal = kamasTotal;
  }
  serialize(writer) {
    writer.writeVarLong(this.kamasTotal);
  }
  deserialize(reader) {
    this.kamasTotal = reader.readVarLong();
  }
};
var HouseSellingUpdateMessage = class extends DofusMessage {
  static id = 3951;
  buyerTag;
  houseId = 0;
  instanceId = 0;
  secondHand = false;
  realPrice = 0;
  constructor(buyerTag, houseId, instanceId, secondHand, realPrice) {
    super();
    this.buyerTag = buyerTag;
    this.houseId = houseId;
    this.instanceId = instanceId;
    this.secondHand = secondHand;
    this.realPrice = realPrice;
  }
  serialize(writer) {
    this.buyerTag.serialize(writer);
    writer.writeVarInt(this.houseId);
    writer.writeInt(this.instanceId);
    writer.writeBoolean(this.secondHand);
    writer.writeVarLong(this.realPrice);
  }
  deserialize(reader) {
    this.buyerTag = new AccountTagInformation();
    this.buyerTag.deserialize(reader);
    this.houseId = reader.readVarInt();
    this.instanceId = reader.readInt();
    this.secondHand = reader.readBoolean();
    this.realPrice = reader.readVarLong();
  }
};
var ShortcutBarReplacedMessage = class extends DofusMessage {
  static id = 5103;
  shortcut;
  barType = 0;
  constructor(shortcut, barType) {
    super();
    this.shortcut = shortcut;
    this.barType = barType;
  }
  serialize(writer) {
    writer.writeShort(this.shortcut.id);
    this.shortcut.serialize(writer);
    writer.writeByte(this.barType);
  }
  deserialize(reader) {
    const shortcutTypeId = reader.readShort();
    this.shortcut = new types[shortcutTypeId]();
    this.shortcut.deserialize(reader);
    this.barType = reader.readByte();
  }
};
var JobBookSubscriptionMessage = class extends DofusMessage {
  static id = 8266;
  subscriptions;
  constructor(subscriptions) {
    super();
    this.subscriptions = subscriptions;
  }
  serialize(writer) {
    writer.writeShort(this.subscriptions.length);
    this.subscriptions.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.subscriptions = [];
    const countSubscriptions = reader.readShort();
    for (let i = 0; i < countSubscriptions; i++) {
      const type = new JobBookSubscription();
      type.deserialize(reader);
      this.subscriptions.push(type);
    }
  }
};
var PrismSettingsErrorMessage = class extends DofusMessage {
  static id = 2594;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ExchangeCraftResultWithObjectIdMessage = class extends ExchangeCraftResultMessage {
  static id = 7556;
  objectGenericId = 0;
  constructor(craftResult, objectGenericId) {
    super(craftResult);
    this.objectGenericId = objectGenericId;
  }
  serialize(writer) {
    writer.writeVarShort(this.objectGenericId);
  }
  deserialize(reader) {
    this.objectGenericId = reader.readVarShort();
  }
};
var BreachKickResponseMessage = class extends DofusMessage {
  static id = 5114;
  kicked = false;
  target;
  constructor(kicked, target) {
    super();
    this.kicked = kicked;
    this.target = target;
  }
  serialize(writer) {
    writer.writeBoolean(this.kicked);
    this.target.serialize(writer);
  }
  deserialize(reader) {
    this.kicked = reader.readBoolean();
    this.target = new CharacterMinimalInformations();
    this.target.deserialize(reader);
  }
};
var SpouseInformationsMessage = class extends DofusMessage {
  static id = 8493;
  spouse;
  constructor(spouse) {
    super();
    this.spouse = spouse;
  }
  serialize(writer) {
    writer.writeShort(this.spouse.id);
    this.spouse.serialize(writer);
  }
  deserialize(reader) {
    const spouseTypeId = reader.readShort();
    this.spouse = new types[spouseTypeId]();
    this.spouse.deserialize(reader);
  }
};
var HaapiBuyValidationMessage = class extends HaapiValidationMessage {
  static id = 9648;
  email;
  amount = 0;
  constructor(code, action, email, amount) {
    super(code, action);
    this.email = email;
    this.amount = amount;
  }
  serialize(writer) {
    writer.writeUTF(this.email);
    writer.writeVarLong(this.amount);
  }
  deserialize(reader) {
    this.email = reader.readUTF();
    this.amount = reader.readVarLong();
  }
};
var TitleLostMessage = class extends DofusMessage {
  static id = 1427;
  titleId = 0;
  constructor(titleId) {
    super();
    this.titleId = titleId;
  }
  serialize(writer) {
    writer.writeVarShort(this.titleId);
  }
  deserialize(reader) {
    this.titleId = reader.readVarShort();
  }
};
var PresetSavedMessage = class extends DofusMessage {
  static id = 4820;
  preset;
  presetId = 0;
  constructor(preset, presetId) {
    super();
    this.preset = preset;
    this.presetId = presetId;
  }
  serialize(writer) {
    writer.writeShort(this.preset.id);
    this.preset.serialize(writer);
    writer.writeShort(this.presetId);
  }
  deserialize(reader) {
    const presetTypeId = reader.readShort();
    this.preset = new types[presetTypeId]();
    this.preset.deserialize(reader);
    this.presetId = reader.readShort();
  }
};
var ExchangeStartOkRunesTradeMessage = class extends DofusMessage {
  static id = 1847;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ShortcutBarRefreshMessage = class extends DofusMessage {
  static id = 4458;
  shortcut;
  barType = 0;
  constructor(shortcut, barType) {
    super();
    this.shortcut = shortcut;
    this.barType = barType;
  }
  serialize(writer) {
    writer.writeShort(this.shortcut.id);
    this.shortcut.serialize(writer);
    writer.writeByte(this.barType);
  }
  deserialize(reader) {
    const shortcutTypeId = reader.readShort();
    this.shortcut = new types[shortcutTypeId]();
    this.shortcut.deserialize(reader);
    this.barType = reader.readByte();
  }
};
var DungeonKeyRingMessage = class extends DofusMessage {
  static id = 6497;
  unavailables;
  availables;
  constructor(unavailables, availables) {
    super();
    this.unavailables = unavailables;
    this.availables = availables;
  }
  serialize(writer) {
    writer.writeShort(this.unavailables.length);
    this.unavailables.forEach(
      (current) => writer.writeVarShort(current)
    );
    writer.writeShort(this.availables.length);
    this.availables.forEach(
      (current) => writer.writeVarShort(current)
    );
  }
  deserialize(reader) {
    this.unavailables = [];
    const countUnavailables = reader.readShort();
    for (let i = 0; i < countUnavailables; i++) {
      this.unavailables.push(reader.readVarShort());
    }
    this.availables = [];
    const countAvailables = reader.readShort();
    for (let i = 0; i < countAvailables; i++) {
      this.availables.push(reader.readVarShort());
    }
  }
};
var TeleportOnSameMapMessage = class extends DofusMessage {
  static id = 9521;
  cellId = 0;
  targetId = 0;
  constructor(cellId, targetId) {
    super();
    this.cellId = cellId;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeVarShort(this.cellId);
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.cellId = reader.readVarShort();
    this.targetId = reader.readDouble();
  }
};
var GuildPlayerNoApplicationInformationMessage = class extends GuildPlayerApplicationAbstractMessage {
  static id = 5345;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var TreasureHuntShowLegendaryUIMessage = class extends DofusMessage {
  static id = 117;
  availableLegendaryIds;
  constructor(availableLegendaryIds) {
    super();
    this.availableLegendaryIds = availableLegendaryIds;
  }
  serialize(writer) {
    writer.writeShort(this.availableLegendaryIds.length);
    this.availableLegendaryIds.forEach(
      (current) => writer.writeVarShort(current)
    );
  }
  deserialize(reader) {
    this.availableLegendaryIds = [];
    const countAvailableLegendaryIds = reader.readShort();
    for (let i = 0; i < countAvailableLegendaryIds; i++) {
      this.availableLegendaryIds.push(reader.readVarShort());
    }
  }
};
var ChatSmileyExtraPackListMessage = class extends DofusMessage {
  static id = 8664;
  packIds;
  constructor(packIds) {
    super();
    this.packIds = packIds;
  }
  serialize(writer) {
    writer.writeShort(this.packIds.length);
    this.packIds.forEach((current) => writer.writeByte(current));
  }
  deserialize(reader) {
    this.packIds = [];
    const countPackIds = reader.readShort();
    for (let i = 0; i < countPackIds; i++) {
      this.packIds.push(reader.readByte());
    }
  }
};
var ServerStatusUpdateMessage = class extends DofusMessage {
  static id = 1411;
  server;
  constructor(server) {
    super();
    this.server = server;
  }
  serialize(writer) {
    this.server.serialize(writer);
  }
  deserialize(reader) {
    this.server = new GameServerInformations();
    this.server.deserialize(reader);
  }
};
var TeleportBuddiesMessage = class extends DofusMessage {
  static id = 9150;
  dungeonId = 0;
  constructor(dungeonId) {
    super();
    this.dungeonId = dungeonId;
  }
  serialize(writer) {
    writer.writeVarShort(this.dungeonId);
  }
  deserialize(reader) {
    this.dungeonId = reader.readVarShort();
  }
};
var AlignmentWarEffortDonatePreviewMessage = class extends DofusMessage {
  static id = 2736;
  xp = 0;
  constructor(xp) {
    super();
    this.xp = xp;
  }
  serialize(writer) {
    writer.writeDouble(this.xp);
  }
  deserialize(reader) {
    this.xp = reader.readDouble();
  }
};
var GoldAddedMessage = class extends DofusMessage {
  static id = 1408;
  gold;
  constructor(gold) {
    super();
    this.gold = gold;
  }
  serialize(writer) {
    this.gold.serialize(writer);
  }
  deserialize(reader) {
    this.gold = new GoldItem();
    this.gold.deserialize(reader);
  }
};
var FriendWarnOnLevelGainStateMessage = class extends DofusMessage {
  static id = 7352;
  enable = false;
  constructor(enable) {
    super();
    this.enable = enable;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
  }
};
var GuildListMessage = class extends DofusMessage {
  static id = 5503;
  guilds;
  constructor(guilds) {
    super();
    this.guilds = guilds;
  }
  serialize(writer) {
    writer.writeShort(this.guilds.length);
    this.guilds.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.guilds = [];
    const countGuilds = reader.readShort();
    for (let i = 0; i < countGuilds; i++) {
      const type = new GuildInformations();
      type.deserialize(reader);
      this.guilds.push(type);
    }
  }
};
var RecruitmentInformationMessage = class extends DofusMessage {
  static id = 3164;
  recruitmentData;
  constructor(recruitmentData) {
    super();
    this.recruitmentData = recruitmentData;
  }
  serialize(writer) {
    this.recruitmentData.serialize(writer);
  }
  deserialize(reader) {
    this.recruitmentData = new GuildRecruitmentInformation();
    this.recruitmentData.deserialize(reader);
  }
};
var PresetDeleteResultMessage = class extends DofusMessage {
  static id = 7560;
  code = 2;
  presetId = 0;
  constructor(code, presetId) {
    super();
    this.code = code;
    this.presetId = presetId;
  }
  serialize(writer) {
    writer.writeByte(this.code);
    writer.writeShort(this.presetId);
  }
  deserialize(reader) {
    this.code = reader.readByte();
    this.presetId = reader.readShort();
  }
};
var ExchangeItemAutoCraftStopedMessage = class extends DofusMessage {
  static id = 470;
  reason = 0;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var ExchangeErrorMessage = class extends DofusMessage {
  static id = 6446;
  errorType = 0;
  constructor(errorType) {
    super();
    this.errorType = errorType;
  }
  serialize(writer) {
    writer.writeByte(this.errorType);
  }
  deserialize(reader) {
    this.errorType = reader.readByte();
  }
};
var PrismFightStateUpdateMessage = class extends DofusMessage {
  static id = 7379;
  state = 0;
  constructor(state) {
    super();
    this.state = state;
  }
  serialize(writer) {
    writer.writeByte(this.state);
  }
  deserialize(reader) {
    this.state = reader.readByte();
  }
};
var ExchangeMountSterilizeFromPaddockMessage = class extends DofusMessage {
  static id = 2234;
  sterilizator;
  worldY = 0;
  worldX = 0;
  name;
  constructor(sterilizator, worldY, worldX, name) {
    super();
    this.sterilizator = sterilizator;
    this.worldY = worldY;
    this.worldX = worldX;
    this.name = name;
  }
  serialize(writer) {
    writer.writeUTF(this.sterilizator);
    writer.writeShort(this.worldY);
    writer.writeShort(this.worldX);
    writer.writeUTF(this.name);
  }
  deserialize(reader) {
    this.sterilizator = reader.readUTF();
    this.worldY = reader.readShort();
    this.worldX = reader.readShort();
    this.name = reader.readUTF();
  }
};
var TaxCollectorAttackedMessage = class extends DofusMessage {
  static id = 4728;
  mapId = 0;
  firstNameId = 0;
  guild;
  subAreaId = 0;
  lastNameId = 0;
  worldY = 0;
  worldX = 0;
  constructor(mapId, firstNameId, guild, subAreaId, lastNameId, worldY, worldX) {
    super();
    this.mapId = mapId;
    this.firstNameId = firstNameId;
    this.guild = guild;
    this.subAreaId = subAreaId;
    this.lastNameId = lastNameId;
    this.worldY = worldY;
    this.worldX = worldX;
  }
  serialize(writer) {
    writer.writeDouble(this.mapId);
    writer.writeVarShort(this.firstNameId);
    this.guild.serialize(writer);
    writer.writeVarShort(this.subAreaId);
    writer.writeVarShort(this.lastNameId);
    writer.writeShort(this.worldY);
    writer.writeShort(this.worldX);
  }
  deserialize(reader) {
    this.mapId = reader.readDouble();
    this.firstNameId = reader.readVarShort();
    this.guild = new BasicGuildInformations();
    this.guild.deserialize(reader);
    this.subAreaId = reader.readVarShort();
    this.lastNameId = reader.readVarShort();
    this.worldY = reader.readShort();
    this.worldX = reader.readShort();
  }
};
var ServerSettingsMessage = class extends DofusMessage {
  static id = 298;
  lang;
  itemMaxLevel = 0;
  arenaLeaveBanTime = 0;
  gameType = -1;
  community = 0;
  isMonoAccount = false;
  hasFreeAutopilot = false;
  constructor(lang, itemMaxLevel, arenaLeaveBanTime, gameType, community, isMonoAccount, hasFreeAutopilot) {
    super();
    this.lang = lang;
    this.itemMaxLevel = itemMaxLevel;
    this.arenaLeaveBanTime = arenaLeaveBanTime;
    this.gameType = gameType;
    this.community = community;
    this.isMonoAccount = isMonoAccount;
    this.hasFreeAutopilot = hasFreeAutopilot;
  }
  serialize(writer) {
    writer.writeUTF(this.lang);
    writer.writeInt(this.itemMaxLevel);
    writer.writeVarShort(this.arenaLeaveBanTime);
    writer.writeByte(this.gameType);
    writer.writeByte(this.community);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.isMonoAccount);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.hasFreeAutopilot);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.lang = reader.readUTF();
    this.itemMaxLevel = reader.readInt();
    this.arenaLeaveBanTime = reader.readVarShort();
    this.gameType = reader.readByte();
    this.community = reader.readByte();
    const box0 = reader.readByte();
    this.isMonoAccount = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.hasFreeAutopilot = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var AcquaintanceAddedMessage = class extends DofusMessage {
  static id = 6756;
  acquaintanceAdded;
  constructor(acquaintanceAdded) {
    super();
    this.acquaintanceAdded = acquaintanceAdded;
  }
  serialize(writer) {
    writer.writeShort(this.acquaintanceAdded.id);
    this.acquaintanceAdded.serialize(writer);
  }
  deserialize(reader) {
    const acquaintanceAddedTypeId = reader.readShort();
    this.acquaintanceAdded = new types[acquaintanceAddedTypeId]();
    this.acquaintanceAdded.deserialize(reader);
  }
};
var StorageObjectRemoveMessage = class extends DofusMessage {
  static id = 4970;
  objectUID = 0;
  constructor(objectUID) {
    super();
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeVarInt(this.objectUID);
  }
  deserialize(reader) {
    this.objectUID = reader.readVarInt();
  }
};
var FollowedQuestsMessage = class extends DofusMessage {
  static id = 414;
  quests;
  constructor(quests) {
    super();
    this.quests = quests;
  }
  serialize(writer) {
    writer.writeShort(this.quests.length);
    this.quests.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.quests = [];
    const countQuests = reader.readShort();
    for (let i = 0; i < countQuests; i++) {
      const type = new QuestActiveDetailedInformations();
      type.deserialize(reader);
      this.quests.push(type);
    }
  }
};
var ServerSessionConstantsMessage = class extends DofusMessage {
  static id = 646;
  variables;
  constructor(variables) {
    super();
    this.variables = variables;
  }
  serialize(writer) {
    writer.writeShort(this.variables.length);
    this.variables.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.variables = [];
    const countVariables = reader.readShort();
    for (let i = 0; i < countVariables; i++) {
      const variablesTypeId = reader.readShort();
      const type = new types[variablesTypeId]();
      type.deserialize(reader);
      this.variables.push(type);
    }
  }
};
var DungeonPartyFinderAvailableDungeonsMessage = class extends DofusMessage {
  static id = 2640;
  dungeonIds;
  constructor(dungeonIds) {
    super();
    this.dungeonIds = dungeonIds;
  }
  serialize(writer) {
    writer.writeShort(this.dungeonIds.length);
    this.dungeonIds.forEach(
      (current) => writer.writeVarShort(current)
    );
  }
  deserialize(reader) {
    this.dungeonIds = [];
    const countDungeonIds = reader.readShort();
    for (let i = 0; i < countDungeonIds; i++) {
      this.dungeonIds.push(reader.readVarShort());
    }
  }
};
var CharacterNameSuggestionSuccessMessage = class extends DofusMessage {
  static id = 428;
  suggestion;
  constructor(suggestion) {
    super();
    this.suggestion = suggestion;
  }
  serialize(writer) {
    writer.writeUTF(this.suggestion);
  }
  deserialize(reader) {
    this.suggestion = reader.readUTF();
  }
};
var GameMapNoMovementMessage = class extends DofusMessage {
  static id = 8791;
  cellY = 0;
  cellX = 0;
  constructor(cellY, cellX) {
    super();
    this.cellY = cellY;
    this.cellX = cellX;
  }
  serialize(writer) {
    writer.writeShort(this.cellY);
    writer.writeShort(this.cellX);
  }
  deserialize(reader) {
    this.cellY = reader.readShort();
    this.cellX = reader.readShort();
  }
};
var MountEmoteIconUsedOkMessage = class extends DofusMessage {
  static id = 1654;
  reactionType = 0;
  mountId = 0;
  constructor(reactionType, mountId) {
    super();
    this.reactionType = reactionType;
    this.mountId = mountId;
  }
  serialize(writer) {
    writer.writeByte(this.reactionType);
    writer.writeVarInt(this.mountId);
  }
  deserialize(reader) {
    this.reactionType = reader.readByte();
    this.mountId = reader.readVarInt();
  }
};
var QuestStartedMessage = class extends DofusMessage {
  static id = 475;
  questId = 0;
  constructor(questId) {
    super();
    this.questId = questId;
  }
  serialize(writer) {
    writer.writeVarShort(this.questId);
  }
  deserialize(reader) {
    this.questId = reader.readVarShort();
  }
};
var MountRenamedMessage = class extends DofusMessage {
  static id = 7698;
  name;
  mountId = 0;
  constructor(name, mountId) {
    super();
    this.name = name;
    this.mountId = mountId;
  }
  serialize(writer) {
    writer.writeUTF(this.name);
    writer.writeVarInt(this.mountId);
  }
  deserialize(reader) {
    this.name = reader.readUTF();
    this.mountId = reader.readVarInt();
  }
};
var ExchangeObjectsAddedMessage = class extends ExchangeObjectMessage {
  static id = 6503;
  object_;
  constructor(remote, object_) {
    super(remote);
    this.object_ = object_;
  }
  serialize(writer) {
    writer.writeShort(this.object_.length);
    this.object_.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.object_ = [];
    const countObject_ = reader.readShort();
    for (let i = 0; i < countObject_; i++) {
      const type = new ObjectItem();
      type.deserialize(reader);
      this.object_.push(type);
    }
  }
};
var GuestLimitationMessage = class extends DofusMessage {
  static id = 1036;
  reason = 0;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var ExchangeObjectsModifiedMessage = class extends ExchangeObjectMessage {
  static id = 145;
  object_;
  constructor(remote, object_) {
    super(remote);
    this.object_ = object_;
  }
  serialize(writer) {
    writer.writeShort(this.object_.length);
    this.object_.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.object_ = [];
    const countObject_ = reader.readShort();
    for (let i = 0; i < countObject_; i++) {
      const type = new ObjectItem();
      type.deserialize(reader);
      this.object_.push(type);
    }
  }
};
var WrapperObjectErrorMessage = class extends SymbioticObjectErrorMessage {
  static id = 1930;
  constructor(reason, errorCode) {
    super(reason, errorCode);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ExchangeRequestedMessage = class extends DofusMessage {
  static id = 5525;
  exchangeType = 0;
  constructor(exchangeType) {
    super();
    this.exchangeType = exchangeType;
  }
  serialize(writer) {
    writer.writeByte(this.exchangeType);
  }
  deserialize(reader) {
    this.exchangeType = reader.readByte();
  }
};
var ExchangeRequestedTradeMessage = class extends ExchangeRequestedMessage {
  static id = 9612;
  target = 0;
  source = 0;
  constructor(exchangeType, target, source) {
    super(exchangeType);
    this.target = target;
    this.source = source;
  }
  serialize(writer) {
    writer.writeVarLong(this.target);
    writer.writeVarLong(this.source);
  }
  deserialize(reader) {
    this.target = reader.readVarLong();
    this.source = reader.readVarLong();
  }
};
var IdolFightPreparationUpdateMessage = class extends DofusMessage {
  static id = 7338;
  idols;
  idolSource = 0;
  constructor(idols, idolSource) {
    super();
    this.idols = idols;
    this.idolSource = idolSource;
  }
  serialize(writer) {
    writer.writeShort(this.idols.length);
    this.idols.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeByte(this.idolSource);
  }
  deserialize(reader) {
    this.idols = [];
    const countIdols = reader.readShort();
    for (let i = 0; i < countIdols; i++) {
      const idolsTypeId = reader.readShort();
      const type = new types[idolsTypeId]();
      type.deserialize(reader);
      this.idols.push(type);
    }
    this.idolSource = reader.readByte();
  }
};
var ShortcutBarAddErrorMessage = class extends DofusMessage {
  static id = 1782;
  error = 0;
  constructor(error) {
    super();
    this.error = error;
  }
  serialize(writer) {
    writer.writeByte(this.error);
  }
  deserialize(reader) {
    this.error = reader.readByte();
  }
};
var IdolSelectedMessage = class extends DofusMessage {
  static id = 7348;
  idolId = 0;
  activate = false;
  party = false;
  constructor(idolId, activate, party) {
    super();
    this.idolId = idolId;
    this.activate = activate;
    this.party = party;
  }
  serialize(writer) {
    writer.writeVarShort(this.idolId);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.activate);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.party);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.idolId = reader.readVarShort();
    const box0 = reader.readByte();
    this.activate = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.party = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var ExchangeStartOkHumanVendorMessage = class extends DofusMessage {
  static id = 9011;
  objectsInfos;
  sellerId = 0;
  constructor(objectsInfos, sellerId) {
    super();
    this.objectsInfos = objectsInfos;
    this.sellerId = sellerId;
  }
  serialize(writer) {
    writer.writeShort(this.objectsInfos.length);
    this.objectsInfos.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeDouble(this.sellerId);
  }
  deserialize(reader) {
    this.objectsInfos = [];
    const countObjectsInfos = reader.readShort();
    for (let i = 0; i < countObjectsInfos; i++) {
      const type = new ObjectItemToSellInHumanVendorShop();
      type.deserialize(reader);
      this.objectsInfos.push(type);
    }
    this.sellerId = reader.readDouble();
  }
};
var FriendDeleteResultMessage = class extends DofusMessage {
  static id = 8619;
  tag;
  success = false;
  constructor(tag, success) {
    super();
    this.tag = tag;
    this.success = success;
  }
  serialize(writer) {
    this.tag.serialize(writer);
    writer.writeBoolean(this.success);
  }
  deserialize(reader) {
    this.tag = new AccountTagInformation();
    this.tag.deserialize(reader);
    this.success = reader.readBoolean();
  }
};
var PresetsMessage = class extends DofusMessage {
  static id = 1706;
  presets;
  constructor(presets) {
    super();
    this.presets = presets;
  }
  serialize(writer) {
    writer.writeShort(this.presets.length);
    this.presets.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.presets = [];
    const countPresets = reader.readShort();
    for (let i = 0; i < countPresets; i++) {
      const presetsTypeId = reader.readShort();
      const type = new types[presetsTypeId]();
      type.deserialize(reader);
      this.presets.push(type);
    }
  }
};
var ObjectsQuantityMessage = class extends DofusMessage {
  static id = 5570;
  objectsUIDAndQty;
  constructor(objectsUIDAndQty) {
    super();
    this.objectsUIDAndQty = objectsUIDAndQty;
  }
  serialize(writer) {
    writer.writeShort(this.objectsUIDAndQty.length);
    this.objectsUIDAndQty.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.objectsUIDAndQty = [];
    const countObjectsUIDAndQty = reader.readShort();
    for (let i = 0; i < countObjectsUIDAndQty; i++) {
      const type = new ObjectItemQuantity();
      type.deserialize(reader);
      this.objectsUIDAndQty.push(type);
    }
  }
};
var QuestObjectiveValidatedMessage = class extends DofusMessage {
  static id = 5565;
  objectiveId = 0;
  questId = 0;
  constructor(objectiveId, questId) {
    super();
    this.objectiveId = objectiveId;
    this.questId = questId;
  }
  serialize(writer) {
    writer.writeVarShort(this.objectiveId);
    writer.writeVarShort(this.questId);
  }
  deserialize(reader) {
    this.objectiveId = reader.readVarShort();
    this.questId = reader.readVarShort();
  }
};
var GameRolePlayAggressionMessage = class extends DofusMessage {
  static id = 2660;
  defenderId = 0;
  attackerId = 0;
  constructor(defenderId, attackerId) {
    super();
    this.defenderId = defenderId;
    this.attackerId = attackerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.defenderId);
    writer.writeVarLong(this.attackerId);
  }
  deserialize(reader) {
    this.defenderId = reader.readVarLong();
    this.attackerId = reader.readVarLong();
  }
};
var GuildInformationsMembersMessage = class extends DofusMessage {
  static id = 3627;
  members;
  constructor(members) {
    super();
    this.members = members;
  }
  serialize(writer) {
    writer.writeShort(this.members.length);
    this.members.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.members = [];
    const countMembers = reader.readShort();
    for (let i = 0; i < countMembers; i++) {
      const type = new GuildMember();
      type.deserialize(reader);
      this.members.push(type);
    }
  }
};
var SetUpdateMessage = class extends DofusMessage {
  static id = 2982;
  setId = 0;
  setEffects;
  setObjects;
  constructor(setId, setEffects, setObjects) {
    super();
    this.setId = setId;
    this.setEffects = setEffects;
    this.setObjects = setObjects;
  }
  serialize(writer) {
    writer.writeVarShort(this.setId);
    writer.writeShort(this.setEffects.length);
    this.setEffects.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.setObjects.length);
    this.setObjects.forEach(
      (current) => writer.writeVarShort(current)
    );
  }
  deserialize(reader) {
    this.setId = reader.readVarShort();
    this.setEffects = [];
    const countSetEffects = reader.readShort();
    for (let i = 0; i < countSetEffects; i++) {
      const setEffectsTypeId = reader.readShort();
      const type = new types[setEffectsTypeId]();
      type.deserialize(reader);
      this.setEffects.push(type);
    }
    this.setObjects = [];
    const countSetObjects = reader.readShort();
    for (let i = 0; i < countSetObjects; i++) {
      this.setObjects.push(reader.readVarShort());
    }
  }
};
var ExchangeMountsPaddockAddMessage = class extends DofusMessage {
  static id = 3903;
  mountDescription;
  constructor(mountDescription) {
    super();
    this.mountDescription = mountDescription;
  }
  serialize(writer) {
    writer.writeShort(this.mountDescription.length);
    this.mountDescription.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.mountDescription = [];
    const countMountDescription = reader.readShort();
    for (let i = 0; i < countMountDescription; i++) {
      const type = new MountClientData();
      type.deserialize(reader);
      this.mountDescription.push(type);
    }
  }
};
var CharacterExperienceGainMessage = class extends DofusMessage {
  static id = 4524;
  experienceIncarnation = 0;
  experienceMount = 0;
  experienceGuild = 0;
  experienceCharacter = 0;
  constructor(experienceIncarnation, experienceMount, experienceGuild, experienceCharacter) {
    super();
    this.experienceIncarnation = experienceIncarnation;
    this.experienceMount = experienceMount;
    this.experienceGuild = experienceGuild;
    this.experienceCharacter = experienceCharacter;
  }
  serialize(writer) {
    writer.writeVarLong(this.experienceIncarnation);
    writer.writeVarLong(this.experienceMount);
    writer.writeVarLong(this.experienceGuild);
    writer.writeVarLong(this.experienceCharacter);
  }
  deserialize(reader) {
    this.experienceIncarnation = reader.readVarLong();
    this.experienceMount = reader.readVarLong();
    this.experienceGuild = reader.readVarLong();
    this.experienceCharacter = reader.readVarLong();
  }
};
var PrismsListMessage = class extends DofusMessage {
  static id = 3236;
  prisms;
  constructor(prisms) {
    super();
    this.prisms = prisms;
  }
  serialize(writer) {
    writer.writeShort(this.prisms.length);
    this.prisms.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.prisms = [];
    const countPrisms = reader.readShort();
    for (let i = 0; i < countPrisms; i++) {
      const prismsTypeId = reader.readShort();
      const type = new types[prismsTypeId]();
      type.deserialize(reader);
      this.prisms.push(type);
    }
  }
};
var PrismsListUpdateMessage = class extends PrismsListMessage {
  static id = 2634;
  constructor(prisms) {
    super(prisms);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var EntitiesInformationMessage = class extends DofusMessage {
  static id = 5147;
  entities;
  constructor(entities) {
    super();
    this.entities = entities;
  }
  serialize(writer) {
    writer.writeShort(this.entities.length);
    this.entities.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.entities = [];
    const countEntities = reader.readShort();
    for (let i = 0; i < countEntities; i++) {
      const type = new EntityInformation();
      type.deserialize(reader);
      this.entities.push(type);
    }
  }
};
var FinishMoveListMessage = class extends DofusMessage {
  static id = 596;
  finishMoves;
  constructor(finishMoves) {
    super();
    this.finishMoves = finishMoves;
  }
  serialize(writer) {
    writer.writeShort(this.finishMoves.length);
    this.finishMoves.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.finishMoves = [];
    const countFinishMoves = reader.readShort();
    for (let i = 0; i < countFinishMoves; i++) {
      const type = new FinishMoveInformations();
      type.deserialize(reader);
      this.finishMoves.push(type);
    }
  }
};
var PartyModifiableStatusMessage = class extends AbstractPartyMessage {
  static id = 4439;
  enabled = false;
  constructor(partyId, enabled) {
    super(partyId);
    this.enabled = enabled;
  }
  serialize(writer) {
    writer.writeBoolean(this.enabled);
  }
  deserialize(reader) {
    this.enabled = reader.readBoolean();
  }
};
var JobExperienceOtherPlayerUpdateMessage = class extends JobExperienceUpdateMessage {
  static id = 5477;
  playerId = 0;
  constructor(experiencesUpdate, playerId) {
    super(experiencesUpdate);
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
  }
};
var GuildModificationStartedMessage = class extends DofusMessage {
  static id = 310;
  canChangeName = false;
  canChangeEmblem = false;
  constructor(canChangeName, canChangeEmblem) {
    super();
    this.canChangeName = canChangeName;
    this.canChangeEmblem = canChangeEmblem;
  }
  serialize(writer) {
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.canChangeName);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.canChangeEmblem);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    const box0 = reader.readByte();
    this.canChangeName = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.canChangeEmblem = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var PartyRestrictedMessage = class extends AbstractPartyMessage {
  static id = 6433;
  restricted = false;
  constructor(partyId, restricted) {
    super(partyId);
    this.restricted = restricted;
  }
  serialize(writer) {
    writer.writeBoolean(this.restricted);
  }
  deserialize(reader) {
    this.restricted = reader.readBoolean();
  }
};
var NicknameRegistrationMessage = class extends DofusMessage {
  static id = 8878;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GuildListApplicationAnswerMessage = class extends PaginationAnswerAbstractMessage {
  static id = 1223;
  applies;
  constructor(count, total, offset, applies) {
    super(count, total, offset);
    this.applies = applies;
  }
  serialize(writer) {
    writer.writeShort(this.applies.length);
    this.applies.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.applies = [];
    const countApplies = reader.readShort();
    for (let i = 0; i < countApplies; i++) {
      const type = new GuildApplicationInformation();
      type.deserialize(reader);
      this.applies.push(type);
    }
  }
};
var GameContextRemoveElementWithEventMessage = class extends GameContextRemoveElementMessage {
  static id = 9473;
  elementEventId = 0;
  constructor(id_, elementEventId) {
    super(id_);
    this.elementEventId = elementEventId;
  }
  serialize(writer) {
    writer.writeByte(this.elementEventId);
  }
  deserialize(reader) {
    this.elementEventId = reader.readByte();
  }
};
var GameRolePlayPlayerFightFriendlyRequestedMessage = class extends DofusMessage {
  static id = 2157;
  sourceId = 0;
  targetId = 0;
  fightId = 0;
  constructor(sourceId, targetId, fightId) {
    super();
    this.sourceId = sourceId;
    this.targetId = targetId;
    this.fightId = fightId;
  }
  serialize(writer) {
    writer.writeVarLong(this.sourceId);
    writer.writeVarLong(this.targetId);
    writer.writeVarShort(this.fightId);
  }
  deserialize(reader) {
    this.sourceId = reader.readVarLong();
    this.targetId = reader.readVarLong();
    this.fightId = reader.readVarShort();
  }
};
var UpdateMountCharacteristicsMessage = class extends DofusMessage {
  static id = 9937;
  boostToUpdateList;
  rideId = 0;
  constructor(boostToUpdateList, rideId) {
    super();
    this.boostToUpdateList = boostToUpdateList;
    this.rideId = rideId;
  }
  serialize(writer) {
    writer.writeShort(this.boostToUpdateList.length);
    this.boostToUpdateList.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarInt(this.rideId);
  }
  deserialize(reader) {
    this.boostToUpdateList = [];
    const countBoostToUpdateList = reader.readShort();
    for (let i = 0; i < countBoostToUpdateList; i++) {
      const boostToUpdateListTypeId = reader.readShort();
      const type = new types[boostToUpdateListTypeId]();
      type.deserialize(reader);
      this.boostToUpdateList.push(type);
    }
    this.rideId = reader.readVarInt();
  }
};
var ShortcutBarRemovedMessage = class extends DofusMessage {
  static id = 5087;
  slot = 0;
  barType = 0;
  constructor(slot, barType) {
    super();
    this.slot = slot;
    this.barType = barType;
  }
  serialize(writer) {
    writer.writeByte(this.slot);
    writer.writeByte(this.barType);
  }
  deserialize(reader) {
    this.slot = reader.readByte();
    this.barType = reader.readByte();
  }
};
var ExchangeBuyOkMessage = class extends DofusMessage {
  static id = 1868;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var LifePointsRegenEndMessage = class extends UpdateLifePointsMessage {
  static id = 5501;
  lifePointsGained = 0;
  constructor(maxLifePoints, lifePoints, lifePointsGained) {
    super(maxLifePoints, lifePoints);
    this.lifePointsGained = lifePointsGained;
  }
  serialize(writer) {
    writer.writeVarInt(this.lifePointsGained);
  }
  deserialize(reader) {
    this.lifePointsGained = reader.readVarInt();
  }
};
var GameContextCreateMessage = class extends DofusMessage {
  static id = 4950;
  context = 1;
  constructor(context) {
    super();
    this.context = context;
  }
  serialize(writer) {
    writer.writeByte(this.context);
  }
  deserialize(reader) {
    this.context = reader.readByte();
  }
};
var PlayerStatusUpdateErrorMessage = class extends DofusMessage {
  static id = 111;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GameFightPlacementSwapPositionsCancelledMessage = class extends DofusMessage {
  static id = 998;
  cancellerId = 0;
  requestId = 0;
  constructor(cancellerId, requestId) {
    super();
    this.cancellerId = cancellerId;
    this.requestId = requestId;
  }
  serialize(writer) {
    writer.writeDouble(this.cancellerId);
    writer.writeInt(this.requestId);
  }
  deserialize(reader) {
    this.cancellerId = reader.readDouble();
    this.requestId = reader.readInt();
  }
};
var ConsoleCommandsListMessage = class extends DofusMessage {
  static id = 5611;
  aliases;
  descriptions;
  args;
  constructor(aliases, descriptions, args) {
    super();
    this.aliases = aliases;
    this.descriptions = descriptions;
    this.args = args;
  }
  serialize(writer) {
    writer.writeShort(this.aliases.length);
    this.aliases.forEach((current) => writer.writeUTF(current));
    writer.writeShort(this.descriptions.length);
    this.descriptions.forEach((current) => writer.writeUTF(current));
    writer.writeShort(this.args.length);
    this.args.forEach((current) => writer.writeUTF(current));
  }
  deserialize(reader) {
    this.aliases = [];
    const countAliases = reader.readShort();
    for (let i = 0; i < countAliases; i++) {
      this.aliases.push(reader.readUTF());
    }
    this.descriptions = [];
    const countDescriptions = reader.readShort();
    for (let i = 0; i < countDescriptions; i++) {
      this.descriptions.push(reader.readUTF());
    }
    this.args = [];
    const countArgs = reader.readShort();
    for (let i = 0; i < countArgs; i++) {
      this.args.push(reader.readUTF());
    }
  }
};
var StartupActionsListMessage = class extends DofusMessage {
  static id = 798;
  actions;
  constructor(actions) {
    super();
    this.actions = actions;
  }
  serialize(writer) {
    writer.writeShort(this.actions.length);
    this.actions.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.actions = [];
    const countActions = reader.readShort();
    for (let i = 0; i < countActions; i++) {
      const type = new StartupActionAddObject();
      type.deserialize(reader);
      this.actions.push(type);
    }
  }
};
var TaxCollectorMovementRemoveMessage = class extends DofusMessage {
  static id = 5927;
  collectorId = 0;
  constructor(collectorId) {
    super();
    this.collectorId = collectorId;
  }
  serialize(writer) {
    writer.writeDouble(this.collectorId);
  }
  deserialize(reader) {
    this.collectorId = reader.readDouble();
  }
};
var AreaFightModificatorUpdateMessage = class extends DofusMessage {
  static id = 4779;
  spellPairId = 0;
  constructor(spellPairId) {
    super();
    this.spellPairId = spellPairId;
  }
  serialize(writer) {
    writer.writeInt(this.spellPairId);
  }
  deserialize(reader) {
    this.spellPairId = reader.readInt();
  }
};
var ExchangeBidHouseInListRemovedMessage = class extends DofusMessage {
  static id = 3610;
  objectType = 0;
  objectGID = 0;
  itemUID = 0;
  constructor(objectType, objectGID, itemUID) {
    super();
    this.objectType = objectType;
    this.objectGID = objectGID;
    this.itemUID = itemUID;
  }
  serialize(writer) {
    writer.writeInt(this.objectType);
    writer.writeVarShort(this.objectGID);
    writer.writeInt(this.itemUID);
  }
  deserialize(reader) {
    this.objectType = reader.readInt();
    this.objectGID = reader.readVarShort();
    this.itemUID = reader.readInt();
  }
};
var AllianceBulletinSetErrorMessage = class extends SocialNoticeSetErrorMessage {
  static id = 9529;
  constructor(reason) {
    super(reason);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ForgettableSpellDeleteMessage = class extends DofusMessage {
  static id = 9143;
  spells;
  reason = 0;
  constructor(spells, reason) {
    super();
    this.spells = spells;
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeShort(this.spells.length);
    this.spells.forEach((current) => writer.writeInt(current));
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.spells = [];
    const countSpells = reader.readShort();
    for (let i = 0; i < countSpells; i++) {
      this.spells.push(reader.readInt());
    }
    this.reason = reader.readByte();
  }
};
var DebtsDeleteMessage = class extends DofusMessage {
  static id = 5619;
  debts;
  reason = 0;
  constructor(debts, reason) {
    super();
    this.debts = debts;
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeShort(this.debts.length);
    this.debts.forEach((current) => writer.writeDouble(current));
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.debts = [];
    const countDebts = reader.readShort();
    for (let i = 0; i < countDebts; i++) {
      this.debts.push(reader.readDouble());
    }
    this.reason = reader.readByte();
  }
};
var ExchangeCraftResultMagicWithObjectDescMessage = class extends ExchangeCraftResultWithObjectDescMessage {
  static id = 6242;
  magicPoolStatus = 0;
  constructor(craftResult, objectInfo, magicPoolStatus) {
    super(craftResult, objectInfo);
    this.magicPoolStatus = magicPoolStatus;
  }
  serialize(writer) {
    writer.writeByte(this.magicPoolStatus);
  }
  deserialize(reader) {
    this.magicPoolStatus = reader.readByte();
  }
};
var TitleSelectedMessage = class extends DofusMessage {
  static id = 8922;
  titleId = 0;
  constructor(titleId) {
    super();
    this.titleId = titleId;
  }
  serialize(writer) {
    writer.writeVarShort(this.titleId);
  }
  deserialize(reader) {
    this.titleId = reader.readVarShort();
  }
};
var AbstractGameActionWithAckMessage = class extends AbstractGameActionMessage {
  static id = 3549;
  waitAckId = 0;
  constructor(sourceId, actionId, waitAckId) {
    super(sourceId, actionId);
    this.waitAckId = waitAckId;
  }
  serialize(writer) {
    writer.writeShort(this.waitAckId);
  }
  deserialize(reader) {
    this.waitAckId = reader.readShort();
  }
};
var ExchangeBidHouseItemRemoveOkMessage = class extends DofusMessage {
  static id = 5455;
  sellerId = 0;
  constructor(sellerId) {
    super();
    this.sellerId = sellerId;
  }
  serialize(writer) {
    writer.writeInt(this.sellerId);
  }
  deserialize(reader) {
    this.sellerId = reader.readInt();
  }
};
var WatchQuestListMessage = class extends QuestListMessage {
  static id = 9128;
  playerId = 0;
  constructor(finishedQuestsIds, finishedQuestsCounts, activeQuests, reinitDoneQuestsIds, playerId) {
    super(
      finishedQuestsIds,
      finishedQuestsCounts,
      activeQuests,
      reinitDoneQuestsIds
    );
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
  }
};
var OrnamentSelectedMessage = class extends DofusMessage {
  static id = 7637;
  ornamentId = 0;
  constructor(ornamentId) {
    super();
    this.ornamentId = ornamentId;
  }
  serialize(writer) {
    writer.writeVarShort(this.ornamentId);
  }
  deserialize(reader) {
    this.ornamentId = reader.readVarShort();
  }
};
var GuildSummaryMessage = class extends PaginationAnswerAbstractMessage {
  static id = 4399;
  guilds;
  constructor(count, total, offset, guilds) {
    super(count, total, offset);
    this.guilds = guilds;
  }
  serialize(writer) {
    writer.writeShort(this.guilds.length);
    this.guilds.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.guilds = [];
    const countGuilds = reader.readShort();
    for (let i = 0; i < countGuilds; i++) {
      const type = new GuildFactSheetInformations();
      type.deserialize(reader);
      this.guilds.push(type);
    }
  }
};
var AllianceBulletinMessage = class extends BulletinMessage {
  static id = 4021;
  constructor(memberName, memberId, timestamp, content, lastNotifiedTimestamp) {
    super(memberName, memberId, timestamp, content, lastNotifiedTimestamp);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ObjectAveragePricesErrorMessage = class extends DofusMessage {
  static id = 9392;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PresetUseResultWithMissingIdsMessage = class extends PresetUseResultMessage {
  static id = 2217;
  missingIds;
  constructor(code, presetId, missingIds) {
    super(code, presetId);
    this.missingIds = missingIds;
  }
  serialize(writer) {
    writer.writeShort(this.missingIds.length);
    this.missingIds.forEach(
      (current) => writer.writeVarShort(current)
    );
  }
  deserialize(reader) {
    this.missingIds = [];
    const countMissingIds = reader.readShort();
    for (let i = 0; i < countMissingIds; i++) {
      this.missingIds.push(reader.readVarShort());
    }
  }
};
var OrnamentSelectErrorMessage = class extends DofusMessage {
  static id = 4098;
  reason = 0;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var GameContextMoveElementMessage = class extends DofusMessage {
  static id = 5628;
  movement;
  constructor(movement) {
    super();
    this.movement = movement;
  }
  serialize(writer) {
    this.movement.serialize(writer);
  }
  deserialize(reader) {
    this.movement = new EntityMovementInformations();
    this.movement.deserialize(reader);
  }
};
var ExchangeTypesItemsExchangerDescriptionForUserMessage = class extends DofusMessage {
  static id = 6681;
  itemTypeDescriptions;
  objectType = 0;
  constructor(itemTypeDescriptions, objectType) {
    super();
    this.itemTypeDescriptions = itemTypeDescriptions;
    this.objectType = objectType;
  }
  serialize(writer) {
    writer.writeShort(this.itemTypeDescriptions.length);
    this.itemTypeDescriptions.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeInt(this.objectType);
  }
  deserialize(reader) {
    this.itemTypeDescriptions = [];
    const countItemTypeDescriptions = reader.readShort();
    for (let i = 0; i < countItemTypeDescriptions; i++) {
      const type = new BidExchangerObjectInfo();
      type.deserialize(reader);
      this.itemTypeDescriptions.push(type);
    }
    this.objectType = reader.readInt();
  }
};
var FriendsListMessage = class extends DofusMessage {
  static id = 6666;
  friendsList;
  constructor(friendsList) {
    super();
    this.friendsList = friendsList;
  }
  serialize(writer) {
    writer.writeShort(this.friendsList.length);
    this.friendsList.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.friendsList = [];
    const countFriendsList = reader.readShort();
    for (let i = 0; i < countFriendsList; i++) {
      const friendsListTypeId = reader.readShort();
      const type = new types[friendsListTypeId]();
      type.deserialize(reader);
      this.friendsList.push(type);
    }
  }
};
var PrismInfoCloseMessage = class extends DofusMessage {
  static id = 2031;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PrismFightDefenderLeaveMessage = class extends DofusMessage {
  static id = 9481;
  fighterToRemoveId = 0;
  fightId = 0;
  subAreaId = 0;
  constructor(fighterToRemoveId, fightId, subAreaId) {
    super();
    this.fighterToRemoveId = fighterToRemoveId;
    this.fightId = fightId;
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeVarLong(this.fighterToRemoveId);
    writer.writeVarShort(this.fightId);
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.fighterToRemoveId = reader.readVarLong();
    this.fightId = reader.readVarShort();
    this.subAreaId = reader.readVarShort();
  }
};
var GameRolePlayPlayerLifeStatusMessage = class extends DofusMessage {
  static id = 7689;
  phenixMapId = 0;
  state = 0;
  constructor(phenixMapId, state) {
    super();
    this.phenixMapId = phenixMapId;
    this.state = state;
  }
  serialize(writer) {
    writer.writeDouble(this.phenixMapId);
    writer.writeByte(this.state);
  }
  deserialize(reader) {
    this.phenixMapId = reader.readDouble();
    this.state = reader.readByte();
  }
};
var FriendGuildWarnOnAchievementCompleteStateMessage = class extends DofusMessage {
  static id = 8244;
  enable = false;
  constructor(enable) {
    super();
    this.enable = enable;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
  }
};
var WatchQuestStepInfoMessage = class extends QuestStepInfoMessage {
  static id = 2727;
  playerId = 0;
  constructor(infos, playerId) {
    super(infos);
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
  }
};
var BreachInvitationCloseMessage = class extends DofusMessage {
  static id = 3262;
  host;
  constructor(host) {
    super();
    this.host = host;
  }
  serialize(writer) {
    this.host.serialize(writer);
  }
  deserialize(reader) {
    this.host = new CharacterMinimalInformations();
    this.host.deserialize(reader);
  }
};
var LockableStateUpdateHouseDoorMessage = class extends LockableStateUpdateAbstractMessage {
  static id = 7958;
  instanceId = 0;
  secondHand = false;
  houseId = 0;
  constructor(locked, instanceId, secondHand, houseId) {
    super(locked);
    this.instanceId = instanceId;
    this.secondHand = secondHand;
    this.houseId = houseId;
  }
  serialize(writer) {
    writer.writeInt(this.instanceId);
    writer.writeBoolean(this.secondHand);
    writer.writeVarInt(this.houseId);
  }
  deserialize(reader) {
    this.instanceId = reader.readInt();
    this.secondHand = reader.readBoolean();
    this.houseId = reader.readVarInt();
  }
};
var PaddockSellBuyDialogMessage = class extends DofusMessage {
  static id = 7880;
  ownerId = 0;
  price = 0;
  bsell = false;
  constructor(ownerId, price, bsell) {
    super();
    this.ownerId = ownerId;
    this.price = price;
    this.bsell = bsell;
  }
  serialize(writer) {
    writer.writeVarInt(this.ownerId);
    writer.writeVarLong(this.price);
    writer.writeBoolean(this.bsell);
  }
  deserialize(reader) {
    this.ownerId = reader.readVarInt();
    this.price = reader.readVarLong();
    this.bsell = reader.readBoolean();
  }
};
var ExchangeOkMultiCraftMessage = class extends DofusMessage {
  static id = 2595;
  role = 0;
  otherId = 0;
  initiatorId = 0;
  constructor(role, otherId, initiatorId) {
    super();
    this.role = role;
    this.otherId = otherId;
    this.initiatorId = initiatorId;
  }
  serialize(writer) {
    writer.writeByte(this.role);
    writer.writeVarLong(this.otherId);
    writer.writeVarLong(this.initiatorId);
  }
  deserialize(reader) {
    this.role = reader.readByte();
    this.otherId = reader.readVarLong();
    this.initiatorId = reader.readVarLong();
  }
};
var ExchangeWaitingResultMessage = class extends DofusMessage {
  static id = 4369;
  bwait = false;
  constructor(bwait) {
    super();
    this.bwait = bwait;
  }
  serialize(writer) {
    writer.writeBoolean(this.bwait);
  }
  deserialize(reader) {
    this.bwait = reader.readBoolean();
  }
};
var GuildApplicationIsAnsweredMessage = class extends DofusMessage {
  static id = 33;
  guildInformation;
  accepted = false;
  constructor(guildInformation, accepted) {
    super();
    this.guildInformation = guildInformation;
    this.accepted = accepted;
  }
  serialize(writer) {
    this.guildInformation.serialize(writer);
    writer.writeBoolean(this.accepted);
  }
  deserialize(reader) {
    this.guildInformation = new GuildInformations();
    this.guildInformation.deserialize(reader);
    this.accepted = reader.readBoolean();
  }
};
var AlreadyConnectedMessage = class extends DofusMessage {
  static id = 5949;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var NpcDialogQuestionMessage = class extends DofusMessage {
  static id = 8384;
  messageId = 0;
  dialogParams;
  visibleReplies;
  constructor(messageId, dialogParams, visibleReplies) {
    super();
    this.messageId = messageId;
    this.dialogParams = dialogParams;
    this.visibleReplies = visibleReplies;
  }
  serialize(writer) {
    writer.writeVarInt(this.messageId);
    writer.writeShort(this.dialogParams.length);
    this.dialogParams.forEach((current) => writer.writeUTF(current));
    writer.writeShort(this.visibleReplies.length);
    this.visibleReplies.forEach(
      (current) => writer.writeVarInt(current)
    );
  }
  deserialize(reader) {
    this.messageId = reader.readVarInt();
    this.dialogParams = [];
    const countDialogParams = reader.readShort();
    for (let i = 0; i < countDialogParams; i++) {
      this.dialogParams.push(reader.readUTF());
    }
    this.visibleReplies = [];
    const countVisibleReplies = reader.readShort();
    for (let i = 0; i < countVisibleReplies; i++) {
      this.visibleReplies.push(reader.readVarInt());
    }
  }
};
var EmotePlayErrorMessage = class extends DofusMessage {
  static id = 9167;
  emoteId = 0;
  constructor(emoteId) {
    super();
    this.emoteId = emoteId;
  }
  serialize(writer) {
    writer.writeShort(this.emoteId);
  }
  deserialize(reader) {
    this.emoteId = reader.readShort();
  }
};
var GameRolePlayDelayedActionFinishedMessage = class extends DofusMessage {
  static id = 6062;
  delayTypeId = 0;
  delayedCharacterId = 0;
  constructor(delayTypeId, delayedCharacterId) {
    super();
    this.delayTypeId = delayTypeId;
    this.delayedCharacterId = delayedCharacterId;
  }
  serialize(writer) {
    writer.writeByte(this.delayTypeId);
    writer.writeDouble(this.delayedCharacterId);
  }
  deserialize(reader) {
    this.delayTypeId = reader.readByte();
    this.delayedCharacterId = reader.readDouble();
  }
};
var ContactAddFailureMessage = class extends DofusMessage {
  static id = 7999;
  reason = 0;
  constructor(reason) {
    super();
    this.reason = reason;
  }
  serialize(writer) {
    writer.writeByte(this.reason);
  }
  deserialize(reader) {
    this.reason = reader.readByte();
  }
};
var CharacterAlignmentWarEffortProgressionMessage = class extends DofusMessage {
  static id = 7324;
  alignmentWarEffortPersonalDonation = 0;
  alignmentWarEffortDailyDonation = 0;
  alignmentWarEffortDailyLimit = 0;
  constructor(alignmentWarEffortPersonalDonation, alignmentWarEffortDailyDonation, alignmentWarEffortDailyLimit) {
    super();
    this.alignmentWarEffortPersonalDonation = alignmentWarEffortPersonalDonation;
    this.alignmentWarEffortDailyDonation = alignmentWarEffortDailyDonation;
    this.alignmentWarEffortDailyLimit = alignmentWarEffortDailyLimit;
  }
  serialize(writer) {
    writer.writeVarLong(this.alignmentWarEffortPersonalDonation);
    writer.writeVarLong(this.alignmentWarEffortDailyDonation);
    writer.writeVarLong(this.alignmentWarEffortDailyLimit);
  }
  deserialize(reader) {
    this.alignmentWarEffortPersonalDonation = reader.readVarLong();
    this.alignmentWarEffortDailyDonation = reader.readVarLong();
    this.alignmentWarEffortDailyLimit = reader.readVarLong();
  }
};
var AtlasPointInformationsMessage = class extends DofusMessage {
  static id = 6676;
  type;
  constructor(type) {
    super();
    this.type = type;
  }
  serialize(writer) {
    this.type.serialize(writer);
  }
  deserialize(reader) {
    this.type = new AtlasPointsInformations();
    this.type.deserialize(reader);
  }
};
var GuestModeMessage = class extends DofusMessage {
  static id = 9430;
  active = false;
  constructor(active) {
    super();
    this.active = active;
  }
  serialize(writer) {
    writer.writeBoolean(this.active);
  }
  deserialize(reader) {
    this.active = reader.readBoolean();
  }
};
var ObjectMovementMessage = class extends DofusMessage {
  static id = 3421;
  position = 63;
  objectUID = 0;
  constructor(position, objectUID) {
    super();
    this.position = position;
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeShort(this.position);
    writer.writeVarInt(this.objectUID);
  }
  deserialize(reader) {
    this.position = reader.readShort();
    this.objectUID = reader.readVarInt();
  }
};
var LockableCodeResultMessage = class extends DofusMessage {
  static id = 3222;
  result = 0;
  constructor(result) {
    super();
    this.result = result;
  }
  serialize(writer) {
    writer.writeByte(this.result);
  }
  deserialize(reader) {
    this.result = reader.readByte();
  }
};
var ExchangeMountStableErrorMessage = class extends DofusMessage {
  static id = 9490;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GuildFightPlayersEnemyRemoveMessage = class extends DofusMessage {
  static id = 4301;
  playerId = 0;
  fightId = 0;
  constructor(playerId, fightId) {
    super();
    this.playerId = playerId;
    this.fightId = fightId;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
    writer.writeDouble(this.fightId);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
    this.fightId = reader.readDouble();
  }
};
var BreachStateMessage = class extends DofusMessage {
  static id = 5776;
  owner;
  saved = false;
  bonuses;
  bugdet = 0;
  constructor(owner, saved, bonuses, bugdet) {
    super();
    this.owner = owner;
    this.saved = saved;
    this.bonuses = bonuses;
    this.bugdet = bugdet;
  }
  serialize(writer) {
    this.owner.serialize(writer);
    writer.writeBoolean(this.saved);
    writer.writeShort(this.bonuses.length);
    this.bonuses.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarInt(this.bugdet);
  }
  deserialize(reader) {
    this.owner = new CharacterMinimalInformations();
    this.owner.deserialize(reader);
    this.saved = reader.readBoolean();
    this.bonuses = [];
    const countBonuses = reader.readShort();
    for (let i = 0; i < countBonuses; i++) {
      const type = new ObjectEffectInteger();
      type.deserialize(reader);
      this.bonuses.push(type);
    }
    this.bugdet = reader.readVarInt();
  }
};
var GuildInformationsGeneralMessage = class extends DofusMessage {
  static id = 8015;
  nbConnectedMembers = 0;
  nbTotalMembers = 0;
  creationDate = 0;
  expNextLevelFloor = 0;
  experience = 0;
  abandonnedPaddock = false;
  level = 0;
  expLevelFloor = 0;
  constructor(nbConnectedMembers, nbTotalMembers, creationDate, expNextLevelFloor, experience, abandonnedPaddock, level, expLevelFloor) {
    super();
    this.nbConnectedMembers = nbConnectedMembers;
    this.nbTotalMembers = nbTotalMembers;
    this.creationDate = creationDate;
    this.expNextLevelFloor = expNextLevelFloor;
    this.experience = experience;
    this.abandonnedPaddock = abandonnedPaddock;
    this.level = level;
    this.expLevelFloor = expLevelFloor;
  }
  serialize(writer) {
    writer.writeVarShort(this.nbConnectedMembers);
    writer.writeVarShort(this.nbTotalMembers);
    writer.writeInt(this.creationDate);
    writer.writeVarLong(this.expNextLevelFloor);
    writer.writeVarLong(this.experience);
    writer.writeBoolean(this.abandonnedPaddock);
    writer.writeByte(this.level);
    writer.writeVarLong(this.expLevelFloor);
  }
  deserialize(reader) {
    this.nbConnectedMembers = reader.readVarShort();
    this.nbTotalMembers = reader.readVarShort();
    this.creationDate = reader.readInt();
    this.expNextLevelFloor = reader.readVarLong();
    this.experience = reader.readVarLong();
    this.abandonnedPaddock = reader.readBoolean();
    this.level = reader.readByte();
    this.expLevelFloor = reader.readVarLong();
  }
};
var TeleportToBuddyCloseMessage = class extends DofusMessage {
  static id = 2991;
  buddyId = 0;
  dungeonId = 0;
  constructor(buddyId, dungeonId) {
    super();
    this.buddyId = buddyId;
    this.dungeonId = dungeonId;
  }
  serialize(writer) {
    writer.writeVarLong(this.buddyId);
    writer.writeVarShort(this.dungeonId);
  }
  deserialize(reader) {
    this.buddyId = reader.readVarLong();
    this.dungeonId = reader.readVarShort();
  }
};
var BreachBonusMessage = class extends DofusMessage {
  static id = 1689;
  bonus;
  constructor(bonus) {
    super();
    this.bonus = bonus;
  }
  serialize(writer) {
    this.bonus.serialize(writer);
  }
  deserialize(reader) {
    this.bonus = new ObjectEffectInteger();
    this.bonus.deserialize(reader);
  }
};
var ExchangeStartOkMulticraftCrafterMessage = class extends DofusMessage {
  static id = 282;
  skillId = 0;
  constructor(skillId) {
    super();
    this.skillId = skillId;
  }
  serialize(writer) {
    writer.writeVarInt(this.skillId);
  }
  deserialize(reader) {
    this.skillId = reader.readVarInt();
  }
};
var ExchangeShopStockStartedMessage = class extends DofusMessage {
  static id = 2502;
  objectsInfos;
  constructor(objectsInfos) {
    super();
    this.objectsInfos = objectsInfos;
  }
  serialize(writer) {
    writer.writeShort(this.objectsInfos.length);
    this.objectsInfos.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.objectsInfos = [];
    const countObjectsInfos = reader.readShort();
    for (let i = 0; i < countObjectsInfos; i++) {
      const type = new ObjectItemToSell();
      type.deserialize(reader);
      this.objectsInfos.push(type);
    }
  }
};
var BasicTimeMessage = class extends DofusMessage {
  static id = 7278;
  timezoneOffset = 0;
  timestamp = 0;
  constructor(timezoneOffset, timestamp) {
    super();
    this.timezoneOffset = timezoneOffset;
    this.timestamp = timestamp;
  }
  serialize(writer) {
    writer.writeShort(this.timezoneOffset);
    writer.writeDouble(this.timestamp);
  }
  deserialize(reader) {
    this.timezoneOffset = reader.readShort();
    this.timestamp = reader.readDouble();
  }
};
var ZaapDestinationsMessage = class extends TeleportDestinationsMessage {
  static id = 4167;
  spawnMapId = 0;
  constructor(destinations, type, spawnMapId) {
    super(destinations, type);
    this.spawnMapId = spawnMapId;
  }
  serialize(writer) {
    writer.writeDouble(this.spawnMapId);
  }
  deserialize(reader) {
    this.spawnMapId = reader.readDouble();
  }
};
var GuildInfosUpgradeMessage = class extends DofusMessage {
  static id = 2887;
  taxCollectorPods = 0;
  spellLevel;
  taxCollectorDamagesBonuses = 0;
  taxCollectorLifePoints = 0;
  boostPoints = 0;
  taxCollectorsCount = 0;
  maxTaxCollectorsCount = 0;
  taxCollectorProspecting = 0;
  taxCollectorWisdom = 0;
  spellId;
  constructor(taxCollectorPods, spellLevel, taxCollectorDamagesBonuses, taxCollectorLifePoints, boostPoints, taxCollectorsCount, maxTaxCollectorsCount, taxCollectorProspecting, taxCollectorWisdom, spellId) {
    super();
    this.taxCollectorPods = taxCollectorPods;
    this.spellLevel = spellLevel;
    this.taxCollectorDamagesBonuses = taxCollectorDamagesBonuses;
    this.taxCollectorLifePoints = taxCollectorLifePoints;
    this.boostPoints = boostPoints;
    this.taxCollectorsCount = taxCollectorsCount;
    this.maxTaxCollectorsCount = maxTaxCollectorsCount;
    this.taxCollectorProspecting = taxCollectorProspecting;
    this.taxCollectorWisdom = taxCollectorWisdom;
    this.spellId = spellId;
  }
  serialize(writer) {
    writer.writeVarShort(this.taxCollectorPods);
    writer.writeShort(this.spellLevel.length);
    this.spellLevel.forEach((current) => writer.writeShort(current));
    writer.writeVarShort(this.taxCollectorDamagesBonuses);
    writer.writeVarShort(this.taxCollectorLifePoints);
    writer.writeVarShort(this.boostPoints);
    writer.writeByte(this.taxCollectorsCount);
    writer.writeByte(this.maxTaxCollectorsCount);
    writer.writeVarShort(this.taxCollectorProspecting);
    writer.writeVarShort(this.taxCollectorWisdom);
    writer.writeShort(this.spellId.length);
    this.spellId.forEach((current) => writer.writeVarShort(current));
  }
  deserialize(reader) {
    this.taxCollectorPods = reader.readVarShort();
    this.spellLevel = [];
    const countSpellLevel = reader.readShort();
    for (let i = 0; i < countSpellLevel; i++) {
      this.spellLevel.push(reader.readShort());
    }
    this.taxCollectorDamagesBonuses = reader.readVarShort();
    this.taxCollectorLifePoints = reader.readVarShort();
    this.boostPoints = reader.readVarShort();
    this.taxCollectorsCount = reader.readByte();
    this.maxTaxCollectorsCount = reader.readByte();
    this.taxCollectorProspecting = reader.readVarShort();
    this.taxCollectorWisdom = reader.readVarShort();
    this.spellId = [];
    const countSpellId = reader.readShort();
    for (let i = 0; i < countSpellId; i++) {
      this.spellId.push(reader.readVarShort());
    }
  }
};
var ExchangeBidHouseItemAddOkMessage = class extends DofusMessage {
  static id = 7844;
  itemInfo;
  constructor(itemInfo) {
    super();
    this.itemInfo = itemInfo;
  }
  serialize(writer) {
    this.itemInfo.serialize(writer);
  }
  deserialize(reader) {
    this.itemInfo = new ObjectItemToSellInBid();
    this.itemInfo.deserialize(reader);
  }
};
var GameRolePlayArenaRegistrationStatusMessage = class extends DofusMessage {
  static id = 4323;
  battleMode = 3;
  step = 0;
  registered = false;
  constructor(battleMode, step, registered) {
    super();
    this.battleMode = battleMode;
    this.step = step;
    this.registered = registered;
  }
  serialize(writer) {
    writer.writeInt(this.battleMode);
    writer.writeByte(this.step);
    writer.writeBoolean(this.registered);
  }
  deserialize(reader) {
    this.battleMode = reader.readInt();
    this.step = reader.readByte();
    this.registered = reader.readBoolean();
  }
};
var PartyEntityUpdateLightMessage = class extends PartyUpdateLightMessage {
  static id = 6677;
  indexId = 0;
  constructor(partyId, id_, regenRate, maxLifePoints, lifePoints, prospecting, indexId) {
    super(partyId, id_, regenRate, maxLifePoints, lifePoints, prospecting);
    this.indexId = indexId;
  }
  serialize(writer) {
    writer.writeByte(this.indexId);
  }
  deserialize(reader) {
    this.indexId = reader.readByte();
  }
};
var GameContextMoveMultipleElementsMessage = class extends DofusMessage {
  static id = 2401;
  movements;
  constructor(movements) {
    super();
    this.movements = movements;
  }
  serialize(writer) {
    writer.writeShort(this.movements.length);
    this.movements.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.movements = [];
    const countMovements = reader.readShort();
    for (let i = 0; i < countMovements; i++) {
      const type = new EntityMovementInformations();
      type.deserialize(reader);
      this.movements.push(type);
    }
  }
};
var PartyFollowStatusUpdateMessage = class extends AbstractPartyMessage {
  static id = 4806;
  followedId = 0;
  success = false;
  isFollowed = false;
  constructor(partyId, followedId, success, isFollowed) {
    super(partyId);
    this.followedId = followedId;
    this.success = success;
    this.isFollowed = isFollowed;
  }
  serialize(writer) {
    writer.writeVarLong(this.followedId);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.success);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.isFollowed);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.followedId = reader.readVarLong();
    const box0 = reader.readByte();
    this.success = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.isFollowed = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var PrismFightAddedMessage = class extends DofusMessage {
  static id = 5778;
  fight;
  constructor(fight) {
    super();
    this.fight = fight;
  }
  serialize(writer) {
    this.fight.serialize(writer);
  }
  deserialize(reader) {
    this.fight = new PrismFightersInformation();
    this.fight.deserialize(reader);
  }
};
var ItemForPresetUpdateMessage = class extends DofusMessage {
  static id = 2377;
  presetItem;
  presetId = 0;
  constructor(presetItem, presetId) {
    super();
    this.presetItem = presetItem;
    this.presetId = presetId;
  }
  serialize(writer) {
    this.presetItem.serialize(writer);
    writer.writeShort(this.presetId);
  }
  deserialize(reader) {
    this.presetItem = new ItemForPreset();
    this.presetItem.deserialize(reader);
    this.presetId = reader.readShort();
  }
};
var SetCharacterRestrictionsMessage = class extends DofusMessage {
  static id = 7853;
  restrictions;
  actorId = 0;
  constructor(restrictions, actorId) {
    super();
    this.restrictions = restrictions;
    this.actorId = actorId;
  }
  serialize(writer) {
    this.restrictions.serialize(writer);
    writer.writeDouble(this.actorId);
  }
  deserialize(reader) {
    this.restrictions = new ActorRestrictionsInformations();
    this.restrictions.deserialize(reader);
    this.actorId = reader.readDouble();
  }
};
var PartyKickedByMessage = class extends AbstractPartyMessage {
  static id = 8439;
  kickerId = 0;
  constructor(partyId, kickerId) {
    super(partyId);
    this.kickerId = kickerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.kickerId);
  }
  deserialize(reader) {
    this.kickerId = reader.readVarLong();
  }
};
var QuestStepStartedMessage = class extends DofusMessage {
  static id = 6142;
  stepId = 0;
  questId = 0;
  constructor(stepId, questId) {
    super();
    this.stepId = stepId;
    this.questId = questId;
  }
  serialize(writer) {
    writer.writeVarShort(this.stepId);
    writer.writeVarShort(this.questId);
  }
  deserialize(reader) {
    this.stepId = reader.readVarShort();
    this.questId = reader.readVarShort();
  }
};
var AllianceMembershipMessage = class extends AllianceJoinedMessage {
  static id = 813;
  constructor(enabled, leadingGuildId, allianceInfo) {
    super(enabled, leadingGuildId, allianceInfo);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var InviteInHavenBagClosedMessage = class extends DofusMessage {
  static id = 5490;
  hostInformations;
  constructor(hostInformations) {
    super();
    this.hostInformations = hostInformations;
  }
  serialize(writer) {
    this.hostInformations.serialize(writer);
  }
  deserialize(reader) {
    this.hostInformations = new CharacterMinimalInformations();
    this.hostInformations.deserialize(reader);
  }
};
var ExchangeBidHouseGenericItemAddedMessage = class extends DofusMessage {
  static id = 7602;
  objGenericId = 0;
  constructor(objGenericId) {
    super();
    this.objGenericId = objGenericId;
  }
  serialize(writer) {
    writer.writeVarShort(this.objGenericId);
  }
  deserialize(reader) {
    this.objGenericId = reader.readVarShort();
  }
};
var AlignmentRankUpdateMessage = class extends DofusMessage {
  static id = 7764;
  verbose = false;
  alignmentRank = 0;
  constructor(verbose, alignmentRank) {
    super();
    this.verbose = verbose;
    this.alignmentRank = alignmentRank;
  }
  serialize(writer) {
    writer.writeBoolean(this.verbose);
    writer.writeByte(this.alignmentRank);
  }
  deserialize(reader) {
    this.verbose = reader.readBoolean();
    this.alignmentRank = reader.readByte();
  }
};
var AccessoryPreviewErrorMessage = class extends DofusMessage {
  static id = 2038;
  error = 0;
  constructor(error) {
    super();
    this.error = error;
  }
  serialize(writer) {
    writer.writeByte(this.error);
  }
  deserialize(reader) {
    this.error = reader.readByte();
  }
};
var CharacterSelectedForceMessage = class extends DofusMessage {
  static id = 6158;
  id_ = 0;
  constructor(id_) {
    super();
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeInt(this.id_);
  }
  deserialize(reader) {
    this.id_ = reader.readInt();
  }
};
var GuildFactsRequestMessage = class extends DofusMessage {
  static id = 4628;
  guildId = 0;
  constructor(guildId) {
    super();
    this.guildId = guildId;
  }
  serialize(writer) {
    writer.writeVarInt(this.guildId);
  }
  deserialize(reader) {
    this.guildId = reader.readVarInt();
  }
};
var ClientKeyMessage = class extends DofusMessage {
  static id = 7137;
  key;
  constructor(key) {
    super();
    this.key = key;
  }
  serialize(writer) {
    writer.writeUTF(this.key);
  }
  deserialize(reader) {
    this.key = reader.readUTF();
  }
};
var NicknameChoiceRequestMessage = class extends DofusMessage {
  static id = 3297;
  nickname;
  constructor(nickname) {
    super();
    this.nickname = nickname;
  }
  serialize(writer) {
    writer.writeUTF(this.nickname);
  }
  deserialize(reader) {
    this.nickname = reader.readUTF();
  }
};
var AllianceFactsRequestMessage = class extends DofusMessage {
  static id = 8146;
  allianceId = 0;
  constructor(allianceId) {
    super();
    this.allianceId = allianceId;
  }
  serialize(writer) {
    writer.writeVarInt(this.allianceId);
  }
  deserialize(reader) {
    this.allianceId = reader.readVarInt();
  }
};
var TeleportHavenBagRequestMessage = class extends DofusMessage {
  static id = 5838;
  guestId = 0;
  constructor(guestId) {
    super();
    this.guestId = guestId;
  }
  serialize(writer) {
    writer.writeVarLong(this.guestId);
  }
  deserialize(reader) {
    this.guestId = reader.readVarLong();
  }
};
var GameMapChangeOrientationRequestMessage = class extends DofusMessage {
  static id = 4770;
  direction = 1;
  constructor(direction) {
    super();
    this.direction = direction;
  }
  serialize(writer) {
    writer.writeByte(this.direction);
  }
  deserialize(reader) {
    this.direction = reader.readByte();
  }
};
var ExchangeRequestOnTaxCollectorMessage = class extends DofusMessage {
  static id = 8267;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ExchangeOnHumanVendorRequestMessage = class extends DofusMessage {
  static id = 4359;
  humanVendorCell = 0;
  humanVendorId = 0;
  constructor(humanVendorCell, humanVendorId) {
    super();
    this.humanVendorCell = humanVendorCell;
    this.humanVendorId = humanVendorId;
  }
  serialize(writer) {
    writer.writeVarShort(this.humanVendorCell);
    writer.writeVarLong(this.humanVendorId);
  }
  deserialize(reader) {
    this.humanVendorCell = reader.readVarShort();
    this.humanVendorId = reader.readVarLong();
  }
};
var ExchangeBuyMessage = class extends DofusMessage {
  static id = 9589;
  quantity = 0;
  objectToBuyId = 0;
  constructor(quantity, objectToBuyId) {
    super();
    this.quantity = quantity;
    this.objectToBuyId = objectToBuyId;
  }
  serialize(writer) {
    writer.writeVarInt(this.quantity);
    writer.writeVarInt(this.objectToBuyId);
  }
  deserialize(reader) {
    this.quantity = reader.readVarInt();
    this.objectToBuyId = reader.readVarInt();
  }
};
var EnterHavenBagRequestMessage = class extends DofusMessage {
  static id = 8214;
  havenBagOwner = 0;
  constructor(havenBagOwner) {
    super();
    this.havenBagOwner = havenBagOwner;
  }
  serialize(writer) {
    writer.writeVarLong(this.havenBagOwner);
  }
  deserialize(reader) {
    this.havenBagOwner = reader.readVarLong();
  }
};
var ErrorMapNotFoundMessage = class extends DofusMessage {
  static id = 1147;
  mapId = 0;
  constructor(mapId) {
    super();
    this.mapId = mapId;
  }
  serialize(writer) {
    writer.writeDouble(this.mapId);
  }
  deserialize(reader) {
    this.mapId = reader.readDouble();
  }
};
var ExchangeRequestMessage = class extends DofusMessage {
  static id = 289;
  exchangeType = 0;
  constructor(exchangeType) {
    super();
    this.exchangeType = exchangeType;
  }
  serialize(writer) {
    writer.writeByte(this.exchangeType);
  }
  deserialize(reader) {
    this.exchangeType = reader.readByte();
  }
};
var ExchangePlayerRequestMessage = class extends ExchangeRequestMessage {
  static id = 2400;
  target = 0;
  constructor(exchangeType, target) {
    super(exchangeType);
    this.target = target;
  }
  serialize(writer) {
    writer.writeVarLong(this.target);
  }
  deserialize(reader) {
    this.target = reader.readVarLong();
  }
};
var GameRolePlayPlayerFightRequestMessage = class extends DofusMessage {
  static id = 6364;
  targetCellId = 0;
  friendly = false;
  targetId = 0;
  constructor(targetCellId, friendly, targetId) {
    super();
    this.targetCellId = targetCellId;
    this.friendly = friendly;
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeShort(this.targetCellId);
    writer.writeBoolean(this.friendly);
    writer.writeVarLong(this.targetId);
  }
  deserialize(reader) {
    this.targetCellId = reader.readShort();
    this.friendly = reader.readBoolean();
    this.targetId = reader.readVarLong();
  }
};
var ExchangePlayerMultiCraftRequestMessage = class extends ExchangeRequestMessage {
  static id = 6947;
  skillId = 0;
  target = 0;
  constructor(exchangeType, skillId, target) {
    super(exchangeType);
    this.skillId = skillId;
    this.target = target;
  }
  serialize(writer) {
    writer.writeVarInt(this.skillId);
    writer.writeVarLong(this.target);
  }
  deserialize(reader) {
    this.skillId = reader.readVarInt();
    this.target = reader.readVarLong();
  }
};
var ExchangeObjectMoveMessage = class extends DofusMessage {
  static id = 5229;
  quantity = 0;
  objectUID = 0;
  constructor(quantity, objectUID) {
    super();
    this.quantity = quantity;
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeVarInt(this.quantity);
    writer.writeVarInt(this.objectUID);
  }
  deserialize(reader) {
    this.quantity = reader.readVarInt();
    this.objectUID = reader.readVarInt();
  }
};
var ExchangeObjectMovePricedMessage = class extends ExchangeObjectMoveMessage {
  static id = 1384;
  price = 0;
  constructor(quantity, objectUID, price) {
    super(quantity, objectUID);
    this.price = price;
  }
  serialize(writer) {
    writer.writeVarLong(this.price);
  }
  deserialize(reader) {
    this.price = reader.readVarLong();
  }
};
var ExchangeStartAsVendorMessage = class extends DofusMessage {
  static id = 6819;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PortalUseRequestMessage = class extends DofusMessage {
  static id = 1831;
  portalId = 0;
  constructor(portalId) {
    super();
    this.portalId = portalId;
  }
  serialize(writer) {
    writer.writeVarInt(this.portalId);
  }
  deserialize(reader) {
    this.portalId = reader.readVarInt();
  }
};
var ExchangeSellMessage = class extends DofusMessage {
  static id = 5196;
  quantity = 0;
  objectToSellId = 0;
  constructor(quantity, objectToSellId) {
    super();
    this.quantity = quantity;
    this.objectToSellId = objectToSellId;
  }
  serialize(writer) {
    writer.writeVarInt(this.quantity);
    writer.writeVarInt(this.objectToSellId);
  }
  deserialize(reader) {
    this.quantity = reader.readVarInt();
    this.objectToSellId = reader.readVarInt();
  }
};
var GameRolePlayFreeSoulRequestMessage = class extends DofusMessage {
  static id = 2760;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var LeaveDialogRequestMessage = class extends DofusMessage {
  static id = 6682;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var TeleportHavenBagAnswerMessage = class extends DofusMessage {
  static id = 597;
  accept = false;
  constructor(accept) {
    super();
    this.accept = accept;
  }
  serialize(writer) {
    writer.writeBoolean(this.accept);
  }
  deserialize(reader) {
    this.accept = reader.readBoolean();
  }
};
var KickHavenBagRequestMessage = class extends DofusMessage {
  static id = 188;
  guestId = 0;
  constructor(guestId) {
    super();
    this.guestId = guestId;
  }
  serialize(writer) {
    writer.writeVarLong(this.guestId);
  }
  deserialize(reader) {
    this.guestId = reader.readVarLong();
  }
};
var NpcGenericActionRequestMessage = class extends DofusMessage {
  static id = 1598;
  npcMapId = 0;
  npcActionId = 0;
  npcId = 0;
  constructor(npcMapId, npcActionId, npcId) {
    super();
    this.npcMapId = npcMapId;
    this.npcActionId = npcActionId;
    this.npcId = npcId;
  }
  serialize(writer) {
    writer.writeDouble(this.npcMapId);
    writer.writeByte(this.npcActionId);
    writer.writeInt(this.npcId);
  }
  deserialize(reader) {
    this.npcMapId = reader.readDouble();
    this.npcActionId = reader.readByte();
    this.npcId = reader.readInt();
  }
};
var GameRolePlayTaxCollectorFightRequestMessage = class extends DofusMessage {
  static id = 598;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GameRolePlayPlayerFightFriendlyAnswerMessage = class extends DofusMessage {
  static id = 9468;
  accept = false;
  fightId = 0;
  constructor(accept, fightId) {
    super();
    this.accept = accept;
    this.fightId = fightId;
  }
  serialize(writer) {
    writer.writeBoolean(this.accept);
    writer.writeVarShort(this.fightId);
  }
  deserialize(reader) {
    this.accept = reader.readBoolean();
    this.fightId = reader.readVarShort();
  }
};
var ExchangeShowVendorTaxMessage = class extends DofusMessage {
  static id = 673;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ExchangeRequestOnShopStockMessage = class extends DofusMessage {
  static id = 67;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var HouseTeleportRequestMessage = class extends DofusMessage {
  static id = 4012;
  houseInstanceId = 0;
  houseId = 0;
  constructor(houseInstanceId, houseId) {
    super();
    this.houseInstanceId = houseInstanceId;
    this.houseId = houseId;
  }
  serialize(writer) {
    writer.writeInt(this.houseInstanceId);
    writer.writeVarInt(this.houseId);
  }
  deserialize(reader) {
    this.houseInstanceId = reader.readInt();
    this.houseId = reader.readVarInt();
  }
};
var FriendJoinRequestMessage = class extends DofusMessage {
  static id = 535;
  target;
  constructor(target) {
    super();
    this.target = target;
  }
  serialize(writer) {
    writer.writeShort(this.target.id);
    this.target.serialize(writer);
  }
  deserialize(reader) {
    const targetTypeId = reader.readShort();
    this.target = new types[targetTypeId]();
    this.target.deserialize(reader);
  }
};
var FriendSpouseFollowWithCompassRequestMessage = class extends DofusMessage {
  static id = 8825;
  enable = false;
  constructor(enable) {
    super();
    this.enable = enable;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
  }
};
var SocialNoticeSetRequestMessage = class extends DofusMessage {
  static id = 2825;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GuildBulletinSetRequestMessage = class extends SocialNoticeSetRequestMessage {
  static id = 7121;
  notifyMembers = false;
  content;
  constructor(notifyMembers, content) {
    super();
    this.notifyMembers = notifyMembers;
    this.content = content;
  }
  serialize(writer) {
    writer.writeBoolean(this.notifyMembers);
    writer.writeUTF(this.content);
  }
  deserialize(reader) {
    this.notifyMembers = reader.readBoolean();
    this.content = reader.readUTF();
  }
};
var GuildSpellUpgradeRequestMessage = class extends DofusMessage {
  static id = 8207;
  spellId = 0;
  constructor(spellId) {
    super();
    this.spellId = spellId;
  }
  serialize(writer) {
    writer.writeInt(this.spellId);
  }
  deserialize(reader) {
    this.spellId = reader.readInt();
  }
};
var GuildCharacsUpgradeRequestMessage = class extends DofusMessage {
  static id = 3240;
  charaTypeTarget = 0;
  constructor(charaTypeTarget) {
    super();
    this.charaTypeTarget = charaTypeTarget;
  }
  serialize(writer) {
    writer.writeByte(this.charaTypeTarget);
  }
  deserialize(reader) {
    this.charaTypeTarget = reader.readByte();
  }
};
var SpouseGetInformationsMessage = class extends DofusMessage {
  static id = 2446;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var WarnOnPermaDeathMessage = class extends DofusMessage {
  static id = 9760;
  enable = false;
  constructor(enable) {
    super();
    this.enable = enable;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
  }
};
var GuildGetInformationsMessage = class extends DofusMessage {
  static id = 5805;
  infoType = 0;
  constructor(infoType) {
    super();
    this.infoType = infoType;
  }
  serialize(writer) {
    writer.writeByte(this.infoType);
  }
  deserialize(reader) {
    this.infoType = reader.readByte();
  }
};
var FriendSetWarnOnConnectionMessage = class extends DofusMessage {
  static id = 6228;
  enable = false;
  constructor(enable) {
    super();
    this.enable = enable;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
  }
};
var IgnoredGetListMessage = class extends DofusMessage {
  static id = 4403;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PaginationRequestAbstractMessage = class extends DofusMessage {
  static id = 789;
  count = 0;
  offset = 0;
  constructor(count, offset) {
    super();
    this.count = count;
    this.offset = offset;
  }
  serialize(writer) {
    writer.writeUInt(this.count);
    writer.writeDouble(this.offset);
  }
  deserialize(reader) {
    this.count = reader.readUInt();
    this.offset = reader.readDouble();
  }
};
var GuildListApplicationRequestMessage = class extends PaginationRequestAbstractMessage {
  static id = 2316;
  constructor(count, offset) {
    super(count, offset);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GuildMotdSetRequestMessage = class extends SocialNoticeSetRequestMessage {
  static id = 3391;
  content;
  constructor(content) {
    super();
    this.content = content;
  }
  serialize(writer) {
    writer.writeUTF(this.content);
  }
  deserialize(reader) {
    this.content = reader.readUTF();
  }
};
var GuildMemberSetWarnOnConnectionMessage = class extends DofusMessage {
  static id = 4147;
  enable = false;
  constructor(enable) {
    super();
    this.enable = enable;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
  }
};
var GuildApplicationAnswerMessage = class extends DofusMessage {
  static id = 5404;
  playerId = 0;
  accepted = false;
  constructor(playerId, accepted) {
    super();
    this.playerId = playerId;
    this.accepted = accepted;
  }
  serialize(writer) {
    writer.writeVarInt(this.playerId);
    writer.writeBoolean(this.accepted);
  }
  deserialize(reader) {
    this.playerId = reader.readVarInt();
    this.accepted = reader.readBoolean();
  }
};
var IgnoredDeleteRequestMessage = class extends DofusMessage {
  static id = 2264;
  session = false;
  accountId = 0;
  constructor(session, accountId) {
    super();
    this.session = session;
    this.accountId = accountId;
  }
  serialize(writer) {
    writer.writeBoolean(this.session);
    writer.writeInt(this.accountId);
  }
  deserialize(reader) {
    this.session = reader.readBoolean();
    this.accountId = reader.readInt();
  }
};
var GuildChangeMemberParametersMessage = class extends DofusMessage {
  static id = 3633;
  experienceGivenPercent = 0;
  rights = 0;
  rank = 0;
  memberId = 0;
  constructor(experienceGivenPercent, rights, rank, memberId) {
    super();
    this.experienceGivenPercent = experienceGivenPercent;
    this.rights = rights;
    this.rank = rank;
    this.memberId = memberId;
  }
  serialize(writer) {
    writer.writeByte(this.experienceGivenPercent);
    writer.writeVarInt(this.rights);
    writer.writeVarShort(this.rank);
    writer.writeVarLong(this.memberId);
  }
  deserialize(reader) {
    this.experienceGivenPercent = reader.readByte();
    this.rights = reader.readVarInt();
    this.rank = reader.readVarShort();
    this.memberId = reader.readVarLong();
  }
};
var UpdateRecruitmentInformationMessage = class extends DofusMessage {
  static id = 3169;
  recruitmentData;
  constructor(recruitmentData) {
    super();
    this.recruitmentData = recruitmentData;
  }
  serialize(writer) {
    this.recruitmentData.serialize(writer);
  }
  deserialize(reader) {
    this.recruitmentData = new GuildRecruitmentInformation();
    this.recruitmentData.deserialize(reader);
  }
};
var GuildFightJoinRequestMessage = class extends DofusMessage {
  static id = 9050;
  taxCollectorId = 0;
  constructor(taxCollectorId) {
    super();
    this.taxCollectorId = taxCollectorId;
  }
  serialize(writer) {
    writer.writeDouble(this.taxCollectorId);
  }
  deserialize(reader) {
    this.taxCollectorId = reader.readDouble();
  }
};
var FriendDeleteRequestMessage = class extends DofusMessage {
  static id = 7400;
  accountId = 0;
  constructor(accountId) {
    super();
    this.accountId = accountId;
  }
  serialize(writer) {
    writer.writeInt(this.accountId);
  }
  deserialize(reader) {
    this.accountId = reader.readInt();
  }
};
var ContactLookRequestMessage = class extends DofusMessage {
  static id = 9165;
  contactType = 0;
  requestId = 0;
  constructor(contactType, requestId) {
    super();
    this.contactType = contactType;
    this.requestId = requestId;
  }
  serialize(writer) {
    writer.writeByte(this.contactType);
    writer.writeByte(this.requestId);
  }
  deserialize(reader) {
    this.contactType = reader.readByte();
    this.requestId = reader.readByte();
  }
};
var ContactLookRequestByIdMessage = class extends ContactLookRequestMessage {
  static id = 7749;
  playerId = 0;
  constructor(contactType, requestId, playerId) {
    super(contactType, requestId);
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
  }
};
var FriendAddRequestMessage = class extends DofusMessage {
  static id = 6214;
  target;
  constructor(target) {
    super();
    this.target = target;
  }
  serialize(writer) {
    writer.writeShort(this.target.id);
    this.target.serialize(writer);
  }
  deserialize(reader) {
    const targetTypeId = reader.readShort();
    this.target = new types[targetTypeId]();
    this.target.deserialize(reader);
  }
};
var PlayerStatusUpdateRequestMessage = class extends DofusMessage {
  static id = 1504;
  status;
  constructor(status) {
    super();
    this.status = status;
  }
  serialize(writer) {
    writer.writeShort(this.status.id);
    this.status.serialize(writer);
  }
  deserialize(reader) {
    const statusTypeId = reader.readShort();
    this.status = new types[statusTypeId]();
    this.status.deserialize(reader);
  }
};
var GuildPaddockTeleportRequestMessage = class extends DofusMessage {
  static id = 7914;
  paddockId = 0;
  constructor(paddockId) {
    super();
    this.paddockId = paddockId;
  }
  serialize(writer) {
    writer.writeDouble(this.paddockId);
  }
  deserialize(reader) {
    this.paddockId = reader.readDouble();
  }
};
var IgnoredAddRequestMessage = class extends DofusMessage {
  static id = 2801;
  session = false;
  target;
  constructor(session, target) {
    super();
    this.session = session;
    this.target = target;
  }
  serialize(writer) {
    writer.writeBoolean(this.session);
    writer.writeShort(this.target.id);
    this.target.serialize(writer);
  }
  deserialize(reader) {
    this.session = reader.readBoolean();
    const targetTypeId = reader.readShort();
    this.target = new types[targetTypeId]();
    this.target.deserialize(reader);
  }
};
var GuildDeleteApplicationRequestMessage = class extends DofusMessage {
  static id = 9896;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GuildUpdateApplicationMessage = class extends DofusMessage {
  static id = 6940;
  guildId = 0;
  applyText;
  constructor(guildId, applyText) {
    super();
    this.guildId = guildId;
    this.applyText = applyText;
  }
  serialize(writer) {
    writer.writeVarInt(this.guildId);
    writer.writeUTF(this.applyText);
  }
  deserialize(reader) {
    this.guildId = reader.readVarInt();
    this.applyText = reader.readUTF();
  }
};
var FriendSetStatusShareMessage = class extends DofusMessage {
  static id = 1404;
  share = false;
  constructor(share) {
    super();
    this.share = share;
  }
  serialize(writer) {
    writer.writeBoolean(this.share);
  }
  deserialize(reader) {
    this.share = reader.readBoolean();
  }
};
var GuildKickRequestMessage = class extends DofusMessage {
  static id = 3965;
  kickedId = 0;
  constructor(kickedId) {
    super();
    this.kickedId = kickedId;
  }
  serialize(writer) {
    writer.writeVarLong(this.kickedId);
  }
  deserialize(reader) {
    this.kickedId = reader.readVarLong();
  }
};
var GuildApplicationListenMessage = class extends DofusMessage {
  static id = 9375;
  listen = false;
  constructor(listen) {
    super();
    this.listen = listen;
  }
  serialize(writer) {
    writer.writeBoolean(this.listen);
  }
  deserialize(reader) {
    this.listen = reader.readBoolean();
  }
};
var GuildJoinAutomaticallyRequestMessage = class extends DofusMessage {
  static id = 6478;
  guildId = 0;
  constructor(guildId) {
    super();
    this.guildId = guildId;
  }
  serialize(writer) {
    writer.writeInt(this.guildId);
  }
  deserialize(reader) {
    this.guildId = reader.readInt();
  }
};
var GuildInvitationSearchMessage = class extends DofusMessage {
  static id = 5666;
  target;
  constructor(target) {
    super();
    this.target = target;
  }
  serialize(writer) {
    writer.writeShort(this.target.id);
    this.target.serialize(writer);
  }
  deserialize(reader) {
    const targetTypeId = reader.readShort();
    this.target = new types[targetTypeId]();
    this.target.deserialize(reader);
  }
};
var FriendGuildSetWarnOnAchievementCompleteMessage = class extends DofusMessage {
  static id = 2644;
  enable = false;
  constructor(enable) {
    super();
    this.enable = enable;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
  }
};
var GuildSummaryRequestMessage = class extends PaginationRequestAbstractMessage {
  static id = 9211;
  sortType = 0;
  maxSuccessFilter = 0;
  maxPlayerLevelFilter = 0;
  criterionFilter;
  nameFilter;
  languagesFilter;
  minPlayerLevelFilter = 0;
  minLevelFilter = 0;
  recruitmentTypeFilter;
  maxLevelFilter = 0;
  minSuccessFilter = 0;
  hideFullFilter = false;
  sortDescending = false;
  constructor(count, offset, sortType, maxSuccessFilter, maxPlayerLevelFilter, criterionFilter, nameFilter, languagesFilter, minPlayerLevelFilter, minLevelFilter, recruitmentTypeFilter, maxLevelFilter, minSuccessFilter, hideFullFilter, sortDescending) {
    super(count, offset);
    this.sortType = sortType;
    this.maxSuccessFilter = maxSuccessFilter;
    this.maxPlayerLevelFilter = maxPlayerLevelFilter;
    this.criterionFilter = criterionFilter;
    this.nameFilter = nameFilter;
    this.languagesFilter = languagesFilter;
    this.minPlayerLevelFilter = minPlayerLevelFilter;
    this.minLevelFilter = minLevelFilter;
    this.recruitmentTypeFilter = recruitmentTypeFilter;
    this.maxLevelFilter = maxLevelFilter;
    this.minSuccessFilter = minSuccessFilter;
    this.hideFullFilter = hideFullFilter;
    this.sortDescending = sortDescending;
  }
  serialize(writer) {
    writer.writeByte(this.sortType);
    writer.writeVarInt(this.maxSuccessFilter);
    writer.writeShort(this.maxPlayerLevelFilter);
    writer.writeShort(this.criterionFilter.length);
    this.criterionFilter.forEach(
      (current) => writer.writeVarInt(current)
    );
    writer.writeUTF(this.nameFilter);
    writer.writeShort(this.languagesFilter.length);
    this.languagesFilter.forEach(
      (current) => writer.writeVarInt(current)
    );
    writer.writeShort(this.minPlayerLevelFilter);
    writer.writeShort(this.minLevelFilter);
    writer.writeShort(this.recruitmentTypeFilter.length);
    this.recruitmentTypeFilter.forEach(
      (current) => writer.writeByte(current)
    );
    writer.writeShort(this.maxLevelFilter);
    writer.writeVarInt(this.minSuccessFilter);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.hideFullFilter);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.sortDescending);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.sortType = reader.readByte();
    this.maxSuccessFilter = reader.readVarInt();
    this.maxPlayerLevelFilter = reader.readShort();
    this.criterionFilter = [];
    const countCriterionFilter = reader.readShort();
    for (let i = 0; i < countCriterionFilter; i++) {
      this.criterionFilter.push(reader.readVarInt());
    }
    this.nameFilter = reader.readUTF();
    this.languagesFilter = [];
    const countLanguagesFilter = reader.readShort();
    for (let i = 0; i < countLanguagesFilter; i++) {
      this.languagesFilter.push(reader.readVarInt());
    }
    this.minPlayerLevelFilter = reader.readShort();
    this.minLevelFilter = reader.readShort();
    this.recruitmentTypeFilter = [];
    const countRecruitmentTypeFilter = reader.readShort();
    for (let i = 0; i < countRecruitmentTypeFilter; i++) {
      this.recruitmentTypeFilter.push(reader.readByte());
    }
    this.maxLevelFilter = reader.readShort();
    this.minSuccessFilter = reader.readVarInt();
    const box0 = reader.readByte();
    this.hideFullFilter = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.sortDescending = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var GuildInvitationMessage = class extends DofusMessage {
  static id = 2715;
  targetId = 0;
  constructor(targetId) {
    super();
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeVarLong(this.targetId);
  }
  deserialize(reader) {
    this.targetId = reader.readVarLong();
  }
};
var GuildGetPlayerApplicationMessage = class extends DofusMessage {
  static id = 7226;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GuildFightLeaveRequestMessage = class extends DofusMessage {
  static id = 5074;
  characterId = 0;
  taxCollectorId = 0;
  constructor(characterId, taxCollectorId) {
    super();
    this.characterId = characterId;
    this.taxCollectorId = taxCollectorId;
  }
  serialize(writer) {
    writer.writeVarLong(this.characterId);
    writer.writeDouble(this.taxCollectorId);
  }
  deserialize(reader) {
    this.characterId = reader.readVarLong();
    this.taxCollectorId = reader.readDouble();
  }
};
var AcquaintancesGetListMessage = class extends DofusMessage {
  static id = 4271;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var FriendSpouseJoinRequestMessage = class extends DofusMessage {
  static id = 3542;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var FriendSetWarnOnLevelGainMessage = class extends DofusMessage {
  static id = 4065;
  enable = false;
  constructor(enable) {
    super();
    this.enable = enable;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
  }
};
var GuildSubmitApplicationMessage = class extends DofusMessage {
  static id = 9276;
  filterSearchName;
  timeSpent = 0;
  filterLastSort;
  guildId = 0;
  filterMinMaxAchievement;
  applyText;
  filterAmbiance;
  filterMinMaxCharacterLevel;
  filterPlaytime;
  filterInterest;
  filterMinMaxGuildLevel;
  filterLanguage;
  filterRecruitmentType;
  constructor(filterSearchName, timeSpent, filterLastSort, guildId, filterMinMaxAchievement, applyText, filterAmbiance, filterMinMaxCharacterLevel, filterPlaytime, filterInterest, filterMinMaxGuildLevel, filterLanguage, filterRecruitmentType) {
    super();
    this.filterSearchName = filterSearchName;
    this.timeSpent = timeSpent;
    this.filterLastSort = filterLastSort;
    this.guildId = guildId;
    this.filterMinMaxAchievement = filterMinMaxAchievement;
    this.applyText = applyText;
    this.filterAmbiance = filterAmbiance;
    this.filterMinMaxCharacterLevel = filterMinMaxCharacterLevel;
    this.filterPlaytime = filterPlaytime;
    this.filterInterest = filterInterest;
    this.filterMinMaxGuildLevel = filterMinMaxGuildLevel;
    this.filterLanguage = filterLanguage;
    this.filterRecruitmentType = filterRecruitmentType;
  }
  serialize(writer) {
    writer.writeUTF(this.filterSearchName);
    writer.writeVarInt(this.timeSpent);
    writer.writeUTF(this.filterLastSort);
    writer.writeVarInt(this.guildId);
    writer.writeUTF(this.filterMinMaxAchievement);
    writer.writeUTF(this.applyText);
    writer.writeUTF(this.filterAmbiance);
    writer.writeUTF(this.filterMinMaxCharacterLevel);
    writer.writeUTF(this.filterPlaytime);
    writer.writeUTF(this.filterInterest);
    writer.writeUTF(this.filterMinMaxGuildLevel);
    writer.writeUTF(this.filterLanguage);
    writer.writeUTF(this.filterRecruitmentType);
  }
  deserialize(reader) {
    this.filterSearchName = reader.readUTF();
    this.timeSpent = reader.readVarInt();
    this.filterLastSort = reader.readUTF();
    this.guildId = reader.readVarInt();
    this.filterMinMaxAchievement = reader.readUTF();
    this.applyText = reader.readUTF();
    this.filterAmbiance = reader.readUTF();
    this.filterMinMaxCharacterLevel = reader.readUTF();
    this.filterPlaytime = reader.readUTF();
    this.filterInterest = reader.readUTF();
    this.filterMinMaxGuildLevel = reader.readUTF();
    this.filterLanguage = reader.readUTF();
    this.filterRecruitmentType = reader.readUTF();
  }
};
var FriendsGetListMessage = class extends DofusMessage {
  static id = 3044;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GuildFightTakePlaceRequestMessage = class extends GuildFightJoinRequestMessage {
  static id = 1932;
  replacedCharacterId = 0;
  constructor(taxCollectorId, replacedCharacterId) {
    super(taxCollectorId);
    this.replacedCharacterId = replacedCharacterId;
  }
  serialize(writer) {
    writer.writeVarLong(this.replacedCharacterId);
  }
  deserialize(reader) {
    this.replacedCharacterId = reader.readVarLong();
  }
};
var PopupWarningCloseRequestMessage = class extends DofusMessage {
  static id = 3461;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ChatAbstractClientMessage = class extends DofusMessage {
  static id = 1037;
  content;
  constructor(content) {
    super();
    this.content = content;
  }
  serialize(writer) {
    writer.writeUTF(this.content);
  }
  deserialize(reader) {
    this.content = reader.readUTF();
  }
};
var ChatClientPrivateMessage = class extends ChatAbstractClientMessage {
  static id = 1814;
  receiver;
  constructor(content, receiver) {
    super(content);
    this.receiver = receiver;
  }
  serialize(writer) {
    writer.writeShort(this.receiver.id);
    this.receiver.serialize(writer);
  }
  deserialize(reader) {
    const receiverTypeId = reader.readShort();
    this.receiver = new types[receiverTypeId]();
    this.receiver.deserialize(reader);
  }
};
var ChatClientPrivateWithObjectMessage = class extends ChatClientPrivateMessage {
  static id = 1043;
  objects;
  constructor(content, receiver, objects) {
    super(content, receiver);
    this.objects = objects;
  }
  serialize(writer) {
    writer.writeShort(this.objects.length);
    this.objects.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.objects = [];
    const countObjects = reader.readShort();
    for (let i = 0; i < countObjects; i++) {
      const type = new ObjectItem();
      type.deserialize(reader);
      this.objects.push(type);
    }
  }
};
var MoodSmileyRequestMessage = class extends DofusMessage {
  static id = 610;
  smileyId = 0;
  constructor(smileyId) {
    super();
    this.smileyId = smileyId;
  }
  serialize(writer) {
    writer.writeVarShort(this.smileyId);
  }
  deserialize(reader) {
    this.smileyId = reader.readVarShort();
  }
};
var ChatSmileyRequestMessage = class extends DofusMessage {
  static id = 9062;
  smileyId = 0;
  constructor(smileyId) {
    super();
    this.smileyId = smileyId;
  }
  serialize(writer) {
    writer.writeVarShort(this.smileyId);
  }
  deserialize(reader) {
    this.smileyId = reader.readVarShort();
  }
};
var ChatCommunityChannelSetCommunityRequestMessage = class extends DofusMessage {
  static id = 9201;
  communityId = 0;
  constructor(communityId) {
    super();
    this.communityId = communityId;
  }
  serialize(writer) {
    writer.writeShort(this.communityId);
  }
  deserialize(reader) {
    this.communityId = reader.readShort();
  }
};
var BasicWhoIsRequestMessage = class extends DofusMessage {
  static id = 1784;
  target;
  verbose = false;
  constructor(target, verbose) {
    super();
    this.target = target;
    this.verbose = verbose;
  }
  serialize(writer) {
    writer.writeShort(this.target.id);
    this.target.serialize(writer);
    writer.writeBoolean(this.verbose);
  }
  deserialize(reader) {
    const targetTypeId = reader.readShort();
    this.target = new types[targetTypeId]();
    this.target.deserialize(reader);
    this.verbose = reader.readBoolean();
  }
};
var ChatClientMultiMessage = class extends ChatAbstractClientMessage {
  static id = 1382;
  channel = 0;
  constructor(content, channel) {
    super(content);
    this.channel = channel;
  }
  serialize(writer) {
    writer.writeByte(this.channel);
  }
  deserialize(reader) {
    this.channel = reader.readByte();
  }
};
var ChatClientMultiWithObjectMessage = class extends ChatClientMultiMessage {
  static id = 1682;
  objects;
  constructor(content, channel, objects) {
    super(content, channel);
    this.objects = objects;
  }
  serialize(writer) {
    writer.writeShort(this.objects.length);
    this.objects.forEach((current) => {
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.objects = [];
    const countObjects = reader.readShort();
    for (let i = 0; i < countObjects; i++) {
      const type = new ObjectItem();
      type.deserialize(reader);
      this.objects.push(type);
    }
  }
};
var ChannelEnablingMessage = class extends DofusMessage {
  static id = 499;
  enable = false;
  channel = 0;
  constructor(enable, channel) {
    super();
    this.enable = enable;
    this.channel = channel;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
    writer.writeByte(this.channel);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
    this.channel = reader.readByte();
  }
};
var NumericWhoIsRequestMessage = class extends DofusMessage {
  static id = 4159;
  playerId = 0;
  constructor(playerId) {
    super();
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
  }
};
var PartyPledgeLoyaltyRequestMessage = class extends AbstractPartyMessage {
  static id = 8034;
  loyal = false;
  constructor(partyId, loyal) {
    super(partyId);
    this.loyal = loyal;
  }
  serialize(writer) {
    writer.writeBoolean(this.loyal);
  }
  deserialize(reader) {
    this.loyal = reader.readBoolean();
  }
};
var PartyFollowMemberRequestMessage = class extends AbstractPartyMessage {
  static id = 8603;
  playerId = 0;
  constructor(partyId, playerId) {
    super(partyId);
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
  }
};
var PartyFollowThisMemberRequestMessage = class extends PartyFollowMemberRequestMessage {
  static id = 4755;
  enabled = false;
  constructor(partyId, playerId, enabled) {
    super(partyId, playerId);
    this.enabled = enabled;
  }
  serialize(writer) {
    writer.writeBoolean(this.enabled);
  }
  deserialize(reader) {
    this.enabled = reader.readBoolean();
  }
};
var DungeonPartyFinderAvailableDungeonsRequestMessage = class extends DofusMessage {
  static id = 9701;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PartyRefuseInvitationMessage = class extends AbstractPartyMessage {
  static id = 1520;
  constructor(partyId) {
    super(partyId);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PartyNameSetRequestMessage = class extends AbstractPartyMessage {
  static id = 3956;
  partyName;
  constructor(partyId, partyName) {
    super(partyId);
    this.partyName = partyName;
  }
  serialize(writer) {
    writer.writeUTF(this.partyName);
  }
  deserialize(reader) {
    this.partyName = reader.readUTF();
  }
};
var PartyLeaveRequestMessage = class extends AbstractPartyMessage {
  static id = 1964;
  constructor(partyId) {
    super(partyId);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var TeleportToBuddyAnswerMessage = class extends DofusMessage {
  static id = 5687;
  buddyId = 0;
  accept = false;
  dungeonId = 0;
  constructor(buddyId, accept, dungeonId) {
    super();
    this.buddyId = buddyId;
    this.accept = accept;
    this.dungeonId = dungeonId;
  }
  serialize(writer) {
    writer.writeVarLong(this.buddyId);
    writer.writeBoolean(this.accept);
    writer.writeVarShort(this.dungeonId);
  }
  deserialize(reader) {
    this.buddyId = reader.readVarLong();
    this.accept = reader.readBoolean();
    this.dungeonId = reader.readVarShort();
  }
};
var GameRolePlayArenaFightAnswerMessage = class extends DofusMessage {
  static id = 5799;
  accept = false;
  fightId = 0;
  constructor(accept, fightId) {
    super();
    this.accept = accept;
    this.fightId = fightId;
  }
  serialize(writer) {
    writer.writeBoolean(this.accept);
    writer.writeVarShort(this.fightId);
  }
  deserialize(reader) {
    this.accept = reader.readBoolean();
    this.fightId = reader.readVarShort();
  }
};
var PartyAbdicateThroneMessage = class extends AbstractPartyMessage {
  static id = 6752;
  playerId = 0;
  constructor(partyId, playerId) {
    super(partyId);
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
  }
};
var BreachInvitationAnswerMessage = class extends DofusMessage {
  static id = 5975;
  accept = false;
  constructor(accept) {
    super();
    this.accept = accept;
  }
  serialize(writer) {
    writer.writeBoolean(this.accept);
  }
  deserialize(reader) {
    this.accept = reader.readBoolean();
  }
};
var GameRolePlayArenaRegisterMessage = class extends DofusMessage {
  static id = 5010;
  battleMode = 3;
  constructor(battleMode) {
    super();
    this.battleMode = battleMode;
  }
  serialize(writer) {
    writer.writeInt(this.battleMode);
  }
  deserialize(reader) {
    this.battleMode = reader.readInt();
  }
};
var PartyInvitationRequestMessage = class extends DofusMessage {
  static id = 6419;
  target;
  constructor(target) {
    super();
    this.target = target;
  }
  serialize(writer) {
    writer.writeShort(this.target.id);
    this.target.serialize(writer);
  }
  deserialize(reader) {
    const targetTypeId = reader.readShort();
    this.target = new types[targetTypeId]();
    this.target.deserialize(reader);
  }
};
var PartyInvitationArenaRequestMessage = class extends PartyInvitationRequestMessage {
  static id = 8528;
  constructor(target) {
    super(target);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var DungeonPartyFinderListenRequestMessage = class extends DofusMessage {
  static id = 1266;
  dungeonId = 0;
  constructor(dungeonId) {
    super();
    this.dungeonId = dungeonId;
  }
  serialize(writer) {
    writer.writeVarShort(this.dungeonId);
  }
  deserialize(reader) {
    this.dungeonId = reader.readVarShort();
  }
};
var PartyInvitationDetailsRequestMessage = class extends AbstractPartyMessage {
  static id = 474;
  constructor(partyId) {
    super(partyId);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PartyCancelInvitationMessage = class extends AbstractPartyMessage {
  static id = 7066;
  guestId = 0;
  constructor(partyId, guestId) {
    super(partyId);
    this.guestId = guestId;
  }
  serialize(writer) {
    writer.writeVarLong(this.guestId);
  }
  deserialize(reader) {
    this.guestId = reader.readVarLong();
  }
};
var PartyInvitationDungeonRequestMessage = class extends PartyInvitationRequestMessage {
  static id = 8333;
  dungeonId = 0;
  constructor(target, dungeonId) {
    super(target);
    this.dungeonId = dungeonId;
  }
  serialize(writer) {
    writer.writeVarShort(this.dungeonId);
  }
  deserialize(reader) {
    this.dungeonId = reader.readVarShort();
  }
};
var DungeonPartyFinderRegisterRequestMessage = class extends DofusMessage {
  static id = 2723;
  dungeonIds;
  constructor(dungeonIds) {
    super();
    this.dungeonIds = dungeonIds;
  }
  serialize(writer) {
    writer.writeShort(this.dungeonIds.length);
    this.dungeonIds.forEach(
      (current) => writer.writeVarShort(current)
    );
  }
  deserialize(reader) {
    this.dungeonIds = [];
    const countDungeonIds = reader.readShort();
    for (let i = 0; i < countDungeonIds; i++) {
      this.dungeonIds.push(reader.readVarShort());
    }
  }
};
var GameRolePlayArenaUnregisterMessage = class extends DofusMessage {
  static id = 3857;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PartyAcceptInvitationMessage = class extends AbstractPartyMessage {
  static id = 866;
  constructor(partyId) {
    super(partyId);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PartyStopFollowRequestMessage = class extends AbstractPartyMessage {
  static id = 9834;
  playerId = 0;
  constructor(partyId, playerId) {
    super(partyId);
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
  }
};
var PartyKickRequestMessage = class extends AbstractPartyMessage {
  static id = 6075;
  playerId = 0;
  constructor(partyId, playerId) {
    super(partyId);
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
  }
};
var PrismFightJoinLeaveRequestMessage = class extends DofusMessage {
  static id = 7653;
  join = false;
  subAreaId = 0;
  constructor(join, subAreaId) {
    super();
    this.join = join;
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeBoolean(this.join);
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.join = reader.readBoolean();
    this.subAreaId = reader.readVarShort();
  }
};
var PrismSettingsRequestMessage = class extends DofusMessage {
  static id = 8342;
  startDefenseTime = 0;
  subAreaId = 0;
  constructor(startDefenseTime, subAreaId) {
    super();
    this.startDefenseTime = startDefenseTime;
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeByte(this.startDefenseTime);
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.startDefenseTime = reader.readByte();
    this.subAreaId = reader.readVarShort();
  }
};
var AllianceKickRequestMessage = class extends DofusMessage {
  static id = 1648;
  kickedId = 0;
  constructor(kickedId) {
    super();
    this.kickedId = kickedId;
  }
  serialize(writer) {
    writer.writeVarInt(this.kickedId);
  }
  deserialize(reader) {
    this.kickedId = reader.readVarInt();
  }
};
var PrismInfoJoinLeaveRequestMessage = class extends DofusMessage {
  static id = 6247;
  join = false;
  constructor(join) {
    super();
    this.join = join;
  }
  serialize(writer) {
    writer.writeBoolean(this.join);
  }
  deserialize(reader) {
    this.join = reader.readBoolean();
  }
};
var PrismFightSwapRequestMessage = class extends DofusMessage {
  static id = 4070;
  targetId = 0;
  subAreaId = 0;
  constructor(targetId, subAreaId) {
    super();
    this.targetId = targetId;
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeVarLong(this.targetId);
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.targetId = reader.readVarLong();
    this.subAreaId = reader.readVarShort();
  }
};
var PrismSetSabotagedRequestMessage = class extends DofusMessage {
  static id = 1746;
  subAreaId = 0;
  constructor(subAreaId) {
    super();
    this.subAreaId = subAreaId;
  }
  serialize(writer) {
    writer.writeVarShort(this.subAreaId);
  }
  deserialize(reader) {
    this.subAreaId = reader.readVarShort();
  }
};
var PrismUseRequestMessage = class extends DofusMessage {
  static id = 8164;
  moduleToUse = 0;
  constructor(moduleToUse) {
    super();
    this.moduleToUse = moduleToUse;
  }
  serialize(writer) {
    writer.writeByte(this.moduleToUse);
  }
  deserialize(reader) {
    this.moduleToUse = reader.readByte();
  }
};
var PrismModuleExchangeRequestMessage = class extends DofusMessage {
  static id = 7195;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var SetEnableAVARequestMessage = class extends DofusMessage {
  static id = 3626;
  enable = false;
  constructor(enable) {
    super();
    this.enable = enable;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
  }
};
var PrismsListRegisterMessage = class extends DofusMessage {
  static id = 4105;
  listen = 0;
  constructor(listen) {
    super();
    this.listen = listen;
  }
  serialize(writer) {
    writer.writeByte(this.listen);
  }
  deserialize(reader) {
    this.listen = reader.readByte();
  }
};
var AllianceMotdSetRequestMessage = class extends SocialNoticeSetRequestMessage {
  static id = 3707;
  content;
  constructor(content) {
    super();
    this.content = content;
  }
  serialize(writer) {
    writer.writeUTF(this.content);
  }
  deserialize(reader) {
    this.content = reader.readUTF();
  }
};
var PrismAttackRequestMessage = class extends DofusMessage {
  static id = 2686;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var AllianceChangeGuildRightsMessage = class extends DofusMessage {
  static id = 8453;
  rights = 0;
  guildId = 0;
  constructor(rights, guildId) {
    super();
    this.rights = rights;
    this.guildId = guildId;
  }
  serialize(writer) {
    writer.writeByte(this.rights);
    writer.writeVarInt(this.guildId);
  }
  deserialize(reader) {
    this.rights = reader.readByte();
    this.guildId = reader.readVarInt();
  }
};
var AllianceBulletinSetRequestMessage = class extends SocialNoticeSetRequestMessage {
  static id = 645;
  notifyMembers = false;
  content;
  constructor(notifyMembers, content) {
    super();
    this.notifyMembers = notifyMembers;
    this.content = content;
  }
  serialize(writer) {
    writer.writeBoolean(this.notifyMembers);
    writer.writeUTF(this.content);
  }
  deserialize(reader) {
    this.notifyMembers = reader.readBoolean();
    this.content = reader.readUTF();
  }
};
var AllianceInsiderInfoRequestMessage = class extends DofusMessage {
  static id = 9591;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var AllianceInvitationMessage = class extends DofusMessage {
  static id = 235;
  targetId = 0;
  constructor(targetId) {
    super();
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeVarLong(this.targetId);
  }
  deserialize(reader) {
    this.targetId = reader.readVarLong();
  }
};
var ShowCellRequestMessage = class extends DofusMessage {
  static id = 4305;
  cellId = 0;
  constructor(cellId) {
    super();
    this.cellId = cellId;
  }
  serialize(writer) {
    writer.writeVarShort(this.cellId);
  }
  deserialize(reader) {
    this.cellId = reader.readVarShort();
  }
};
var GameFightTurnFinishMessage = class extends DofusMessage {
  static id = 6692;
  isAfk = false;
  constructor(isAfk) {
    super();
    this.isAfk = isAfk;
  }
  serialize(writer) {
    writer.writeBoolean(this.isAfk);
  }
  deserialize(reader) {
    this.isAfk = reader.readBoolean();
  }
};
var GameMapMovementRequestMessage = class extends DofusMessage {
  static id = 685;
  mapId = 0;
  keyMovements;
  constructor(mapId, keyMovements) {
    super();
    this.mapId = mapId;
    this.keyMovements = keyMovements;
  }
  serialize(writer) {
    writer.writeDouble(this.mapId);
    writer.writeShort(this.keyMovements.length);
    this.keyMovements.forEach((current) => writer.writeShort(current));
  }
  deserialize(reader) {
    this.mapId = reader.readDouble();
    this.keyMovements = [];
    const countKeyMovements = reader.readShort();
    for (let i = 0; i < countKeyMovements; i++) {
      this.keyMovements.push(reader.readShort());
    }
  }
};
var GameActionFightCastOnTargetRequestMessage = class extends DofusMessage {
  static id = 8001;
  targetId = 0;
  spellId = 0;
  constructor(targetId, spellId) {
    super();
    this.targetId = targetId;
    this.spellId = spellId;
  }
  serialize(writer) {
    writer.writeDouble(this.targetId);
    writer.writeVarShort(this.spellId);
  }
  deserialize(reader) {
    this.targetId = reader.readDouble();
    this.spellId = reader.readVarShort();
  }
};
var GameActionFightCastRequestMessage = class extends DofusMessage {
  static id = 4946;
  cellId = 0;
  spellId = 0;
  constructor(cellId, spellId) {
    super();
    this.cellId = cellId;
    this.spellId = spellId;
  }
  serialize(writer) {
    writer.writeShort(this.cellId);
    writer.writeVarShort(this.spellId);
  }
  deserialize(reader) {
    this.cellId = reader.readShort();
    this.spellId = reader.readVarShort();
  }
};
var FinishMoveSetRequestMessage = class extends DofusMessage {
  static id = 2738;
  finishMoveState = false;
  finishMoveId = 0;
  constructor(finishMoveState, finishMoveId) {
    super();
    this.finishMoveState = finishMoveState;
    this.finishMoveId = finishMoveId;
  }
  serialize(writer) {
    writer.writeBoolean(this.finishMoveState);
    writer.writeInt(this.finishMoveId);
  }
  deserialize(reader) {
    this.finishMoveState = reader.readBoolean();
    this.finishMoveId = reader.readInt();
  }
};
var FinishMoveListRequestMessage = class extends DofusMessage {
  static id = 2551;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var SpellVariantActivationRequestMessage = class extends DofusMessage {
  static id = 4887;
  spellId = 0;
  constructor(spellId) {
    super();
    this.spellId = spellId;
  }
  serialize(writer) {
    writer.writeVarShort(this.spellId);
  }
  deserialize(reader) {
    this.spellId = reader.readVarShort();
  }
};
var GameContextQuitMessage = class extends DofusMessage {
  static id = 644;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var BreachRoomUnlockRequestMessage = class extends DofusMessage {
  static id = 8276;
  roomId = 0;
  constructor(roomId) {
    super();
    this.roomId = roomId;
  }
  serialize(writer) {
    writer.writeByte(this.roomId);
  }
  deserialize(reader) {
    this.roomId = reader.readByte();
  }
};
var BreachRewardBuyMessage = class extends DofusMessage {
  static id = 2995;
  id_ = 0;
  constructor(id_) {
    super();
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeVarInt(this.id_);
  }
  deserialize(reader) {
    this.id_ = reader.readVarInt();
  }
};
var BreachExitRequestMessage = class extends DofusMessage {
  static id = 4948;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var BreachKickRequestMessage = class extends DofusMessage {
  static id = 2909;
  target = 0;
  constructor(target) {
    super();
    this.target = target;
  }
  serialize(writer) {
    writer.writeVarLong(this.target);
  }
  deserialize(reader) {
    this.target = reader.readVarLong();
  }
};
var BreachInvitationRequestMessage = class extends DofusMessage {
  static id = 7544;
  guests;
  constructor(guests) {
    super();
    this.guests = guests;
  }
  serialize(writer) {
    writer.writeShort(this.guests.length);
    this.guests.forEach((current) => writer.writeVarLong(current));
  }
  deserialize(reader) {
    this.guests = [];
    const countGuests = reader.readShort();
    for (let i = 0; i < countGuests; i++) {
      this.guests.push(reader.readVarLong());
    }
  }
};
var EditHavenBagRequestMessage = class extends DofusMessage {
  static id = 8749;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ChangeHavenBagRoomRequestMessage = class extends DofusMessage {
  static id = 7038;
  roomId = 0;
  constructor(roomId) {
    super();
    this.roomId = roomId;
  }
  serialize(writer) {
    writer.writeByte(this.roomId);
  }
  deserialize(reader) {
    this.roomId = reader.readByte();
  }
};
var EditHavenBagCancelRequestMessage = class extends DofusMessage {
  static id = 5731;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var HavenBagFurnituresRequestMessage = class extends DofusMessage {
  static id = 8486;
  cellIds;
  funitureIds;
  orientations;
  constructor(cellIds, funitureIds, orientations) {
    super();
    this.cellIds = cellIds;
    this.funitureIds = funitureIds;
    this.orientations = orientations;
  }
  serialize(writer) {
    writer.writeShort(this.cellIds.length);
    this.cellIds.forEach((current) => writer.writeVarShort(current));
    writer.writeShort(this.funitureIds.length);
    this.funitureIds.forEach((current) => writer.writeInt(current));
    writer.writeShort(this.orientations.length);
    this.orientations.forEach((current) => writer.writeByte(current));
  }
  deserialize(reader) {
    this.cellIds = [];
    const countCellIds = reader.readShort();
    for (let i = 0; i < countCellIds; i++) {
      this.cellIds.push(reader.readVarShort());
    }
    this.funitureIds = [];
    const countFunitureIds = reader.readShort();
    for (let i = 0; i < countFunitureIds; i++) {
      this.funitureIds.push(reader.readInt());
    }
    this.orientations = [];
    const countOrientations = reader.readShort();
    for (let i = 0; i < countOrientations; i++) {
      this.orientations.push(reader.readByte());
    }
  }
};
var HavenBagPermissionsUpdateRequestMessage = class extends DofusMessage {
  static id = 2106;
  permissions = 0;
  constructor(permissions) {
    super();
    this.permissions = permissions;
  }
  serialize(writer) {
    writer.writeInt(this.permissions);
  }
  deserialize(reader) {
    this.permissions = reader.readInt();
  }
};
var OpenHavenBagFurnitureSequenceRequestMessage = class extends DofusMessage {
  static id = 3811;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var CloseHavenBagFurnitureSequenceRequestMessage = class extends DofusMessage {
  static id = 3890;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ChangeThemeRequestMessage = class extends DofusMessage {
  static id = 8958;
  theme = 0;
  constructor(theme) {
    super();
    this.theme = theme;
  }
  serialize(writer) {
    writer.writeByte(this.theme);
  }
  deserialize(reader) {
    this.theme = reader.readByte();
  }
};
var ExitHavenBagRequestMessage = class extends DofusMessage {
  static id = 9491;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var HouseKickIndoorMerchantRequestMessage = class extends DofusMessage {
  static id = 8862;
  cellId = 0;
  constructor(cellId) {
    super();
    this.cellId = cellId;
  }
  serialize(writer) {
    writer.writeVarShort(this.cellId);
  }
  deserialize(reader) {
    this.cellId = reader.readVarShort();
  }
};
var GameFightJoinRequestMessage = class extends DofusMessage {
  static id = 6519;
  fightId = 0;
  fighterId = 0;
  constructor(fightId, fighterId) {
    super();
    this.fightId = fightId;
    this.fighterId = fighterId;
  }
  serialize(writer) {
    writer.writeVarShort(this.fightId);
    writer.writeDouble(this.fighterId);
  }
  deserialize(reader) {
    this.fightId = reader.readVarShort();
    this.fighterId = reader.readDouble();
  }
};
var GameFightPlacementPositionRequestMessage = class extends DofusMessage {
  static id = 5499;
  cellId = 0;
  constructor(cellId) {
    super();
    this.cellId = cellId;
  }
  serialize(writer) {
    writer.writeVarShort(this.cellId);
  }
  deserialize(reader) {
    this.cellId = reader.readVarShort();
  }
};
var GameFightPlacementSwapPositionsRequestMessage = class extends GameFightPlacementPositionRequestMessage {
  static id = 7699;
  requestedId = 0;
  constructor(cellId, requestedId) {
    super(cellId);
    this.requestedId = requestedId;
  }
  serialize(writer) {
    writer.writeDouble(this.requestedId);
  }
  deserialize(reader) {
    this.requestedId = reader.readDouble();
  }
};
var GameContextKickMessage = class extends DofusMessage {
  static id = 2712;
  targetId = 0;
  constructor(targetId) {
    super();
    this.targetId = targetId;
  }
  serialize(writer) {
    writer.writeDouble(this.targetId);
  }
  deserialize(reader) {
    this.targetId = reader.readDouble();
  }
};
var GameFightPlacementSwapPositionsCancelMessage = class extends DofusMessage {
  static id = 7054;
  requestId = 0;
  constructor(requestId) {
    super();
    this.requestId = requestId;
  }
  serialize(writer) {
    writer.writeInt(this.requestId);
  }
  deserialize(reader) {
    this.requestId = reader.readInt();
  }
};
var GameFightReadyMessage = class extends DofusMessage {
  static id = 3480;
  isReady = false;
  constructor(isReady) {
    super();
    this.isReady = isReady;
  }
  serialize(writer) {
    writer.writeBoolean(this.isReady);
  }
  deserialize(reader) {
    this.isReady = reader.readBoolean();
  }
};
var GameFightPlacementSwapPositionsAcceptMessage = class extends DofusMessage {
  static id = 2140;
  requestId = 0;
  constructor(requestId) {
    super();
    this.requestId = requestId;
  }
  serialize(writer) {
    writer.writeInt(this.requestId);
  }
  deserialize(reader) {
    this.requestId = reader.readInt();
  }
};
var NotificationResetMessage = class extends DofusMessage {
  static id = 1;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var QuestStepInfoRequestMessage = class extends DofusMessage {
  static id = 5562;
  questId = 0;
  constructor(questId) {
    super();
    this.questId = questId;
  }
  serialize(writer) {
    writer.writeVarShort(this.questId);
  }
  deserialize(reader) {
    this.questId = reader.readVarShort();
  }
};
var WatchQuestStepInfoRequestMessage = class extends QuestStepInfoRequestMessage {
  static id = 8640;
  playerId = 0;
  constructor(questId, playerId) {
    super(questId);
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
  }
};
var UnfollowQuestObjectiveRequestMessage = class extends DofusMessage {
  static id = 3466;
  objectiveId = 0;
  questId = 0;
  constructor(objectiveId, questId) {
    super();
    this.objectiveId = objectiveId;
    this.questId = questId;
  }
  serialize(writer) {
    writer.writeShort(this.objectiveId);
    writer.writeVarShort(this.questId);
  }
  deserialize(reader) {
    this.objectiveId = reader.readShort();
    this.questId = reader.readVarShort();
  }
};
var TreasureHuntFlagRemoveRequestMessage = class extends DofusMessage {
  static id = 6823;
  index = 0;
  questType = 0;
  constructor(index, questType) {
    super();
    this.index = index;
    this.questType = questType;
  }
  serialize(writer) {
    writer.writeByte(this.index);
    writer.writeByte(this.questType);
  }
  deserialize(reader) {
    this.index = reader.readByte();
    this.questType = reader.readByte();
  }
};
var TreasureHuntFlagRequestMessage = class extends DofusMessage {
  static id = 9576;
  index = 0;
  questType = 0;
  constructor(index, questType) {
    super();
    this.index = index;
    this.questType = questType;
  }
  serialize(writer) {
    writer.writeByte(this.index);
    writer.writeByte(this.questType);
  }
  deserialize(reader) {
    this.index = reader.readByte();
    this.questType = reader.readByte();
  }
};
var GuidedModeReturnRequestMessage = class extends DofusMessage {
  static id = 2230;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var TreasureHuntLegendaryRequestMessage = class extends DofusMessage {
  static id = 6283;
  legendaryId = 0;
  constructor(legendaryId) {
    super();
    this.legendaryId = legendaryId;
  }
  serialize(writer) {
    writer.writeVarShort(this.legendaryId);
  }
  deserialize(reader) {
    this.legendaryId = reader.readVarShort();
  }
};
var GuidedModeQuitRequestMessage = class extends DofusMessage {
  static id = 6012;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var TreasureHuntGiveUpRequestMessage = class extends DofusMessage {
  static id = 2962;
  questType = 0;
  constructor(questType) {
    super();
    this.questType = questType;
  }
  serialize(writer) {
    writer.writeByte(this.questType);
  }
  deserialize(reader) {
    this.questType = reader.readByte();
  }
};
var QuestListRequestMessage = class extends DofusMessage {
  static id = 6533;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var FollowQuestObjectiveRequestMessage = class extends DofusMessage {
  static id = 8182;
  objectiveId = 0;
  questId = 0;
  constructor(objectiveId, questId) {
    super();
    this.objectiveId = objectiveId;
    this.questId = questId;
  }
  serialize(writer) {
    writer.writeShort(this.objectiveId);
    writer.writeVarShort(this.questId);
  }
  deserialize(reader) {
    this.objectiveId = reader.readShort();
    this.questId = reader.readVarShort();
  }
};
var AchievementRewardRequestMessage = class extends DofusMessage {
  static id = 3165;
  achievementId = 0;
  constructor(achievementId) {
    super();
    this.achievementId = achievementId;
  }
  serialize(writer) {
    writer.writeShort(this.achievementId);
  }
  deserialize(reader) {
    this.achievementId = reader.readShort();
  }
};
var NotificationUpdateFlagMessage = class extends DofusMessage {
  static id = 8604;
  index = 0;
  constructor(index) {
    super();
    this.index = index;
  }
  serialize(writer) {
    writer.writeVarShort(this.index);
  }
  deserialize(reader) {
    this.index = reader.readVarShort();
  }
};
var QuestObjectiveValidationMessage = class extends DofusMessage {
  static id = 7368;
  objectiveId = 0;
  questId = 0;
  constructor(objectiveId, questId) {
    super();
    this.objectiveId = objectiveId;
    this.questId = questId;
  }
  serialize(writer) {
    writer.writeVarShort(this.objectiveId);
    writer.writeVarShort(this.questId);
  }
  deserialize(reader) {
    this.objectiveId = reader.readVarShort();
    this.questId = reader.readVarShort();
  }
};
var AchievementDetailsRequestMessage = class extends DofusMessage {
  static id = 5136;
  achievementId = 0;
  constructor(achievementId) {
    super();
    this.achievementId = achievementId;
  }
  serialize(writer) {
    writer.writeVarShort(this.achievementId);
  }
  deserialize(reader) {
    this.achievementId = reader.readVarShort();
  }
};
var RefreshFollowedQuestsOrderRequestMessage = class extends DofusMessage {
  static id = 1088;
  quests;
  constructor(quests) {
    super();
    this.quests = quests;
  }
  serialize(writer) {
    writer.writeShort(this.quests.length);
    this.quests.forEach((current) => writer.writeVarShort(current));
  }
  deserialize(reader) {
    this.quests = [];
    const countQuests = reader.readShort();
    for (let i = 0; i < countQuests; i++) {
      this.quests.push(reader.readVarShort());
    }
  }
};
var QuestStartRequestMessage = class extends DofusMessage {
  static id = 6071;
  questId = 0;
  constructor(questId) {
    super();
    this.questId = questId;
  }
  serialize(writer) {
    writer.writeVarShort(this.questId);
  }
  deserialize(reader) {
    this.questId = reader.readVarShort();
  }
};
var AchievementDetailedListRequestMessage = class extends DofusMessage {
  static id = 5957;
  categoryId = 0;
  constructor(categoryId) {
    super();
    this.categoryId = categoryId;
  }
  serialize(writer) {
    writer.writeVarShort(this.categoryId);
  }
  deserialize(reader) {
    this.categoryId = reader.readVarShort();
  }
};
var AchievementAlmostFinishedDetailedListRequestMessage = class extends DofusMessage {
  static id = 3810;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var TreasureHuntDigRequestMessage = class extends DofusMessage {
  static id = 6219;
  questType = 0;
  constructor(questType) {
    super();
    this.questType = questType;
  }
  serialize(writer) {
    writer.writeByte(this.questType);
  }
  deserialize(reader) {
    this.questType = reader.readByte();
  }
};
var AuthenticationTicketMessage = class extends DofusMessage {
  static id = 9517;
  ticket;
  lang;
  constructor(ticket, lang) {
    super();
    this.ticket = ticket;
    this.lang = lang;
  }
  serialize(writer) {
    writer.writeUTF(this.ticket);
    writer.writeUTF(this.lang);
  }
  deserialize(reader) {
    this.ticket = reader.readUTF();
    this.lang = reader.readUTF();
  }
};
var CharacterSelectionMessage = class extends DofusMessage {
  static id = 3123;
  id_ = 0;
  constructor(id_) {
    super();
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeVarLong(this.id_);
  }
  deserialize(reader) {
    this.id_ = reader.readVarLong();
  }
};
var CharacterSelectionWithRemodelMessage = class extends CharacterSelectionMessage {
  static id = 2652;
  remodel;
  constructor(id_, remodel) {
    super(id_);
    this.remodel = remodel;
  }
  serialize(writer) {
    this.remodel.serialize(writer);
  }
  deserialize(reader) {
    this.remodel = new RemodelingInformation();
    this.remodel.deserialize(reader);
  }
};
var CharacterNameSuggestionRequestMessage = class extends DofusMessage {
  static id = 1828;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var CharacterSelectedForceReadyMessage = class extends DofusMessage {
  static id = 6390;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var CharactersListRequestMessage = class extends DofusMessage {
  static id = 1501;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var CharacterCreationRequestMessage = class extends DofusMessage {
  static id = 5026;
  cosmeticId = 0;
  name;
  colors;
  breed = 0;
  sex = false;
  constructor(cosmeticId, name, colors, breed, sex) {
    super();
    this.cosmeticId = cosmeticId;
    this.name = name;
    this.colors = colors;
    this.breed = breed;
    this.sex = sex;
  }
  serialize(writer) {
    writer.writeVarShort(this.cosmeticId);
    writer.writeUTF(this.name);
    this.colors.forEach((current) => writer.writeInt(current));
    writer.writeByte(this.breed);
    writer.writeBoolean(this.sex);
  }
  deserialize(reader) {
    this.cosmeticId = reader.readVarShort();
    this.name = reader.readUTF();
    this.colors = [];
    for (let i = 0; i < 5; i++) {
      this.colors.push(reader.readInt());
    }
    this.breed = reader.readByte();
    this.sex = reader.readBoolean();
  }
};
var CharacterCanBeCreatedRequestMessage = class extends DofusMessage {
  static id = 6208;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var CharacterReplayRequestMessage = class extends DofusMessage {
  static id = 9614;
  characterId = 0;
  constructor(characterId) {
    super();
    this.characterId = characterId;
  }
  serialize(writer) {
    writer.writeVarLong(this.characterId);
  }
  deserialize(reader) {
    this.characterId = reader.readVarLong();
  }
};
var CharacterReplayWithRemodelRequestMessage = class extends CharacterReplayRequestMessage {
  static id = 3832;
  remodel;
  constructor(characterId, remodel) {
    super(characterId);
    this.remodel = remodel;
  }
  serialize(writer) {
    this.remodel.serialize(writer);
  }
  deserialize(reader) {
    this.remodel = new RemodelingInformation();
    this.remodel.deserialize(reader);
  }
};
var StartupActionsObjetAttributionMessage = class extends DofusMessage {
  static id = 8408;
  characterId = 0;
  actionId = 0;
  constructor(characterId, actionId) {
    super();
    this.characterId = characterId;
    this.actionId = actionId;
  }
  serialize(writer) {
    writer.writeVarLong(this.characterId);
    writer.writeInt(this.actionId);
  }
  deserialize(reader) {
    this.characterId = reader.readVarLong();
    this.actionId = reader.readInt();
  }
};
var StartupActionsExecuteMessage = class extends DofusMessage {
  static id = 8834;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var CharacterFirstSelectionMessage = class extends CharacterSelectionMessage {
  static id = 3196;
  doTutorial = false;
  constructor(id_, doTutorial) {
    super(id_);
    this.doTutorial = doTutorial;
  }
  serialize(writer) {
    writer.writeBoolean(this.doTutorial);
  }
  deserialize(reader) {
    this.doTutorial = reader.readBoolean();
  }
};
var GameContextCreateRequestMessage = class extends DofusMessage {
  static id = 5310;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var CharacterDeletionRequestMessage = class extends DofusMessage {
  static id = 8394;
  secretAnswerHash;
  characterId = 0;
  constructor(secretAnswerHash, characterId) {
    super();
    this.secretAnswerHash = secretAnswerHash;
    this.characterId = characterId;
  }
  serialize(writer) {
    writer.writeUTF(this.secretAnswerHash);
    writer.writeVarLong(this.characterId);
  }
  deserialize(reader) {
    this.secretAnswerHash = reader.readUTF();
    this.characterId = reader.readVarLong();
  }
};
var AcquaintanceSearchMessage = class extends DofusMessage {
  static id = 9528;
  tag;
  constructor(tag) {
    super();
    this.tag = tag;
  }
  serialize(writer) {
    this.tag.serialize(writer);
  }
  deserialize(reader) {
    this.tag = new AccountTagInformation();
    this.tag.deserialize(reader);
  }
};
var ServerSelectionMessage = class extends DofusMessage {
  static id = 214;
  serverId = 0;
  constructor(serverId) {
    super();
    this.serverId = serverId;
  }
  serialize(writer) {
    writer.writeVarShort(this.serverId);
  }
  deserialize(reader) {
    this.serverId = reader.readVarShort();
  }
};
var CheckFileMessage = class extends DofusMessage {
  static id = 6281;
  value;
  type = 0;
  filenameHash;
  constructor(value, type, filenameHash) {
    super();
    this.value = value;
    this.type = type;
    this.filenameHash = filenameHash;
  }
  serialize(writer) {
    writer.writeUTF(this.value);
    writer.writeByte(this.type);
    writer.writeUTF(this.filenameHash);
  }
  deserialize(reader) {
    this.value = reader.readUTF();
    this.type = reader.readByte();
    this.filenameHash = reader.readUTF();
  }
};
var ResetCharacterStatsRequestMessage = class extends DofusMessage {
  static id = 9708;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var StatsUpgradeRequestMessage = class extends DofusMessage {
  static id = 327;
  statId = 11;
  boostPoint = 0;
  useAdditionnal = false;
  constructor(statId, boostPoint, useAdditionnal) {
    super();
    this.statId = statId;
    this.boostPoint = boostPoint;
    this.useAdditionnal = useAdditionnal;
  }
  serialize(writer) {
    writer.writeByte(this.statId);
    writer.writeVarShort(this.boostPoint);
    writer.writeBoolean(this.useAdditionnal);
  }
  deserialize(reader) {
    this.statId = reader.readByte();
    this.boostPoint = reader.readVarShort();
    this.useAdditionnal = reader.readBoolean();
  }
};
var StartupActionsAllAttributionMessage = class extends DofusMessage {
  static id = 2956;
  characterId = 0;
  constructor(characterId) {
    super();
    this.characterId = characterId;
  }
  serialize(writer) {
    writer.writeVarLong(this.characterId);
  }
  deserialize(reader) {
    this.characterId = reader.readVarLong();
  }
};
var PaddockToSellListRequestMessage = class extends DofusMessage {
  static id = 456;
  pageIndex = 0;
  constructor(pageIndex) {
    super();
    this.pageIndex = pageIndex;
  }
  serialize(writer) {
    writer.writeVarShort(this.pageIndex);
  }
  deserialize(reader) {
    this.pageIndex = reader.readVarShort();
  }
};
var PaddockToSellFilterMessage = class extends DofusMessage {
  static id = 8388;
  orderBy = 0;
  areaId = 0;
  atLeastNbMount = 0;
  maxPrice = 0;
  atLeastNbMachine = 0;
  constructor(orderBy, areaId, atLeastNbMount, maxPrice, atLeastNbMachine) {
    super();
    this.orderBy = orderBy;
    this.areaId = areaId;
    this.atLeastNbMount = atLeastNbMount;
    this.maxPrice = maxPrice;
    this.atLeastNbMachine = atLeastNbMachine;
  }
  serialize(writer) {
    writer.writeByte(this.orderBy);
    writer.writeInt(this.areaId);
    writer.writeByte(this.atLeastNbMount);
    writer.writeVarLong(this.maxPrice);
    writer.writeByte(this.atLeastNbMachine);
  }
  deserialize(reader) {
    this.orderBy = reader.readByte();
    this.areaId = reader.readInt();
    this.atLeastNbMount = reader.readByte();
    this.maxPrice = reader.readVarLong();
    this.atLeastNbMachine = reader.readByte();
  }
};
var HouseToSellListRequestMessage = class extends DofusMessage {
  static id = 1679;
  pageIndex = 0;
  constructor(pageIndex) {
    super();
    this.pageIndex = pageIndex;
  }
  serialize(writer) {
    writer.writeVarShort(this.pageIndex);
  }
  deserialize(reader) {
    this.pageIndex = reader.readVarShort();
  }
};
var HouseToSellFilterMessage = class extends DofusMessage {
  static id = 3571;
  orderBy = 0;
  maxPrice = 0;
  areaId = 0;
  atLeastNbChest = 0;
  atLeastNbRoom = 0;
  skillRequested = 0;
  constructor(orderBy, maxPrice, areaId, atLeastNbChest, atLeastNbRoom, skillRequested) {
    super();
    this.orderBy = orderBy;
    this.maxPrice = maxPrice;
    this.areaId = areaId;
    this.atLeastNbChest = atLeastNbChest;
    this.atLeastNbRoom = atLeastNbRoom;
    this.skillRequested = skillRequested;
  }
  serialize(writer) {
    writer.writeByte(this.orderBy);
    writer.writeVarLong(this.maxPrice);
    writer.writeInt(this.areaId);
    writer.writeByte(this.atLeastNbChest);
    writer.writeByte(this.atLeastNbRoom);
    writer.writeVarShort(this.skillRequested);
  }
  deserialize(reader) {
    this.orderBy = reader.readByte();
    this.maxPrice = reader.readVarLong();
    this.areaId = reader.readInt();
    this.atLeastNbChest = reader.readByte();
    this.atLeastNbRoom = reader.readByte();
    this.skillRequested = reader.readVarShort();
  }
};
var AdminQuietCommandMessage = class extends AdminCommandMessage {
  static id = 400;
  constructor(content) {
    super(content);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var SetEnablePVPRequestMessage = class extends DofusMessage {
  static id = 4228;
  enable = false;
  constructor(enable) {
    super();
    this.enable = enable;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
  }
};
var CharacterAlignmentWarEffortProgressionRequestMessage = class extends DofusMessage {
  static id = 9582;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var AlignmentWarEffortDonateRequestMessage = class extends DofusMessage {
  static id = 5249;
  donation = 0;
  constructor(donation) {
    super();
    this.donation = donation;
  }
  serialize(writer) {
    writer.writeVarLong(this.donation);
  }
  deserialize(reader) {
    this.donation = reader.readVarLong();
  }
};
var AlignmentWarEffortProgressionRequestMessage = class extends DofusMessage {
  static id = 5727;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ObjectAveragePricesGetMessage = class extends DofusMessage {
  static id = 1653;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ReloginTokenRequestMessage = class extends DofusMessage {
  static id = 2403;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var AnomalySubareaInformationRequestMessage = class extends DofusMessage {
  static id = 5877;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ZaapRespawnSaveRequestMessage = class extends DofusMessage {
  static id = 4572;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var TeleportRequestMessage = class extends DofusMessage {
  static id = 1539;
  mapId = 0;
  destinationType = 0;
  sourceType = 0;
  constructor(mapId, destinationType, sourceType) {
    super();
    this.mapId = mapId;
    this.destinationType = destinationType;
    this.sourceType = sourceType;
  }
  serialize(writer) {
    writer.writeDouble(this.mapId);
    writer.writeByte(this.destinationType);
    writer.writeByte(this.sourceType);
  }
  deserialize(reader) {
    this.mapId = reader.readDouble();
    this.destinationType = reader.readByte();
    this.sourceType = reader.readByte();
  }
};
var JobCrafterDirectoryDefineSettingsMessage = class extends DofusMessage {
  static id = 6260;
  settings;
  constructor(settings) {
    super();
    this.settings = settings;
  }
  serialize(writer) {
    this.settings.serialize(writer);
  }
  deserialize(reader) {
    this.settings = new JobCrafterDirectorySettings();
    this.settings.deserialize(reader);
  }
};
var JobBookSubscribeRequestMessage = class extends DofusMessage {
  static id = 4809;
  jobIds;
  constructor(jobIds) {
    super();
    this.jobIds = jobIds;
  }
  serialize(writer) {
    writer.writeShort(this.jobIds.length);
    this.jobIds.forEach((current) => writer.writeByte(current));
  }
  deserialize(reader) {
    this.jobIds = [];
    const countJobIds = reader.readShort();
    for (let i = 0; i < countJobIds; i++) {
      this.jobIds.push(reader.readByte());
    }
  }
};
var JobCrafterDirectoryListRequestMessage = class extends DofusMessage {
  static id = 5786;
  jobId = 0;
  constructor(jobId) {
    super();
    this.jobId = jobId;
  }
  serialize(writer) {
    writer.writeByte(this.jobId);
  }
  deserialize(reader) {
    this.jobId = reader.readByte();
  }
};
var ExchangeObjectUseInWorkshopMessage = class extends DofusMessage {
  static id = 5412;
  quantity = 0;
  objectUID = 0;
  constructor(quantity, objectUID) {
    super();
    this.quantity = quantity;
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeVarInt(this.quantity);
    writer.writeVarInt(this.objectUID);
  }
  deserialize(reader) {
    this.quantity = reader.readVarInt();
    this.objectUID = reader.readVarInt();
  }
};
var ExchangeReplayStopMessage = class extends DofusMessage {
  static id = 6235;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ExchangeCraftCountRequestMessage = class extends DofusMessage {
  static id = 7316;
  count = 0;
  constructor(count) {
    super();
    this.count = count;
  }
  serialize(writer) {
    writer.writeVarInt(this.count);
  }
  deserialize(reader) {
    this.count = reader.readVarInt();
  }
};
var ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage = class extends DofusMessage {
  static id = 4258;
  allow = false;
  constructor(allow) {
    super();
    this.allow = allow;
  }
  serialize(writer) {
    writer.writeBoolean(this.allow);
  }
  deserialize(reader) {
    this.allow = reader.readBoolean();
  }
};
var ExchangeCraftPaymentModificationRequestMessage = class extends DofusMessage {
  static id = 5785;
  quantity = 0;
  constructor(quantity) {
    super();
    this.quantity = quantity;
  }
  serialize(writer) {
    writer.writeVarLong(this.quantity);
  }
  deserialize(reader) {
    this.quantity = reader.readVarLong();
  }
};
var ExchangeSetCraftRecipeMessage = class extends DofusMessage {
  static id = 1333;
  objectGID = 0;
  constructor(objectGID) {
    super();
    this.objectGID = objectGID;
  }
  serialize(writer) {
    writer.writeVarShort(this.objectGID);
  }
  deserialize(reader) {
    this.objectGID = reader.readVarShort();
  }
};
var MountSetXpRatioRequestMessage = class extends DofusMessage {
  static id = 9275;
  xpRatio = 0;
  constructor(xpRatio) {
    super();
    this.xpRatio = xpRatio;
  }
  serialize(writer) {
    writer.writeByte(this.xpRatio);
  }
  deserialize(reader) {
    this.xpRatio = reader.readByte();
  }
};
var MountHarnessDissociateRequestMessage = class extends DofusMessage {
  static id = 9897;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var MountInformationInPaddockRequestMessage = class extends DofusMessage {
  static id = 6636;
  mapRideId = 0;
  constructor(mapRideId) {
    super();
    this.mapRideId = mapRideId;
  }
  serialize(writer) {
    writer.writeVarInt(this.mapRideId);
  }
  deserialize(reader) {
    this.mapRideId = reader.readVarInt();
  }
};
var MountReleaseRequestMessage = class extends DofusMessage {
  static id = 5543;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var MountHarnessColorsUpdateRequestMessage = class extends DofusMessage {
  static id = 7947;
  useHarnessColors = false;
  constructor(useHarnessColors) {
    super();
    this.useHarnessColors = useHarnessColors;
  }
  serialize(writer) {
    writer.writeBoolean(this.useHarnessColors);
  }
  deserialize(reader) {
    this.useHarnessColors = reader.readBoolean();
  }
};
var MountRenameRequestMessage = class extends DofusMessage {
  static id = 8042;
  mountId = 0;
  name;
  constructor(mountId, name) {
    super();
    this.mountId = mountId;
    this.name = name;
  }
  serialize(writer) {
    writer.writeVarInt(this.mountId);
    writer.writeUTF(this.name);
  }
  deserialize(reader) {
    this.mountId = reader.readVarInt();
    this.name = reader.readUTF();
  }
};
var MountFeedRequestMessage = class extends DofusMessage {
  static id = 8131;
  quantity = 0;
  mountFoodUid = 0;
  mountLocation = 0;
  mountUid = 0;
  constructor(quantity, mountFoodUid, mountLocation, mountUid) {
    super();
    this.quantity = quantity;
    this.mountFoodUid = mountFoodUid;
    this.mountLocation = mountLocation;
    this.mountUid = mountUid;
  }
  serialize(writer) {
    writer.writeVarInt(this.quantity);
    writer.writeVarInt(this.mountFoodUid);
    writer.writeByte(this.mountLocation);
    writer.writeVarInt(this.mountUid);
  }
  deserialize(reader) {
    this.quantity = reader.readVarInt();
    this.mountFoodUid = reader.readVarInt();
    this.mountLocation = reader.readByte();
    this.mountUid = reader.readVarInt();
  }
};
var ExchangeHandleMountsMessage = class extends DofusMessage {
  static id = 9421;
  ridesId;
  actionType = 0;
  constructor(ridesId, actionType) {
    super();
    this.ridesId = ridesId;
    this.actionType = actionType;
  }
  serialize(writer) {
    writer.writeShort(this.ridesId.length);
    this.ridesId.forEach((current) => writer.writeVarInt(current));
    writer.writeByte(this.actionType);
  }
  deserialize(reader) {
    this.ridesId = [];
    const countRidesId = reader.readShort();
    for (let i = 0; i < countRidesId; i++) {
      this.ridesId.push(reader.readVarInt());
    }
    this.actionType = reader.readByte();
  }
};
var ExchangeRequestOnMountStockMessage = class extends DofusMessage {
  static id = 8145;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var MountInformationRequestMessage = class extends DofusMessage {
  static id = 2112;
  time = 0;
  id_ = 0;
  constructor(time, id_) {
    super();
    this.time = time;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeDouble(this.time);
    writer.writeDouble(this.id_);
  }
  deserialize(reader) {
    this.time = reader.readDouble();
    this.id_ = reader.readDouble();
  }
};
var MountToggleRidingRequestMessage = class extends DofusMessage {
  static id = 8445;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var MountSterilizeRequestMessage = class extends DofusMessage {
  static id = 590;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var HouseGuildShareRequestMessage = class extends DofusMessage {
  static id = 5595;
  enable = false;
  instanceId = 0;
  rights = 0;
  houseId = 0;
  constructor(enable, instanceId, rights, houseId) {
    super();
    this.enable = enable;
    this.instanceId = instanceId;
    this.rights = rights;
    this.houseId = houseId;
  }
  serialize(writer) {
    writer.writeBoolean(this.enable);
    writer.writeInt(this.instanceId);
    writer.writeVarInt(this.rights);
    writer.writeVarInt(this.houseId);
  }
  deserialize(reader) {
    this.enable = reader.readBoolean();
    this.instanceId = reader.readInt();
    this.rights = reader.readVarInt();
    this.houseId = reader.readVarInt();
  }
};
var HouseKickRequestMessage = class extends DofusMessage {
  static id = 8499;
  id_ = 0;
  constructor(id_) {
    super();
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeVarLong(this.id_);
  }
  deserialize(reader) {
    this.id_ = reader.readVarLong();
  }
};
var HouseSellRequestMessage = class extends DofusMessage {
  static id = 9330;
  amount = 0;
  forSale = false;
  instanceId = 0;
  constructor(amount, forSale, instanceId) {
    super();
    this.amount = amount;
    this.forSale = forSale;
    this.instanceId = instanceId;
  }
  serialize(writer) {
    writer.writeVarLong(this.amount);
    writer.writeBoolean(this.forSale);
    writer.writeInt(this.instanceId);
  }
  deserialize(reader) {
    this.amount = reader.readVarLong();
    this.forSale = reader.readBoolean();
    this.instanceId = reader.readInt();
  }
};
var LockableChangeCodeMessage = class extends DofusMessage {
  static id = 768;
  code;
  constructor(code) {
    super();
    this.code = code;
  }
  serialize(writer) {
    writer.writeUTF(this.code);
  }
  deserialize(reader) {
    this.code = reader.readUTF();
  }
};
var HouseLockFromInsideRequestMessage = class extends LockableChangeCodeMessage {
  static id = 3448;
  constructor(code) {
    super(code);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var HouseBuyRequestMessage = class extends DofusMessage {
  static id = 4286;
  proposedPrice = 0;
  constructor(proposedPrice) {
    super();
    this.proposedPrice = proposedPrice;
  }
  serialize(writer) {
    writer.writeVarLong(this.proposedPrice);
  }
  deserialize(reader) {
    this.proposedPrice = reader.readVarLong();
  }
};
var HouseSellFromInsideRequestMessage = class extends HouseSellRequestMessage {
  static id = 5075;
  constructor(amount, forSale, instanceId) {
    super(amount, forSale, instanceId);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var HouseGuildRightsViewMessage = class extends DofusMessage {
  static id = 7124;
  instanceId = 0;
  houseId = 0;
  constructor(instanceId, houseId) {
    super();
    this.instanceId = instanceId;
    this.houseId = houseId;
  }
  serialize(writer) {
    writer.writeInt(this.instanceId);
    writer.writeVarInt(this.houseId);
  }
  deserialize(reader) {
    this.instanceId = reader.readInt();
    this.houseId = reader.readVarInt();
  }
};
var OrnamentSelectRequestMessage = class extends DofusMessage {
  static id = 4149;
  ornamentId = 0;
  constructor(ornamentId) {
    super();
    this.ornamentId = ornamentId;
  }
  serialize(writer) {
    writer.writeVarShort(this.ornamentId);
  }
  deserialize(reader) {
    this.ornamentId = reader.readVarShort();
  }
};
var TitlesAndOrnamentsListRequestMessage = class extends DofusMessage {
  static id = 350;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var TitleSelectRequestMessage = class extends DofusMessage {
  static id = 8025;
  titleId = 0;
  constructor(titleId) {
    super();
    this.titleId = titleId;
  }
  serialize(writer) {
    writer.writeVarShort(this.titleId);
  }
  deserialize(reader) {
    this.titleId = reader.readVarShort();
  }
};
var PresetDeleteRequestMessage = class extends DofusMessage {
  static id = 3688;
  presetId = 0;
  constructor(presetId) {
    super();
    this.presetId = presetId;
  }
  serialize(writer) {
    writer.writeShort(this.presetId);
  }
  deserialize(reader) {
    this.presetId = reader.readShort();
  }
};
var ObjectUseMessage = class extends DofusMessage {
  static id = 3065;
  objectUID = 0;
  constructor(objectUID) {
    super();
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeVarInt(this.objectUID);
  }
  deserialize(reader) {
    this.objectUID = reader.readVarInt();
  }
};
var ObjectUseMultipleMessage = class extends ObjectUseMessage {
  static id = 1126;
  quantity = 0;
  constructor(objectUID, quantity) {
    super(objectUID);
    this.quantity = quantity;
  }
  serialize(writer) {
    writer.writeVarInt(this.quantity);
  }
  deserialize(reader) {
    this.quantity = reader.readVarInt();
  }
};
var ObjectDropMessage = class extends DofusMessage {
  static id = 5971;
  quantity = 0;
  objectUID = 0;
  constructor(quantity, objectUID) {
    super();
    this.quantity = quantity;
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeVarInt(this.quantity);
    writer.writeVarInt(this.objectUID);
  }
  deserialize(reader) {
    this.quantity = reader.readVarInt();
    this.objectUID = reader.readVarInt();
  }
};
var IconPresetSaveRequestMessage = class extends DofusMessage {
  static id = 4898;
  updateData = false;
  symbolId = 0;
  presetId = 0;
  constructor(updateData, symbolId, presetId) {
    super();
    this.updateData = updateData;
    this.symbolId = symbolId;
    this.presetId = presetId;
  }
  serialize(writer) {
    writer.writeBoolean(this.updateData);
    writer.writeByte(this.symbolId);
    writer.writeShort(this.presetId);
  }
  deserialize(reader) {
    this.updateData = reader.readBoolean();
    this.symbolId = reader.readByte();
    this.presetId = reader.readShort();
  }
};
var IconNamedPresetSaveRequestMessage = class extends IconPresetSaveRequestMessage {
  static id = 8129;
  type = 0;
  name;
  constructor(updateData, symbolId, presetId, type, name) {
    super(updateData, symbolId, presetId);
    this.type = type;
    this.name = name;
  }
  serialize(writer) {
    writer.writeByte(this.type);
    writer.writeUTF(this.name);
  }
  deserialize(reader) {
    this.type = reader.readByte();
    this.name = reader.readUTF();
  }
};
var ObjectDeleteMessage = class extends DofusMessage {
  static id = 8147;
  quantity = 0;
  objectUID = 0;
  constructor(quantity, objectUID) {
    super();
    this.quantity = quantity;
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeVarInt(this.quantity);
    writer.writeVarInt(this.objectUID);
  }
  deserialize(reader) {
    this.quantity = reader.readVarInt();
    this.objectUID = reader.readVarInt();
  }
};
var AccessoryPreviewRequestMessage = class extends DofusMessage {
  static id = 35;
  genericId;
  constructor(genericId) {
    super();
    this.genericId = genericId;
  }
  serialize(writer) {
    writer.writeShort(this.genericId.length);
    this.genericId.forEach((current) => writer.writeVarShort(current));
  }
  deserialize(reader) {
    this.genericId = [];
    const countGenericId = reader.readShort();
    for (let i = 0; i < countGenericId; i++) {
      this.genericId.push(reader.readVarShort());
    }
  }
};
var ShortcutBarRemoveRequestMessage = class extends DofusMessage {
  static id = 906;
  slot = 0;
  barType = 0;
  constructor(slot, barType) {
    super();
    this.slot = slot;
    this.barType = barType;
  }
  serialize(writer) {
    writer.writeByte(this.slot);
    writer.writeByte(this.barType);
  }
  deserialize(reader) {
    this.slot = reader.readByte();
    this.barType = reader.readByte();
  }
};
var ObjectUseOnCharacterMessage = class extends ObjectUseMessage {
  static id = 8768;
  characterId = 0;
  constructor(objectUID, characterId) {
    super(objectUID);
    this.characterId = characterId;
  }
  serialize(writer) {
    writer.writeVarLong(this.characterId);
  }
  deserialize(reader) {
    this.characterId = reader.readVarLong();
  }
};
var ShortcutBarSwapRequestMessage = class extends DofusMessage {
  static id = 709;
  secondSlot = 0;
  firstSlot = 0;
  barType = 0;
  constructor(secondSlot, firstSlot, barType) {
    super();
    this.secondSlot = secondSlot;
    this.firstSlot = firstSlot;
    this.barType = barType;
  }
  serialize(writer) {
    writer.writeByte(this.secondSlot);
    writer.writeByte(this.firstSlot);
    writer.writeByte(this.barType);
  }
  deserialize(reader) {
    this.secondSlot = reader.readByte();
    this.firstSlot = reader.readByte();
    this.barType = reader.readByte();
  }
};
var ObjectUseOnCellMessage = class extends ObjectUseMessage {
  static id = 5623;
  cells = 0;
  constructor(objectUID, cells) {
    super(objectUID);
    this.cells = cells;
  }
  serialize(writer) {
    writer.writeVarShort(this.cells);
  }
  deserialize(reader) {
    this.cells = reader.readVarShort();
  }
};
var ShortcutBarAddRequestMessage = class extends DofusMessage {
  static id = 9513;
  shortcut;
  barType = 0;
  constructor(shortcut, barType) {
    super();
    this.shortcut = shortcut;
    this.barType = barType;
  }
  serialize(writer) {
    writer.writeShort(this.shortcut.id);
    this.shortcut.serialize(writer);
    writer.writeByte(this.barType);
  }
  deserialize(reader) {
    const shortcutTypeId = reader.readShort();
    this.shortcut = new types[shortcutTypeId]();
    this.shortcut.deserialize(reader);
    this.barType = reader.readByte();
  }
};
var IdolsPresetSaveRequestMessage = class extends IconPresetSaveRequestMessage {
  static id = 478;
  constructor(updateData, symbolId, presetId) {
    super(updateData, symbolId, presetId);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var PresetUseRequestMessage = class extends DofusMessage {
  static id = 1855;
  presetId = 0;
  constructor(presetId) {
    super();
    this.presetId = presetId;
  }
  serialize(writer) {
    writer.writeShort(this.presetId);
  }
  deserialize(reader) {
    this.presetId = reader.readShort();
  }
};
var ObjectSetPositionMessage = class extends DofusMessage {
  static id = 5107;
  quantity = 0;
  position = 63;
  objectUID = 0;
  constructor(quantity, position, objectUID) {
    super();
    this.quantity = quantity;
    this.position = position;
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeVarInt(this.quantity);
    writer.writeShort(this.position);
    writer.writeVarInt(this.objectUID);
  }
  deserialize(reader) {
    this.quantity = reader.readVarInt();
    this.position = reader.readShort();
    this.objectUID = reader.readVarInt();
  }
};
var ExchangeBidHouseBuyMessage = class extends DofusMessage {
  static id = 3195;
  price = 0;
  qty = 0;
  uid = 0;
  constructor(price, qty, uid) {
    super();
    this.price = price;
    this.qty = qty;
    this.uid = uid;
  }
  serialize(writer) {
    writer.writeVarLong(this.price);
    writer.writeVarInt(this.qty);
    writer.writeVarInt(this.uid);
  }
  deserialize(reader) {
    this.price = reader.readVarLong();
    this.qty = reader.readVarInt();
    this.uid = reader.readVarInt();
  }
};
var ExchangeBidHousePriceMessage = class extends DofusMessage {
  static id = 8992;
  genId = 0;
  constructor(genId) {
    super();
    this.genId = genId;
  }
  serialize(writer) {
    writer.writeVarShort(this.genId);
  }
  deserialize(reader) {
    this.genId = reader.readVarShort();
  }
};
var ExchangeBidHouseSearchMessage = class extends DofusMessage {
  static id = 6250;
  follow = false;
  genId = 0;
  constructor(follow, genId) {
    super();
    this.follow = follow;
    this.genId = genId;
  }
  serialize(writer) {
    writer.writeBoolean(this.follow);
    writer.writeVarShort(this.genId);
  }
  deserialize(reader) {
    this.follow = reader.readBoolean();
    this.genId = reader.readVarShort();
  }
};
var ExchangeBidHouseListMessage = class extends DofusMessage {
  static id = 2675;
  follow = false;
  id_ = 0;
  constructor(follow, id_) {
    super();
    this.follow = follow;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeBoolean(this.follow);
    writer.writeVarShort(this.id_);
  }
  deserialize(reader) {
    this.follow = reader.readBoolean();
    this.id_ = reader.readVarShort();
  }
};
var ExchangeBidHouseTypeMessage = class extends DofusMessage {
  static id = 4445;
  follow = false;
  type = 0;
  constructor(follow, type) {
    super();
    this.follow = follow;
    this.type = type;
  }
  serialize(writer) {
    writer.writeBoolean(this.follow);
    writer.writeVarInt(this.type);
  }
  deserialize(reader) {
    this.follow = reader.readBoolean();
    this.type = reader.readVarInt();
  }
};
var ExchangeObjectModifyPricedMessage = class extends ExchangeObjectMovePricedMessage {
  static id = 3929;
  constructor(quantity, objectUID, price) {
    super(quantity, objectUID, price);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var StopToListenRunningFightRequestMessage = class extends DofusMessage {
  static id = 4030;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var GameFightSpectatePlayerRequestMessage = class extends DofusMessage {
  static id = 9098;
  playerId = 0;
  constructor(playerId) {
    super();
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
  }
};
var MapRunningFightDetailsRequestMessage = class extends DofusMessage {
  static id = 8028;
  fightId = 0;
  constructor(fightId) {
    super();
    this.fightId = fightId;
  }
  serialize(writer) {
    writer.writeVarShort(this.fightId);
  }
  deserialize(reader) {
    this.fightId = reader.readVarShort();
  }
};
var MapRunningFightListRequestMessage = class extends DofusMessage {
  static id = 1407;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ExchangeAcceptMessage = class extends DofusMessage {
  static id = 3024;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ExchangeReadyMessage = class extends DofusMessage {
  static id = 5849;
  step = 0;
  ready = false;
  constructor(step, ready) {
    super();
    this.step = step;
    this.ready = ready;
  }
  serialize(writer) {
    writer.writeVarShort(this.step);
    writer.writeBoolean(this.ready);
  }
  deserialize(reader) {
    this.step = reader.readVarShort();
    this.ready = reader.readBoolean();
  }
};
var FocusedExchangeReadyMessage = class extends ExchangeReadyMessage {
  static id = 2904;
  focusActionId = 0;
  constructor(step, ready, focusActionId) {
    super(step, ready);
    this.focusActionId = focusActionId;
  }
  serialize(writer) {
    writer.writeVarInt(this.focusActionId);
  }
  deserialize(reader) {
    this.focusActionId = reader.readVarInt();
  }
};
var GameMapMovementCancelMessage = class extends DofusMessage {
  static id = 4409;
  cellId = 0;
  constructor(cellId) {
    super();
    this.cellId = cellId;
  }
  serialize(writer) {
    writer.writeVarShort(this.cellId);
  }
  deserialize(reader) {
    this.cellId = reader.readVarShort();
  }
};
var ChangeMapMessage = class extends DofusMessage {
  static id = 3431;
  autopilot = false;
  mapId = 0;
  constructor(autopilot, mapId) {
    super();
    this.autopilot = autopilot;
    this.mapId = mapId;
  }
  serialize(writer) {
    writer.writeBoolean(this.autopilot);
    writer.writeDouble(this.mapId);
  }
  deserialize(reader) {
    this.autopilot = reader.readBoolean();
    this.mapId = reader.readDouble();
  }
};
var GameCautiousMapMovementRequestMessage = class extends GameMapMovementRequestMessage {
  static id = 1760;
  constructor(mapId, keyMovements) {
    super(mapId, keyMovements);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var InteractiveUseRequestMessage = class extends DofusMessage {
  static id = 9714;
  skillInstanceUid = 0;
  elemId = 0;
  constructor(skillInstanceUid, elemId) {
    super();
    this.skillInstanceUid = skillInstanceUid;
    this.elemId = elemId;
  }
  serialize(writer) {
    writer.writeVarInt(this.skillInstanceUid);
    writer.writeVarInt(this.elemId);
  }
  deserialize(reader) {
    this.skillInstanceUid = reader.readVarInt();
    this.elemId = reader.readVarInt();
  }
};
var InteractiveUseWithParamRequestMessage = class extends InteractiveUseRequestMessage {
  static id = 6220;
  id_ = 0;
  constructor(skillInstanceUid, elemId, id_) {
    super(skillInstanceUid, elemId);
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeInt(this.id_);
  }
  deserialize(reader) {
    this.id_ = reader.readInt();
  }
};
var GameRolePlayAttackMonsterRequestMessage = class extends DofusMessage {
  static id = 3767;
  monsterGroupId = 0;
  constructor(monsterGroupId) {
    super();
    this.monsterGroupId = monsterGroupId;
  }
  serialize(writer) {
    writer.writeDouble(this.monsterGroupId);
  }
  deserialize(reader) {
    this.monsterGroupId = reader.readDouble();
  }
};
var GameMapMovementConfirmMessage = class extends DofusMessage {
  static id = 8420;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ExchangeObjectMoveKamaMessage = class extends DofusMessage {
  static id = 427;
  quantity = 0;
  constructor(quantity) {
    super();
    this.quantity = quantity;
  }
  serialize(writer) {
    writer.writeVarLong(this.quantity);
  }
  deserialize(reader) {
    this.quantity = reader.readVarLong();
  }
};
var ExchangeObjectTransfertExistingToInvMessage = class extends DofusMessage {
  static id = 7123;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ExchangeObjectTransfertListFromInvMessage = class extends DofusMessage {
  static id = 3871;
  ids;
  constructor(ids) {
    super();
    this.ids = ids;
  }
  serialize(writer) {
    writer.writeShort(this.ids.length);
    this.ids.forEach((current) => writer.writeVarInt(current));
  }
  deserialize(reader) {
    this.ids = [];
    const countIds = reader.readShort();
    for (let i = 0; i < countIds; i++) {
      this.ids.push(reader.readVarInt());
    }
  }
};
var ExchangeObjectTransfertAllToInvMessage = class extends DofusMessage {
  static id = 8392;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ExchangeObjectTransfertListToInvMessage = class extends DofusMessage {
  static id = 1721;
  ids;
  constructor(ids) {
    super();
    this.ids = ids;
  }
  serialize(writer) {
    writer.writeShort(this.ids.length);
    this.ids.forEach((current) => writer.writeVarInt(current));
  }
  deserialize(reader) {
    this.ids = [];
    const countIds = reader.readShort();
    for (let i = 0; i < countIds; i++) {
      this.ids.push(reader.readVarInt());
    }
  }
};
var ExchangeObjectTransfertListWithQuantityToInvMessage = class extends DofusMessage {
  static id = 5493;
  qtys;
  ids;
  constructor(qtys, ids) {
    super();
    this.qtys = qtys;
    this.ids = ids;
  }
  serialize(writer) {
    writer.writeShort(this.qtys.length);
    this.qtys.forEach((current) => writer.writeVarInt(current));
    writer.writeShort(this.ids.length);
    this.ids.forEach((current) => writer.writeVarInt(current));
  }
  deserialize(reader) {
    this.qtys = [];
    const countQtys = reader.readShort();
    for (let i = 0; i < countQtys; i++) {
      this.qtys.push(reader.readVarInt());
    }
    this.ids = [];
    const countIds = reader.readShort();
    for (let i = 0; i < countIds; i++) {
      this.ids.push(reader.readVarInt());
    }
  }
};
var ExchangeObjectTransfertAllFromInvMessage = class extends DofusMessage {
  static id = 9957;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ExchangeObjectTransfertExistingFromInvMessage = class extends DofusMessage {
  static id = 8876;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var NpcDialogReplyMessage = class extends DofusMessage {
  static id = 398;
  replyId = 0;
  constructor(replyId) {
    super();
    this.replyId = replyId;
  }
  serialize(writer) {
    writer.writeVarInt(this.replyId);
  }
  deserialize(reader) {
    this.replyId = reader.readVarInt();
  }
};
var PaddockBuyRequestMessage = class extends DofusMessage {
  static id = 8638;
  proposedPrice = 0;
  constructor(proposedPrice) {
    super();
    this.proposedPrice = proposedPrice;
  }
  serialize(writer) {
    writer.writeVarLong(this.proposedPrice);
  }
  deserialize(reader) {
    this.proposedPrice = reader.readVarLong();
  }
};
var PaddockSellRequestMessage = class extends DofusMessage {
  static id = 2370;
  forSale = false;
  price = 0;
  constructor(forSale, price) {
    super();
    this.forSale = forSale;
    this.price = price;
  }
  serialize(writer) {
    writer.writeBoolean(this.forSale);
    writer.writeVarLong(this.price);
  }
  deserialize(reader) {
    this.forSale = reader.readBoolean();
    this.price = reader.readVarLong();
  }
};
var GuildInvitationAnswerMessage = class extends DofusMessage {
  static id = 8895;
  accept = false;
  constructor(accept) {
    super();
    this.accept = accept;
  }
  serialize(writer) {
    writer.writeBoolean(this.accept);
  }
  deserialize(reader) {
    this.accept = reader.readBoolean();
  }
};
var GuildModificationEmblemValidMessage = class extends DofusMessage {
  static id = 3249;
  guildEmblem;
  constructor(guildEmblem) {
    super();
    this.guildEmblem = guildEmblem;
  }
  serialize(writer) {
    this.guildEmblem.serialize(writer);
  }
  deserialize(reader) {
    this.guildEmblem = new GuildEmblem();
    this.guildEmblem.deserialize(reader);
  }
};
var GuildModificationValidMessage = class extends DofusMessage {
  static id = 7329;
  guildEmblem;
  guildName;
  constructor(guildEmblem, guildName) {
    super();
    this.guildEmblem = guildEmblem;
    this.guildName = guildName;
  }
  serialize(writer) {
    this.guildEmblem.serialize(writer);
    writer.writeUTF(this.guildName);
  }
  deserialize(reader) {
    this.guildEmblem = new GuildEmblem();
    this.guildEmblem.deserialize(reader);
    this.guildName = reader.readUTF();
  }
};
var GuildModificationNameValidMessage = class extends DofusMessage {
  static id = 5982;
  guildName;
  constructor(guildName) {
    super();
    this.guildName = guildName;
  }
  serialize(writer) {
    writer.writeUTF(this.guildName);
  }
  deserialize(reader) {
    this.guildName = reader.readUTF();
  }
};
var GuildCreationValidMessage = class extends DofusMessage {
  static id = 1395;
  guildEmblem;
  guildName;
  constructor(guildEmblem, guildName) {
    super();
    this.guildEmblem = guildEmblem;
    this.guildName = guildName;
  }
  serialize(writer) {
    this.guildEmblem.serialize(writer);
    writer.writeUTF(this.guildName);
  }
  deserialize(reader) {
    this.guildEmblem = new GuildEmblem();
    this.guildEmblem.deserialize(reader);
    this.guildName = reader.readUTF();
  }
};
var DiceRollRequestMessage = class extends DofusMessage {
  static id = 932;
  channel = 0;
  faces = 0;
  dice = 0;
  constructor(channel, faces, dice) {
    super();
    this.channel = channel;
    this.faces = faces;
    this.dice = dice;
  }
  serialize(writer) {
    writer.writeByte(this.channel);
    writer.writeVarInt(this.faces);
    writer.writeVarInt(this.dice);
  }
  deserialize(reader) {
    this.channel = reader.readByte();
    this.faces = reader.readVarInt();
    this.dice = reader.readVarInt();
  }
};
var TeleportBuddiesAnswerMessage = class extends DofusMessage {
  static id = 3499;
  accept = false;
  constructor(accept) {
    super();
    this.accept = accept;
  }
  serialize(writer) {
    writer.writeBoolean(this.accept);
  }
  deserialize(reader) {
    this.accept = reader.readBoolean();
  }
};
var AllianceInvitationAnswerMessage = class extends DofusMessage {
  static id = 6962;
  accept = false;
  constructor(accept) {
    super();
    this.accept = accept;
  }
  serialize(writer) {
    writer.writeBoolean(this.accept);
  }
  deserialize(reader) {
    this.accept = reader.readBoolean();
  }
};
var AllianceModificationNameAndTagValidMessage = class extends DofusMessage {
  static id = 8950;
  allianceTag;
  allianceName;
  constructor(allianceTag, allianceName) {
    super();
    this.allianceTag = allianceTag;
    this.allianceName = allianceName;
  }
  serialize(writer) {
    writer.writeUTF(this.allianceTag);
    writer.writeUTF(this.allianceName);
  }
  deserialize(reader) {
    this.allianceTag = reader.readUTF();
    this.allianceName = reader.readUTF();
  }
};
var AllianceCreationValidMessage = class extends DofusMessage {
  static id = 5504;
  allianceEmblem;
  allianceTag;
  allianceName;
  constructor(allianceEmblem, allianceTag, allianceName) {
    super();
    this.allianceEmblem = allianceEmblem;
    this.allianceTag = allianceTag;
    this.allianceName = allianceName;
  }
  serialize(writer) {
    this.allianceEmblem.serialize(writer);
    writer.writeUTF(this.allianceTag);
    writer.writeUTF(this.allianceName);
  }
  deserialize(reader) {
    this.allianceEmblem = new GuildEmblem();
    this.allianceEmblem.deserialize(reader);
    this.allianceTag = reader.readUTF();
    this.allianceName = reader.readUTF();
  }
};
var AllianceModificationValidMessage = class extends DofusMessage {
  static id = 4144;
  Alliancemblem;
  allianceTag;
  allianceName;
  constructor(Alliancemblem, allianceTag, allianceName) {
    super();
    this.Alliancemblem = Alliancemblem;
    this.allianceTag = allianceTag;
    this.allianceName = allianceName;
  }
  serialize(writer) {
    this.Alliancemblem.serialize(writer);
    writer.writeUTF(this.allianceTag);
    writer.writeUTF(this.allianceName);
  }
  deserialize(reader) {
    this.Alliancemblem = new GuildEmblem();
    this.Alliancemblem.deserialize(reader);
    this.allianceTag = reader.readUTF();
    this.allianceName = reader.readUTF();
  }
};
var AllianceModificationEmblemValidMessage = class extends DofusMessage {
  static id = 8937;
  Alliancemblem;
  constructor(Alliancemblem) {
    super();
    this.Alliancemblem = Alliancemblem;
  }
  serialize(writer) {
    this.Alliancemblem.serialize(writer);
  }
  deserialize(reader) {
    this.Alliancemblem = new GuildEmblem();
    this.Alliancemblem.deserialize(reader);
  }
};
var IdolSelectRequestMessage = class extends DofusMessage {
  static id = 5093;
  idolId = 0;
  activate = false;
  party = false;
  constructor(idolId, activate, party) {
    super();
    this.idolId = idolId;
    this.activate = activate;
    this.party = party;
  }
  serialize(writer) {
    writer.writeVarShort(this.idolId);
    let box0 = 0;
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 0, this.activate);
    box0 = (0, import_hetwan2.bigEndianSetFlag)(box0, 1, this.party);
    writer.writeByte(box0);
  }
  deserialize(reader) {
    this.idolId = reader.readVarShort();
    const box0 = reader.readByte();
    this.activate = (0, import_hetwan2.bigEndianGetFlag)(box0, 0);
    this.party = (0, import_hetwan2.bigEndianGetFlag)(box0, 1);
  }
};
var IdolPartyRegisterRequestMessage = class extends DofusMessage {
  static id = 868;
  register = false;
  constructor(register) {
    super();
    this.register = register;
  }
  serialize(writer) {
    writer.writeBoolean(this.register);
  }
  deserialize(reader) {
    this.register = reader.readBoolean();
  }
};
var ForgettableSpellClientActionMessage = class extends DofusMessage {
  static id = 6523;
  action = 0;
  spellId = 0;
  constructor(action, spellId) {
    super();
    this.action = action;
    this.spellId = spellId;
  }
  serialize(writer) {
    writer.writeByte(this.action);
    writer.writeInt(this.spellId);
  }
  deserialize(reader) {
    this.action = reader.readByte();
    this.spellId = reader.readInt();
  }
};
var ActivityHideRequestMessage = class extends DofusMessage {
  static id = 9127;
  activityId = 0;
  constructor(activityId) {
    super();
    this.activityId = activityId;
  }
  serialize(writer) {
    writer.writeVarShort(this.activityId);
  }
  deserialize(reader) {
    this.activityId = reader.readVarShort();
  }
};
var ActivitySuggestionsRequestMessage = class extends DofusMessage {
  static id = 2540;
  nbCards = 0;
  minLevel = 0;
  maxLevel = 0;
  areaId = 0;
  activityCategoryId = 0;
  constructor(nbCards, minLevel, maxLevel, areaId, activityCategoryId) {
    super();
    this.nbCards = nbCards;
    this.minLevel = minLevel;
    this.maxLevel = maxLevel;
    this.areaId = areaId;
    this.activityCategoryId = activityCategoryId;
  }
  serialize(writer) {
    writer.writeShort(this.nbCards);
    writer.writeVarShort(this.minLevel);
    writer.writeVarShort(this.maxLevel);
    writer.writeVarShort(this.areaId);
    writer.writeVarShort(this.activityCategoryId);
  }
  deserialize(reader) {
    this.nbCards = reader.readShort();
    this.minLevel = reader.readVarShort();
    this.maxLevel = reader.readVarShort();
    this.areaId = reader.readVarShort();
    this.activityCategoryId = reader.readVarShort();
  }
};
var ActivityLockRequestMessage = class extends DofusMessage {
  static id = 579;
  lock = false;
  activityId = 0;
  constructor(lock, activityId) {
    super();
    this.lock = lock;
    this.activityId = activityId;
  }
  serialize(writer) {
    writer.writeBoolean(this.lock);
    writer.writeVarShort(this.activityId);
  }
  deserialize(reader) {
    this.lock = reader.readBoolean();
    this.activityId = reader.readVarShort();
  }
};
var HaapiBufferListRequestMessage = class extends DofusMessage {
  static id = 9520;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var HaapiConfirmationRequestMessage = class extends DofusMessage {
  static id = 5599;
  action = 0;
  rate = 0;
  ogrines = 0;
  kamas = 0;
  constructor(action, rate, ogrines, kamas) {
    super();
    this.action = action;
    this.rate = rate;
    this.ogrines = ogrines;
    this.kamas = kamas;
  }
  serialize(writer) {
    writer.writeByte(this.action);
    writer.writeVarShort(this.rate);
    writer.writeVarLong(this.ogrines);
    writer.writeVarLong(this.kamas);
  }
  deserialize(reader) {
    this.action = reader.readByte();
    this.rate = reader.readVarShort();
    this.ogrines = reader.readVarLong();
    this.kamas = reader.readVarLong();
  }
};
var HaapiCancelBidRequestMessage = class extends DofusMessage {
  static id = 3479;
  type = 0;
  id_ = 0;
  constructor(type, id_) {
    super();
    this.type = type;
    this.id_ = id_;
  }
  serialize(writer) {
    writer.writeByte(this.type);
    writer.writeVarLong(this.id_);
  }
  deserialize(reader) {
    this.type = reader.readByte();
    this.id_ = reader.readVarLong();
  }
};
var HaapiShopApiKeyRequestMessage = class extends DofusMessage {
  static id = 4578;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var HaapiValidationRequestMessage = class extends DofusMessage {
  static id = 3931;
  transaction;
  constructor(transaction) {
    super();
    this.transaction = transaction;
  }
  serialize(writer) {
    writer.writeUTF(this.transaction);
  }
  deserialize(reader) {
    this.transaction = reader.readUTF();
  }
};
var HaapiTokenRequestMessage = class extends DofusMessage {
  static id = 7220;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var HaapiConsumeBufferRequestMessage = class extends DofusMessage {
  static id = 7621;
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var SequenceNumberMessage = class extends DofusMessage {
  static id = 1059;
  number = 0;
  constructor(number) {
    super();
    this.number = number;
  }
  serialize(writer) {
    writer.writeShort(this.number);
  }
  deserialize(reader) {
    this.number = reader.readShort();
  }
};
var LivingObjectChangeSkinRequestMessage = class extends DofusMessage {
  static id = 7679;
  skinId = 0;
  livingPosition = 0;
  livingUID = 0;
  constructor(skinId, livingPosition, livingUID) {
    super();
    this.skinId = skinId;
    this.livingPosition = livingPosition;
    this.livingUID = livingUID;
  }
  serialize(writer) {
    writer.writeVarInt(this.skinId);
    writer.writeByte(this.livingPosition);
    writer.writeVarInt(this.livingUID);
  }
  deserialize(reader) {
    this.skinId = reader.readVarInt();
    this.livingPosition = reader.readByte();
    this.livingUID = reader.readVarInt();
  }
};
var SymbioticObjectAssociateRequestMessage = class extends DofusMessage {
  static id = 7604;
  hostPos = 0;
  hostUID = 0;
  symbiotePos = 0;
  symbioteUID = 0;
  constructor(hostPos, hostUID, symbiotePos, symbioteUID) {
    super();
    this.hostPos = hostPos;
    this.hostUID = hostUID;
    this.symbiotePos = symbiotePos;
    this.symbioteUID = symbioteUID;
  }
  serialize(writer) {
    writer.writeByte(this.hostPos);
    writer.writeVarInt(this.hostUID);
    writer.writeByte(this.symbiotePos);
    writer.writeVarInt(this.symbioteUID);
  }
  deserialize(reader) {
    this.hostPos = reader.readByte();
    this.hostUID = reader.readVarInt();
    this.symbiotePos = reader.readByte();
    this.symbioteUID = reader.readVarInt();
  }
};
var MimicryObjectFeedAndAssociateRequestMessage = class extends SymbioticObjectAssociateRequestMessage {
  static id = 2549;
  foodPos = 0;
  preview = false;
  foodUID = 0;
  constructor(hostPos, hostUID, symbiotePos, symbioteUID, foodPos, preview, foodUID) {
    super(hostPos, hostUID, symbiotePos, symbioteUID);
    this.foodPos = foodPos;
    this.preview = preview;
    this.foodUID = foodUID;
  }
  serialize(writer) {
    writer.writeByte(this.foodPos);
    writer.writeBoolean(this.preview);
    writer.writeVarInt(this.foodUID);
  }
  deserialize(reader) {
    this.foodPos = reader.readByte();
    this.preview = reader.readBoolean();
    this.foodUID = reader.readVarInt();
  }
};
var WrapperObjectDissociateRequestMessage = class extends DofusMessage {
  static id = 9634;
  hostPos = 0;
  hostUID = 0;
  constructor(hostPos, hostUID) {
    super();
    this.hostPos = hostPos;
    this.hostUID = hostUID;
  }
  serialize(writer) {
    writer.writeByte(this.hostPos);
    writer.writeVarInt(this.hostUID);
  }
  deserialize(reader) {
    this.hostPos = reader.readByte();
    this.hostUID = reader.readVarInt();
  }
};
var MimicryObjectEraseRequestMessage = class extends DofusMessage {
  static id = 3575;
  hostPos = 0;
  hostUID = 0;
  constructor(hostPos, hostUID) {
    super();
    this.hostPos = hostPos;
    this.hostUID = hostUID;
  }
  serialize(writer) {
    writer.writeByte(this.hostPos);
    writer.writeVarInt(this.hostUID);
  }
  deserialize(reader) {
    this.hostPos = reader.readByte();
    this.hostUID = reader.readVarInt();
  }
};
var LivingObjectDissociateMessage = class extends DofusMessage {
  static id = 9254;
  livingPosition = 0;
  livingUID = 0;
  constructor(livingPosition, livingUID) {
    super();
    this.livingPosition = livingPosition;
    this.livingUID = livingUID;
  }
  serialize(writer) {
    writer.writeByte(this.livingPosition);
    writer.writeVarInt(this.livingUID);
  }
  deserialize(reader) {
    this.livingPosition = reader.readByte();
    this.livingUID = reader.readVarInt();
  }
};
var ObjectFeedMessage = class extends DofusMessage {
  static id = 5845;
  meal;
  objectUID = 0;
  constructor(meal, objectUID) {
    super();
    this.meal = meal;
    this.objectUID = objectUID;
  }
  serialize(writer) {
    writer.writeShort(this.meal.length);
    this.meal.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarInt(this.objectUID);
  }
  deserialize(reader) {
    this.meal = [];
    const countMeal = reader.readShort();
    for (let i = 0; i < countMeal; i++) {
      const type = new ObjectItemQuantity();
      type.deserialize(reader);
      this.meal.push(type);
    }
    this.objectUID = reader.readVarInt();
  }
};
var GameFightOptionToggleMessage = class extends DofusMessage {
  static id = 2382;
  option = 3;
  constructor(option) {
    super();
    this.option = option;
  }
  serialize(writer) {
    writer.writeByte(this.option);
  }
  deserialize(reader) {
    this.option = reader.readByte();
  }
};
var LockableUseCodeMessage = class extends DofusMessage {
  static id = 5618;
  code;
  constructor(code) {
    super();
    this.code = code;
  }
  serialize(writer) {
    writer.writeUTF(this.code);
  }
  deserialize(reader) {
    this.code = reader.readUTF();
  }
};
var BasicWhoAmIRequestMessage = class extends DofusMessage {
  static id = 1281;
  verbose = false;
  constructor(verbose) {
    super();
    this.verbose = verbose;
  }
  serialize(writer) {
    writer.writeBoolean(this.verbose);
  }
  deserialize(reader) {
    this.verbose = reader.readBoolean();
  }
};
var BasicStatMessage = class extends DofusMessage {
  static id = 514;
  statId = 0;
  timeSpent = 0;
  constructor(statId, timeSpent) {
    super();
    this.statId = statId;
    this.timeSpent = timeSpent;
  }
  serialize(writer) {
    writer.writeVarShort(this.statId);
    writer.writeDouble(this.timeSpent);
  }
  deserialize(reader) {
    this.statId = reader.readVarShort();
    this.timeSpent = reader.readDouble();
  }
};
var BasicStatWithDataMessage = class extends BasicStatMessage {
  static id = 1144;
  datas;
  constructor(statId, timeSpent, datas) {
    super(statId, timeSpent);
    this.datas = datas;
  }
  serialize(writer) {
    writer.writeShort(this.datas.length);
    this.datas.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }
  deserialize(reader) {
    this.datas = [];
    const countDatas = reader.readShort();
    for (let i = 0; i < countDatas; i++) {
      const datasTypeId = reader.readShort();
      const type = new types[datasTypeId]();
      type.deserialize(reader);
      this.datas.push(type);
    }
  }
};
var PartyLocateMembersRequestMessage = class extends AbstractPartyMessage {
  static id = 6564;
  constructor(partyId) {
    super(partyId);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  serialize(writer) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  deserialize(reader) {
  }
};
var ContactLookRequestByNameMessage = class extends ContactLookRequestMessage {
  static id = 4808;
  playerName;
  constructor(contactType, requestId, playerName) {
    super(contactType, requestId);
    this.playerName = playerName;
  }
  serialize(writer) {
    writer.writeUTF(this.playerName);
  }
  deserialize(reader) {
    this.playerName = reader.readUTF();
  }
};
var JobCrafterDirectoryEntryRequestMessage = class extends DofusMessage {
  static id = 3858;
  playerId = 0;
  constructor(playerId) {
    super();
    this.playerId = playerId;
  }
  serialize(writer) {
    writer.writeVarLong(this.playerId);
  }
  deserialize(reader) {
    this.playerId = reader.readVarLong();
  }
};
var types = {
  1244: GameContextActorPositionInformations,
  801: GameContextActorInformations,
  102: GameRolePlayActorInformations,
  3148: GameRolePlayGroupMonsterInformations,
  8913: HavenBagRoomPreviewInformation,
  4768: InteractiveElement,
  5068: GameFightFighterInformations,
  5544: GameFightEntityInformation,
  6265: GameRolePlayPrismInformations,
  858: GameFightAIInformations,
  1922: GameFightMonsterInformations,
  5382: GameRolePlayGroupMonsterWaveInformations,
  5071: GameRolePlayTaxCollectorInformations,
  6660: GameRolePlayNamedActorInformations,
  9304: GameRolePlayMountInformations,
  7419: GameRolePlayNpcInformations,
  3824: GameRolePlayNpcWithQuestInformations,
  3425: GameRolePlayMerchantInformations,
  345: GameRolePlayHumanoidInformations,
  9532: GameRolePlayCharacterInformations,
  8125: GameRolePlayPortalInformations,
  4120: GameRolePlayMutantInformations,
  7293: GameFightFighterNamedInformations,
  2405: GameFightCharacterInformations,
  5235: GameFightTaxCollectorInformations,
  9546: EntityLook,
  8670: SubEntity,
  1657: AbstractFightDispellableEffect,
  253: GameContextSummonsInformation,
  7366: FightTemporaryBoostEffect,
  5149: SpawnInformation,
  8892: SpawnCompanionInformation,
  736: BaseSpawnMonsterInformation,
  6368: SpawnScaledMonsterInformation,
  2015: GameContextBasicSpawnInformation,
  5389: GameFightSpellCooldown,
  457: SpawnCharacterInformation,
  3120: SpawnMonsterInformation,
  7424: EntityDispositionInformations,
  693: HumanOption,
  3939: HumanOptionAlliance,
  77: HumanOptionFollowers,
  6459: ActorOrientation,
  9226: GroupMonsterStaticInformations,
  7547: HumanInformations,
  5640: FightTeamMemberInformations,
  3346: HouseInformations,
  8890: HouseOnMapInformations,
  1192: HumanOptionObjectUse,
  3243: HouseInstanceInformations,
  3456: HumanOptionEmote,
  4848: ObjectItemInRolePlay,
  5575: PaddockItem,
  3071: AbstractFightTeamInformations,
  4654: FightTeamInformations,
  1904: IndexedEntityLook,
  2427: HumanOptionSkillUse,
  1183: AlternativeMonstersInGroupLightInformations,
  5008: FightCommonInformations,
  7429: MapNpcQuestInfo,
  4246: MonsterInGroupLightInformations,
  2614: MonsterInGroupInformations,
  5512: MapObstacle,
  1240: GroupMonsterStaticInformationsWithAlternatives,
  7794: FightEntityDispositionInformations,
  5320: BreachBranch,
  8490: IdentifiedEntityDispositionInformations,
  7058: StatedElement,
  8982: ActorRestrictionsInformations,
  1918: CharacterCharacteristicsInformations,
  7662: GuildApplicationInformation,
  6359: AbstractSocialGroupInfos,
  4374: BasicGuildInformations,
  1201: GuildInformations,
  2714: AbstractCharacterInformation,
  4480: CharacterBasicMinimalInformations,
  6674: CharacterMinimalInformations,
  9551: CharacterMinimalPlusLookInformations,
  8097: CharacterBaseInformations,
  8005: FightDispellableEffectExtendedInformations,
  2389: GameActionMarkedCell,
  6627: FightResultListEntry,
  4819: FightResultFighterListEntry,
  8117: GameFightResumeSlaveInfo,
  5095: NamedPartyTeamWithOutcome,
  158: GameActionMark,
  6995: NamedPartyTeam,
  960: Idol,
  2861: GameFightMutantInformations,
  9771: FightResultPlayerListEntry,
  1517: FightResultTaxCollectorListEntry,
  3026: GameFightEffectTriggerCount,
  4565: CharacterCharacteristic,
  9089: CharacterCharacteristicDetailed,
  9575: CharacterUsableCharacteristicDetailed,
  1995: CharacterCharacteristicValue,
  842: Item,
  2916: ObjectItem,
  5685: ObjectEffect,
  2163: ObjectEffectInteger,
  8866: TrustCertificate,
  4425: CharacterSpellModification,
  6784: InteractiveElementSkill,
  1975: QuestActiveInformations,
  7425: GameFightCharacteristics,
  6060: PrismInformation,
  4022: TaxCollectorStaticInformations,
  2262: SkillActionDescription,
  6151: SkillActionDescriptionCraft,
  2005: JobDescription,
  9286: SkillActionDescriptionTimed,
  5191: SkillActionDescriptionCollect,
  5238: GameServerInformations,
  1965: PaddockInformations,
  3435: PaddockInstancesInformations,
  3536: PaddockBuyableInformations,
  3944: GameRolePlayNpcQuestFlag,
  2055: ItemDurability,
  1836: AchievementAchieved,
  4851: AchievementAchievedRewardable,
  5510: HumanOptionOrnament,
  1813: HumanOptionTitle,
  3170: AccountHouseInformations,
  2517: HouseInformationsInside,
  3635: ActorAlignmentInformations,
  2145: PortalInformation,
  1469: AlliancePrismInformation,
  8201: AllianceInsiderPrismInformation,
  8051: PaddockContentInformations,
  5491: GuildMember,
  1179: SpellItem,
  2497: ForgettableSpellItem,
  3077: PlayerStatus,
  1437: HumanOptionGuild,
  3781: Version,
  4244: ObjectItemToSell,
  3500: ObjectItemToSellInBid,
  5475: SellerBuyerDescriptor,
  7149: FightExternalInformations,
  1294: AbstractPlayerSearchInformation,
  3556: PlayerSearchTagInformation,
  6775: TaxCollectorMovement,
  3219: HouseInformationsForGuild,
  6684: AbstractContactInformations,
  8035: FriendInformations,
  3896: FriendOnlineInformations,
  1176: PlayerStatusExtended,
  6223: AcquaintanceInformation,
  4750: AcquaintanceOnlineInformation,
  7873: ObjectItemGenericQuantity,
  7636: AccountTagInformation,
  1909: IgnoredInformations,
  7223: IgnoredOnlineInformations,
  3820: TaxCollectorInformations,
  6431: PlayerSearchCharacterNameInformation,
  7387: GuildFactSheetInformations,
  183: BasicAllianceInformations,
  7217: ObjectItemQuantityPriceDateEffects,
  5806: DungeonPartyFinderPlayer,
  8492: PartyMemberInformations,
  2694: PartyMemberArenaInformations,
  8087: PartyEntityBaseInformation,
  436: PartyInvitationMemberInformations,
  1057: PartyGuestInformations,
  2136: PartyEntityMemberInformation,
  8343: GuildInAllianceInformations,
  6884: PrismSubareaEmptyInfo,
  2406: PrismGeolocalizedInformation,
  8132: GuildInsiderFactSheetInformations,
  1349: FightTriggeredEffect,
  4141: FightTemporarySpellImmunityEffect,
  15: FightTemporaryBoostWeaponDamagesEffect,
  8281: FightTemporaryBoostStateEffect,
  540: FightTemporarySpellBoostEffect,
  2972: FinishMoveInformations,
  9707: FightStartingPositions,
  949: BasicNamedAllianceInformations,
  5338: AllianceInformations,
  6593: FightTeamMemberCharacterInformations,
  2689: FightTeamMemberWithAllianceCharacterInformations,
  9376: ExtendedBreachBranch,
  2317: BreachReward,
  856: HouseGuildedInformations,
  5639: FightOptionsInformations,
  9850: FightTeamMemberTaxCollectorInformations,
  6505: TaxCollectorStaticExtendedInformations,
  8741: GameRolePlayTreasureHintInformations,
  815: FightResultMutantListEntry,
  7141: TreasureHuntStep,
  4747: TreasureHuntStepFight,
  3568: MapCoordinates,
  9956: FriendSpouseInformations,
  1910: FriendSpouseOnlineInformations,
  7522: CharacterMinimalPlusLookAndGradeInformations,
  9162: StatisticData,
  5872: StatisticDataShort,
  6654: FightResultAdditionalData,
  9530: FightResultExperienceData,
  576: ObjectEffectString,
  6024: Preset,
  6343: IdolsPreset,
  1714: AlliancedGuildFactSheetInformations,
  8231: ForgettableSpellsPreset,
  5511: Shortcut,
  445: ShortcutSpell,
  6844: StatisticDataByte,
  199: TreasureHuntStepDig,
  9471: FullStatsPreset,
  3340: InteractiveElementNamedSkill,
  9919: FightResultPvpData,
  4752: TreasureHuntStepFollowDirectionToHint,
  4170: GuildVersatileInformations,
  9740: GuildInAllianceVersatileInformations,
  8583: ShortcutObject,
  1048: ObjectEffectDice,
  5415: ObjectEffectDate,
  826: UpdateMountCharacteristic,
  305: UpdateMountIntegerCharacteristic,
  6510: ShortcutObjectItem,
  4677: QuestObjectiveInformations,
  5115: QuestObjectiveInformationsWithCompletion,
  5487: FightTeamMemberEntityInformation,
  1756: UpdateMountBooleanCharacteristic,
  4548: CharacterMinimalGuildInformations,
  4354: CharacterMinimalAllianceInformations,
  5400: ItemsPreset,
  7504: ServerSessionConstant,
  6620: ServerSessionConstantInteger,
  3292: ShortcutEmote,
  9875: TaxCollectorComplementaryInformations,
  8142: TaxCollectorLootInformations,
  1741: MapCoordinatesAndId,
  1197: EntitiesPreset,
  9735: DebtInformation,
  6908: PaddockGuildedInformations,
  2979: KamaDebtInformation,
  6983: StatisticDataString,
  4853: PresetsContainerPreset,
  876: IconNamedPreset,
  8535: ServerSessionConstantString,
  2409: QuestActiveDetailedInformations,
  3590: ShortcutEntitiesPreset,
  8829: ObjectEffectCreature,
  7384: ObjectEffectLadder,
  6386: FightTeamMemberMonsterInformations,
  83: ShortcutObjectIdolsPreset,
  5044: ShortcutObjectPreset,
  2529: TaxCollectorGuildInformations,
  3199: TaxCollectorWaitingForHelpInformations,
  6559: StatsPreset,
  5502: ObjectEffectDuration,
  6482: GameFightFighterLightInformations,
  4254: GameFightFighterMonsterLightInformations,
  6139: GameFightFighterTaxCollectorLightInformations,
  2398: FightAllianceTeamInformations,
  7850: CharacterHardcoreOrEpicInformations,
  4268: GameFightFighterEntityLightInformation,
  4492: ServerSessionConstantLong,
  2510: InteractiveElementWithAgeBonus,
  4720: StatisticDataInt,
  9654: AllianceFactSheetInformations,
  2754: GameFightFighterNamedLightInformations,
  2093: TreasureHuntStepFollowDirectionToPOI,
  8397: StatisticDataBoolean,
  169: ExtendedLockedBreachBranch,
  563: PartyIdol,
  108: GameFightMonsterWithAlignmentInformations,
  3550: MapCoordinatesExtended,
  5753: TreasureHuntStepFollowDirection,
  4590: ShortcutSmiley,
  5720: ObjectEffectMinMax,
  1337: SpellsPreset,
  4916: ObjectEffectMount,
  4107: ItemForPreset,
  4302: ActorExtendedAlignmentInformations,
  3872: ApplicationPlayerInformation,
  2994: GuildEmblem,
  9874: MountClientData,
  7224: FightLoot,
  4191: TreasureHuntFlag,
  4918: ObjectItemMinimalInformation,
  4715: ObjectItemInformationWithQuantity,
  6157: StartupActionAddObject,
  5402: CharacterRemodelingInformation,
  2646: CharacterToRemodelInformations,
  8002: RemodelingInformation,
  5368: CharacterCharacteristics,
  7495: SimpleCharacterCharacteristicForPreset,
  4303: CharacterCharacteristicForPreset,
  7500: SpellForPreset,
  8621: Achievement,
  8362: ObjectItemNotInContainer,
  9650: TaxCollectorFightersInformation,
  9066: TeleportDestination,
  7719: MonsterBoosts,
  8215: DecraftedItemStackInfo,
  1488: TaxCollectorBasicInformations,
  6723: PartyMemberGeoPosition,
  6097: ObjectItemToSellInNpcShop,
  4905: JobCrafterDirectoryEntryPlayerInfo,
  5220: JobCrafterDirectoryEntryJobInfo,
  3897: JobCrafterDirectoryListEntry,
  6079: JobCrafterDirectorySettings,
  107: LeagueFriendInformations,
  750: ArenaRankInfos,
  1579: JobExperience,
  1207: AllianceVersatileInformations,
  8909: PrismFightersInformation,
  3647: HavenBagFurnitureInformation,
  3684: BufferInformation,
  8338: AnomalySubareaInformation,
  1249: PaddockInformationsForSell,
  393: CharacterMinimalGuildPublicInformations,
  6041: EntityInformation,
  3356: AlignmentWarEffortInformation,
  161: RecycledItem,
  1011: HouseInformationsForSell,
  6658: JobBookSubscription,
  396: GoldItem,
  4584: GuildRecruitmentInformation,
  3057: ObjectItemToSellInHumanVendorShop,
  3674: ObjectItemQuantity,
  7283: EntityMovementInformations,
  461: BidExchangerObjectInfo,
  4410: AtlasPointsInformations,
  9432: AdditionalTaxCollectorInformations,
  2847: ProtectedEntityWaitingForHelpInfo,
  1513: MountInformationsForPaddock,
  68: FightTeamLightInformations,
  5613: ObjectEffects,
  8917: AchievementObjective,
  5823: AchievementStartedObjective,
  6311: ArenaRanking,
  2820: ArenaLeagueRanking
};
var messages = {
  8161: BasicPingMessage,
  5037: AbstractGameActionMessage,
  8860: AbstractGameActionFightTargetedAbilityMessage,
  9973: GameActionFightCloseCombatMessage,
  3304: GameActionFightReduceDamagesMessage,
  6777: GameActionFightLifePointsGainMessage,
  7980: GameActionFightModifyEffectsDurationMessage,
  5294: GameActionFightInvisibleDetectedMessage,
  4560: GameActionFightDispellMessage,
  1560: GameActionFightDispellEffectMessage,
  7238: GameFightTurnListMessage,
  8598: SequenceStartMessage,
  5414: GameActionFightVanishMessage,
  710: GameActionFightMultipleSummonMessage,
  914: GameActionFightSlideMessage,
  8091: GameActionFightKillMessage,
  2288: GameActionFightSpellCooldownVariationMessage,
  534: FighterStatsListMessage,
  1972: GameMapMovementMessage,
  2160: GameActionFightDropCharacterMessage,
  1777: GameActionFightTriggerGlyphTrapMessage,
  7694: GameActionFightPointsVariationMessage,
  8272: GameActionFightReflectSpellMessage,
  7663: GameActionFightDeathMessage,
  9234: GameActionFightActivateGlyphTrapMessage,
  3028: GameFightSynchronizeMessage,
  2648: GameActionFightSpellCastMessage,
  6409: GameActionFightTriggerEffectMessage,
  4448: GameActionFightTackledMessage,
  7441: GameActionFightInvisibilityMessage,
  2781: GameFightShowFighterMessage,
  7534: GameFightShowFighterRandomStaticPoseMessage,
  7589: GameActionFightTeleportOnSameMapMessage,
  6878: GameActionFightDispellSpellMessage,
  4039: GameActionFightChangeLookMessage,
  7629: GameActionFightDodgePointLossMessage,
  7640: GameActionFightSpellImmunityMessage,
  154: RefreshCharacterStatsMessage,
  9416: GameActionFightDispellableEffectMessage,
  1069: GameActionFightThrowCharacterMessage,
  6738: GameFightRefreshFighterMessage,
  1180: GameActionFightMarkCellsMessage,
  2879: GameActionFightSummonMessage,
  8847: GameActionFightStealKamaMessage,
  5912: SequenceEndMessage,
  4520: GameActionFightLifePointsLostMessage,
  6816: GameActionFightLifeAndShieldPointsLostMessage,
  5643: GameActionFightCarryCharacterMessage,
  302: GameActionFightUnmarkCellsMessage,
  140: GameActionFightReflectDamagesMessage,
  8844: GameActionFightExchangePositionsMessage,
  1182: MapComplementaryInformationsDataMessage,
  6414: MapComplementaryInformationsAnomalyMessage,
  9785: GameFightUpdateTeamMessage,
  7808: GameDataPaddockObjectRemoveMessage,
  6993: ObjectGroundRemovedMultipleMessage,
  6697: GameFightRemoveTeamMemberMessage,
  5775: EmotePlayRequestMessage,
  3658: UpdateMapPlayersAgressableStatusMessage,
  8484: PaddockMoveItemRequestMessage,
  6617: ObjectGroundListAddedMessage,
  4140: UpdateSelfAgressableStatusMessage,
  5440: MapComplementaryInformationsWithCoordsMessage,
  5261: GameContextRefreshEntityLookMessage,
  5996: ListMapNpcsQuestStatusUpdateMessage,
  3738: MapComplementaryInformationsDataInHavenBagMessage,
  7143: BreachExitResponseMessage,
  9863: PaddockRemoveItemRequestMessage,
  595: GameMapChangeOrientationMessage,
  3936: ObjectGroundAddedMessage,
  6485: BreachEnterMessage,
  503: GameRolePlayShowActorMessage,
  7212: GameDataPlayFarmObjectAnimationMessage,
  5734: GameRolePlayShowChallengeMessage,
  5911: GameRolePlayRemoveChallengeMessage,
  1514: MapRewardRateMessage,
  465: GameRolePlayMonsterAngryAtPlayerMessage,
  8122: GameDataPaddockObjectAddMessage,
  2024: MapComplementaryInformationsDataInHouseMessage,
  8689: StatedMapUpdateMessage,
  5656: GameMapChangeOrientationsMessage,
  2286: ShowCellMessage,
  3830: HousePropertiesMessage,
  7726: GameRolePlayMonsterNotAngryAtPlayerMessage,
  4766: BreachTeleportResponseMessage,
  9667: GameContextRemoveMultipleElementsMessage,
  1377: GameRolePlayShowMultipleActorsMessage,
  7554: ObjectGroundRemovedMessage,
  6584: GameDataPaddockObjectListAddMessage,
  4879: AnomalyStateMessage,
  2396: MapInformationsRequestMessage,
  4971: InteractiveUsedMessage,
  9018: MapFightCountMessage,
  8375: InteractiveMapUpdateMessage,
  5284: GameContextRemoveElementMessage,
  4608: GameFightOptionStateUpdateMessage,
  2818: BreachTeleportRequestMessage,
  6429: MapComplementaryInformationsBreachMessage,
  853: GameEntitiesDispositionMessage,
  6320: ShowCellSpectatorMessage,
  995: GameFightPlacementSwapPositionsMessage,
  8701: GameEntityDispositionMessage,
  4318: GameFightHumanReadyStateMessage,
  120: PlayerStatusUpdateMessage,
  5098: GameFightEndMessage,
  7323: BreachGameFightEndMessage,
  1613: ChallengeTargetUpdateMessage,
  4663: GameFightLeaveMessage,
  8991: GameFightSpectateMessage,
  4566: GameFightResumeMessage,
  6205: GameFightResumeWithSlavesMessage,
  9325: CurrentMapMessage,
  7422: CurrentMapInstanceMessage,
  2951: GameFightStartingMessage,
  1185: GameFightJoinMessage,
  1425: ArenaFighterIdleMessage,
  8411: ChallengeTargetsListRequestMessage,
  5357: GameFightStartMessage,
  8111: GameActionFightNoSpellCastMessage,
  7855: GameContextDestroyMessage,
  6927: GameFightSpectatorJoinMessage,
  638: ChallengeInfoMessage,
  7386: ChallengeTargetsListMessage,
  9984: MapObstacleUpdateMessage,
  1880: ArenaFighterLeaveMessage,
  912: GameContextReadyMessage,
  7757: ChallengeResultMessage,
  1312: GameFightNewWaveMessage,
  8818: GameFightPauseMessage,
  1672: UpdateSpellModifierMessage,
  3772: GameFightTurnStartMessage,
  4389: GameFightTurnReadyRequestMessage,
  4443: GameFightTurnEndMessage,
  1656: GameFightNewRoundMessage,
  6013: SlaveSwitchContextMessage,
  3275: GameFightTurnStartPlayingMessage,
  4540: SlaveNoLongerControledMessage,
  2227: CharacterStatsListMessage,
  3561: GameActionAcknowledgementMessage,
  9827: GameFightTurnResumeMessage,
  4043: GameFightTurnReadyMessage,
  6461: GameActionUpdateEffectTriggerCountMessage,
  6036: HaapiApiKeyRequestMessage,
  1639: DebugClearHighlightCellsMessage,
  307: DebugHighlightCellsMessage,
  3665: DumpedEntityStatsMessage,
  6517: DebugInClientMessage,
  4337: IdentificationMessage,
  2449: IdentificationAccountForceMessage,
  45: BasicAckMessage,
  2522: BasicNoOperationMessage,
  4834: CredentialsAcknowledgementMessage,
  4485: OnConnectionEventMessage,
  5325: ObjectJobAddedMessage,
  3223: LivingObjectMessageRequestMessage,
  331: IdentificationSuccessMessage,
  6253: RawDataMessage,
  8156: TrustStatusMessage,
  786: ServersListMessage,
  2330: BasicPongMessage,
  1245: BasicLatencyStatsRequestMessage,
  3831: BasicLatencyStatsMessage,
  1296: CheckIntegrityMessage,
  4583: AdminCommandMessage,
  3282: ConsoleMessage,
  5774: QuestListMessage,
  1984: QuestValidatedMessage,
  110: CharacterCreationResultMessage,
  2705: NicknameRefusedMessage,
  9067: NicknameAcceptedMessage,
  5237: HelloGameMessage,
  9196: GuildFactsErrorMessage,
  9855: AchievementDetailedListMessage,
  6407: AuthenticationTicketAcceptedMessage,
  621: GuildInvitationStateRecrutedMessage,
  3393: ChatAbstractServerMessage,
  8853: ChatServerMessage,
  4380: ChatKolizeumServerMessage,
  4096: KnownZaapListMessage,
  4370: KamasUpdateMessage,
  7209: StorageObjectsUpdateMessage,
  7582: GuildInvitedMessage,
  5931: ActivitySuggestionsMessage,
  7910: ShortcutBarContentMessage,
  1568: ObjectsAddedMessage,
  9833: CharacterSelectedSuccessMessage,
  8524: ExchangeCraftResultMessage,
  118: ExchangeCraftResultWithObjectDescMessage,
  3299: AbstractPartyMessage,
  2544: AbstractPartyEventMessage,
  9078: PartyMemberRemoveMessage,
  5417: GameRolePlayPlayerFightFriendlyAnsweredMessage,
  7631: BasicWhoIsNoMatchMessage,
  778: InteractiveUseErrorMessage,
  2042: GameRolePlayGameOverMessage,
  2613: NotificationByServerMessage,
  4570: GuildMemberOnlineStatusMessage,
  2113: ExchangeMountsPaddockRemoveMessage,
  8560: SocialNoticeMessage,
  8430: GameRolePlaySpellAnimMessage,
  4497: EmotePlayAbstractMessage,
  3920: OrnamentGainedMessage,
  5576: ExchangeBidHouseUnsoldItemsMessage,
  7025: ExchangeShopStockMovementRemovedMessage,
  4378: IdolSelectErrorMessage,
  4986: SymbioticObjectAssociatedMessage,
  8169: MimicryObjectAssociatedMessage,
  8228: BasicCharactersListMessage,
  3416: TreasureHuntAvailableRetryCountUpdateMessage,
  2063: LoginQueueStatusMessage,
  1489: PartyCancelInvitationNotificationMessage,
  2864: PaginationAnswerAbstractMessage,
  7331: DungeonPartyFinderListenErrorMessage,
  1966: ExchangeObjectMessage,
  4841: ExchangeObjectsRemovedMessage,
  3712: TextInformationMessage,
  8629: WarnOnPermaDeathStateMessage,
  5671: ExchangeOfflineSoldItemsMessage,
  4001: PartyLeaveMessage,
  2197: QueueStatusMessage,
  2329: ExchangeObjectAddedMessage,
  9932: ExchangeShopStockMovementUpdatedMessage,
  6496: AbstractTaxCollectorListMessage,
  4811: TaxCollectorListMessage,
  1161: GameRolePlayDelayedActionMessage,
  8906: PauseDialogMessage,
  5651: TeleportDestinationsMessage,
  9626: LifePointsRegenBeginMessage,
  2907: BreachBranchesMessage,
  5546: GuildApplicationDeletedMessage,
  7075: CheckFileRequestMessage,
  9946: ForgettableSpellListUpdateMessage,
  269: CharactersListMessage,
  3532: CharactersListWithRemodelingMessage,
  7321: InteractiveElementUpdatedMessage,
  4478: GameRolePlayFightRequestCanceledMessage,
  4537: BreachSavedMessage,
  5749: GuildFightPlayersHelpersLeaveMessage,
  9970: HaapiApiKeyMessage,
  3617: TopTaxCollectorListMessage,
  5125: GameRolePlayArenaFighterStatusMessage,
  5344: ChatServerCopyMessage,
  5518: ChatSmileyMessage,
  5134: LocalizedChatSmileyMessage,
  3316: GameRolePlayArenaSwitchToFightServerMessage,
  5716: ProtocolRequired,
  8716: CompassUpdateMessage,
  2110: GameRefreshMonsterBoostsMessage,
  5896: GuildPlayerApplicationAbstractMessage,
  9380: GuildPlayerApplicationInformationMessage,
  2385: DungeonPartyFinderRegisterSuccessMessage,
  8666: SpellVariantActivationMessage,
  7044: StorageObjectsRemoveMessage,
  843: MountReleasedMessage,
  7257: DecraftResultMessage,
  5408: MapFightStartPositionsUpdateMessage,
  94: OrnamentLostMessage,
  2: NetworkDataContainerMessage,
  6217: GuildPaddockBoughtMessage,
  1888: AbstractPartyMemberInFightMessage,
  6653: PartyMemberInStandardFightMessage,
  8540: ExchangeStartedMessage,
  5406: SpouseStatusMessage,
  969: SubscriptionLimitationMessage,
  8533: ExchangeBidPriceMessage,
  8645: ExchangeBidPriceForSellerMessage,
  3045: LockableShowCodeDialogMessage,
  4751: GuildFightPlayersHelpersJoinMessage,
  3016: TaxCollectorMovementsOfflineMessage,
  1857: UpdateLifePointsMessage,
  3172: ReloginTokenStatusMessage,
  3386: TitleGainedMessage,
  4197: InventoryContentMessage,
  561: StorageInventoryContentMessage,
  3309: ExchangeShopStockMultiMovementRemovedMessage,
  7270: TaxCollectorAttackedResultMessage,
  7006: ExchangeObjectRemovedMessage,
  3086: PrismFightAttackerAddMessage,
  2593: LivingObjectMessageMessage,
  1660: PartyInvitationMessage,
  1019: TreasureHuntRequestAnswerMessage,
  9063: CharacterLoadingCompleteMessage,
  92: GameRolePlayArenaPlayerBehavioursMessage,
  8784: TreasureHuntFlagRequestAnswerMessage,
  6263: ExchangeIsReadyMessage,
  6475: AchievementAlmostFinishedDetailedListMessage,
  8954: AllianceFactsErrorMessage,
  4234: InteractiveUseEndedMessage,
  6009: AllianceInvitedMessage,
  3864: ExchangeStartOkCraftMessage,
  3205: PartyLocateMembersMessage,
  9871: ObjectsDeletedMessage,
  3194: PaddockPropertiesMessage,
  7428: GameContextRemoveMultipleElementsWithEventsMessage,
  3514: ExchangeStartOkMulticraftCustomerMessage,
  3378: SocialNoticeSetErrorMessage,
  1255: GuildBulletinSetErrorMessage,
  5355: AccessoryPreviewMessage,
  8584: ExchangeStartOkNpcShopMessage,
  1769: PartyUpdateMessage,
  7610: PartyNewMemberMessage,
  2929: InviteInHavenBagMessage,
  2498: AllianceInvitationStateRecruterMessage,
  6591: ExchangeCrafterJobLevelupMessage,
  4052: IgnoredAddFailureMessage,
  7532: ExchangeStartedBidSellerMessage,
  7780: EmotePlayMassiveMessage,
  8710: HaapiValidationMessage,
  9652: IgnoredDeleteResultMessage,
  9272: CompassUpdatePartyMemberMessage,
  9901: ExchangeObjectPutInBagMessage,
  9360: GuildFightPlayersEnemiesListMessage,
  431: GameCautiousMapMovementMessage,
  8970: AchievementFinishedMessage,
  9768: AchievementFinishedInformationMessage,
  4321: EntityTalkMessage,
  5676: LockableStateUpdateAbstractMessage,
  5127: LockableStateUpdateStorageMessage,
  9037: ExchangeStartedBidBuyerMessage,
  3861: AllianceListMessage,
  3827: JobCrafterDirectoryEntryMessage,
  4201: ObtainedItemMessage,
  7390: ObtainedItemWithBonusMessage,
  4091: SpellListMessage,
  9960: GuildPaddockRemovedMessage,
  6585: BreachInvitationResponseMessage,
  2770: GuildLeftMessage,
  7113: EditHavenBagStartMessage,
  349: PartyRefuseInvitationNotificationMessage,
  3074: CharacterNameSuggestionFailureMessage,
  8116: SelectedServerRefusedMessage,
  7307: PrismInfoInValidMessage,
  3743: ExchangeBidHouseBuyResultMessage,
  9671: ChatCommunityChannelCommunityMessage,
  7502: IdolPartyLostMessage,
  7130: ExchangePodsModifiedMessage,
  1694: TaxCollectorDialogQuestionBasicMessage,
  625: TaxCollectorDialogQuestionExtendedMessage,
  7917: AllianceTaxCollectorDialogQuestionExtendedMessage,
  7095: TaxCollectorStateUpdateMessage,
  9780: ExchangeBidHouseGenericItemRemovedMessage,
  7690: QuestStepInfoMessage,
  189: ServerOptionalFeaturesMessage,
  3212: BreachRoomUnlockResultMessage,
  6719: DungeonPartyFinderRoomContentUpdateMessage,
  6173: QuestStepValidatedMessage,
  5714: CompassUpdatePvpSeekMessage,
  6820: AllianceFactsMessage,
  58: PrismFightDefenderAddMessage,
  1829: JobCrafterDirectoryAddMessage,
  3330: ShortcutBarSwapErrorMessage,
  9837: PartyInvitationDungeonMessage,
  1903: BreachBudgetMessage,
  5111: JobAllowMultiCraftRequestMessage,
  1246: JobMultiCraftAvailableSkillsMessage,
  8697: ExchangeMountsStableAddMessage,
  9476: FriendAddedMessage,
  9527: CharacterCanBeCreatedResultMessage,
  1901: NpcGenericActionFailureMessage,
  7236: AccountHouseMessage,
  6994: AcquaintanceSearchErrorMessage,
  9169: ExchangeStartOkRecycleTradeMessage,
  4083: StatsUpgradeResultMessage,
  1018: MapRunningFightListMessage,
  8200: SequenceNumberRequestMessage,
  3615: PartyInvitationDetailsMessage,
  7340: PartyInvitationDungeonDetailsMessage,
  8522: ExchangeTypesExchangerDescriptionForUserMessage,
  8518: JobCrafterDirectorySettingsMessage,
  8249: MoodSmileyUpdateMessage,
  4913: GameRolePlayArenaInvitationCandidatesAnswerMessage,
  9462: EmotePlayMessage,
  3966: SelectedServerDataMessage,
  2850: SelectedServerDataExtendedMessage,
  6412: FriendWarnOnConnectionStateMessage,
  5100: DungeonPartyFinderRoomContentMessage,
  4911: BasicDateMessage,
  3891: GuildApplicationReceivedMessage,
  1340: ExchangeMountsStableBornAddMessage,
  8838: JobDescriptionMessage,
  7661: AccountLoggingKickedMessage,
  1456: ExchangeObjectModifiedInBagMessage,
  2524: DebtsUpdateMessage,
  8202: GameRolePlayArenaUpdatePlayerInfosMessage,
  6540: GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage,
  42: GuildCreationResultMessage,
  8743: ExchangeStoppedMessage,
  8646: ExchangeShopStockMultiMovementUpdatedMessage,
  3664: AccountInformationsUpdateMessage,
  2014: TitleSelectErrorMessage,
  8644: AccountCapabilitiesMessage,
  8845: TreasureHuntDigRequestAnswerMessage,
  862: TreasureHuntDigRequestAnswerFailedMessage,
  209: GameEntityDispositionErrorMessage,
  8736: EmoteAddMessage,
  4202: GuildMotdMessage,
  4003: PartyLeaderUpdateMessage,
  6581: ChatAdminServerMessage,
  3777: MountSterilizedMessage,
  7169: BasicWhoIsMessage,
  9659: ObjectAddedMessage,
  8877: GameActionNoopMessage,
  941: PopupWarningMessage,
  3940: JobExperienceUpdateMessage,
  178: GuildInformationsPaddocksMessage,
  211: GuildVersatileInfoListMessage,
  7135: IdentificationFailedMessage,
  7294: IdentificationFailedForBadVersionMessage,
  8401: JobLevelUpMessage,
  213: ExchangeBidHouseInListAddedMessage,
  5729: ExchangeStartedMountStockMessage,
  6300: BreachCharactersMessage,
  9853: AllianceVersatileInfoListMessage,
  6787: HaapiShopApiKeyMessage,
  9603: ObjectErrorMessage,
  8441: SymbioticObjectErrorMessage,
  5767: MimicryObjectErrorMessage,
  6530: KohUpdateMessage,
  7354: ClientUIOpenedMessage,
  8823: ClientUIOpenedByObjectMessage,
  9435: TeleportBuddiesRequestedMessage,
  7744: ExchangeStartOkEvolutiveObjectRecycleTradeMessage,
  8641: ExchangeCraftPaymentModifiedMessage,
  9723: AllianceMotdSetErrorMessage,
  2209: LeaveDialogMessage,
  8813: ExchangeLeaveMessage,
  4836: TaxCollectorErrorMessage,
  7221: BreachRoomLockedMessage,
  9410: IdolListMessage,
  8124: EmoteRemoveMessage,
  962: ExchangeGuildTaxCollectorGetMessage,
  1049: GuildMotdSetErrorMessage,
  651: GameRolePlayArenaSwitchToGameServerMessage,
  6590: ContactLookMessage,
  2592: AlliancePartialListMessage,
  3380: MapRunningFightDetailsMessage,
  9456: MapRunningFightDetailsExtendedMessage,
  8752: AcquaintanceServerListMessage,
  5482: DungeonPartyFinderRegisterErrorMessage,
  9032: EmoteListMessage,
  6204: TitlesAndOrnamentsListMessage,
  5733: HaapiConfirmationMessage,
  9294: PrismsInfoValidMessage,
  2440: InviteInHavenBagOfferMessage,
  268: HavenBagPackListMessage,
  4473: CharacterDeletionErrorMessage,
  6373: HavenBagFurnituresMessage,
  2842: AcquaintancesListMessage,
  2236: ExchangeStartedTaxCollectorShopMessage,
  1802: GuildHouseRemoveMessage,
  5016: TreasureHuntFinishedMessage,
  518: HaapiBufferListMessage,
  3987: WrapperObjectAssociatedMessage,
  7574: ObjectDeletedMessage,
  7777: PartyMemberEjectedMessage,
  9668: ExchangeMountsStableRemoveMessage,
  389: AllianceCreationStartedMessage,
  3751: InventoryWeightMessage,
  24: MountDataErrorMessage,
  6336: ExchangeMoneyMovementInformationMessage,
  2988: ZaapRespawnUpdatedMessage,
  264: ExchangeMultiCraftCrafterCanUseHisRessourcesMessage,
  5030: InvalidPresetsMessage,
  2325: PresetSaveErrorMessage,
  6301: GuildInformationsMemberUpdateMessage,
  7302: ExchangeStartedWithStorageMessage,
  4009: TeleportToBuddyOfferMessage,
  5410: PartyLoyaltyStatusMessage,
  863: PopupWarningClosedMessage,
  890: JobCrafterDirectoryRemoveMessage,
  3598: ExchangeObjectModifiedMessage,
  6030: AnomalySubareaInformationResponseMessage,
  4074: FriendAddFailureMessage,
  8105: GuildListApplicationModifiedMessage,
  1606: HavenBagRoomUpdateMessage,
  9541: BulletinMessage,
  981: GuildBulletinMessage,
  585: PartyUpdateLightMessage,
  6717: BreachInvitationOfferMessage,
  1218: GuildJoinedMessage,
  6499: GuildMembershipMessage,
  3082: SubscriptionZoneMessage,
  3778: GameFightPlacementSwapPositionsErrorMessage,
  7870: ExchangeReplyTaxVendorMessage,
  8808: PresetUseResultMessage,
  4124: IdentificationFailedBannedMessage,
  3565: BreachRewardsMessage,
  5921: ObjectAveragePricesMessage,
  9308: GuildHousesInformationMessage,
  5348: DisplayNumericalValuePaddockMessage,
  1774: MountEquipedErrorMessage,
  8883: AchievementRewardErrorMessage,
  2066: ChallengeFightJoinRefusedMessage,
  419: GuildMemberLeavingMessage,
  7772: ForgettableSpellEquipmentSlotsMessage,
  6276: GameActionSpamMessage,
  7669: GuildLevelUpMessage,
  1981: AllianceJoinedMessage,
  7592: NumericWhoIsMessage,
  2955: ExchangeBidSearchOkMessage,
  3451: PaddockToSellListMessage,
  2198: HavenBagDailyLoteryMessage,
  5759: GuildRecruitmentInvalidateMessage,
  582: PurchasableDialogMessage,
  6010: AlignmentWarEffortDonationResultMessage,
  4427: AllianceMotdMessage,
  2090: GameRolePlayArenaLeagueRewardsMessage,
  2684: GameRolePlayShowActorWithEventMessage,
  5003: HaapiAuthErrorMessage,
  1436: PartyDeletedMessage,
  2464: GuildFactsMessage,
  6925: GuildInAllianceFactsMessage,
  9533: HouseBuyResultMessage,
  4698: SystemMessageDisplayMessage,
  8414: GameMapSpeedMovementMessage,
  5031: ExchangeBidHouseInListUpdatedMessage,
  6240: AllianceModificationStartedMessage,
  1528: GameRolePlayArenaRegistrationWarningMessage,
  2526: ExchangeMountsTakenFromPaddockMessage,
  2853: RecycleResultMessage,
  8938: HaapiTokenMessage,
  547: CurrentServerStatusUpdateMessage,
  8807: PartyCannotJoinErrorMessage,
  129: AllianceGuildLeavingMessage,
  5086: GuildInvitationStateRecruterMessage,
  1938: IgnoredListMessage,
  6480: IgnoredAddedMessage,
  7474: EntityInformationMessage,
  4607: AchievementListMessage,
  2084: AlignmentWarEffortProgressionMessage,
  6703: GuildHouseUpdateInformationMessage,
  5244: MountDataMessage,
  5848: NpcDialogCreationMessage,
  2919: PortalDialogCreationMessage,
  5200: PrismSetSabotagedRefusedMessage,
  5922: MountSetMessage,
  1943: PartyInvitationCancelledForGuestMessage,
  2567: ExchangeCraftCountModifiedMessage,
  968: ExchangeSellOkMessage,
  2607: GuildCreationStartedMessage,
  1198: MimicryObjectPreviewMessage,
  7026: NotificationListMessage,
  728: StorageObjectUpdateMessage,
  6129: CharactersListErrorMessage,
  7620: JobCrafterDirectoryListMessage,
  2273: EditHavenBagFinishedMessage,
  3961: StatedElementUpdatedMessage,
  7517: IdolPartyRefreshMessage,
  159: ClientYouAreDrunkMessage,
  5698: GameContextCreateErrorMessage,
  80: ObjectQuantityMessage,
  6501: CharacterLevelUpMessage,
  2461: CharacterLevelUpInformationMessage,
  2986: GuildMemberWarnOnConnectionStateMessage,
  2011: FriendUpdateMessage,
  3186: HavenBagPermissionsUpdateMessage,
  2775: AuthenticationTicketRefusedMessage,
  5303: AchievementDetailsMessage,
  4589: TaxCollectorMovementMessage,
  738: AlliancePrismDialogQuestionMessage,
  9985: ExchangeStartOkMountWithOutPaddockMessage,
  4513: TreasureHuntMessage,
  2123: ExchangeStartedWithPodsMessage,
  2533: GameRolePlayArenaFightPropositionMessage,
  1592: StartupActionAddMessage,
  9563: PrismFightRemovedMessage,
  3384: ItemNoMoreAvailableMessage,
  5967: ChatServerWithObjectMessage,
  6509: TaxCollectorMovementAddMessage,
  8805: EvolutiveObjectRecycleResultMessage,
  6e3: MoodSmileyResultMessage,
  5486: HaapiSessionMessage,
  9690: ExchangeStartOkMountMessage,
  3768: DocumentReadingBeginMessage,
  7180: ServerExperienceModificatorMessage,
  1705: ExchangeKamaModifiedMessage,
  2204: IdentificationSuccessWithLoginTokenMessage,
  1157: GameRolePlayDelayedObjectUseMessage,
  344: CharacterCapabilitiesMessage,
  6835: PaddockBuyResultMessage,
  4954: AllianceCreationResultMessage,
  9876: PartyMemberInBreachFightMessage,
  4910: PartyNameUpdateMessage,
  6394: StartupActionFinishedMessage,
  4055: ExchangeStartOkNpcTradeMessage,
  5479: ChatErrorMessage,
  5258: HouseGuildRightsMessage,
  2874: DungeonKeyRingUpdateMessage,
  300: PrismFightAttackerRemoveMessage,
  1278: AllianceLeftMessage,
  7918: AllianceInvitationStateRecrutedMessage,
  9154: ExchangeStartOkCraftWithInformationMessage,
  5361: MountUnSetMessage,
  1527: MountXpRatioMessage,
  4771: JobExperienceMultiUpdateMessage,
  2577: AlmanachCalendarDateMessage,
  9873: ContactLookErrorMessage,
  2793: ObjectModifiedMessage,
  5653: ExchangeWeightMessage,
  1263: PartyNewGuestMessage,
  6739: HelloConnectMessage,
  433: FriendStatusShareStateMessage,
  9562: HouseGuildNoneMessage,
  9930: ChatServerCopyWithObjectMessage,
  6231: MountRidingMessage,
  5661: ShortcutBarRemoveErrorMessage,
  4041: ChannelEnablingChangeMessage,
  9899: PartyNameSetErrorMessage,
  519: GameFightPlacementSwapPositionsOfferMessage,
  3553: AllianceInsiderInfoMessage,
  4515: HouseToSellListMessage,
  3950: BreachRewardBoughtMessage,
  4810: ExchangeMountFreeFromPaddockMessage,
  9261: EnabledChannelsMessage,
  5054: CinematicMessage,
  1146: ExchangeStartOkJobIndexMessage,
  3019: GameFightPlacementPossiblePositionsMessage,
  9221: CharacterSelectedErrorMessage,
  5437: AccountLinkRequiredMessage,
  2669: AchievementRewardSuccessMessage,
  970: MigratedServerListMessage,
  4432: CompassResetMessage,
  1851: ExchangeObjectRemovedFromBagMessage,
  2536: PartyJoinMessage,
  8233: WatchInventoryContentMessage,
  4689: StorageKamasUpdateMessage,
  3951: HouseSellingUpdateMessage,
  5103: ShortcutBarReplacedMessage,
  8266: JobBookSubscriptionMessage,
  2594: PrismSettingsErrorMessage,
  7556: ExchangeCraftResultWithObjectIdMessage,
  5114: BreachKickResponseMessage,
  8493: SpouseInformationsMessage,
  9648: HaapiBuyValidationMessage,
  1427: TitleLostMessage,
  4820: PresetSavedMessage,
  1847: ExchangeStartOkRunesTradeMessage,
  4458: ShortcutBarRefreshMessage,
  6497: DungeonKeyRingMessage,
  9521: TeleportOnSameMapMessage,
  5345: GuildPlayerNoApplicationInformationMessage,
  117: TreasureHuntShowLegendaryUIMessage,
  8664: ChatSmileyExtraPackListMessage,
  1411: ServerStatusUpdateMessage,
  9150: TeleportBuddiesMessage,
  2736: AlignmentWarEffortDonatePreviewMessage,
  1408: GoldAddedMessage,
  7352: FriendWarnOnLevelGainStateMessage,
  5503: GuildListMessage,
  3164: RecruitmentInformationMessage,
  7560: PresetDeleteResultMessage,
  470: ExchangeItemAutoCraftStopedMessage,
  6446: ExchangeErrorMessage,
  7379: PrismFightStateUpdateMessage,
  2234: ExchangeMountSterilizeFromPaddockMessage,
  4728: TaxCollectorAttackedMessage,
  298: ServerSettingsMessage,
  6756: AcquaintanceAddedMessage,
  4970: StorageObjectRemoveMessage,
  414: FollowedQuestsMessage,
  646: ServerSessionConstantsMessage,
  2640: DungeonPartyFinderAvailableDungeonsMessage,
  428: CharacterNameSuggestionSuccessMessage,
  8791: GameMapNoMovementMessage,
  1654: MountEmoteIconUsedOkMessage,
  475: QuestStartedMessage,
  7698: MountRenamedMessage,
  6503: ExchangeObjectsAddedMessage,
  1036: GuestLimitationMessage,
  145: ExchangeObjectsModifiedMessage,
  1930: WrapperObjectErrorMessage,
  5525: ExchangeRequestedMessage,
  9612: ExchangeRequestedTradeMessage,
  7338: IdolFightPreparationUpdateMessage,
  1782: ShortcutBarAddErrorMessage,
  7348: IdolSelectedMessage,
  9011: ExchangeStartOkHumanVendorMessage,
  8619: FriendDeleteResultMessage,
  1706: PresetsMessage,
  5570: ObjectsQuantityMessage,
  5565: QuestObjectiveValidatedMessage,
  2660: GameRolePlayAggressionMessage,
  3627: GuildInformationsMembersMessage,
  2982: SetUpdateMessage,
  3903: ExchangeMountsPaddockAddMessage,
  4524: CharacterExperienceGainMessage,
  3236: PrismsListMessage,
  2634: PrismsListUpdateMessage,
  5147: EntitiesInformationMessage,
  596: FinishMoveListMessage,
  4439: PartyModifiableStatusMessage,
  5477: JobExperienceOtherPlayerUpdateMessage,
  310: GuildModificationStartedMessage,
  6433: PartyRestrictedMessage,
  8878: NicknameRegistrationMessage,
  1223: GuildListApplicationAnswerMessage,
  9473: GameContextRemoveElementWithEventMessage,
  2157: GameRolePlayPlayerFightFriendlyRequestedMessage,
  9937: UpdateMountCharacteristicsMessage,
  5087: ShortcutBarRemovedMessage,
  1868: ExchangeBuyOkMessage,
  5501: LifePointsRegenEndMessage,
  4950: GameContextCreateMessage,
  111: PlayerStatusUpdateErrorMessage,
  998: GameFightPlacementSwapPositionsCancelledMessage,
  5611: ConsoleCommandsListMessage,
  798: StartupActionsListMessage,
  5927: TaxCollectorMovementRemoveMessage,
  4779: AreaFightModificatorUpdateMessage,
  3610: ExchangeBidHouseInListRemovedMessage,
  9529: AllianceBulletinSetErrorMessage,
  9143: ForgettableSpellDeleteMessage,
  5619: DebtsDeleteMessage,
  6242: ExchangeCraftResultMagicWithObjectDescMessage,
  8922: TitleSelectedMessage,
  3549: AbstractGameActionWithAckMessage,
  5455: ExchangeBidHouseItemRemoveOkMessage,
  9128: WatchQuestListMessage,
  7637: OrnamentSelectedMessage,
  4399: GuildSummaryMessage,
  4021: AllianceBulletinMessage,
  9392: ObjectAveragePricesErrorMessage,
  2217: PresetUseResultWithMissingIdsMessage,
  4098: OrnamentSelectErrorMessage,
  5628: GameContextMoveElementMessage,
  6681: ExchangeTypesItemsExchangerDescriptionForUserMessage,
  6666: FriendsListMessage,
  2031: PrismInfoCloseMessage,
  9481: PrismFightDefenderLeaveMessage,
  7689: GameRolePlayPlayerLifeStatusMessage,
  8244: FriendGuildWarnOnAchievementCompleteStateMessage,
  2727: WatchQuestStepInfoMessage,
  3262: BreachInvitationCloseMessage,
  7958: LockableStateUpdateHouseDoorMessage,
  7880: PaddockSellBuyDialogMessage,
  2595: ExchangeOkMultiCraftMessage,
  4369: ExchangeWaitingResultMessage,
  33: GuildApplicationIsAnsweredMessage,
  5949: AlreadyConnectedMessage,
  8384: NpcDialogQuestionMessage,
  9167: EmotePlayErrorMessage,
  6062: GameRolePlayDelayedActionFinishedMessage,
  7999: ContactAddFailureMessage,
  7324: CharacterAlignmentWarEffortProgressionMessage,
  6676: AtlasPointInformationsMessage,
  9430: GuestModeMessage,
  3421: ObjectMovementMessage,
  3222: LockableCodeResultMessage,
  9490: ExchangeMountStableErrorMessage,
  4301: GuildFightPlayersEnemyRemoveMessage,
  5776: BreachStateMessage,
  8015: GuildInformationsGeneralMessage,
  2991: TeleportToBuddyCloseMessage,
  1689: BreachBonusMessage,
  282: ExchangeStartOkMulticraftCrafterMessage,
  2502: ExchangeShopStockStartedMessage,
  7278: BasicTimeMessage,
  4167: ZaapDestinationsMessage,
  2887: GuildInfosUpgradeMessage,
  7844: ExchangeBidHouseItemAddOkMessage,
  4323: GameRolePlayArenaRegistrationStatusMessage,
  6677: PartyEntityUpdateLightMessage,
  2401: GameContextMoveMultipleElementsMessage,
  4806: PartyFollowStatusUpdateMessage,
  5778: PrismFightAddedMessage,
  2377: ItemForPresetUpdateMessage,
  7853: SetCharacterRestrictionsMessage,
  8439: PartyKickedByMessage,
  6142: QuestStepStartedMessage,
  813: AllianceMembershipMessage,
  5490: InviteInHavenBagClosedMessage,
  7602: ExchangeBidHouseGenericItemAddedMessage,
  7764: AlignmentRankUpdateMessage,
  2038: AccessoryPreviewErrorMessage,
  6158: CharacterSelectedForceMessage,
  4628: GuildFactsRequestMessage,
  7137: ClientKeyMessage,
  3297: NicknameChoiceRequestMessage,
  8146: AllianceFactsRequestMessage,
  5838: TeleportHavenBagRequestMessage,
  4770: GameMapChangeOrientationRequestMessage,
  8267: ExchangeRequestOnTaxCollectorMessage,
  4359: ExchangeOnHumanVendorRequestMessage,
  9589: ExchangeBuyMessage,
  8214: EnterHavenBagRequestMessage,
  1147: ErrorMapNotFoundMessage,
  289: ExchangeRequestMessage,
  2400: ExchangePlayerRequestMessage,
  6364: GameRolePlayPlayerFightRequestMessage,
  6947: ExchangePlayerMultiCraftRequestMessage,
  5229: ExchangeObjectMoveMessage,
  1384: ExchangeObjectMovePricedMessage,
  6819: ExchangeStartAsVendorMessage,
  1831: PortalUseRequestMessage,
  5196: ExchangeSellMessage,
  2760: GameRolePlayFreeSoulRequestMessage,
  6682: LeaveDialogRequestMessage,
  597: TeleportHavenBagAnswerMessage,
  188: KickHavenBagRequestMessage,
  1598: NpcGenericActionRequestMessage,
  598: GameRolePlayTaxCollectorFightRequestMessage,
  9468: GameRolePlayPlayerFightFriendlyAnswerMessage,
  673: ExchangeShowVendorTaxMessage,
  67: ExchangeRequestOnShopStockMessage,
  4012: HouseTeleportRequestMessage,
  535: FriendJoinRequestMessage,
  8825: FriendSpouseFollowWithCompassRequestMessage,
  2825: SocialNoticeSetRequestMessage,
  7121: GuildBulletinSetRequestMessage,
  8207: GuildSpellUpgradeRequestMessage,
  3240: GuildCharacsUpgradeRequestMessage,
  2446: SpouseGetInformationsMessage,
  9760: WarnOnPermaDeathMessage,
  5805: GuildGetInformationsMessage,
  6228: FriendSetWarnOnConnectionMessage,
  4403: IgnoredGetListMessage,
  789: PaginationRequestAbstractMessage,
  2316: GuildListApplicationRequestMessage,
  3391: GuildMotdSetRequestMessage,
  4147: GuildMemberSetWarnOnConnectionMessage,
  5404: GuildApplicationAnswerMessage,
  2264: IgnoredDeleteRequestMessage,
  3633: GuildChangeMemberParametersMessage,
  3169: UpdateRecruitmentInformationMessage,
  9050: GuildFightJoinRequestMessage,
  7400: FriendDeleteRequestMessage,
  9165: ContactLookRequestMessage,
  7749: ContactLookRequestByIdMessage,
  6214: FriendAddRequestMessage,
  1504: PlayerStatusUpdateRequestMessage,
  7914: GuildPaddockTeleportRequestMessage,
  2801: IgnoredAddRequestMessage,
  9896: GuildDeleteApplicationRequestMessage,
  6940: GuildUpdateApplicationMessage,
  1404: FriendSetStatusShareMessage,
  3965: GuildKickRequestMessage,
  9375: GuildApplicationListenMessage,
  6478: GuildJoinAutomaticallyRequestMessage,
  5666: GuildInvitationSearchMessage,
  2644: FriendGuildSetWarnOnAchievementCompleteMessage,
  9211: GuildSummaryRequestMessage,
  2715: GuildInvitationMessage,
  7226: GuildGetPlayerApplicationMessage,
  5074: GuildFightLeaveRequestMessage,
  4271: AcquaintancesGetListMessage,
  3542: FriendSpouseJoinRequestMessage,
  4065: FriendSetWarnOnLevelGainMessage,
  9276: GuildSubmitApplicationMessage,
  3044: FriendsGetListMessage,
  1932: GuildFightTakePlaceRequestMessage,
  3461: PopupWarningCloseRequestMessage,
  1037: ChatAbstractClientMessage,
  1814: ChatClientPrivateMessage,
  1043: ChatClientPrivateWithObjectMessage,
  610: MoodSmileyRequestMessage,
  9062: ChatSmileyRequestMessage,
  9201: ChatCommunityChannelSetCommunityRequestMessage,
  1784: BasicWhoIsRequestMessage,
  1382: ChatClientMultiMessage,
  1682: ChatClientMultiWithObjectMessage,
  499: ChannelEnablingMessage,
  4159: NumericWhoIsRequestMessage,
  8034: PartyPledgeLoyaltyRequestMessage,
  8603: PartyFollowMemberRequestMessage,
  4755: PartyFollowThisMemberRequestMessage,
  9701: DungeonPartyFinderAvailableDungeonsRequestMessage,
  1520: PartyRefuseInvitationMessage,
  3956: PartyNameSetRequestMessage,
  1964: PartyLeaveRequestMessage,
  5687: TeleportToBuddyAnswerMessage,
  5799: GameRolePlayArenaFightAnswerMessage,
  6752: PartyAbdicateThroneMessage,
  5975: BreachInvitationAnswerMessage,
  5010: GameRolePlayArenaRegisterMessage,
  6419: PartyInvitationRequestMessage,
  8528: PartyInvitationArenaRequestMessage,
  1266: DungeonPartyFinderListenRequestMessage,
  474: PartyInvitationDetailsRequestMessage,
  7066: PartyCancelInvitationMessage,
  8333: PartyInvitationDungeonRequestMessage,
  2723: DungeonPartyFinderRegisterRequestMessage,
  3857: GameRolePlayArenaUnregisterMessage,
  866: PartyAcceptInvitationMessage,
  9834: PartyStopFollowRequestMessage,
  6075: PartyKickRequestMessage,
  7653: PrismFightJoinLeaveRequestMessage,
  8342: PrismSettingsRequestMessage,
  1648: AllianceKickRequestMessage,
  6247: PrismInfoJoinLeaveRequestMessage,
  4070: PrismFightSwapRequestMessage,
  1746: PrismSetSabotagedRequestMessage,
  8164: PrismUseRequestMessage,
  7195: PrismModuleExchangeRequestMessage,
  3626: SetEnableAVARequestMessage,
  4105: PrismsListRegisterMessage,
  3707: AllianceMotdSetRequestMessage,
  2686: PrismAttackRequestMessage,
  8453: AllianceChangeGuildRightsMessage,
  645: AllianceBulletinSetRequestMessage,
  9591: AllianceInsiderInfoRequestMessage,
  235: AllianceInvitationMessage,
  4305: ShowCellRequestMessage,
  6692: GameFightTurnFinishMessage,
  685: GameMapMovementRequestMessage,
  8001: GameActionFightCastOnTargetRequestMessage,
  4946: GameActionFightCastRequestMessage,
  2738: FinishMoveSetRequestMessage,
  2551: FinishMoveListRequestMessage,
  4887: SpellVariantActivationRequestMessage,
  644: GameContextQuitMessage,
  8276: BreachRoomUnlockRequestMessage,
  2995: BreachRewardBuyMessage,
  4948: BreachExitRequestMessage,
  2909: BreachKickRequestMessage,
  7544: BreachInvitationRequestMessage,
  8749: EditHavenBagRequestMessage,
  7038: ChangeHavenBagRoomRequestMessage,
  5731: EditHavenBagCancelRequestMessage,
  8486: HavenBagFurnituresRequestMessage,
  2106: HavenBagPermissionsUpdateRequestMessage,
  3811: OpenHavenBagFurnitureSequenceRequestMessage,
  3890: CloseHavenBagFurnitureSequenceRequestMessage,
  8958: ChangeThemeRequestMessage,
  9491: ExitHavenBagRequestMessage,
  8862: HouseKickIndoorMerchantRequestMessage,
  6519: GameFightJoinRequestMessage,
  5499: GameFightPlacementPositionRequestMessage,
  7699: GameFightPlacementSwapPositionsRequestMessage,
  2712: GameContextKickMessage,
  7054: GameFightPlacementSwapPositionsCancelMessage,
  3480: GameFightReadyMessage,
  2140: GameFightPlacementSwapPositionsAcceptMessage,
  1: NotificationResetMessage,
  5562: QuestStepInfoRequestMessage,
  8640: WatchQuestStepInfoRequestMessage,
  3466: UnfollowQuestObjectiveRequestMessage,
  6823: TreasureHuntFlagRemoveRequestMessage,
  9576: TreasureHuntFlagRequestMessage,
  2230: GuidedModeReturnRequestMessage,
  6283: TreasureHuntLegendaryRequestMessage,
  6012: GuidedModeQuitRequestMessage,
  2962: TreasureHuntGiveUpRequestMessage,
  6533: QuestListRequestMessage,
  8182: FollowQuestObjectiveRequestMessage,
  3165: AchievementRewardRequestMessage,
  8604: NotificationUpdateFlagMessage,
  7368: QuestObjectiveValidationMessage,
  5136: AchievementDetailsRequestMessage,
  1088: RefreshFollowedQuestsOrderRequestMessage,
  6071: QuestStartRequestMessage,
  5957: AchievementDetailedListRequestMessage,
  3810: AchievementAlmostFinishedDetailedListRequestMessage,
  6219: TreasureHuntDigRequestMessage,
  9517: AuthenticationTicketMessage,
  3123: CharacterSelectionMessage,
  2652: CharacterSelectionWithRemodelMessage,
  1828: CharacterNameSuggestionRequestMessage,
  6390: CharacterSelectedForceReadyMessage,
  1501: CharactersListRequestMessage,
  5026: CharacterCreationRequestMessage,
  6208: CharacterCanBeCreatedRequestMessage,
  9614: CharacterReplayRequestMessage,
  3832: CharacterReplayWithRemodelRequestMessage,
  8408: StartupActionsObjetAttributionMessage,
  8834: StartupActionsExecuteMessage,
  3196: CharacterFirstSelectionMessage,
  5310: GameContextCreateRequestMessage,
  8394: CharacterDeletionRequestMessage,
  9528: AcquaintanceSearchMessage,
  214: ServerSelectionMessage,
  6281: CheckFileMessage,
  9708: ResetCharacterStatsRequestMessage,
  327: StatsUpgradeRequestMessage,
  2956: StartupActionsAllAttributionMessage,
  456: PaddockToSellListRequestMessage,
  8388: PaddockToSellFilterMessage,
  1679: HouseToSellListRequestMessage,
  3571: HouseToSellFilterMessage,
  400: AdminQuietCommandMessage,
  4228: SetEnablePVPRequestMessage,
  9582: CharacterAlignmentWarEffortProgressionRequestMessage,
  5249: AlignmentWarEffortDonateRequestMessage,
  5727: AlignmentWarEffortProgressionRequestMessage,
  1653: ObjectAveragePricesGetMessage,
  2403: ReloginTokenRequestMessage,
  5877: AnomalySubareaInformationRequestMessage,
  4572: ZaapRespawnSaveRequestMessage,
  1539: TeleportRequestMessage,
  6260: JobCrafterDirectoryDefineSettingsMessage,
  4809: JobBookSubscribeRequestMessage,
  5786: JobCrafterDirectoryListRequestMessage,
  5412: ExchangeObjectUseInWorkshopMessage,
  6235: ExchangeReplayStopMessage,
  7316: ExchangeCraftCountRequestMessage,
  4258: ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage,
  5785: ExchangeCraftPaymentModificationRequestMessage,
  1333: ExchangeSetCraftRecipeMessage,
  9275: MountSetXpRatioRequestMessage,
  9897: MountHarnessDissociateRequestMessage,
  6636: MountInformationInPaddockRequestMessage,
  5543: MountReleaseRequestMessage,
  7947: MountHarnessColorsUpdateRequestMessage,
  8042: MountRenameRequestMessage,
  8131: MountFeedRequestMessage,
  9421: ExchangeHandleMountsMessage,
  8145: ExchangeRequestOnMountStockMessage,
  2112: MountInformationRequestMessage,
  8445: MountToggleRidingRequestMessage,
  590: MountSterilizeRequestMessage,
  5595: HouseGuildShareRequestMessage,
  8499: HouseKickRequestMessage,
  9330: HouseSellRequestMessage,
  768: LockableChangeCodeMessage,
  3448: HouseLockFromInsideRequestMessage,
  4286: HouseBuyRequestMessage,
  5075: HouseSellFromInsideRequestMessage,
  7124: HouseGuildRightsViewMessage,
  4149: OrnamentSelectRequestMessage,
  350: TitlesAndOrnamentsListRequestMessage,
  8025: TitleSelectRequestMessage,
  3688: PresetDeleteRequestMessage,
  3065: ObjectUseMessage,
  1126: ObjectUseMultipleMessage,
  5971: ObjectDropMessage,
  4898: IconPresetSaveRequestMessage,
  8129: IconNamedPresetSaveRequestMessage,
  8147: ObjectDeleteMessage,
  35: AccessoryPreviewRequestMessage,
  906: ShortcutBarRemoveRequestMessage,
  8768: ObjectUseOnCharacterMessage,
  709: ShortcutBarSwapRequestMessage,
  5623: ObjectUseOnCellMessage,
  9513: ShortcutBarAddRequestMessage,
  478: IdolsPresetSaveRequestMessage,
  1855: PresetUseRequestMessage,
  5107: ObjectSetPositionMessage,
  3195: ExchangeBidHouseBuyMessage,
  8992: ExchangeBidHousePriceMessage,
  6250: ExchangeBidHouseSearchMessage,
  2675: ExchangeBidHouseListMessage,
  4445: ExchangeBidHouseTypeMessage,
  3929: ExchangeObjectModifyPricedMessage,
  4030: StopToListenRunningFightRequestMessage,
  9098: GameFightSpectatePlayerRequestMessage,
  8028: MapRunningFightDetailsRequestMessage,
  1407: MapRunningFightListRequestMessage,
  3024: ExchangeAcceptMessage,
  5849: ExchangeReadyMessage,
  2904: FocusedExchangeReadyMessage,
  4409: GameMapMovementCancelMessage,
  3431: ChangeMapMessage,
  1760: GameCautiousMapMovementRequestMessage,
  9714: InteractiveUseRequestMessage,
  6220: InteractiveUseWithParamRequestMessage,
  3767: GameRolePlayAttackMonsterRequestMessage,
  8420: GameMapMovementConfirmMessage,
  427: ExchangeObjectMoveKamaMessage,
  7123: ExchangeObjectTransfertExistingToInvMessage,
  3871: ExchangeObjectTransfertListFromInvMessage,
  8392: ExchangeObjectTransfertAllToInvMessage,
  1721: ExchangeObjectTransfertListToInvMessage,
  5493: ExchangeObjectTransfertListWithQuantityToInvMessage,
  9957: ExchangeObjectTransfertAllFromInvMessage,
  8876: ExchangeObjectTransfertExistingFromInvMessage,
  398: NpcDialogReplyMessage,
  8638: PaddockBuyRequestMessage,
  2370: PaddockSellRequestMessage,
  8895: GuildInvitationAnswerMessage,
  3249: GuildModificationEmblemValidMessage,
  7329: GuildModificationValidMessage,
  5982: GuildModificationNameValidMessage,
  1395: GuildCreationValidMessage,
  932: DiceRollRequestMessage,
  3499: TeleportBuddiesAnswerMessage,
  6962: AllianceInvitationAnswerMessage,
  8950: AllianceModificationNameAndTagValidMessage,
  5504: AllianceCreationValidMessage,
  4144: AllianceModificationValidMessage,
  8937: AllianceModificationEmblemValidMessage,
  5093: IdolSelectRequestMessage,
  868: IdolPartyRegisterRequestMessage,
  6523: ForgettableSpellClientActionMessage,
  9127: ActivityHideRequestMessage,
  2540: ActivitySuggestionsRequestMessage,
  579: ActivityLockRequestMessage,
  9520: HaapiBufferListRequestMessage,
  5599: HaapiConfirmationRequestMessage,
  3479: HaapiCancelBidRequestMessage,
  4578: HaapiShopApiKeyRequestMessage,
  3931: HaapiValidationRequestMessage,
  7220: HaapiTokenRequestMessage,
  7621: HaapiConsumeBufferRequestMessage,
  1059: SequenceNumberMessage,
  7679: LivingObjectChangeSkinRequestMessage,
  7604: SymbioticObjectAssociateRequestMessage,
  2549: MimicryObjectFeedAndAssociateRequestMessage,
  9634: WrapperObjectDissociateRequestMessage,
  3575: MimicryObjectEraseRequestMessage,
  9254: LivingObjectDissociateMessage,
  5845: ObjectFeedMessage,
  2382: GameFightOptionToggleMessage,
  5618: LockableUseCodeMessage,
  1281: BasicWhoAmIRequestMessage,
  514: BasicStatMessage,
  1144: BasicStatWithDataMessage,
  6564: PartyLocateMembersRequestMessage,
  4808: ContactLookRequestByNameMessage,
  3858: JobCrafterDirectoryEntryRequestMessage
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AbstractCharacterInformation,
  AbstractContactInformations,
  AbstractFightDispellableEffect,
  AbstractFightTeamInformations,
  AbstractGameActionFightTargetedAbilityMessage,
  AbstractGameActionMessage,
  AbstractGameActionWithAckMessage,
  AbstractPartyEventMessage,
  AbstractPartyMemberInFightMessage,
  AbstractPartyMessage,
  AbstractPlayerSearchInformation,
  AbstractSocialGroupInfos,
  AbstractTaxCollectorListMessage,
  AccessoryPreviewErrorEnum,
  AccessoryPreviewErrorMessage,
  AccessoryPreviewMessage,
  AccessoryPreviewRequestMessage,
  AccountCapabilitiesMessage,
  AccountHouseInformations,
  AccountHouseMessage,
  AccountInformationsUpdateMessage,
  AccountLinkRequiredMessage,
  AccountLoggingKickedMessage,
  AccountTagInformation,
  Achievement,
  AchievementAchieved,
  AchievementAchievedRewardable,
  AchievementAlmostFinishedDetailedListMessage,
  AchievementAlmostFinishedDetailedListRequestMessage,
  AchievementDetailedListMessage,
  AchievementDetailedListRequestMessage,
  AchievementDetailsMessage,
  AchievementDetailsRequestMessage,
  AchievementFinishedInformationMessage,
  AchievementFinishedMessage,
  AchievementListMessage,
  AchievementObjective,
  AchievementRewardErrorMessage,
  AchievementRewardRequestMessage,
  AchievementRewardSuccessMessage,
  AchievementStartedObjective,
  AcquaintanceAddedMessage,
  AcquaintanceInformation,
  AcquaintanceOnlineInformation,
  AcquaintanceSearchErrorMessage,
  AcquaintanceSearchMessage,
  AcquaintanceServerListMessage,
  AcquaintancesGetListMessage,
  AcquaintancesListMessage,
  ActivityHideRequestMessage,
  ActivityLockRequestMessage,
  ActivitySuggestionsMessage,
  ActivitySuggestionsRequestMessage,
  ActorAlignmentInformations,
  ActorExtendedAlignmentInformations,
  ActorOrientation,
  ActorRestrictionsInformations,
  AdditionalTaxCollectorInformations,
  AdminCommandMessage,
  AdminQuietCommandMessage,
  AggressableStatusEnum,
  AlignmentRankUpdateMessage,
  AlignmentSideEnum,
  AlignmentWarEffortDonatePreviewMessage,
  AlignmentWarEffortDonateRequestMessage,
  AlignmentWarEffortDonationResultEnum,
  AlignmentWarEffortDonationResultMessage,
  AlignmentWarEffortInformation,
  AlignmentWarEffortProgressionMessage,
  AlignmentWarEffortProgressionRequestMessage,
  AllianceBulletinMessage,
  AllianceBulletinSetErrorMessage,
  AllianceBulletinSetRequestMessage,
  AllianceChangeGuildRightsMessage,
  AllianceCreationResultMessage,
  AllianceCreationStartedMessage,
  AllianceCreationValidMessage,
  AllianceFactSheetInformations,
  AllianceFactsErrorMessage,
  AllianceFactsMessage,
  AllianceFactsRequestMessage,
  AllianceGuildLeavingMessage,
  AllianceInformations,
  AllianceInsiderInfoMessage,
  AllianceInsiderInfoRequestMessage,
  AllianceInsiderPrismInformation,
  AllianceInvitationAnswerMessage,
  AllianceInvitationMessage,
  AllianceInvitationStateRecrutedMessage,
  AllianceInvitationStateRecruterMessage,
  AllianceInvitedMessage,
  AllianceJoinedMessage,
  AllianceKickRequestMessage,
  AllianceLeftMessage,
  AllianceListMessage,
  AllianceMembershipMessage,
  AllianceModificationEmblemValidMessage,
  AllianceModificationNameAndTagValidMessage,
  AllianceModificationStartedMessage,
  AllianceModificationValidMessage,
  AllianceMotdMessage,
  AllianceMotdSetErrorMessage,
  AllianceMotdSetRequestMessage,
  AlliancePartialListMessage,
  AlliancePrismDialogQuestionMessage,
  AlliancePrismInformation,
  AlliancePrismModuleTypeEnum,
  AllianceRightsBitEnum,
  AllianceTaxCollectorDialogQuestionExtendedMessage,
  AllianceVersatileInfoListMessage,
  AllianceVersatileInformations,
  AlliancedGuildFactSheetInformations,
  AlmanachCalendarDateMessage,
  AlreadyConnectedMessage,
  AlternativeMonstersInGroupLightInformations,
  AnomalyStateMessage,
  AnomalySubareaInformation,
  AnomalySubareaInformationRequestMessage,
  AnomalySubareaInformationResponseMessage,
  ApplicationPlayerInformation,
  AreaFightModificatorUpdateMessage,
  ArenaFighterIdleMessage,
  ArenaFighterLeaveMessage,
  ArenaLeagueRanking,
  ArenaRankInfos,
  ArenaRanking,
  AtlasPointInformationsMessage,
  AtlasPointsInformations,
  AuthenticationTicketAcceptedMessage,
  AuthenticationTicketMessage,
  AuthenticationTicketRefusedMessage,
  BaseSpawnMonsterInformation,
  BasicAckMessage,
  BasicAllianceInformations,
  BasicCharactersListMessage,
  BasicDateMessage,
  BasicGuildInformations,
  BasicLatencyStatsMessage,
  BasicLatencyStatsRequestMessage,
  BasicNamedAllianceInformations,
  BasicNoOperationMessage,
  BasicPingMessage,
  BasicPongMessage,
  BasicStatMessage,
  BasicStatWithDataMessage,
  BasicTimeMessage,
  BasicWhoAmIRequestMessage,
  BasicWhoIsMessage,
  BasicWhoIsNoMatchMessage,
  BasicWhoIsRequestMessage,
  BidActionEnum,
  BidCancellationEnum,
  BidExchangerObjectInfo,
  BidValidationEnum,
  BoostableCharacteristicEnum,
  BreachBonusMessage,
  BreachBranch,
  BreachBranchesMessage,
  BreachBudgetMessage,
  BreachCharactersMessage,
  BreachEnterMessage,
  BreachExitRequestMessage,
  BreachExitResponseMessage,
  BreachGameFightEndMessage,
  BreachInvitationAnswerMessage,
  BreachInvitationCloseMessage,
  BreachInvitationOfferMessage,
  BreachInvitationRequestMessage,
  BreachInvitationResponseMessage,
  BreachKickRequestMessage,
  BreachKickResponseMessage,
  BreachReward,
  BreachRewardBoughtMessage,
  BreachRewardBuyMessage,
  BreachRewardLockEnum,
  BreachRewardsMessage,
  BreachRoomLockedMessage,
  BreachRoomUnlockEnum,
  BreachRoomUnlockRequestMessage,
  BreachRoomUnlockResultMessage,
  BreachSavedMessage,
  BreachStateMessage,
  BreachTeleportRequestMessage,
  BreachTeleportResponseMessage,
  BreedEnum,
  BufferInformation,
  BuildTypeEnum,
  BulletinMessage,
  ChallengeFightJoinRefusedMessage,
  ChallengeInfoMessage,
  ChallengeResultMessage,
  ChallengeTargetUpdateMessage,
  ChallengeTargetsListMessage,
  ChallengeTargetsListRequestMessage,
  ChangeHavenBagRoomRequestMessage,
  ChangeMapMessage,
  ChangeThemeRequestMessage,
  ChannelEnablingChangeMessage,
  ChannelEnablingMessage,
  CharacterAlignmentWarEffortProgressionMessage,
  CharacterAlignmentWarEffortProgressionRequestMessage,
  CharacterBaseInformations,
  CharacterBasicMinimalInformations,
  CharacterCanBeCreatedRequestMessage,
  CharacterCanBeCreatedResultMessage,
  CharacterCapabilitiesMessage,
  CharacterCharacteristic,
  CharacterCharacteristicDetailed,
  CharacterCharacteristicForPreset,
  CharacterCharacteristicValue,
  CharacterCharacteristics,
  CharacterCharacteristicsInformations,
  CharacterCreationRequestMessage,
  CharacterCreationResultEnum,
  CharacterCreationResultMessage,
  CharacterDeletionErrorEnum,
  CharacterDeletionErrorMessage,
  CharacterDeletionRequestMessage,
  CharacterExperienceGainMessage,
  CharacterFirstSelectionMessage,
  CharacterHardcoreOrEpicInformations,
  CharacterInventoryPositionEnum,
  CharacterLevelUpInformationMessage,
  CharacterLevelUpMessage,
  CharacterLoadingCompleteMessage,
  CharacterMinimalAllianceInformations,
  CharacterMinimalGuildInformations,
  CharacterMinimalGuildPublicInformations,
  CharacterMinimalInformations,
  CharacterMinimalPlusLookAndGradeInformations,
  CharacterMinimalPlusLookInformations,
  CharacterNameSuggestionFailureMessage,
  CharacterNameSuggestionRequestMessage,
  CharacterNameSuggestionSuccessMessage,
  CharacterRemodelingEnum,
  CharacterRemodelingInformation,
  CharacterReplayRequestMessage,
  CharacterReplayWithRemodelRequestMessage,
  CharacterSelectedErrorMessage,
  CharacterSelectedForceMessage,
  CharacterSelectedForceReadyMessage,
  CharacterSelectedSuccessMessage,
  CharacterSelectionMessage,
  CharacterSelectionWithRemodelMessage,
  CharacterSpellModification,
  CharacterSpellModificationTypeEnum,
  CharacterStatsListMessage,
  CharacterToRemodelInformations,
  CharacterUsableCharacteristicDetailed,
  CharactersListErrorMessage,
  CharactersListMessage,
  CharactersListRequestMessage,
  CharactersListWithRemodelingMessage,
  ChatAbstractClientMessage,
  ChatAbstractServerMessage,
  ChatActivableChannelsEnum,
  ChatAdminServerMessage,
  ChatChannelsMultiEnum,
  ChatClientMultiMessage,
  ChatClientMultiWithObjectMessage,
  ChatClientPrivateMessage,
  ChatClientPrivateWithObjectMessage,
  ChatCommunityChannelCommunityMessage,
  ChatCommunityChannelSetCommunityRequestMessage,
  ChatErrorEnum,
  ChatErrorMessage,
  ChatKolizeumServerMessage,
  ChatServerCopyMessage,
  ChatServerCopyWithObjectMessage,
  ChatServerMessage,
  ChatServerWithObjectMessage,
  ChatSmileyExtraPackListMessage,
  ChatSmileyMessage,
  ChatSmileyRequestMessage,
  CheckFileMessage,
  CheckFileRequestMessage,
  CheckIntegrityMessage,
  CinematicMessage,
  ClientKeyMessage,
  ClientUIOpenedByObjectMessage,
  ClientUIOpenedMessage,
  ClientUITypeEnum,
  ClientYouAreDrunkMessage,
  CloseHavenBagFurnitureSequenceRequestMessage,
  CompassResetMessage,
  CompassTypeEnum,
  CompassUpdateMessage,
  CompassUpdatePartyMemberMessage,
  CompassUpdatePvpSeekMessage,
  ConsoleCommandsListMessage,
  ConsoleMessage,
  ConsoleMessageTypeEnum,
  ContactAddFailureMessage,
  ContactLookErrorMessage,
  ContactLookMessage,
  ContactLookRequestByIdMessage,
  ContactLookRequestByNameMessage,
  ContactLookRequestMessage,
  CraftResultEnum,
  CredentialsAcknowledgementMessage,
  CurrentMapInstanceMessage,
  CurrentMapMessage,
  CurrentServerStatusUpdateMessage,
  DebtInformation,
  DebtsDeleteMessage,
  DebtsUpdateMessage,
  DebugClearHighlightCellsMessage,
  DebugHighlightCellsMessage,
  DebugInClientMessage,
  DebugLevelEnum,
  DecraftResultMessage,
  DecraftedItemStackInfo,
  DelayedActionTypeEnum,
  DialogTypeEnum,
  DiceRollRequestMessage,
  DisplayNumericalValuePaddockMessage,
  DocumentReadingBeginMessage,
  DofusMessage,
  DofusType,
  DumpedEntityStatsMessage,
  DungeonKeyRingMessage,
  DungeonKeyRingUpdateMessage,
  DungeonPartyFinderAvailableDungeonsMessage,
  DungeonPartyFinderAvailableDungeonsRequestMessage,
  DungeonPartyFinderListenErrorMessage,
  DungeonPartyFinderListenRequestMessage,
  DungeonPartyFinderPlayer,
  DungeonPartyFinderRegisterErrorMessage,
  DungeonPartyFinderRegisterRequestMessage,
  DungeonPartyFinderRegisterSuccessMessage,
  DungeonPartyFinderRoomContentMessage,
  DungeonPartyFinderRoomContentUpdateMessage,
  EditHavenBagCancelRequestMessage,
  EditHavenBagFinishedMessage,
  EditHavenBagRequestMessage,
  EditHavenBagStartMessage,
  EmoteAddMessage,
  EmoteListMessage,
  EmotePlayAbstractMessage,
  EmotePlayErrorMessage,
  EmotePlayMassiveMessage,
  EmotePlayMessage,
  EmotePlayRequestMessage,
  EmoteRemoveMessage,
  EnabledChannelsMessage,
  EnterHavenBagRequestMessage,
  EntitiesInformationMessage,
  EntitiesPreset,
  EntityDispositionInformations,
  EntityInformation,
  EntityInformationMessage,
  EntityLook,
  EntityMovementInformations,
  EntityTalkMessage,
  ErrorMapNotFoundMessage,
  EvolutiveObjectRecycleResultMessage,
  ExchangeAcceptMessage,
  ExchangeBidHouseBuyMessage,
  ExchangeBidHouseBuyResultMessage,
  ExchangeBidHouseGenericItemAddedMessage,
  ExchangeBidHouseGenericItemRemovedMessage,
  ExchangeBidHouseInListAddedMessage,
  ExchangeBidHouseInListRemovedMessage,
  ExchangeBidHouseInListUpdatedMessage,
  ExchangeBidHouseItemAddOkMessage,
  ExchangeBidHouseItemRemoveOkMessage,
  ExchangeBidHouseListMessage,
  ExchangeBidHousePriceMessage,
  ExchangeBidHouseSearchMessage,
  ExchangeBidHouseTypeMessage,
  ExchangeBidHouseUnsoldItemsMessage,
  ExchangeBidPriceForSellerMessage,
  ExchangeBidPriceMessage,
  ExchangeBidSearchOkMessage,
  ExchangeBuyMessage,
  ExchangeBuyOkMessage,
  ExchangeCraftCountModifiedMessage,
  ExchangeCraftCountRequestMessage,
  ExchangeCraftPaymentModificationRequestMessage,
  ExchangeCraftPaymentModifiedMessage,
  ExchangeCraftResultMagicWithObjectDescMessage,
  ExchangeCraftResultMessage,
  ExchangeCraftResultWithObjectDescMessage,
  ExchangeCraftResultWithObjectIdMessage,
  ExchangeCrafterJobLevelupMessage,
  ExchangeErrorEnum,
  ExchangeErrorMessage,
  ExchangeGuildTaxCollectorGetMessage,
  ExchangeHandleMountStableTypeEnum,
  ExchangeHandleMountsMessage,
  ExchangeIsReadyMessage,
  ExchangeItemAutoCraftStopedMessage,
  ExchangeKamaModifiedMessage,
  ExchangeLeaveMessage,
  ExchangeMoneyMovementInformationMessage,
  ExchangeMountFreeFromPaddockMessage,
  ExchangeMountStableErrorMessage,
  ExchangeMountSterilizeFromPaddockMessage,
  ExchangeMountsPaddockAddMessage,
  ExchangeMountsPaddockRemoveMessage,
  ExchangeMountsStableAddMessage,
  ExchangeMountsStableBornAddMessage,
  ExchangeMountsStableRemoveMessage,
  ExchangeMountsTakenFromPaddockMessage,
  ExchangeMultiCraftCrafterCanUseHisRessourcesMessage,
  ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage,
  ExchangeObjectAddedMessage,
  ExchangeObjectMessage,
  ExchangeObjectModifiedInBagMessage,
  ExchangeObjectModifiedMessage,
  ExchangeObjectModifyPricedMessage,
  ExchangeObjectMoveKamaMessage,
  ExchangeObjectMoveMessage,
  ExchangeObjectMovePricedMessage,
  ExchangeObjectPutInBagMessage,
  ExchangeObjectRemovedFromBagMessage,
  ExchangeObjectRemovedMessage,
  ExchangeObjectTransfertAllFromInvMessage,
  ExchangeObjectTransfertAllToInvMessage,
  ExchangeObjectTransfertExistingFromInvMessage,
  ExchangeObjectTransfertExistingToInvMessage,
  ExchangeObjectTransfertListFromInvMessage,
  ExchangeObjectTransfertListToInvMessage,
  ExchangeObjectTransfertListWithQuantityToInvMessage,
  ExchangeObjectUseInWorkshopMessage,
  ExchangeObjectsAddedMessage,
  ExchangeObjectsModifiedMessage,
  ExchangeObjectsRemovedMessage,
  ExchangeOfflineSoldItemsMessage,
  ExchangeOkMultiCraftMessage,
  ExchangeOnHumanVendorRequestMessage,
  ExchangePlayerMultiCraftRequestMessage,
  ExchangePlayerRequestMessage,
  ExchangePodsModifiedMessage,
  ExchangeReadyMessage,
  ExchangeReplayStopMessage,
  ExchangeReplayStopReasonEnum,
  ExchangeReplyTaxVendorMessage,
  ExchangeRequestMessage,
  ExchangeRequestOnMountStockMessage,
  ExchangeRequestOnShopStockMessage,
  ExchangeRequestOnTaxCollectorMessage,
  ExchangeRequestedMessage,
  ExchangeRequestedTradeMessage,
  ExchangeSellMessage,
  ExchangeSellOkMessage,
  ExchangeSetCraftRecipeMessage,
  ExchangeShopStockMovementRemovedMessage,
  ExchangeShopStockMovementUpdatedMessage,
  ExchangeShopStockMultiMovementRemovedMessage,
  ExchangeShopStockMultiMovementUpdatedMessage,
  ExchangeShopStockStartedMessage,
  ExchangeShowVendorTaxMessage,
  ExchangeStartAsVendorMessage,
  ExchangeStartOkCraftMessage,
  ExchangeStartOkCraftWithInformationMessage,
  ExchangeStartOkEvolutiveObjectRecycleTradeMessage,
  ExchangeStartOkHumanVendorMessage,
  ExchangeStartOkJobIndexMessage,
  ExchangeStartOkMountMessage,
  ExchangeStartOkMountWithOutPaddockMessage,
  ExchangeStartOkMulticraftCrafterMessage,
  ExchangeStartOkMulticraftCustomerMessage,
  ExchangeStartOkNpcShopMessage,
  ExchangeStartOkNpcTradeMessage,
  ExchangeStartOkRecycleTradeMessage,
  ExchangeStartOkRunesTradeMessage,
  ExchangeStartedBidBuyerMessage,
  ExchangeStartedBidSellerMessage,
  ExchangeStartedMessage,
  ExchangeStartedMountStockMessage,
  ExchangeStartedTaxCollectorShopMessage,
  ExchangeStartedWithPodsMessage,
  ExchangeStartedWithStorageMessage,
  ExchangeStoppedMessage,
  ExchangeTypeEnum,
  ExchangeTypesExchangerDescriptionForUserMessage,
  ExchangeTypesItemsExchangerDescriptionForUserMessage,
  ExchangeWaitingResultMessage,
  ExchangeWeightMessage,
  ExitHavenBagRequestMessage,
  ExtendedBreachBranch,
  ExtendedLockedBreachBranch,
  FightAllianceTeamInformations,
  FightCommonInformations,
  FightDispellableEffectExtendedInformations,
  FightDispellableEnum,
  FightEntityDispositionInformations,
  FightExternalInformations,
  FightLoot,
  FightOptionsEnum,
  FightOptionsInformations,
  FightOutcomeEnum,
  FightResultAdditionalData,
  FightResultExperienceData,
  FightResultFighterListEntry,
  FightResultListEntry,
  FightResultMutantListEntry,
  FightResultPlayerListEntry,
  FightResultPvpData,
  FightResultTaxCollectorListEntry,
  FightSpellCastCriticalEnum,
  FightStartingPositions,
  FightTeamInformations,
  FightTeamLightInformations,
  FightTeamMemberCharacterInformations,
  FightTeamMemberEntityInformation,
  FightTeamMemberInformations,
  FightTeamMemberMonsterInformations,
  FightTeamMemberTaxCollectorInformations,
  FightTeamMemberWithAllianceCharacterInformations,
  FightTemporaryBoostEffect,
  FightTemporaryBoostStateEffect,
  FightTemporaryBoostWeaponDamagesEffect,
  FightTemporarySpellBoostEffect,
  FightTemporarySpellImmunityEffect,
  FightTriggeredEffect,
  FightTypeEnum,
  FighterRefusedReasonEnum,
  FighterStatsListMessage,
  FinishMoveInformations,
  FinishMoveListMessage,
  FinishMoveListRequestMessage,
  FinishMoveSetRequestMessage,
  FocusedExchangeReadyMessage,
  FollowQuestObjectiveRequestMessage,
  FollowedQuestsMessage,
  ForgettableSpellClientActionEnum,
  ForgettableSpellClientActionMessage,
  ForgettableSpellDeleteMessage,
  ForgettableSpellEquipmentSlotsMessage,
  ForgettableSpellItem,
  ForgettableSpellListActionEnum,
  ForgettableSpellListUpdateMessage,
  ForgettableSpellsPreset,
  FriendAddFailureMessage,
  FriendAddRequestMessage,
  FriendAddedMessage,
  FriendDeleteRequestMessage,
  FriendDeleteResultMessage,
  FriendGuildSetWarnOnAchievementCompleteMessage,
  FriendGuildWarnOnAchievementCompleteStateMessage,
  FriendInformations,
  FriendJoinRequestMessage,
  FriendOnlineInformations,
  FriendSetStatusShareMessage,
  FriendSetWarnOnConnectionMessage,
  FriendSetWarnOnLevelGainMessage,
  FriendSpouseFollowWithCompassRequestMessage,
  FriendSpouseInformations,
  FriendSpouseJoinRequestMessage,
  FriendSpouseOnlineInformations,
  FriendStatusShareStateMessage,
  FriendUpdateMessage,
  FriendWarnOnConnectionStateMessage,
  FriendWarnOnLevelGainStateMessage,
  FriendsGetListMessage,
  FriendsListMessage,
  FullStatsPreset,
  GameActionAcknowledgementMessage,
  GameActionFightActivateGlyphTrapMessage,
  GameActionFightCarryCharacterMessage,
  GameActionFightCastOnTargetRequestMessage,
  GameActionFightCastRequestMessage,
  GameActionFightChangeLookMessage,
  GameActionFightCloseCombatMessage,
  GameActionFightDeathMessage,
  GameActionFightDispellEffectMessage,
  GameActionFightDispellMessage,
  GameActionFightDispellSpellMessage,
  GameActionFightDispellableEffectMessage,
  GameActionFightDodgePointLossMessage,
  GameActionFightDropCharacterMessage,
  GameActionFightExchangePositionsMessage,
  GameActionFightInvisibilityMessage,
  GameActionFightInvisibilityStateEnum,
  GameActionFightInvisibleDetectedMessage,
  GameActionFightKillMessage,
  GameActionFightLifeAndShieldPointsLostMessage,
  GameActionFightLifePointsGainMessage,
  GameActionFightLifePointsLostMessage,
  GameActionFightMarkCellsMessage,
  GameActionFightModifyEffectsDurationMessage,
  GameActionFightMultipleSummonMessage,
  GameActionFightNoSpellCastMessage,
  GameActionFightPointsVariationMessage,
  GameActionFightReduceDamagesMessage,
  GameActionFightReflectDamagesMessage,
  GameActionFightReflectSpellMessage,
  GameActionFightSlideMessage,
  GameActionFightSpellCastMessage,
  GameActionFightSpellCooldownVariationMessage,
  GameActionFightSpellImmunityMessage,
  GameActionFightStealKamaMessage,
  GameActionFightSummonMessage,
  GameActionFightTackledMessage,
  GameActionFightTeleportOnSameMapMessage,
  GameActionFightThrowCharacterMessage,
  GameActionFightTriggerEffectMessage,
  GameActionFightTriggerGlyphTrapMessage,
  GameActionFightUnmarkCellsMessage,
  GameActionFightVanishMessage,
  GameActionMark,
  GameActionMarkCellsTypeEnum,
  GameActionMarkedCell,
  GameActionNoopMessage,
  GameActionSpamMessage,
  GameActionUpdateEffectTriggerCountMessage,
  GameCautiousMapMovementMessage,
  GameCautiousMapMovementRequestMessage,
  GameContextActorInformations,
  GameContextActorPositionInformations,
  GameContextBasicSpawnInformation,
  GameContextCreateErrorMessage,
  GameContextCreateMessage,
  GameContextCreateRequestMessage,
  GameContextDestroyMessage,
  GameContextEnum,
  GameContextKickMessage,
  GameContextMoveElementMessage,
  GameContextMoveMultipleElementsMessage,
  GameContextQuitMessage,
  GameContextReadyMessage,
  GameContextRefreshEntityLookMessage,
  GameContextRemoveElementMessage,
  GameContextRemoveElementWithEventMessage,
  GameContextRemoveMultipleElementsMessage,
  GameContextRemoveMultipleElementsWithEventsMessage,
  GameContextSummonsInformation,
  GameDataPaddockObjectAddMessage,
  GameDataPaddockObjectListAddMessage,
  GameDataPaddockObjectRemoveMessage,
  GameDataPlayFarmObjectAnimationMessage,
  GameEntitiesDispositionMessage,
  GameEntityDispositionErrorMessage,
  GameEntityDispositionMessage,
  GameFightAIInformations,
  GameFightCharacterInformations,
  GameFightCharacteristics,
  GameFightEffectTriggerCount,
  GameFightEndMessage,
  GameFightEntityInformation,
  GameFightFighterEntityLightInformation,
  GameFightFighterInformations,
  GameFightFighterLightInformations,
  GameFightFighterMonsterLightInformations,
  GameFightFighterNamedInformations,
  GameFightFighterNamedLightInformations,
  GameFightFighterTaxCollectorLightInformations,
  GameFightHumanReadyStateMessage,
  GameFightJoinMessage,
  GameFightJoinRequestMessage,
  GameFightLeaveMessage,
  GameFightMonsterInformations,
  GameFightMonsterWithAlignmentInformations,
  GameFightMutantInformations,
  GameFightNewRoundMessage,
  GameFightNewWaveMessage,
  GameFightOptionStateUpdateMessage,
  GameFightOptionToggleMessage,
  GameFightPauseMessage,
  GameFightPlacementPositionRequestMessage,
  GameFightPlacementPossiblePositionsMessage,
  GameFightPlacementSwapPositionsAcceptMessage,
  GameFightPlacementSwapPositionsCancelMessage,
  GameFightPlacementSwapPositionsCancelledMessage,
  GameFightPlacementSwapPositionsErrorMessage,
  GameFightPlacementSwapPositionsMessage,
  GameFightPlacementSwapPositionsOfferMessage,
  GameFightPlacementSwapPositionsRequestMessage,
  GameFightReadyMessage,
  GameFightRefreshFighterMessage,
  GameFightRemoveTeamMemberMessage,
  GameFightResumeMessage,
  GameFightResumeSlaveInfo,
  GameFightResumeWithSlavesMessage,
  GameFightShowFighterMessage,
  GameFightShowFighterRandomStaticPoseMessage,
  GameFightSpectateMessage,
  GameFightSpectatePlayerRequestMessage,
  GameFightSpectatorJoinMessage,
  GameFightSpellCooldown,
  GameFightStartMessage,
  GameFightStartingMessage,
  GameFightSynchronizeMessage,
  GameFightTaxCollectorInformations,
  GameFightTurnEndMessage,
  GameFightTurnFinishMessage,
  GameFightTurnListMessage,
  GameFightTurnReadyMessage,
  GameFightTurnReadyRequestMessage,
  GameFightTurnResumeMessage,
  GameFightTurnStartMessage,
  GameFightTurnStartPlayingMessage,
  GameFightUpdateTeamMessage,
  GameHierarchyEnum,
  GameMapChangeOrientationMessage,
  GameMapChangeOrientationRequestMessage,
  GameMapChangeOrientationsMessage,
  GameMapMovementCancelMessage,
  GameMapMovementConfirmMessage,
  GameMapMovementMessage,
  GameMapMovementRequestMessage,
  GameMapNoMovementMessage,
  GameMapSpeedMovementMessage,
  GameRefreshMonsterBoostsMessage,
  GameRolePlayActorInformations,
  GameRolePlayAggressionMessage,
  GameRolePlayArenaFightAnswerMessage,
  GameRolePlayArenaFightPropositionMessage,
  GameRolePlayArenaFighterStatusMessage,
  GameRolePlayArenaInvitationCandidatesAnswerMessage,
  GameRolePlayArenaLeagueRewardsMessage,
  GameRolePlayArenaPlayerBehavioursMessage,
  GameRolePlayArenaRegisterMessage,
  GameRolePlayArenaRegistrationStatusMessage,
  GameRolePlayArenaRegistrationWarningMessage,
  GameRolePlayArenaSwitchToFightServerMessage,
  GameRolePlayArenaSwitchToGameServerMessage,
  GameRolePlayArenaUnregisterMessage,
  GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage,
  GameRolePlayArenaUpdatePlayerInfosMessage,
  GameRolePlayAttackMonsterRequestMessage,
  GameRolePlayCharacterInformations,
  GameRolePlayDelayedActionFinishedMessage,
  GameRolePlayDelayedActionMessage,
  GameRolePlayDelayedObjectUseMessage,
  GameRolePlayFightRequestCanceledMessage,
  GameRolePlayFreeSoulRequestMessage,
  GameRolePlayGameOverMessage,
  GameRolePlayGroupMonsterInformations,
  GameRolePlayGroupMonsterWaveInformations,
  GameRolePlayHumanoidInformations,
  GameRolePlayMerchantInformations,
  GameRolePlayMonsterAngryAtPlayerMessage,
  GameRolePlayMonsterNotAngryAtPlayerMessage,
  GameRolePlayMountInformations,
  GameRolePlayMutantInformations,
  GameRolePlayNamedActorInformations,
  GameRolePlayNpcInformations,
  GameRolePlayNpcQuestFlag,
  GameRolePlayNpcWithQuestInformations,
  GameRolePlayPlayerFightFriendlyAnswerMessage,
  GameRolePlayPlayerFightFriendlyAnsweredMessage,
  GameRolePlayPlayerFightFriendlyRequestedMessage,
  GameRolePlayPlayerFightRequestMessage,
  GameRolePlayPlayerLifeStatusMessage,
  GameRolePlayPortalInformations,
  GameRolePlayPrismInformations,
  GameRolePlayRemoveChallengeMessage,
  GameRolePlayShowActorMessage,
  GameRolePlayShowActorWithEventMessage,
  GameRolePlayShowChallengeMessage,
  GameRolePlayShowMultipleActorsMessage,
  GameRolePlaySpellAnimMessage,
  GameRolePlayTaxCollectorFightRequestMessage,
  GameRolePlayTaxCollectorInformations,
  GameRolePlayTreasureHintInformations,
  GameServerInformations,
  GameServerTypeEnum,
  GoldAddedMessage,
  GoldItem,
  GroupMonsterStaticInformations,
  GroupMonsterStaticInformationsWithAlternatives,
  GuestLimitationMessage,
  GuestModeMessage,
  GuidedModeQuitRequestMessage,
  GuidedModeReturnRequestMessage,
  GuildApplicationAnswerMessage,
  GuildApplicationDeletedMessage,
  GuildApplicationInformation,
  GuildApplicationIsAnsweredMessage,
  GuildApplicationListenMessage,
  GuildApplicationReceivedMessage,
  GuildApplicationStateEnum,
  GuildBulletinMessage,
  GuildBulletinSetErrorMessage,
  GuildBulletinSetRequestMessage,
  GuildChangeMemberParametersMessage,
  GuildCharacsUpgradeRequestMessage,
  GuildCreationResultMessage,
  GuildCreationStartedMessage,
  GuildCreationValidMessage,
  GuildDeleteApplicationRequestMessage,
  GuildEmblem,
  GuildFactSheetInformations,
  GuildFactsErrorMessage,
  GuildFactsMessage,
  GuildFactsRequestMessage,
  GuildFightJoinRequestMessage,
  GuildFightLeaveRequestMessage,
  GuildFightPlayersEnemiesListMessage,
  GuildFightPlayersEnemyRemoveMessage,
  GuildFightPlayersHelpersJoinMessage,
  GuildFightPlayersHelpersLeaveMessage,
  GuildFightTakePlaceRequestMessage,
  GuildGetInformationsMessage,
  GuildGetPlayerApplicationMessage,
  GuildHouseRemoveMessage,
  GuildHouseUpdateInformationMessage,
  GuildHousesInformationMessage,
  GuildInAllianceFactsMessage,
  GuildInAllianceInformations,
  GuildInAllianceVersatileInformations,
  GuildInformations,
  GuildInformationsGeneralMessage,
  GuildInformationsMemberUpdateMessage,
  GuildInformationsMembersMessage,
  GuildInformationsPaddocksMessage,
  GuildInformationsTypeEnum,
  GuildInfosUpgradeMessage,
  GuildInsiderFactSheetInformations,
  GuildInvitationAnswerMessage,
  GuildInvitationMessage,
  GuildInvitationSearchMessage,
  GuildInvitationStateRecrutedMessage,
  GuildInvitationStateRecruterMessage,
  GuildInvitedMessage,
  GuildJoinAutomaticallyRequestMessage,
  GuildJoinedMessage,
  GuildKickRequestMessage,
  GuildLeftMessage,
  GuildLevelUpMessage,
  GuildListApplicationAnswerMessage,
  GuildListApplicationModifiedMessage,
  GuildListApplicationRequestMessage,
  GuildListMessage,
  GuildMember,
  GuildMemberLeavingMessage,
  GuildMemberOnlineStatusMessage,
  GuildMemberSetWarnOnConnectionMessage,
  GuildMemberWarnOnConnectionStateMessage,
  GuildMembershipMessage,
  GuildModificationEmblemValidMessage,
  GuildModificationNameValidMessage,
  GuildModificationStartedMessage,
  GuildModificationValidMessage,
  GuildMotdMessage,
  GuildMotdSetErrorMessage,
  GuildMotdSetRequestMessage,
  GuildPaddockBoughtMessage,
  GuildPaddockRemovedMessage,
  GuildPaddockTeleportRequestMessage,
  GuildPlayerApplicationAbstractMessage,
  GuildPlayerApplicationInformationMessage,
  GuildPlayerNoApplicationInformationMessage,
  GuildRecruitmentInformation,
  GuildRecruitmentInvalidateMessage,
  GuildRecruitmentTypeEnum,
  GuildRightsBitEnum,
  GuildSpellUpgradeRequestMessage,
  GuildSubmitApplicationMessage,
  GuildSummaryMessage,
  GuildSummaryRequestMessage,
  GuildSummarySortEnum,
  GuildUpdateApplicationMessage,
  GuildVersatileInfoListMessage,
  GuildVersatileInformations,
  HaapiApiKeyMessage,
  HaapiApiKeyRequestMessage,
  HaapiAuthErrorMessage,
  HaapiAuthTypeEnum,
  HaapiBufferListMessage,
  HaapiBufferListRequestMessage,
  HaapiBuyValidationMessage,
  HaapiCancelBidRequestMessage,
  HaapiConfirmationMessage,
  HaapiConfirmationRequestMessage,
  HaapiConsumeBufferRequestMessage,
  HaapiSessionMessage,
  HaapiSessionTypeEnum,
  HaapiShopApiKeyMessage,
  HaapiShopApiKeyRequestMessage,
  HaapiTokenMessage,
  HaapiTokenRequestMessage,
  HaapiValidationMessage,
  HaapiValidationRequestMessage,
  HavenBagDailyLoteryErrorEnum,
  HavenBagDailyLoteryMessage,
  HavenBagFurnitureInformation,
  HavenBagFurnituresMessage,
  HavenBagFurnituresRequestMessage,
  HavenBagPackListMessage,
  HavenBagPermissionsUpdateMessage,
  HavenBagPermissionsUpdateRequestMessage,
  HavenBagRoomActionEnum,
  HavenBagRoomPreviewInformation,
  HavenBagRoomUpdateMessage,
  HavenBagShareBitEnum,
  HelloConnectMessage,
  HelloGameMessage,
  HouseBuyRequestMessage,
  HouseBuyResultMessage,
  HouseGuildNoneMessage,
  HouseGuildRightsMessage,
  HouseGuildRightsViewMessage,
  HouseGuildShareRequestMessage,
  HouseGuildedInformations,
  HouseInformations,
  HouseInformationsForGuild,
  HouseInformationsForSell,
  HouseInformationsInside,
  HouseInstanceInformations,
  HouseKickIndoorMerchantRequestMessage,
  HouseKickRequestMessage,
  HouseLockFromInsideRequestMessage,
  HouseOnMapInformations,
  HousePropertiesMessage,
  HouseSellFromInsideRequestMessage,
  HouseSellRequestMessage,
  HouseSellingUpdateMessage,
  HouseTeleportRequestMessage,
  HouseToSellFilterMessage,
  HouseToSellListMessage,
  HouseToSellListRequestMessage,
  HumanInformations,
  HumanOption,
  HumanOptionAlliance,
  HumanOptionEmote,
  HumanOptionFollowers,
  HumanOptionGuild,
  HumanOptionObjectUse,
  HumanOptionOrnament,
  HumanOptionSkillUse,
  HumanOptionTitle,
  IconNamedPreset,
  IconNamedPresetSaveRequestMessage,
  IconPresetSaveRequestMessage,
  IdentificationAccountForceMessage,
  IdentificationFailedBannedMessage,
  IdentificationFailedForBadVersionMessage,
  IdentificationFailedMessage,
  IdentificationFailureReasonEnum,
  IdentificationMessage,
  IdentificationSuccessMessage,
  IdentificationSuccessWithLoginTokenMessage,
  IdentifiedEntityDispositionInformations,
  Idol,
  IdolFightPreparationUpdateMessage,
  IdolListMessage,
  IdolPartyLostMessage,
  IdolPartyRefreshMessage,
  IdolPartyRegisterRequestMessage,
  IdolSelectErrorMessage,
  IdolSelectRequestMessage,
  IdolSelectedMessage,
  IdolsPreset,
  IdolsPresetSaveRequestMessage,
  IgnoredAddFailureMessage,
  IgnoredAddRequestMessage,
  IgnoredAddedMessage,
  IgnoredDeleteRequestMessage,
  IgnoredDeleteResultMessage,
  IgnoredGetListMessage,
  IgnoredInformations,
  IgnoredListMessage,
  IgnoredOnlineInformations,
  IndexedEntityLook,
  InteractiveElement,
  InteractiveElementNamedSkill,
  InteractiveElementSkill,
  InteractiveElementUpdatedMessage,
  InteractiveElementWithAgeBonus,
  InteractiveMapUpdateMessage,
  InteractiveUseEndedMessage,
  InteractiveUseErrorMessage,
  InteractiveUseRequestMessage,
  InteractiveUseWithParamRequestMessage,
  InteractiveUsedMessage,
  InvalidPresetsMessage,
  InventoryContentMessage,
  InventoryWeightMessage,
  InviteInHavenBagClosedMessage,
  InviteInHavenBagMessage,
  InviteInHavenBagOfferMessage,
  Item,
  ItemDurability,
  ItemForPreset,
  ItemForPresetUpdateMessage,
  ItemNoMoreAvailableMessage,
  ItemsPreset,
  JobAllowMultiCraftRequestMessage,
  JobBookSubscribeRequestMessage,
  JobBookSubscription,
  JobBookSubscriptionMessage,
  JobCrafterDirectoryAddMessage,
  JobCrafterDirectoryDefineSettingsMessage,
  JobCrafterDirectoryEntryJobInfo,
  JobCrafterDirectoryEntryMessage,
  JobCrafterDirectoryEntryPlayerInfo,
  JobCrafterDirectoryEntryRequestMessage,
  JobCrafterDirectoryListEntry,
  JobCrafterDirectoryListMessage,
  JobCrafterDirectoryListRequestMessage,
  JobCrafterDirectoryRemoveMessage,
  JobCrafterDirectorySettings,
  JobCrafterDirectorySettingsMessage,
  JobDescription,
  JobDescriptionMessage,
  JobExperience,
  JobExperienceMultiUpdateMessage,
  JobExperienceOtherPlayerUpdateMessage,
  JobExperienceUpdateMessage,
  JobLevelUpMessage,
  JobMultiCraftAvailableSkillsMessage,
  KamaDebtInformation,
  KamasUpdateMessage,
  KickHavenBagRequestMessage,
  KnownZaapListMessage,
  KohUpdateMessage,
  LeagueFriendInformations,
  LeaveDialogMessage,
  LeaveDialogRequestMessage,
  LifePointsRegenBeginMessage,
  LifePointsRegenEndMessage,
  ListAddFailureEnum,
  ListMapNpcsQuestStatusUpdateMessage,
  LivingObjectChangeSkinRequestMessage,
  LivingObjectDissociateMessage,
  LivingObjectMessageMessage,
  LivingObjectMessageRequestMessage,
  LocalizedChatSmileyMessage,
  LockableChangeCodeMessage,
  LockableCodeResultMessage,
  LockableResultEnum,
  LockableShowCodeDialogMessage,
  LockableStateUpdateAbstractMessage,
  LockableStateUpdateHouseDoorMessage,
  LockableStateUpdateStorageMessage,
  LockableUseCodeMessage,
  LoginQueueStatusMessage,
  MapComplementaryInformationsAnomalyMessage,
  MapComplementaryInformationsBreachMessage,
  MapComplementaryInformationsDataInHavenBagMessage,
  MapComplementaryInformationsDataInHouseMessage,
  MapComplementaryInformationsDataMessage,
  MapComplementaryInformationsWithCoordsMessage,
  MapCoordinates,
  MapCoordinatesAndId,
  MapCoordinatesExtended,
  MapFightCountMessage,
  MapFightStartPositionsUpdateMessage,
  MapInformationsRequestMessage,
  MapNpcQuestInfo,
  MapObstacle,
  MapObstacleStateEnum,
  MapObstacleUpdateMessage,
  MapRewardRateMessage,
  MapRunningFightDetailsExtendedMessage,
  MapRunningFightDetailsMessage,
  MapRunningFightDetailsRequestMessage,
  MapRunningFightListMessage,
  MapRunningFightListRequestMessage,
  MigratedServerListMessage,
  MimicryObjectAssociatedMessage,
  MimicryObjectEraseRequestMessage,
  MimicryObjectErrorMessage,
  MimicryObjectFeedAndAssociateRequestMessage,
  MimicryObjectPreviewMessage,
  MonsterBoosts,
  MonsterInGroupInformations,
  MonsterInGroupLightInformations,
  MoodSmileyRequestMessage,
  MoodSmileyResultMessage,
  MoodSmileyUpdateMessage,
  MountCharacteristicEnum,
  MountClientData,
  MountDataErrorMessage,
  MountDataMessage,
  MountEmoteIconUsedOkMessage,
  MountEquipedErrorEnum,
  MountEquipedErrorMessage,
  MountFeedRequestMessage,
  MountHarnessColorsUpdateRequestMessage,
  MountHarnessDissociateRequestMessage,
  MountInformationInPaddockRequestMessage,
  MountInformationRequestMessage,
  MountInformationsForPaddock,
  MountReleaseRequestMessage,
  MountReleasedMessage,
  MountRenameRequestMessage,
  MountRenamedMessage,
  MountRidingMessage,
  MountSetMessage,
  MountSetXpRatioRequestMessage,
  MountSterilizeRequestMessage,
  MountSterilizedMessage,
  MountToggleRidingRequestMessage,
  MountUnSetMessage,
  MountXpRatioMessage,
  NamedPartyTeam,
  NamedPartyTeamWithOutcome,
  NetworkDataContainerMessage,
  NetworkMessage,
  NicknameAcceptedMessage,
  NicknameChoiceRequestMessage,
  NicknameErrorEnum,
  NicknameRefusedMessage,
  NicknameRegistrationMessage,
  NotificationByServerMessage,
  NotificationListMessage,
  NotificationResetMessage,
  NotificationUpdateFlagMessage,
  NpcDialogCreationMessage,
  NpcDialogQuestionMessage,
  NpcDialogReplyMessage,
  NpcGenericActionFailureMessage,
  NpcGenericActionRequestMessage,
  NumericWhoIsMessage,
  NumericWhoIsRequestMessage,
  ObjectAddedMessage,
  ObjectAveragePricesErrorMessage,
  ObjectAveragePricesGetMessage,
  ObjectAveragePricesMessage,
  ObjectDeleteMessage,
  ObjectDeletedMessage,
  ObjectDropMessage,
  ObjectEffect,
  ObjectEffectCreature,
  ObjectEffectDate,
  ObjectEffectDice,
  ObjectEffectDuration,
  ObjectEffectInteger,
  ObjectEffectLadder,
  ObjectEffectMinMax,
  ObjectEffectMount,
  ObjectEffectString,
  ObjectEffects,
  ObjectErrorEnum,
  ObjectErrorMessage,
  ObjectFeedMessage,
  ObjectGroundAddedMessage,
  ObjectGroundListAddedMessage,
  ObjectGroundRemovedMessage,
  ObjectGroundRemovedMultipleMessage,
  ObjectItem,
  ObjectItemGenericQuantity,
  ObjectItemInRolePlay,
  ObjectItemInformationWithQuantity,
  ObjectItemMinimalInformation,
  ObjectItemNotInContainer,
  ObjectItemQuantity,
  ObjectItemQuantityPriceDateEffects,
  ObjectItemToSell,
  ObjectItemToSellInBid,
  ObjectItemToSellInHumanVendorShop,
  ObjectItemToSellInNpcShop,
  ObjectJobAddedMessage,
  ObjectModifiedMessage,
  ObjectMovementMessage,
  ObjectQuantityMessage,
  ObjectSetPositionMessage,
  ObjectUseMessage,
  ObjectUseMultipleMessage,
  ObjectUseOnCellMessage,
  ObjectUseOnCharacterMessage,
  ObjectsAddedMessage,
  ObjectsDeletedMessage,
  ObjectsQuantityMessage,
  ObtainedItemMessage,
  ObtainedItemWithBonusMessage,
  OnConnectionEventMessage,
  OpenHavenBagFurnitureSequenceRequestMessage,
  OrnamentGainedMessage,
  OrnamentLostMessage,
  OrnamentSelectErrorMessage,
  OrnamentSelectRequestMessage,
  OrnamentSelectedMessage,
  PaddockBuyRequestMessage,
  PaddockBuyResultMessage,
  PaddockBuyableInformations,
  PaddockContentInformations,
  PaddockGuildedInformations,
  PaddockInformations,
  PaddockInformationsForSell,
  PaddockInstancesInformations,
  PaddockItem,
  PaddockMoveItemRequestMessage,
  PaddockPropertiesMessage,
  PaddockRemoveItemRequestMessage,
  PaddockSellBuyDialogMessage,
  PaddockSellRequestMessage,
  PaddockToSellFilterMessage,
  PaddockToSellListMessage,
  PaddockToSellListRequestMessage,
  PaginationAnswerAbstractMessage,
  PaginationRequestAbstractMessage,
  PartyAbdicateThroneMessage,
  PartyAcceptInvitationMessage,
  PartyCancelInvitationMessage,
  PartyCancelInvitationNotificationMessage,
  PartyCannotJoinErrorMessage,
  PartyDeletedMessage,
  PartyEntityBaseInformation,
  PartyEntityMemberInformation,
  PartyEntityUpdateLightMessage,
  PartyFollowMemberRequestMessage,
  PartyFollowStatusUpdateMessage,
  PartyFollowThisMemberRequestMessage,
  PartyGuestInformations,
  PartyIdol,
  PartyInvitationArenaRequestMessage,
  PartyInvitationCancelledForGuestMessage,
  PartyInvitationDetailsMessage,
  PartyInvitationDetailsRequestMessage,
  PartyInvitationDungeonDetailsMessage,
  PartyInvitationDungeonMessage,
  PartyInvitationDungeonRequestMessage,
  PartyInvitationMemberInformations,
  PartyInvitationMessage,
  PartyInvitationRequestMessage,
  PartyJoinErrorEnum,
  PartyJoinMessage,
  PartyKickRequestMessage,
  PartyKickedByMessage,
  PartyLeaderUpdateMessage,
  PartyLeaveMessage,
  PartyLeaveRequestMessage,
  PartyLocateMembersMessage,
  PartyLocateMembersRequestMessage,
  PartyLoyaltyStatusMessage,
  PartyMemberArenaInformations,
  PartyMemberEjectedMessage,
  PartyMemberGeoPosition,
  PartyMemberInBreachFightMessage,
  PartyMemberInStandardFightMessage,
  PartyMemberInformations,
  PartyMemberRemoveMessage,
  PartyModifiableStatusMessage,
  PartyNameErrorEnum,
  PartyNameSetErrorMessage,
  PartyNameSetRequestMessage,
  PartyNameUpdateMessage,
  PartyNewGuestMessage,
  PartyNewMemberMessage,
  PartyPledgeLoyaltyRequestMessage,
  PartyRefuseInvitationMessage,
  PartyRefuseInvitationNotificationMessage,
  PartyRestrictedMessage,
  PartyStopFollowRequestMessage,
  PartyTypeEnum,
  PartyUpdateLightMessage,
  PartyUpdateMessage,
  PauseDialogMessage,
  PlayableBreedEnum,
  PlayerLifeStatusEnum,
  PlayerSearchCharacterNameInformation,
  PlayerSearchTagInformation,
  PlayerStateEnum,
  PlayerStatus,
  PlayerStatusEnum,
  PlayerStatusExtended,
  PlayerStatusUpdateErrorMessage,
  PlayerStatusUpdateMessage,
  PlayerStatusUpdateRequestMessage,
  PopupWarningCloseRequestMessage,
  PopupWarningClosedMessage,
  PopupWarningMessage,
  PortalDialogCreationMessage,
  PortalInformation,
  PortalUseRequestMessage,
  Preset,
  PresetDeleteRequestMessage,
  PresetDeleteResultEnum,
  PresetDeleteResultMessage,
  PresetSaveErrorMessage,
  PresetSaveResultEnum,
  PresetSavedMessage,
  PresetUseRequestMessage,
  PresetUseResultEnum,
  PresetUseResultMessage,
  PresetUseResultWithMissingIdsMessage,
  PresetsContainerPreset,
  PresetsMessage,
  PrismAttackRequestMessage,
  PrismFightAddedMessage,
  PrismFightAttackerAddMessage,
  PrismFightAttackerRemoveMessage,
  PrismFightDefenderAddMessage,
  PrismFightDefenderLeaveMessage,
  PrismFightJoinLeaveRequestMessage,
  PrismFightRemovedMessage,
  PrismFightStateUpdateMessage,
  PrismFightSwapRequestMessage,
  PrismFightersInformation,
  PrismGeolocalizedInformation,
  PrismInfoCloseMessage,
  PrismInfoInValidMessage,
  PrismInfoJoinLeaveRequestMessage,
  PrismInformation,
  PrismListenEnum,
  PrismModuleExchangeRequestMessage,
  PrismSetSabotagedRefusedMessage,
  PrismSetSabotagedRefusedReasonEnum,
  PrismSetSabotagedRequestMessage,
  PrismSettingsErrorMessage,
  PrismSettingsRequestMessage,
  PrismStateEnum,
  PrismSubareaEmptyInfo,
  PrismUseRequestMessage,
  PrismsInfoValidMessage,
  PrismsListMessage,
  PrismsListRegisterMessage,
  PrismsListUpdateMessage,
  ProtectedEntityWaitingForHelpInfo,
  ProtocolRequired,
  PurchasableDialogMessage,
  PvpArenaStepEnum,
  PvpArenaTypeEnum,
  QuestActiveDetailedInformations,
  QuestActiveInformations,
  QuestListMessage,
  QuestListRequestMessage,
  QuestObjectiveInformations,
  QuestObjectiveInformationsWithCompletion,
  QuestObjectiveValidatedMessage,
  QuestObjectiveValidationMessage,
  QuestStartRequestMessage,
  QuestStartedMessage,
  QuestStepInfoMessage,
  QuestStepInfoRequestMessage,
  QuestStepStartedMessage,
  QuestStepValidatedMessage,
  QuestValidatedMessage,
  QueueStatusMessage,
  RawDataMessage,
  RecruitmentInformationMessage,
  RecycleResultMessage,
  RecycledItem,
  RefreshCharacterStatsMessage,
  RefreshFollowedQuestsOrderRequestMessage,
  ReloginTokenRequestMessage,
  ReloginTokenStatusMessage,
  RemodelingInformation,
  ResetCharacterStatsRequestMessage,
  SavablePresetTypeEnum,
  SelectedServerDataExtendedMessage,
  SelectedServerDataMessage,
  SelectedServerRefusedMessage,
  SellerBuyerDescriptor,
  SequenceEndMessage,
  SequenceNumberMessage,
  SequenceNumberRequestMessage,
  SequenceStartMessage,
  ServerCompletionEnum,
  ServerConnectionErrorEnum,
  ServerExperienceModificatorMessage,
  ServerOptionalFeaturesMessage,
  ServerSelectionMessage,
  ServerSessionConstant,
  ServerSessionConstantInteger,
  ServerSessionConstantLong,
  ServerSessionConstantString,
  ServerSessionConstantsMessage,
  ServerSettingsMessage,
  ServerStatusEnum,
  ServerStatusUpdateMessage,
  ServersListMessage,
  SetCharacterRestrictionsMessage,
  SetEnableAVARequestMessage,
  SetEnablePVPRequestMessage,
  SetUpdateMessage,
  Shortcut,
  ShortcutBarAddErrorMessage,
  ShortcutBarAddRequestMessage,
  ShortcutBarContentMessage,
  ShortcutBarEnum,
  ShortcutBarRefreshMessage,
  ShortcutBarRemoveErrorMessage,
  ShortcutBarRemoveRequestMessage,
  ShortcutBarRemovedMessage,
  ShortcutBarReplacedMessage,
  ShortcutBarSwapErrorMessage,
  ShortcutBarSwapRequestMessage,
  ShortcutEmote,
  ShortcutEntitiesPreset,
  ShortcutObject,
  ShortcutObjectIdolsPreset,
  ShortcutObjectItem,
  ShortcutObjectPreset,
  ShortcutSmiley,
  ShortcutSpell,
  ShowCellMessage,
  ShowCellRequestMessage,
  ShowCellSpectatorMessage,
  SimpleCharacterCharacteristicForPreset,
  SkillActionDescription,
  SkillActionDescriptionCollect,
  SkillActionDescriptionCraft,
  SkillActionDescriptionTimed,
  SlaveNoLongerControledMessage,
  SlaveSwitchContextMessage,
  SocialContactCategoryEnum,
  SocialGroupCreationResultEnum,
  SocialGroupInvitationStateEnum,
  SocialNoticeErrorEnum,
  SocialNoticeMessage,
  SocialNoticeSetErrorMessage,
  SocialNoticeSetRequestMessage,
  SpawnCharacterInformation,
  SpawnCompanionInformation,
  SpawnInformation,
  SpawnMonsterInformation,
  SpawnScaledMonsterInformation,
  SpellForPreset,
  SpellItem,
  SpellListMessage,
  SpellVariantActivationMessage,
  SpellVariantActivationRequestMessage,
  SpellsPreset,
  SpouseGetInformationsMessage,
  SpouseInformationsMessage,
  SpouseStatusMessage,
  StartupActionAddMessage,
  StartupActionAddObject,
  StartupActionFinishedMessage,
  StartupActionsAllAttributionMessage,
  StartupActionsExecuteMessage,
  StartupActionsListMessage,
  StartupActionsObjetAttributionMessage,
  StatedElement,
  StatedElementUpdatedMessage,
  StatedMapUpdateMessage,
  StatisticData,
  StatisticDataBoolean,
  StatisticDataByte,
  StatisticDataInt,
  StatisticDataShort,
  StatisticDataString,
  StatsPreset,
  StatsUpgradeRequestMessage,
  StatsUpgradeResultEnum,
  StatsUpgradeResultMessage,
  StopToListenRunningFightRequestMessage,
  StorageInventoryContentMessage,
  StorageKamasUpdateMessage,
  StorageObjectRemoveMessage,
  StorageObjectUpdateMessage,
  StorageObjectsRemoveMessage,
  StorageObjectsUpdateMessage,
  SubEntity,
  SubEntityBindingPointCategoryEnum,
  SubscriptionLimitationMessage,
  SubscriptionRequiredEnum,
  SubscriptionZoneMessage,
  SymbioticObjectAssociateRequestMessage,
  SymbioticObjectAssociatedMessage,
  SymbioticObjectErrorMessage,
  SystemMessageDisplayMessage,
  TaxCollectorAttackedMessage,
  TaxCollectorAttackedResultMessage,
  TaxCollectorBasicInformations,
  TaxCollectorComplementaryInformations,
  TaxCollectorDialogQuestionBasicMessage,
  TaxCollectorDialogQuestionExtendedMessage,
  TaxCollectorErrorMessage,
  TaxCollectorErrorReasonEnum,
  TaxCollectorFightersInformation,
  TaxCollectorGuildInformations,
  TaxCollectorInformations,
  TaxCollectorListMessage,
  TaxCollectorLootInformations,
  TaxCollectorMovement,
  TaxCollectorMovementAddMessage,
  TaxCollectorMovementMessage,
  TaxCollectorMovementRemoveMessage,
  TaxCollectorMovementTypeEnum,
  TaxCollectorMovementsOfflineMessage,
  TaxCollectorStateEnum,
  TaxCollectorStateUpdateMessage,
  TaxCollectorStaticExtendedInformations,
  TaxCollectorStaticInformations,
  TaxCollectorWaitingForHelpInformations,
  TeamEnum,
  TeamTypeEnum,
  TeleportBuddiesAnswerMessage,
  TeleportBuddiesMessage,
  TeleportBuddiesRequestedMessage,
  TeleportDestination,
  TeleportDestinationsMessage,
  TeleportHavenBagAnswerMessage,
  TeleportHavenBagRequestMessage,
  TeleportOnSameMapMessage,
  TeleportRequestMessage,
  TeleportToBuddyAnswerMessage,
  TeleportToBuddyCloseMessage,
  TeleportToBuddyOfferMessage,
  TeleporterTypeEnum,
  TextInformationMessage,
  TextInformationTypeEnum,
  TitleGainedMessage,
  TitleLostMessage,
  TitleSelectErrorMessage,
  TitleSelectRequestMessage,
  TitleSelectedMessage,
  TitlesAndOrnamentsListMessage,
  TitlesAndOrnamentsListRequestMessage,
  TopTaxCollectorListMessage,
  TreasureHuntAvailableRetryCountUpdateMessage,
  TreasureHuntDigRequestAnswerFailedMessage,
  TreasureHuntDigRequestAnswerMessage,
  TreasureHuntDigRequestEnum,
  TreasureHuntDigRequestMessage,
  TreasureHuntFinishedMessage,
  TreasureHuntFlag,
  TreasureHuntFlagRemoveRequestMessage,
  TreasureHuntFlagRequestAnswerMessage,
  TreasureHuntFlagRequestEnum,
  TreasureHuntFlagRequestMessage,
  TreasureHuntFlagStateEnum,
  TreasureHuntGiveUpRequestMessage,
  TreasureHuntLegendaryRequestMessage,
  TreasureHuntMessage,
  TreasureHuntRequestAnswerMessage,
  TreasureHuntRequestEnum,
  TreasureHuntShowLegendaryUIMessage,
  TreasureHuntStep,
  TreasureHuntStepDig,
  TreasureHuntStepFight,
  TreasureHuntStepFollowDirection,
  TreasureHuntStepFollowDirectionToHint,
  TreasureHuntStepFollowDirectionToPOI,
  TreasureHuntTypeEnum,
  TrustCertificate,
  TrustStatusMessage,
  UnfollowQuestObjectiveRequestMessage,
  UpdateLifePointsMessage,
  UpdateMapPlayersAgressableStatusMessage,
  UpdateMountBooleanCharacteristic,
  UpdateMountCharacteristic,
  UpdateMountCharacteristicsMessage,
  UpdateMountIntegerCharacteristic,
  UpdateRecruitmentInformationMessage,
  UpdateSelfAgressableStatusMessage,
  UpdateSpellModifierMessage,
  Version,
  WarnOnPermaDeathMessage,
  WarnOnPermaDeathStateMessage,
  WatchInventoryContentMessage,
  WatchQuestListMessage,
  WatchQuestStepInfoMessage,
  WatchQuestStepInfoRequestMessage,
  WrapperObjectAssociatedMessage,
  WrapperObjectDissociateRequestMessage,
  WrapperObjectErrorMessage,
  ZaapDestinationsMessage,
  ZaapRespawnSaveRequestMessage,
  ZaapRespawnUpdatedMessage,
  messages,
  types
});

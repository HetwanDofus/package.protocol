import {
  bigEndianSetFlag as setFlag,
  bigEndianGetFlag as getFlag,
  type BinaryDataWriter,
  type BinaryDataReader,
} from "@hetwan.io";

import { DofusMessage, DofusType } from "@hetwan/protocol";

export enum SubEntityBindingPointCategoryEnum {
  HOOK_POINT_CATEGORY_UNUSED = 0,
  HOOK_POINT_CATEGORY_PET = 1,
  HOOK_POINT_CATEGORY_MOUNT_DRIVER = 2,
  HOOK_POINT_CATEGORY_LIFTED_ENTITY = 3,
  HOOK_POINT_CATEGORY_BASE_BACKGROUND = 4,
  HOOK_POINT_CATEGORY_MERCHANT_BAG = 5,
  HOOK_POINT_CATEGORY_BASE_FOREGROUND = 6,
  HOOK_POINT_CATEGORY_PET_FOLLOWER = 7,
  HOOK_POINT_CATEGORY_UNDERWATER_BUBBLES = 8,
}

export enum BuildTypeEnum {
  RELEASE = 0,
  BETA = 1,
  ALPHA = 2,
  TESTING = 3,
  INTERNAL = 4,
  DEBUG = 5,
  DRAFT = 6,
}

export enum ChatActivableChannelsEnum {
  CHANNEL_GLOBAL = 0,
  CHANNEL_TEAM = 1,
  CHANNEL_GUILD = 2,
  CHANNEL_ALLIANCE = 3,
  CHANNEL_PARTY = 4,
  CHANNEL_SALES = 5,
  CHANNEL_SEEK = 6,
  CHANNEL_NOOB = 7,
  CHANNEL_ADMIN = 8,
  PSEUDO_CHANNEL_PRIVATE = 9,
  PSEUDO_CHANNEL_INFO = 10,
  PSEUDO_CHANNEL_FIGHT_LOG = 11,
  CHANNEL_ADS = 12,
  CHANNEL_ARENA = 13,
  CHANNEL_COMMUNITY = 14,
}

export enum FightSpellCastCriticalEnum {
  NORMAL = 1,
  CRITICAL_HIT = 2,
  CRITICAL_FAIL = 3,
}

export enum PlayerLifeStatusEnum {
  STATUS_ALIVE_AND_KICKING = 0,
  STATUS_TOMBSTONE = 1,
  STATUS_PHANTOM = 2,
}

export enum PrismStateEnum {
  PRISM_STATE_INVULNERABLE = 0,
  PRISM_STATE_NORMAL = 1,
  PRISM_STATE_ATTACKED = 2,
  PRISM_STATE_FIGHTING = 3,
  PRISM_STATE_WEAKENED = 4,
  PRISM_STATE_VULNERABLE = 5,
  PRISM_STATE_DEFEATED = 6,
  PRISM_STATE_SABOTAGED = 7,
}

export enum MapObstacleStateEnum {
  OBSTACLE_OPENED = 1,
  OBSTACLE_CLOSED = 2,
}

export enum AggressableStatusEnum {
  NON_AGGRESSABLE = 0,
  PvP_ENABLED_AGGRESSABLE = 10,
  PvP_ENABLED_NON_AGGRESSABLE = 11,
  AvA_ENABLED_AGGRESSABLE = 20,
  AvA_ENABLED_NON_AGGRESSABLE = 21,
  AvA_DISQUALIFIED = 22,
  AvA_PREQUALIFIED_AGGRESSABLE = 23,
}

export enum TeamEnum {
  TEAM_CHALLENGER = 0,
  TEAM_DEFENDER = 1,
  TEAM_SPECTATOR = 2,
}

export enum GameActionFightInvisibilityStateEnum {
  INVISIBLE = 1,
  DETECTED = 2,
  VISIBLE = 3,
}

export enum CharacterInventoryPositionEnum {
  ACCESSORY_POSITION_AMULET = 0,
  ACCESSORY_POSITION_WEAPON = 1,
  INVENTORY_POSITION_RING_LEFT = 2,
  ACCESSORY_POSITION_BELT = 3,
  INVENTORY_POSITION_RING_RIGHT = 4,
  ACCESSORY_POSITION_BOOTS = 5,
  ACCESSORY_POSITION_HAT = 6,
  ACCESSORY_POSITION_CAPE = 7,
  ACCESSORY_POSITION_PETS = 8,
  INVENTORY_POSITION_DOFUS_1 = 9,
  INVENTORY_POSITION_DOFUS_2 = 10,
  INVENTORY_POSITION_DOFUS_3 = 11,
  INVENTORY_POSITION_DOFUS_4 = 12,
  INVENTORY_POSITION_DOFUS_5 = 13,
  INVENTORY_POSITION_DOFUS_6 = 14,
  ACCESSORY_POSITION_SHIELD = 15,
  INVENTORY_POSITION_MOUNT = 16,
  INVENTORY_POSITION_MUTATION = 20,
  INVENTORY_POSITION_BOOST_FOOD = 21,
  INVENTORY_POSITION_FIRST_BONUS = 22,
  INVENTORY_POSITION_SECOND_BONUS = 23,
  INVENTORY_POSITION_FIRST_MALUS = 24,
  INVENTORY_POSITION_SECOND_MALUS = 25,
  INVENTORY_POSITION_ROLEPLAY_BUFFER = 26,
  INVENTORY_POSITION_FOLLOWER = 27,
  INVENTORY_POSITION_ENTITY = 28,
  ACCESSORY_POSITION_RIDE_HARNESS = 29,
  INVENTORY_POSITION_COSTUME = 30,
  INVENTORY_POSITION_NOT_EQUIPED = 63,
}

export enum FightTypeEnum {
  FIGHT_TYPE_CHALLENGE = 0,
  FIGHT_TYPE_AGRESSION = 1,
  FIGHT_TYPE_PvMA = 2,
  FIGHT_TYPE_MXvM = 3,
  FIGHT_TYPE_PvM = 4,
  FIGHT_TYPE_PvT = 5,
  FIGHT_TYPE_PvMU = 6,
  FIGHT_TYPE_PVP_ARENA = 7,
  FIGHT_TYPE_Koh = 8,
  FIGHT_TYPE_PvPr = 9,
  FIGHT_TYPE_BREACH = 10,
}

export enum FightOutcomeEnum {
  RESULT_LOST = 0,
  RESULT_DRAW = 1,
  RESULT_VICTORY = 2,
  RESULT_TAX = 5,
  RESULT_DEFENDER_GROUP = 6,
}

export enum CharacterSpellModificationTypeEnum {
  INVALID_MODIFICATION = 0,
  RANGEABLE = 1,
  DAMAGE = 2,
  BASE_DAMAGE = 3,
  HEAL_BONUS = 4,
  AP_COST = 5,
  CAST_INTERVAL = 6,
  CAST_INTERVAL_SET = 7,
  CRITICAL_HIT_BONUS = 8,
  CAST_LINE = 9,
  LOS = 10,
  MAX_CAST_PER_TURN = 11,
  MAX_CAST_PER_TARGET = 12,
  RANGE_MAX = 13,
  RANGE_MIN = 14,
}

export enum DebugLevelEnum {
  LEVEL_TRACE = 0,
  LEVEL_DEBUG = 1,
  LEVEL_INFO = 2,
  LEVEL_WARN = 3,
  LEVEL_ERROR = 4,
  LEVEL_FATAL = 5,
}

export enum GameServerTypeEnum {
  SERVER_TYPE_UNDEFINED = -1,
  SERVER_TYPE_CLASSICAL = 0,
  SERVER_TYPE_HARDCORE = 1,
  SERVER_TYPE_KOLIZEUM = 2,
  SERVER_TYPE_TOURNAMENT = 3,
  SERVER_TYPE_EPIC = 4,
  SERVER_TYPE_TEMPORIS = 5,
}

export enum ShortcutBarEnum {
  GENERAL_SHORTCUT_BAR = 0,
  SPELL_SHORTCUT_BAR = 1,
}

export enum CharacterCreationResultEnum {
  OK = 0,
  ERR_NO_REASON = 1,
  ERR_INVALID_NAME = 2,
  ERR_NAME_ALREADY_EXISTS = 3,
  ERR_TOO_MANY_CHARACTERS = 4,
  ERR_NOT_ALLOWED = 5,
  ERR_NEW_PLAYER_NOT_ALLOWED = 6,
  ERR_RESTRICED_ZONE = 7,
  ERR_INCONSISTENT_COMMUNITY = 8,
}

export enum ExchangeErrorEnum {
  REQUEST_IMPOSSIBLE = 1,
  REQUEST_CHARACTER_OCCUPIED = 2,
  REQUEST_CHARACTER_JOB_NOT_EQUIPED = 3,
  REQUEST_CHARACTER_TOOL_TOO_FAR = 4,
  REQUEST_CHARACTER_OVERLOADED = 5,
  REQUEST_CHARACTER_NOT_SUSCRIBER = 6,
  REQUEST_CHARACTER_RESTRICTED = 7,
  REQUEST_CHARACTER_GUEST = 8,
  MOUNT_PADDOCK_ERROR = 10,
  BID_SEARCH_ERROR = 11,
  SELL_ERROR = 63,
  BUY_ERROR = 64,
}

export enum ServerCompletionEnum {
  COMPLETION_RECOMANDATED = 0,
  COMPLETION_AVERAGE = 1,
  COMPLETION_HIGH = 2,
  COMPLETION_COMING_SOON = 3,
  COMPLETION_FULL = 4,
}

export enum ServerStatusEnum {
  STATUS_UNKNOWN = 0,
  OFFLINE = 1,
  STARTING = 2,
  ONLINE = 3,
  NOJOIN = 4,
  SAVING = 5,
  STOPING = 6,
  FULL = 7,
}

export enum BoostableCharacteristicEnum {
  BOOSTABLE_CHARAC_STRENGTH = 10,
  BOOSTABLE_CHARAC_VITALITY = 11,
  BOOSTABLE_CHARAC_WISDOM = 12,
  BOOSTABLE_CHARAC_CHANCE = 13,
  BOOSTABLE_CHARAC_AGILITY = 14,
  BOOSTABLE_CHARAC_INTELLIGENCE = 15,
}

export enum CompassTypeEnum {
  COMPASS_TYPE_SIMPLE = 0,
  COMPASS_TYPE_SPOUSE = 1,
  COMPASS_TYPE_PARTY = 2,
  COMPASS_TYPE_PVP_SEEK = 3,
  COMPASS_TYPE_QUEST = 4,
}

export enum PlayerStatusEnum {
  PLAYER_STATUS_OFFLINE = 0,
  PLAYER_STATUS_UNKNOWN = 1,
  PLAYER_STATUS_AVAILABLE = 10,
  PLAYER_STATUS_IDLE = 20,
  PLAYER_STATUS_AFK = 21,
  PLAYER_STATUS_PRIVATE = 30,
  PLAYER_STATUS_SOLO = 40,
}

export enum AlignmentSideEnum {
  ALIGNMENT_UNKNOWN = -2,
  ALIGNMENT_WITHOUT = -1,
  ALIGNMENT_NEUTRAL = 0,
  ALIGNMENT_ANGEL = 1,
  ALIGNMENT_EVIL = 2,
}

export enum MountCharacteristicEnum {
  ENERGY = 1,
  SERENITY = 2,
  STAMINA = 3,
  LOVE = 4,
  MATURITY = 5,
  TIREDNESS = 6,
  CARRIER = 7,
  FERTILE = 8,
  PREGNANT = 9,
}

export enum ExchangeTypeEnum {
  UNKNOWN_TRADE_TYPE = -1,
  NPC_SHOP = 0,
  PLAYER_TRADE = 1,
  NPC_TRADE = 2,
  CRAFT = 3,
  DISCONNECTED_VENDOR = 4,
  STORAGE = 5,
  SHOP_STOCK = 6,
  TAXCOLLECTOR = 8,
  NPC_MODIFY_TRADE = 9,
  BIDHOUSE_SELL = 10,
  BIDHOUSE_BUY = 11,
  MULTICRAFT_CRAFTER = 12,
  MULTICRAFT_CUSTOMER = 13,
  JOB_INDEX = 14,
  MOUNT = 15,
  MOUNT_STABLE = 16,
  NPC_RESURECT_PET = 17,
  NPC_TRADE_DRAGOTURKEY = 18,
  REALESTATE_HOUSE = 19,
  REALESTATE_FARM = 20,
  RUNES_TRADE = 21,
  RECYCLE_TRADE = 22,
  BANK = 23,
  TRASHBIN = 24,
  ALLIANCE_PRISM = 25,
  HAVENBAG = 26,
  NPC_TRADE_SEEMYOOL = 27,
  NPC_TRADE_RHINEETLE = 28,
  EVOLUTIVE_OBJECT_ELEMENTARY_RECYCLE = 29,
  NPC_RIDE_CAPABILITY_TRADE = 30,
}

export enum GameContextEnum {
  ROLE_PLAY = 1,
  FIGHT = 2,
}

export enum FighterRefusedReasonEnum {
  FIGHTER_REFUSED = -1,
  FIGHTER_ACCEPTED = 0,
  CHALLENGE_FULL = 1,
  TEAM_FULL = 2,
  WRONG_ALIGNMENT = 3,
  WRONG_GUILD = 4,
  TOO_LATE = 5,
  MUTANT_REFUSED = 6,
  WRONG_MAP = 7,
  JUST_RESPAWNED = 8,
  IM_OCCUPIED = 9,
  OPPONENT_OCCUPIED = 10,
  FIGHT_MYSELF = 11,
  INSUFFICIENT_RIGHTS = 12,
  MEMBER_ACCOUNT_NEEDED = 13,
  OPPONENT_NOT_MEMBER = 14,
  TEAM_LIMITED_BY_MAINCHARACTER = 15,
  MULTIACCOUNT_NOT_ALLOWED = 16,
  GHOST_REFUSED = 17,
  RESTRICTED_ACCOUNT = 19,
  WRONG_ALLIANCE = 20,
  AVA_ZONE = 21,
  ENTITY_REFUSED = 22,
  NOT_ENOUGH_ROOM = 23,
  GUEST_ACCOUNT = 24,
}

export enum LockableResultEnum {
  LOCKABLE_UNLOCKED = 0,
  LOCKABLE_CODE_ERROR = 1,
  LOCKABLE_UNLOCK_FORBIDDEN = 2,
}

export enum ClientUITypeEnum {
  CLIENT_UI_UNDEFINED = 0,
  CLIENT_UI_TELEPORT_GUILD_HOUSE = 1,
  CLIENT_UI_TELEPORT_GUILD_PADDOCK = 2,
  CLIENT_UI_OBJECT_MIMICRY = 3,
  CLIENT_UI_LEGENDARY_TREASURE_QUEST = 4,
  CLIENT_UI_TELEPORT_HOUSE = 5,
}

export enum TeleporterTypeEnum {
  TELEPORTER_ZAAP = 0,
  TELEPORTER_SUBWAY = 1,
  TELEPORTER_PRISM = 2,
  TELEPORTER_HAVENBAG = 3,
  TELEPORTER_ANOMALY = 4,
}

export enum IdentificationFailureReasonEnum {
  BAD_VERSION = 1,
  WRONG_CREDENTIALS = 2,
  BANNED = 3,
  KICKED = 4,
  IN_MAINTENANCE = 5,
  TOO_MANY_ON_IP = 6,
  TIME_OUT = 7,
  BAD_IPRANGE = 8,
  CREDENTIALS_RESET = 9,
  EMAIL_UNVALIDATED = 10,
  OTP_TIMEOUT = 11,
  LOCKED = 12,
  ANONYMOUS_IP_FORBIDDEN = 13,
  SERVICE_UNAVAILABLE = 53,
  EXTERNAL_ACCOUNT_LINK_REFUSED = 61,
  EXTERNAL_ACCOUNT_ALREADY_LINKED = 62,
  UNKNOWN_AUTH_ERROR = 99,
  SPARE = 100,
}

export enum SocialNoticeErrorEnum {
  SOCIAL_NOTICE_UNKNOWN_ERROR = 0,
  SOCIAL_NOTICE_INVALID_RIGHTS = 1,
  SOCIAL_NOTICE_COOLDOWN = 2,
}

export enum TaxCollectorErrorReasonEnum {
  TAX_COLLECTOR_ERROR_UNKNOWN = 0,
  TAX_COLLECTOR_NOT_FOUND = 1,
  TAX_COLLECTOR_NOT_OWNED = 2,
  TAX_COLLECTOR_NO_RIGHTS = 3,
  TAX_COLLECTOR_MAX_REACHED = 4,
  TAX_COLLECTOR_ALREADY_ONE = 5,
  TAX_COLLECTOR_CANT_HIRE_YET = 6,
  TAX_COLLECTOR_CANT_HIRE_HERE = 7,
  TAX_COLLECTOR_NOT_ENOUGH_KAMAS = 8,
}

export enum GuildInformationsTypeEnum {
  INFO_GENERAL = 1,
  INFO_MEMBERS = 2,
  INFO_BOOSTS = 3,
  INFO_PADDOCKS = 4,
  INFO_HOUSES = 5,
  INFO_TAX_COLLECTOR_GUILD_ONLY = 6,
  INFO_TAX_COLLECTOR_ALLIANCE = 7,
  INFO_TAX_COLLECTOR_LEAVE = 8,
  INFO_RECRUITMENT = 9,
}

export enum SocialGroupInvitationStateEnum {
  SOCIAL_GROUP_INVITATION_FAILED = 0,
  SOCIAL_GROUP_INVITATION_SENT = 1,
  SOCIAL_GROUP_INVITATION_CANCELED = 2,
  SOCIAL_GROUP_INVITATION_OK = 3,
}

export enum ListAddFailureEnum {
  LIST_ADD_FAILURE_UNKNOWN = 0,
  LIST_ADD_FAILURE_OVER_QUOTA = 1,
  LIST_ADD_FAILURE_NOT_FOUND = 2,
  LIST_ADD_FAILURE_EGOCENTRIC = 3,
  LIST_ADD_FAILURE_IS_DOUBLE = 4,
  LIST_ADD_FAILURE_IS_CONFLICTING_DOUBLE = 5,
}

export enum TaxCollectorMovementTypeEnum {
  TAX_COLLECTOR_UNKNOWN_ACTION = 0,
  TAX_COLLECTOR_HIRED = 1,
  TAX_COLLECTOR_HARVESTED = 2,
  TAX_COLLECTOR_DEFEATED = 3,
  TAX_COLLECTOR_DESTROYED = 4,
}

export enum TaxCollectorStateEnum {
  STATE_COLLECTING = 0,
  STATE_WAITING_FOR_HELP = 1,
  STATE_FIGHTING = 2,
}

export enum SocialGroupCreationResultEnum {
  SOCIAL_GROUP_CREATE_OK = 1,
  SOCIAL_GROUP_CREATE_ERROR_NAME_INVALID = 2,
  SOCIAL_GROUP_CREATE_ERROR_ALREADY_IN_GROUP = 3,
  SOCIAL_GROUP_CREATE_ERROR_NAME_ALREADY_EXISTS = 4,
  SOCIAL_GROUP_CREATE_ERROR_EMBLEM_ALREADY_EXISTS = 5,
  SOCIAL_GROUP_CREATE_ERROR_LEAVE = 6,
  SOCIAL_GROUP_CREATE_ERROR_CANCEL = 7,
  SOCIAL_GROUP_CREATE_ERROR_REQUIREMENT_UNMET = 8,
  SOCIAL_GROUP_CREATE_ERROR_EMBLEM_INVALID = 9,
  SOCIAL_GROUP_CREATE_ERROR_TAG_INVALID = 10,
  SOCIAL_GROUP_CREATE_ERROR_TAG_ALREADY_EXISTS = 11,
  SOCIAL_GROUP_CREATE_ERROR_NEEDS_SUBGROUP = 12,
  SOCIAL_GROUP_CREATE_ERROR_UNKNOWN = 99,
}

export enum PlayerStateEnum {
  NOT_CONNECTED = 0,
  GAME_TYPE_ROLEPLAY = 1,
  GAME_TYPE_FIGHT = 2,
  UNKNOWN_STATE = 99,
}

export enum ObjectErrorEnum {
  INVENTORY_FULL = 1,
  CANNOT_EQUIP_TWICE = 2,
  NOT_TRADABLE = 3,
  CANNOT_DROP = 4,
  CANNOT_DROP_NO_PLACE = 5,
  CANNOT_DESTROY = 6,
  LEVEL_TOO_LOW = 7,
  LIVING_OBJECT_REFUSED_FOOD = 8,
  CANNOT_UNEQUIP = 9,
  CANNOT_EQUIP_HERE = 10,
  CRITERIONS = 11,
  SYMBIOTIC_OBJECT_ERROR = 12,
  EVOLUTIVE_OBJECT_REFUSED_FOOD = 13,
}

export enum GameHierarchyEnum {
  UNAVAILABLE = -1,
  PLAYER = 0,
  MODERATOR = 10,
  GAMEMASTER_PADAWAN = 20,
  GAMEMASTER = 30,
  ADMIN = 40,
  UNKNOWN_SPECIAL_USER = 50,
}

export enum TextInformationTypeEnum {
  TEXT_INFORMATION_MESSAGE = 0,
  TEXT_INFORMATION_ERROR = 1,
  TEXT_INFORMATION_PVP = 2,
  TEXT_INFORMATION_FIGHT_LOG = 3,
  TEXT_INFORMATION_POPUP = 4,
  TEXT_LIVING_OBJECT = 5,
  TEXT_ENTITY_TALK = 6,
  TEXT_INFORMATION_FIGHT = 7,
}

export enum ChatChannelsMultiEnum {
  CHANNEL_GLOBAL = 0,
  CHANNEL_TEAM = 1,
  CHANNEL_GUILD = 2,
  CHANNEL_ALLIANCE = 3,
  CHANNEL_PARTY = 4,
  CHANNEL_SALES = 5,
  CHANNEL_SEEK = 6,
  CHANNEL_NOOB = 7,
  CHANNEL_ADMIN = 8,
  CHANNEL_ADS = 12,
  CHANNEL_ARENA = 13,
  CHANNEL_COMMUNITY = 14,
}

export enum ChatErrorEnum {
  CHAT_ERROR_UNKNOWN = 0,
  CHAT_ERROR_RECEIVER_NOT_FOUND = 1,
  CHAT_ERROR_INTERIOR_MONOLOGUE = 2,
  CHAT_ERROR_NO_GUILD = 3,
  CHAT_ERROR_NO_PARTY = 4,
  CHAT_ERROR_ALLIANCE = 5,
  CHAT_ERROR_INVALID_MAP = 6,
  CHAT_ERROR_NO_PARTY_ARENA = 7,
  CHAT_ERROR_NO_TEAM = 8,
  CHAT_ERROR_MALFORMED_CONTENT = 9,
  CHAT_ERROR_NO_CHANNEL_COMMUNITY = 10,
}

export enum PartyJoinErrorEnum {
  PARTY_JOIN_ERROR_UNKNOWN = 0,
  PARTY_JOIN_ERROR_PLAYER_NOT_FOUND = 1,
  PARTY_JOIN_ERROR_PARTY_NOT_FOUND = 2,
  PARTY_JOIN_ERROR_PARTY_FULL = 3,
  PARTY_JOIN_ERROR_PLAYER_BUSY = 4,
  PARTY_JOIN_ERROR_PLAYER_ALREADY_INVITED = 6,
  PARTY_JOIN_ERROR_PLAYER_TOO_SOLLICITED = 7,
  PARTY_JOIN_ERROR_PLAYER_LOYAL = 8,
  PARTY_JOIN_ERROR_UNMODIFIABLE = 9,
  PARTY_JOIN_ERROR_UNMET_CRITERION = 10,
  PARTY_JOIN_ERROR_NOT_ENOUGH_ROOM = 11,
  PARTY_JOIN_ERROR_COMPOSITION_CHANGED = 12,
  PARTY_JOIN_ERROR_PLAYER_IN_TUTORIAL = 13,
}

export enum PartyTypeEnum {
  PARTY_TYPE_UNDEFINED = 0,
  PARTY_TYPE_CLASSICAL = 1,
  PARTY_TYPE_DUNGEON = 2,
  PARTY_TYPE_ARENA = 3,
}

export enum PvpArenaTypeEnum {
  ARENA_TYPE_1VS1 = 1,
  ARENA_TYPE_3VS3_SOLO = 2,
  ARENA_TYPE_3VS3_TEAM = 3,
}

export enum PvpArenaStepEnum {
  ARENA_STEP_REGISTRED = 0,
  ARENA_STEP_WAITING_FIGHT = 1,
  ARENA_STEP_STARTING_FIGHT = 2,
  ARENA_STEP_UNREGISTER = 3,
}

export enum PartyNameErrorEnum {
  PARTY_NAME_UNDEFINED_ERROR = 0,
  PARTY_NAME_INVALID = 1,
  PARTY_NAME_ALREADY_USED = 2,
  PARTY_NAME_UNALLOWED_RIGHTS = 3,
  PARTY_NAME_UNALLOWED_NOW = 4,
}

export enum PrismSetSabotagedRefusedReasonEnum {
  SABOTAGE_REFUSED = -1,
  SABOTAGE_INSUFFICIENT_RIGHTS = 0,
  SABOTAGE_MEMBER_ACCOUNT_NEEDED = 1,
  SABOTAGE_RESTRICTED_ACCOUNT = 2,
  SABOTAGE_WRONG_ALLIANCE = 3,
  SABOTAGE_NO_PRISM = 4,
  SABOTAGE_WRONG_STATE = 5,
}

export enum PrismListenEnum {
  PRISM_LISTEN_NONE = 0,
  PRISM_LISTEN_MINE = 1,
  PRISM_LISTEN_ALL = 2,
}

export enum FightDispellableEnum {
  DISPELLABLE = 1,
  DISPELLABLE_BY_DEATH = 2,
  DISPELLABLE_BY_STRONG_DISPEL = 3,
  REALLY_NOT_DISPELLABLE = 4,
}

export enum GameActionMarkCellsTypeEnum {
  CELLS_CIRCLE = 0,
  CELLS_CROSS = 1,
  CELLS_SQUARE = 2,
}

export enum TeamTypeEnum {
  TEAM_TYPE_PLAYER = 0,
  TEAM_TYPE_MONSTER = 1,
  TEAM_TYPE_MUTANT = 2,
  TEAM_TYPE_TAXCOLLECTOR = 3,
  TEAM_TYPE_BAD_PLAYER = 4,
  TEAM_TYPE_PRISM = 5,
}

export enum BreachRoomUnlockEnum {
  BREACH_UNLOCK_SUCCESS = 0,
  BREACH_UNLOCK_FAIL_NOT_ENOUGH_BUDGET = 1,
}

export enum HavenBagDailyLoteryErrorEnum {
  HAVENBAG_DAILY_LOTERY_OK = 0,
  HAVENBAG_DAILY_LOTERY_ALREADYUSED = 1,
  HAVENBAG_DAILY_LOTERY_ERROR = 2,
}

export enum FightOptionsEnum {
  FIGHT_OPTION_SET_SECRET = 0,
  FIGHT_OPTION_SET_TO_PARTY_ONLY = 1,
  FIGHT_OPTION_SET_CLOSED = 2,
  FIGHT_OPTION_ASK_FOR_HELP = 3,
}

export enum TreasureHuntFlagRequestEnum {
  TREASURE_HUNT_FLAG_ERROR_UNDEFINED = 0,
  TREASURE_HUNT_FLAG_OK = 1,
  TREASURE_HUNT_FLAG_WRONG = 2,
  TREASURE_HUNT_FLAG_TOO_MANY = 3,
  TREASURE_HUNT_FLAG_ERROR_IMPOSSIBLE = 4,
  TREASURE_HUNT_FLAG_WRONG_INDEX = 5,
  TREASURE_HUNT_FLAG_SAME_MAP = 6,
}

export enum TreasureHuntDigRequestEnum {
  TREASURE_HUNT_DIG_ERROR_UNDEFINED = 0,
  TREASURE_HUNT_DIG_NEW_HINT = 1,
  TREASURE_HUNT_DIG_FINISHED = 2,
  TREASURE_HUNT_DIG_WRONG = 3,
  TREASURE_HUNT_DIG_LOST = 4,
  TREASURE_HUNT_DIG_ERROR_IMPOSSIBLE = 5,
  TREASURE_HUNT_DIG_WRONG_AND_YOU_KNOW_IT = 6,
}

export enum TreasureHuntFlagStateEnum {
  TREASURE_HUNT_FLAG_STATE_UNKNOWN = 0,
  TREASURE_HUNT_FLAG_STATE_OK = 1,
  TREASURE_HUNT_FLAG_STATE_WRONG = 2,
}

export enum TreasureHuntRequestEnum {
  TREASURE_HUNT_ERROR_UNDEFINED = 0,
  TREASURE_HUNT_OK = 1,
  TREASURE_HUNT_ERROR_NO_QUEST_FOUND = 2,
  TREASURE_HUNT_ERROR_ALREADY_HAVE_QUEST = 3,
  TREASURE_HUNT_ERROR_NOT_AVAILABLE = 4,
  TREASURE_HUNT_ERROR_DAILY_LIMIT_EXCEEDED = 5,
}

export enum TreasureHuntTypeEnum {
  TREASURE_HUNT_CLASSIC = 0,
  TREASURE_HUNT_PORTAL = 1,
  TREASURE_HUNT_LEGENDARY = 2,
}

export enum CharacterDeletionErrorEnum {
  DEL_ERR_NO_REASON = 1,
  DEL_ERR_TOO_MANY_CHAR_DELETION = 2,
  DEL_ERR_BAD_SECRET_ANSWER = 3,
  DEL_ERR_RESTRICED_ZONE = 4,
}

export enum CharacterRemodelingEnum {
  CHARACTER_REMODELING_NOT_APPLICABLE = 0,
  CHARACTER_REMODELING_NAME = 1,
  CHARACTER_REMODELING_COLORS = 2,
  CHARACTER_REMODELING_COSMETIC = 4,
  CHARACTER_REMODELING_BREED = 8,
  CHARACTER_REMODELING_GENDER = 16,
  CHARACTER_OPT_REMODELING_NAME = 32,
  CHARACTER_OPT_REMODELING_ALL = 64,
}

export enum ServerConnectionErrorEnum {
  SERVER_CONNECTION_ERROR_DUE_TO_STATUS = 0,
  SERVER_CONNECTION_ERROR_NO_REASON = 1,
  SERVER_CONNECTION_ERROR_ACCOUNT_RESTRICTED = 2,
  SERVER_CONNECTION_ERROR_COMMUNITY_RESTRICTED = 3,
  SERVER_CONNECTION_ERROR_LOCATION_RESTRICTED = 4,
  SERVER_CONNECTION_ERROR_SUBSCRIBERS_ONLY = 5,
  SERVER_CONNECTION_ERROR_REGULAR_PLAYERS_ONLY = 6,
  SERVER_CONNECTION_ERROR_MONOACCOUNT_CANNOT_VERIFY = 7,
  SERVER_CONNECTION_ERROR_MONOACCOUNT_ONLY = 8,
  SERVER_CONNECTION_ERROR_SERVER_OVERLOAD = 9,
}

export enum HaapiAuthTypeEnum {
  HAAPI_API_KEY = 0,
  HAAPI_TOKEN = 1,
}

export enum HaapiSessionTypeEnum {
  HAAPI_ACCOUNT_SESSION = 0,
  HAAPI_GAME_SESSION = 1,
}

export enum ForgettableSpellListActionEnum {
  FORGETTABLE_SPELL_LIST_DISPATCH = 0,
  FORGETTABLE_SPELL_LIST_UPDATE = 1,
}

export enum StatsUpgradeResultEnum {
  NONE = -1,
  SUCCESS = 0,
  RESTRICTED = 1,
  GUEST = 2,
  IN_FIGHT = 3,
  NOT_ENOUGH_POINT = 4,
}

export enum ConsoleMessageTypeEnum {
  CONSOLE_TEXT_MESSAGE = 0,
  CONSOLE_INFO_MESSAGE = 1,
  CONSOLE_ERR_MESSAGE = 2,
}

export enum AlignmentWarEffortDonationResultEnum {
  WAR_EFFORT_DONATION_SUCCESS = 0,
  WAR_EFFORT_DONATION_ERROR_NOT_ENOUGH_KAMAS = 1,
  WAR_EFFORT_DONATION_ERROR_INVALID_ALIGNMENT = 2,
  WAR_EFFORT_DONATION_ERROR_KAMAS_LIMIT_REACH = 3,
  WAR_EFFORT_DONATION_ERROR_UNKNOWN = 4,
}

export enum DialogTypeEnum {
  DIALOG_BOOK = 0,
  DIALOG_DIALOG = 1,
  DIALOG_LOCKABLE = 2,
  DIALOG_PURCHASABLE = 3,
  DIALOG_GUILD_INVITATION = 4,
  DIALOG_GUILD_CREATE = 5,
  DIALOG_GUILD_RENAME = 6,
  DIALOG_MARRIAGE = 7,
  DIALOG_DUNGEON_MEETING = 8,
  DIALOG_SPELL_FORGET = 9,
  DIALOG_TELEPORTER = 10,
  DIALOG_EXCHANGE = 11,
  DIALOG_ALLIANCE_INVITATION = 12,
  DIALOG_ALLIANCE_CREATE = 13,
  DIALOG_ALLIANCE_RENAME = 14,
  DIALOG_HAVENBAG_MEETING = 15,
}

export enum SocialContactCategoryEnum {
  SOCIAL_CONTACT_FRIEND = 0,
  SOCIAL_CONTACT_SPOUSE = 1,
  SOCIAL_CONTACT_PARTY = 2,
  SOCIAL_CONTACT_GUILD = 3,
  SOCIAL_CONTACT_ALLIANCE = 4,
  SOCIAL_CONTACT_CRAFTER = 5,
  SOCIAL_CONTACT_INTERLOCUTOR = 6,
  SOCIAL_CONTACT_FIGHT = 7,
}

export enum ExchangeReplayStopReasonEnum {
  STOPPED_REASON_OK = 1,
  STOPPED_REASON_USER = 2,
  STOPPED_REASON_MISSING_RESSOURCE = 3,
  STOPPED_REASON_IMPOSSIBLE_MODIFICATION = 4,
}

export enum MountEquipedErrorEnum {
  UNSET = 0,
  SET = 1,
  RIDING = 2,
}

export enum AllianceRightsBitEnum {
  ALLIANCE_RIGHT_NONE = 0,
  ALLIANCE_RIGHT_BOSS = 1,
  ALLIANCE_RIGHT_MANAGE_PRISMS = 2,
  ALLIANCE_RIGHT_TALK_IN_CHAN = 4,
  ALLIANCE_RIGHT_RECRUIT_GUILDS = 8,
  ALLIANCE_RIGHT_KICK_GUILDS = 16,
  ALLIANCE_RIGHT_MANAGE_RIGHTS = 32,
}

export enum AccessoryPreviewErrorEnum {
  PREVIEW_ERROR = 0,
  PREVIEW_COOLDOWN = 1,
  PREVIEW_BAD_ITEM = 2,
}

export enum PresetUseResultEnum {
  PRESET_USE_OK = 1,
  PRESET_USE_OK_PARTIAL = 2,
  PRESET_USE_ERR_STATS_FIGHT_PREPARATION = 3,
  PRESET_USE_ERR_COOLDOWN = 4,
  PRESET_USE_ERR_BAD_PRESET_ID = 5,
  PRESET_USE_ERR_INVALID_STATE = 6,
  PRESET_USE_ERR_STATS = 7,
  PRESET_USE_ERR_CRITERION = 8,
  PRESET_USE_ERR_UNKNOWN = 9,
  PRESET_USE_ERR_INVALID_DATA = 10,
}

export enum PresetDeleteResultEnum {
  PRESET_DEL_OK = 1,
  PRESET_DEL_ERR_UNKNOWN = 2,
  PRESET_DEL_ERR_BAD_PRESET_ID = 3,
  PRESET_DEL_ERR_SYSTEM_INACTIVE = 4,
}

export enum PresetSaveResultEnum {
  PRESET_SAVE_OK = 1,
  PRESET_SAVE_ERR_UNKNOWN = 2,
  PRESET_SAVE_ERR_TOO_MANY = 3,
  PRESET_SAVE_ERR_INVALID_PLAYER_STATE = 4,
  PRESET_SAVE_ERR_SYSTEM_INACTIVE = 5,
  PRESET_SAVE_ERR_INVALID_ID = 6,
}

export enum DelayedActionTypeEnum {
  DELAYED_ACTION_DISCONNECT = 0,
  DELAYED_ACTION_OBJECT_USE = 1,
  DELAYED_ACTION_JOIN_CHARACTER = 2,
  DELAYED_ACTION_AGGRESSION_IMMUNE = 3,
}

export enum BreachRewardLockEnum {
  BREACH_REWARD_LOCK_OWNER = 0,
  BREACH_REWARD_LOCK_FIGHTER = 1,
  BREACH_REWARD_LOCK_RESOURCES = 2,
  BREACH_REWARD_LOCK_CRITERION = 3,
  BREACH_REWARD_LOCK_USELESS = 4,
  BREACH_REWARD_MAX_PURCHASE_REACHED = 5,
}

export enum BidCancellationEnum {
  UNKNOWN_TYPE = 0,
  CLASSIC = 1,
  FRAUD = 2,
}

export enum BidValidationEnum {
  GENERIC_ERROR = 0,
  BUFFER_OVERLOAD = 1,
  OFFER_DOESNT_EXIST = 2,
  OFFER_ALREADY_EXISTS = 3,
  NOT_ENOUGH_KAMAS = 4,
  NOT_ENOUGH_OGRINES = 5,
  SERVER_MAINTENANCE = 6,
  PLAYER_IN_DEBT = 7,
  OFFER_IS_YOURS = 8,
  VALIDATION_SUCCESS = 100,
}

export enum BidActionEnum {
  INVALID_ACTION = 0,
  CONSUME_BUFF = 1,
  CANCEL = 2,
  CREATE_KAMA = 3,
  CREATE_OGRINE = 4,
  BUY_KAMA = 5,
  BUY_OGRINE = 6,
}

export enum CraftResultEnum {
  CRAFT_IMPOSSIBLE = 0,
  CRAFT_FAILED = 1,
  CRAFT_SUCCESS = 2,
  CRAFT_NEUTRAL = 3,
  CRAFT_FORBIDDEN = 4,
}

export enum HavenBagShareBitEnum {
  HAVEN_BAG_NONE = 0,
  HAVEN_BAG_FRIENDS = 1,
  HAVEN_BAG_GUILD = 2,
}

export enum GuildRecruitmentTypeEnum {
  DISABLED = 0,
  AUTOMATIC = 1,
  MANUAL = 2,
}

export enum GuildApplicationStateEnum {
  ADDED = 0,
  DELETED = 1,
  UPDATED = 2,
}

export enum GuildSummarySortEnum {
  SORT_BY_NAME = 0,
  SORT_BY_LEVEL = 1,
  SORT_BY_NB_MEMBERS = 2,
  SORT_BY_LAST_ACTIVITY = 3,
}

export enum BreedEnum {
  INCARNATION = -11,
  PRISM = -10,
  MOUNT_OUTSIDE = -9,
  MUTANT_IN_DUNGEON = -8,
  MUTANT = -7,
  TAX_COLLECTOR = -6,
  HUMAN_VENDOR = -5,
  NPC = -4,
  MONSTER_GROUP = -3,
  MONSTER = -2,
  SUMMONED = -1,
  UNDEFINED = 0,
  Feca = 1,
  Osamodas = 2,
  Enutrof = 3,
  Sram = 4,
  Xelor = 5,
  Ecaflip = 6,
  Eniripsa = 7,
  Iop = 8,
  Cra = 9,
  Sadida = 10,
  Sacrieur = 11,
  Pandawa = 12,
  Roublard = 13,
  Zobal = 14,
  Steamer = 15,
  Eliotrope = 16,
  Huppermage = 17,
  Ouginak = 18,
}

export enum NicknameErrorEnum {
  ALREADY_USED = 1,
  SAME_AS_LOGIN = 2,
  TOO_SIMILAR_TO_LOGIN = 3,
  INVALID_NICK = 4,
  UNKNOWN_NICK_ERROR = 99,
}

export enum ForgettableSpellClientActionEnum {
  FORGETTABLE_SPELL_FORGET = 0,
  FORGETTABLE_SPELL_EQUIP = 1,
  FORGETTABLE_SPELL_UNEQUIP = 2,
}

export enum SavablePresetTypeEnum {
  CHARACTER_BUILD = 0,
  SPELL_PRESET = 1,
}

export enum ExchangeHandleMountStableTypeEnum {
  EXCHANGE_MOUNTSTABLES_PUT = 1,
  EXCHANGE_MOUNTSTABLES_GET = 2,
  EXCHANGE_MOUNTSTABLES_FREE = 3,
  EXCHANGE_MOUNTSTABLES_CERTIF = 4,
  EXCHANGE_MOUNTSTABLES_UNCERTIF = 5,
  EXCHANGE_MOUNTPADDOCK_PUT = 6,
  EXCHANGE_MOUNTPADDOCK_GET = 7,
  EXCHANGE_MOUNTPADDOCK_FREE = 8,
  EXCHANGE_EQUIPED_MOUNTPADDOCK_PUT = 9,
  EXCHANGE_EQUIPED_MOUNTPADDOCK_GET = 10,
  EXCHANGE_EQUIPED_FREE = 11,
  EXCHANGE_CERTIFICAT_FREE = 12,
  EXCHANGE_EQUIPED_CERTIF = 13,
  EXCHANGE_MOUNTPADDOCK_CERTIF = 14,
  EXCHANGE_UNCERTIF_TO_EQUIPED = 15,
  EXCHANGE_UNCERTIF_TO_PADDOCK = 16,
  EXCHANGE_MOUNTSTABLES_STERILIZE = 17,
  EXCHANGE_EQUIPED_STERILIZE = 18,
  EXCHANGE_MOUNTPADDOCK_STERILIZE = 19,
}

export enum AlliancePrismModuleTypeEnum {
  TELEPORTER = 0,
  RECYCLER = 1,
}

export enum PlayableBreedEnum {
  UNDEFINED = 0,
  Feca = 1,
  Osamodas = 2,
  Enutrof = 3,
  Sram = 4,
  Xelor = 5,
  Ecaflip = 6,
  Eniripsa = 7,
  Iop = 8,
  Cra = 9,
  Sadida = 10,
  Sacrieur = 11,
  Pandawa = 12,
  Roublard = 13,
  Zobal = 14,
  Steamer = 15,
  Eliotrope = 16,
  Huppermage = 17,
  Ouginak = 18,
}

export enum HavenBagRoomActionEnum {
  HAVEN_BAG_ROOM_DISPATCH = 0,
  HAVEN_BAG_ROOM_UPDATE = 1,
}

export enum SubscriptionRequiredEnum {
  LIMITED_TO_SUBSCRIBER = 0,
  LIMIT_ON_JOB_XP = 1,
  LIMIT_ON_JOB_USE = 2,
  LIMIT_ON_MAP = 3,
  LIMIT_ON_ITEM = 4,
  LIMIT_ON_VENDOR = 5,
  LIMIT_ON_HAVENBAG = 6,
}

export enum GuildRightsBitEnum {
  GUILD_RIGHT_NONE = 0,
  GUILD_RIGHT_BOSS = 1,
  GUILD_RIGHT_MANAGE_GUILD_BOOSTS = 2,
  GUILD_RIGHT_MANAGE_RIGHTS = 4,
  GUILD_RIGHT_INVITE_NEW_MEMBERS = 8,
  GUILD_RIGHT_BAN_MEMBERS = 16,
  GUILD_RIGHT_MANAGE_XP_CONTRIBUTION = 32,
  GUILD_RIGHT_MANAGE_RANKS = 64,
  GUILD_RIGHT_HIRE_TAX_COLLECTOR = 128,
  GUILD_RIGHT_MANAGE_MY_XP_CONTRIBUTION = 256,
  GUILD_RIGHT_COLLECT = 512,
  GUILD_RIGHT_USE_PADDOCKS = 4096,
  GUILD_RIGHT_ORGANIZE_PADDOCKS = 8192,
  GUILD_RIGHT_TAKE_OTHERS_MOUNTS_IN_PADDOCKS = 16384,
  GUILD_RIGHT_DEFENSE_PRIORITY = 32768,
  GUILD_RIGHT_COLLECT_MY_TAX_COLLECTOR = 65536,
  GUILD_RIGHT_SET_ALLIANCE_PRISM = 131072,
  GUILD_RIGHT_TALK_IN_ALLIANCE_CHAN = 262144,
}

export class GameContextActorPositionInformations extends DofusType {
  public static id: number = 1244;
  public id: number = 1244;

  public contextualId: number | undefined = 0;
  public disposition: EntityDispositionInformations | undefined;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
  ) {
    super();
    this.contextualId = contextualId;
    this.disposition = disposition;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.contextualId!);
    writer.writeShort(this.disposition!.id);
    this.disposition!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.contextualId = reader.readDouble();
    const dispositionTypeId: number = reader.readShort();
    this.disposition = new types[
      dispositionTypeId
    ]() as EntityDispositionInformations;
    this.disposition!.deserialize(reader);
  }
}

export class GameContextActorInformations extends GameContextActorPositionInformations {
  public static id: number = 801;
  public id: number = 801;

  public look: EntityLook | undefined;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
  ) {
    super(contextualId, disposition);
    this.look = look;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.look!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.look = new EntityLook();
    this.look!.deserialize(reader);
  }
}

export class GameRolePlayActorInformations extends GameContextActorInformations {
  public static id: number = 102;
  public id: number = 102;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
  ) {
    super(contextualId, disposition, look);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GameRolePlayGroupMonsterInformations extends GameRolePlayActorInformations {
  public static id: number = 3148;
  public id: number = 3148;

  public lootShare: number | undefined = 0;
  public staticInfos: GroupMonsterStaticInformations | undefined;
  public alignmentSide: number | undefined = 0;
  public keyRingBonus: boolean | undefined = false;
  public hasHardcoreDrop: boolean | undefined = false;
  public hasAVARewardToken: boolean | undefined = false;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    lootShare?: number | undefined,
    staticInfos?: GroupMonsterStaticInformations | undefined,
    alignmentSide?: number | undefined,
    keyRingBonus?: boolean | undefined,
    hasHardcoreDrop?: boolean | undefined,
    hasAVARewardToken?: boolean | undefined,
  ) {
    super(contextualId, disposition, look);
    this.lootShare = lootShare;
    this.staticInfos = staticInfos;
    this.alignmentSide = alignmentSide;
    this.keyRingBonus = keyRingBonus;
    this.hasHardcoreDrop = hasHardcoreDrop;
    this.hasAVARewardToken = hasAVARewardToken;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.lootShare!);
    writer.writeShort(this.staticInfos!.id);
    this.staticInfos!.serialize(writer);
    writer.writeByte(this.alignmentSide!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.keyRingBonus!);
    box0 = setFlag(box0, 1, this.hasHardcoreDrop!);
    box0 = setFlag(box0, 2, this.hasAVARewardToken!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.lootShare = reader.readByte();
    const staticInfosTypeId: number = reader.readShort();
    this.staticInfos = new types[
      staticInfosTypeId
    ]() as GroupMonsterStaticInformations;
    this.staticInfos!.deserialize(reader);
    this.alignmentSide = reader.readByte();
    const box0 = reader.readByte();
    this.keyRingBonus = getFlag(box0, 0);
    this.hasHardcoreDrop = getFlag(box0, 1);
    this.hasAVARewardToken = getFlag(box0, 2);
  }
}

export class HavenBagRoomPreviewInformation extends DofusType {
  public static id: number = 8913;
  public id: number = 8913;

  public themeId: number | undefined = 0;
  public roomId: number | undefined = 0;

  public constructor(
    themeId?: number | undefined,
    roomId?: number | undefined,
  ) {
    super();
    this.themeId = themeId;
    this.roomId = roomId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.themeId!);
    writer.writeByte(this.roomId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.themeId = reader.readByte();
    this.roomId = reader.readByte();
  }
}

export class InteractiveElement extends DofusType {
  public static id: number = 4768;
  public id: number = 4768;

  public elementTypeId: number | undefined = 0;
  public elementId: number | undefined = 0;
  public disabledSkills: InteractiveElementSkill[] | undefined;
  public enabledSkills: InteractiveElementSkill[] | undefined;
  public onCurrentMap: boolean | undefined = false;

  public constructor(
    elementTypeId?: number | undefined,
    elementId?: number | undefined,
    disabledSkills?: InteractiveElementSkill[] | undefined,
    enabledSkills?: InteractiveElementSkill[] | undefined,
    onCurrentMap?: boolean | undefined,
  ) {
    super();
    this.elementTypeId = elementTypeId;
    this.elementId = elementId;
    this.disabledSkills = disabledSkills;
    this.enabledSkills = enabledSkills;
    this.onCurrentMap = onCurrentMap;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.elementTypeId!);
    writer.writeInt(this.elementId!);
    writer.writeShort(this.disabledSkills!.length);
    this.disabledSkills!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.enabledSkills!.length);
    this.enabledSkills!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeBoolean(this.onCurrentMap!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.elementTypeId = reader.readInt();
    this.elementId = reader.readInt();
    this.disabledSkills = [];
    const countDisabledSkills = reader.readShort();
    for (let i: number = 0; i < countDisabledSkills; i++) {
      const disabledSkillsTypeId: number = reader.readShort();
      const type: InteractiveElementSkill = new types[
        disabledSkillsTypeId
      ]() as InteractiveElementSkill;
      type.deserialize(reader);
      this.disabledSkills.push(type);
    }
    this.enabledSkills = [];
    const countEnabledSkills = reader.readShort();
    for (let i: number = 0; i < countEnabledSkills; i++) {
      const enabledSkillsTypeId: number = reader.readShort();
      const type: InteractiveElementSkill = new types[
        enabledSkillsTypeId
      ]() as InteractiveElementSkill;
      type.deserialize(reader);
      this.enabledSkills.push(type);
    }
    this.onCurrentMap = reader.readBoolean();
  }
}

export class GameFightFighterInformations extends GameContextActorInformations {
  public static id: number = 5068;
  public id: number = 5068;

  public wave: number | undefined = 0;
  public spawnInfo: GameContextBasicSpawnInformation | undefined;
  public previousPositions: number[] | undefined;
  public stats: GameFightCharacteristics | undefined;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    wave?: number | undefined,
    spawnInfo?: GameContextBasicSpawnInformation | undefined,
    previousPositions?: number[] | undefined,
    stats?: GameFightCharacteristics | undefined,
  ) {
    super(contextualId, disposition, look);
    this.wave = wave;
    this.spawnInfo = spawnInfo;
    this.previousPositions = previousPositions;
    this.stats = stats;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.wave!);
    this.spawnInfo!.serialize(writer);
    writer.writeShort(this.previousPositions!.length);
    this.previousPositions!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
    writer.writeShort(this.stats!.id);
    this.stats!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.wave = reader.readByte();
    this.spawnInfo = new GameContextBasicSpawnInformation();
    this.spawnInfo!.deserialize(reader);
    this.previousPositions = [];
    const countPreviousPositions = reader.readShort();
    for (let i: number = 0; i < countPreviousPositions; i++) {
      this.previousPositions.push(reader.readVarShort());
    }
    const statsTypeId: number = reader.readShort();
    this.stats = new types[statsTypeId]() as GameFightCharacteristics;
    this.stats!.deserialize(reader);
  }
}

export class GameFightEntityInformation extends GameFightFighterInformations {
  public static id: number = 5544;
  public id: number = 5544;

  public entityModelId: number | undefined = 0;
  public masterId: number | undefined = 0;
  public level: number | undefined = 0;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    wave?: number | undefined,
    spawnInfo?: GameContextBasicSpawnInformation | undefined,
    previousPositions?: number[] | undefined,
    stats?: GameFightCharacteristics | undefined,
    entityModelId?: number | undefined,
    masterId?: number | undefined,
    level?: number | undefined,
  ) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats,
    );
    this.entityModelId = entityModelId;
    this.masterId = masterId;
    this.level = level;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.entityModelId!);
    writer.writeDouble(this.masterId!);
    writer.writeVarShort(this.level!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.entityModelId = reader.readByte();
    this.masterId = reader.readDouble();
    this.level = reader.readVarShort();
  }
}

export class GameRolePlayPrismInformations extends GameRolePlayActorInformations {
  public static id: number = 6265;
  public id: number = 6265;

  public prism: PrismInformation | undefined;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    prism?: PrismInformation | undefined,
  ) {
    super(contextualId, disposition, look);
    this.prism = prism;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.prism!.id);
    this.prism!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const prismTypeId: number = reader.readShort();
    this.prism = new types[prismTypeId]() as PrismInformation;
    this.prism!.deserialize(reader);
  }
}

export class GameFightAIInformations extends GameFightFighterInformations {
  public static id: number = 858;
  public id: number = 858;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    wave?: number | undefined,
    spawnInfo?: GameContextBasicSpawnInformation | undefined,
    previousPositions?: number[] | undefined,
    stats?: GameFightCharacteristics | undefined,
  ) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats,
    );
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GameFightMonsterInformations extends GameFightAIInformations {
  public static id: number = 1922;
  public id: number = 1922;

  public creatureLevel: number | undefined = 0;
  public creatureGenericId: number | undefined = 0;
  public creatureGrade: number | undefined = 0;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    wave?: number | undefined,
    spawnInfo?: GameContextBasicSpawnInformation | undefined,
    previousPositions?: number[] | undefined,
    stats?: GameFightCharacteristics | undefined,
    creatureLevel?: number | undefined,
    creatureGenericId?: number | undefined,
    creatureGrade?: number | undefined,
  ) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats,
    );
    this.creatureLevel = creatureLevel;
    this.creatureGenericId = creatureGenericId;
    this.creatureGrade = creatureGrade;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.creatureLevel!);
    writer.writeVarShort(this.creatureGenericId!);
    writer.writeByte(this.creatureGrade!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.creatureLevel = reader.readShort();
    this.creatureGenericId = reader.readVarShort();
    this.creatureGrade = reader.readByte();
  }
}

export class GameRolePlayGroupMonsterWaveInformations extends GameRolePlayGroupMonsterInformations {
  public static id: number = 5382;
  public id: number = 5382;

  public nbWaves: number | undefined = 0;
  public alternatives: GroupMonsterStaticInformations[] | undefined;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    lootShare?: number | undefined,
    staticInfos?: GroupMonsterStaticInformations | undefined,
    alignmentSide?: number | undefined,
    keyRingBonus?: boolean | undefined,
    hasHardcoreDrop?: boolean | undefined,
    hasAVARewardToken?: boolean | undefined,
    nbWaves?: number | undefined,
    alternatives?: GroupMonsterStaticInformations[] | undefined,
  ) {
    super(
      contextualId,
      disposition,
      look,
      lootShare,
      staticInfos,
      alignmentSide,
      keyRingBonus,
      hasHardcoreDrop,
      hasAVARewardToken,
    );
    this.nbWaves = nbWaves;
    this.alternatives = alternatives;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.nbWaves!);
    writer.writeShort(this.alternatives!.length);
    this.alternatives!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.nbWaves = reader.readByte();
    this.alternatives = [];
    const countAlternatives = reader.readShort();
    for (let i: number = 0; i < countAlternatives; i++) {
      const alternativesTypeId: number = reader.readShort();
      const type: GroupMonsterStaticInformations = new types[
        alternativesTypeId
      ]() as GroupMonsterStaticInformations;
      type.deserialize(reader);
      this.alternatives.push(type);
    }
  }
}

export class GameRolePlayTaxCollectorInformations extends GameRolePlayActorInformations {
  public static id: number = 5071;
  public id: number = 5071;

  public identification: TaxCollectorStaticInformations | undefined;
  public taxCollectorAttack: number | undefined = 0;
  public guildLevel: number | undefined = 0;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    identification?: TaxCollectorStaticInformations | undefined,
    taxCollectorAttack?: number | undefined,
    guildLevel?: number | undefined,
  ) {
    super(contextualId, disposition, look);
    this.identification = identification;
    this.taxCollectorAttack = taxCollectorAttack;
    this.guildLevel = guildLevel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.identification!.id);
    this.identification!.serialize(writer);
    writer.writeInt(this.taxCollectorAttack!);
    writer.writeByte(this.guildLevel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    const identificationTypeId: number = reader.readShort();
    this.identification = new types[
      identificationTypeId
    ]() as TaxCollectorStaticInformations;
    this.identification!.deserialize(reader);
    this.taxCollectorAttack = reader.readInt();
    this.guildLevel = reader.readByte();
  }
}

export class GameRolePlayNamedActorInformations extends GameRolePlayActorInformations {
  public static id: number = 6660;
  public id: number = 6660;

  public name: string | undefined;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    name?: string | undefined,
  ) {
    super(contextualId, disposition, look);
    this.name = name;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.name!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.name = reader.readUTF();
  }
}

export class GameRolePlayMountInformations extends GameRolePlayNamedActorInformations {
  public static id: number = 9304;
  public id: number = 9304;

  public level: number | undefined = 0;
  public ownerName: string | undefined;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    name?: string | undefined,
    level?: number | undefined,
    ownerName?: string | undefined,
  ) {
    super(contextualId, disposition, look, name);
    this.level = level;
    this.ownerName = ownerName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.level!);
    writer.writeUTF(this.ownerName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.level = reader.readByte();
    this.ownerName = reader.readUTF();
  }
}

export class GameRolePlayNpcInformations extends GameRolePlayActorInformations {
  public static id: number = 7419;
  public id: number = 7419;

  public specialArtworkId: number | undefined = 0;
  public npcId: number | undefined = 0;
  public sex: boolean | undefined = false;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    specialArtworkId?: number | undefined,
    npcId?: number | undefined,
    sex?: boolean | undefined,
  ) {
    super(contextualId, disposition, look);
    this.specialArtworkId = specialArtworkId;
    this.npcId = npcId;
    this.sex = sex;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.specialArtworkId!);
    writer.writeVarShort(this.npcId!);
    writer.writeBoolean(this.sex!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.specialArtworkId = reader.readVarShort();
    this.npcId = reader.readVarShort();
    this.sex = reader.readBoolean();
  }
}

export class GameRolePlayNpcWithQuestInformations extends GameRolePlayNpcInformations {
  public static id: number = 3824;
  public id: number = 3824;

  public questFlag: GameRolePlayNpcQuestFlag | undefined;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    specialArtworkId?: number | undefined,
    npcId?: number | undefined,
    sex?: boolean | undefined,
    questFlag?: GameRolePlayNpcQuestFlag | undefined,
  ) {
    super(contextualId, disposition, look, specialArtworkId, npcId, sex);
    this.questFlag = questFlag;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.questFlag!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.questFlag = new GameRolePlayNpcQuestFlag();
    this.questFlag!.deserialize(reader);
  }
}

export class GameRolePlayMerchantInformations extends GameRolePlayNamedActorInformations {
  public static id: number = 3425;
  public id: number = 3425;

  public sellType: number | undefined = 0;
  public options: HumanOption[] | undefined;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    name?: string | undefined,
    sellType?: number | undefined,
    options?: HumanOption[] | undefined,
  ) {
    super(contextualId, disposition, look, name);
    this.sellType = sellType;
    this.options = options;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.sellType!);
    writer.writeShort(this.options!.length);
    this.options!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.sellType = reader.readByte();
    this.options = [];
    const countOptions = reader.readShort();
    for (let i: number = 0; i < countOptions; i++) {
      const optionsTypeId: number = reader.readShort();
      const type: HumanOption = new types[optionsTypeId]() as HumanOption;
      type.deserialize(reader);
      this.options.push(type);
    }
  }
}

export class GameRolePlayHumanoidInformations extends GameRolePlayNamedActorInformations {
  public static id: number = 345;
  public id: number = 345;

  public humanoidInfo: HumanInformations | undefined;
  public accountId: number | undefined = 0;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    name?: string | undefined,
    humanoidInfo?: HumanInformations | undefined,
    accountId?: number | undefined,
  ) {
    super(contextualId, disposition, look, name);
    this.humanoidInfo = humanoidInfo;
    this.accountId = accountId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.humanoidInfo!.id);
    this.humanoidInfo!.serialize(writer);
    writer.writeInt(this.accountId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    const humanoidInfoTypeId: number = reader.readShort();
    this.humanoidInfo = new types[humanoidInfoTypeId]() as HumanInformations;
    this.humanoidInfo!.deserialize(reader);
    this.accountId = reader.readInt();
  }
}

export class GameRolePlayCharacterInformations extends GameRolePlayHumanoidInformations {
  public static id: number = 9532;
  public id: number = 9532;

  public alignmentInfos: ActorAlignmentInformations | undefined;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    name?: string | undefined,
    humanoidInfo?: HumanInformations | undefined,
    accountId?: number | undefined,
    alignmentInfos?: ActorAlignmentInformations | undefined,
  ) {
    super(contextualId, disposition, look, name, humanoidInfo, accountId);
    this.alignmentInfos = alignmentInfos;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.alignmentInfos!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.alignmentInfos = new ActorAlignmentInformations();
    this.alignmentInfos!.deserialize(reader);
  }
}

export class GameRolePlayPortalInformations extends GameRolePlayActorInformations {
  public static id: number = 8125;
  public id: number = 8125;

  public portal: PortalInformation | undefined;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    portal?: PortalInformation | undefined,
  ) {
    super(contextualId, disposition, look);
    this.portal = portal;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.portal!.id);
    this.portal!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const portalTypeId: number = reader.readShort();
    this.portal = new types[portalTypeId]() as PortalInformation;
    this.portal!.deserialize(reader);
  }
}

export class GameRolePlayMutantInformations extends GameRolePlayHumanoidInformations {
  public static id: number = 4120;
  public id: number = 4120;

  public powerLevel: number | undefined = 0;
  public monsterId: number | undefined = 0;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    name?: string | undefined,
    humanoidInfo?: HumanInformations | undefined,
    accountId?: number | undefined,
    powerLevel?: number | undefined,
    monsterId?: number | undefined,
  ) {
    super(contextualId, disposition, look, name, humanoidInfo, accountId);
    this.powerLevel = powerLevel;
    this.monsterId = monsterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.powerLevel!);
    writer.writeVarShort(this.monsterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.powerLevel = reader.readByte();
    this.monsterId = reader.readVarShort();
  }
}

export class GameFightFighterNamedInformations extends GameFightFighterInformations {
  public static id: number = 7293;
  public id: number = 7293;

  public status: PlayerStatus | undefined;
  public name: string | undefined;
  public hiddenInPrefight: boolean | undefined = false;
  public leagueId: number | undefined = 0;
  public ladderPosition: number | undefined = 0;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    wave?: number | undefined,
    spawnInfo?: GameContextBasicSpawnInformation | undefined,
    previousPositions?: number[] | undefined,
    stats?: GameFightCharacteristics | undefined,
    status?: PlayerStatus | undefined,
    name?: string | undefined,
    hiddenInPrefight?: boolean | undefined,
    leagueId?: number | undefined,
    ladderPosition?: number | undefined,
  ) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats,
    );
    this.status = status;
    this.name = name;
    this.hiddenInPrefight = hiddenInPrefight;
    this.leagueId = leagueId;
    this.ladderPosition = ladderPosition;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.status!.serialize(writer);
    writer.writeUTF(this.name!);
    writer.writeBoolean(this.hiddenInPrefight!);
    writer.writeVarShort(this.leagueId!);
    writer.writeInt(this.ladderPosition!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.status = new PlayerStatus();
    this.status!.deserialize(reader);
    this.name = reader.readUTF();
    this.hiddenInPrefight = reader.readBoolean();
    this.leagueId = reader.readVarShort();
    this.ladderPosition = reader.readInt();
  }
}

export class GameFightCharacterInformations extends GameFightFighterNamedInformations {
  public static id: number = 2405;
  public id: number = 2405;

  public sex: boolean | undefined = false;
  public breed: number | undefined = 0;
  public level: number | undefined = 0;
  public alignmentInfos: ActorAlignmentInformations | undefined;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    wave?: number | undefined,
    spawnInfo?: GameContextBasicSpawnInformation | undefined,
    previousPositions?: number[] | undefined,
    stats?: GameFightCharacteristics | undefined,
    status?: PlayerStatus | undefined,
    name?: string | undefined,
    hiddenInPrefight?: boolean | undefined,
    leagueId?: number | undefined,
    ladderPosition?: number | undefined,
    sex?: boolean | undefined,
    breed?: number | undefined,
    level?: number | undefined,
    alignmentInfos?: ActorAlignmentInformations | undefined,
  ) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats,
      status,
      name,
      hiddenInPrefight,
      leagueId,
      ladderPosition,
    );
    this.sex = sex;
    this.breed = breed;
    this.level = level;
    this.alignmentInfos = alignmentInfos;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.sex!);
    writer.writeByte(this.breed!);
    writer.writeVarShort(this.level!);
    this.alignmentInfos!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.sex = reader.readBoolean();
    this.breed = reader.readByte();
    this.level = reader.readVarShort();
    this.alignmentInfos = new ActorAlignmentInformations();
    this.alignmentInfos!.deserialize(reader);
  }
}

export class GameFightTaxCollectorInformations extends GameFightAIInformations {
  public static id: number = 5235;
  public id: number = 5235;

  public level: number | undefined = 0;
  public firstNameId: number | undefined = 0;
  public lastNameId: number | undefined = 0;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    wave?: number | undefined,
    spawnInfo?: GameContextBasicSpawnInformation | undefined,
    previousPositions?: number[] | undefined,
    stats?: GameFightCharacteristics | undefined,
    level?: number | undefined,
    firstNameId?: number | undefined,
    lastNameId?: number | undefined,
  ) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats,
    );
    this.level = level;
    this.firstNameId = firstNameId;
    this.lastNameId = lastNameId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.level!);
    writer.writeVarShort(this.firstNameId!);
    writer.writeVarShort(this.lastNameId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.level = reader.readByte();
    this.firstNameId = reader.readVarShort();
    this.lastNameId = reader.readVarShort();
  }
}

export class EntityLook extends DofusType {
  public static id: number = 9546;
  public id: number = 9546;

  public skins: number[] | undefined;
  public subentities: SubEntity[] | undefined;
  public bonesId: number | undefined = 0;
  public indexedColors: number[] | undefined;
  public scales: number[] | undefined;

  public constructor(
    skins?: number[] | undefined,
    subentities?: SubEntity[] | undefined,
    bonesId?: number | undefined,
    indexedColors?: number[] | undefined,
    scales?: number[] | undefined,
  ) {
    super();
    this.skins = skins;
    this.subentities = subentities;
    this.bonesId = bonesId;
    this.indexedColors = indexedColors;
    this.scales = scales;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.skins!.length);
    this.skins!.forEach((current: number) => writer.writeVarShort(current));
    writer.writeShort(this.subentities!.length);
    this.subentities!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.bonesId!);
    writer.writeShort(this.indexedColors!.length);
    this.indexedColors!.forEach((current: number) => writer.writeInt(current));
    writer.writeShort(this.scales!.length);
    this.scales!.forEach((current: number) => writer.writeVarShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.skins = [];
    const countSkins = reader.readShort();
    for (let i: number = 0; i < countSkins; i++) {
      this.skins.push(reader.readVarShort());
    }
    this.subentities = [];
    const countSubentities = reader.readShort();
    for (let i: number = 0; i < countSubentities; i++) {
      const type: SubEntity = new SubEntity();
      type.deserialize(reader);
      this.subentities.push(type);
    }
    this.bonesId = reader.readVarShort();
    this.indexedColors = [];
    const countIndexedColors = reader.readShort();
    for (let i: number = 0; i < countIndexedColors; i++) {
      this.indexedColors.push(reader.readInt());
    }
    this.scales = [];
    const countScales = reader.readShort();
    for (let i: number = 0; i < countScales; i++) {
      this.scales.push(reader.readVarShort());
    }
  }
}

export class SubEntity extends DofusType {
  public static id: number = 8670;
  public id: number = 8670;

  public subEntityLook: EntityLook | undefined;
  public bindingPointCategory: number | undefined = 0;
  public bindingPointIndex: number | undefined = 0;

  public constructor(
    subEntityLook?: EntityLook | undefined,
    bindingPointCategory?: number | undefined,
    bindingPointIndex?: number | undefined,
  ) {
    super();
    this.subEntityLook = subEntityLook;
    this.bindingPointCategory = bindingPointCategory;
    this.bindingPointIndex = bindingPointIndex;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.subEntityLook!.serialize(writer);
    writer.writeByte(this.bindingPointCategory!);
    writer.writeByte(this.bindingPointIndex!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.subEntityLook = new EntityLook();
    this.subEntityLook!.deserialize(reader);
    this.bindingPointCategory = reader.readByte();
    this.bindingPointIndex = reader.readByte();
  }
}

export class AbstractFightDispellableEffect extends DofusType {
  public static id: number = 1657;
  public id: number = 1657;

  public parentBoostUid: number | undefined = 0;
  public effectId: number | undefined = 0;
  public targetId: number | undefined = 0;
  public uid: number | undefined = 0;
  public turnDuration: number | undefined = 0;
  public spellId: number | undefined = 0;
  public dispelable: number | undefined = 1;

  public constructor(
    parentBoostUid?: number | undefined,
    effectId?: number | undefined,
    targetId?: number | undefined,
    uid?: number | undefined,
    turnDuration?: number | undefined,
    spellId?: number | undefined,
    dispelable?: number | undefined,
  ) {
    super();
    this.parentBoostUid = parentBoostUid;
    this.effectId = effectId;
    this.targetId = targetId;
    this.uid = uid;
    this.turnDuration = turnDuration;
    this.spellId = spellId;
    this.dispelable = dispelable;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.parentBoostUid!);
    writer.writeVarInt(this.effectId!);
    writer.writeDouble(this.targetId!);
    writer.writeVarInt(this.uid!);
    writer.writeShort(this.turnDuration!);
    writer.writeVarShort(this.spellId!);
    writer.writeByte(this.dispelable!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.parentBoostUid = reader.readVarInt();
    this.effectId = reader.readVarInt();
    this.targetId = reader.readDouble();
    this.uid = reader.readVarInt();
    this.turnDuration = reader.readShort();
    this.spellId = reader.readVarShort();
    this.dispelable = reader.readByte();
  }
}

export class GameContextSummonsInformation extends DofusType {
  public static id: number = 253;
  public id: number = 253;

  public wave: number | undefined = 0;
  public spawnInformation: SpawnInformation | undefined;
  public summons: GameContextBasicSpawnInformation[] | undefined;
  public look: EntityLook | undefined;
  public stats: GameFightCharacteristics | undefined;

  public constructor(
    wave?: number | undefined,
    spawnInformation?: SpawnInformation | undefined,
    summons?: GameContextBasicSpawnInformation[] | undefined,
    look?: EntityLook | undefined,
    stats?: GameFightCharacteristics | undefined,
  ) {
    super();
    this.wave = wave;
    this.spawnInformation = spawnInformation;
    this.summons = summons;
    this.look = look;
    this.stats = stats;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.wave!);
    writer.writeShort(this.spawnInformation!.id);
    this.spawnInformation!.serialize(writer);
    writer.writeShort(this.summons!.length);
    this.summons!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    this.look!.serialize(writer);
    writer.writeShort(this.stats!.id);
    this.stats!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.wave = reader.readByte();
    const spawnInformationTypeId: number = reader.readShort();
    this.spawnInformation = new types[
      spawnInformationTypeId
    ]() as SpawnInformation;
    this.spawnInformation!.deserialize(reader);
    this.summons = [];
    const countSummons = reader.readShort();
    for (let i: number = 0; i < countSummons; i++) {
      const summonsTypeId: number = reader.readShort();
      const type: GameContextBasicSpawnInformation = new types[
        summonsTypeId
      ]() as GameContextBasicSpawnInformation;
      type.deserialize(reader);
      this.summons.push(type);
    }
    this.look = new EntityLook();
    this.look!.deserialize(reader);
    const statsTypeId: number = reader.readShort();
    this.stats = new types[statsTypeId]() as GameFightCharacteristics;
    this.stats!.deserialize(reader);
  }
}

export class FightTemporaryBoostEffect extends AbstractFightDispellableEffect {
  public static id: number = 7366;
  public id: number = 7366;

  public delta: number | undefined = 0;

  public constructor(
    parentBoostUid?: number | undefined,
    effectId?: number | undefined,
    targetId?: number | undefined,
    uid?: number | undefined,
    turnDuration?: number | undefined,
    spellId?: number | undefined,
    dispelable?: number | undefined,
    delta?: number | undefined,
  ) {
    super(
      parentBoostUid,
      effectId,
      targetId,
      uid,
      turnDuration,
      spellId,
      dispelable,
    );
    this.delta = delta;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.delta!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.delta = reader.readInt();
  }
}

export class SpawnInformation extends DofusType {
  public static id: number = 5149;
  public id: number = 5149;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class SpawnCompanionInformation extends SpawnInformation {
  public static id: number = 8892;
  public id: number = 8892;

  public summonerId: number | undefined = 0;
  public modelId: number | undefined = 0;
  public ownerId: number | undefined = 0;
  public level: number | undefined = 0;

  public constructor(
    summonerId?: number | undefined,
    modelId?: number | undefined,
    ownerId?: number | undefined,
    level?: number | undefined,
  ) {
    super();
    this.summonerId = summonerId;
    this.modelId = modelId;
    this.ownerId = ownerId;
    this.level = level;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.summonerId!);
    writer.writeByte(this.modelId!);
    writer.writeDouble(this.ownerId!);
    writer.writeVarShort(this.level!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.summonerId = reader.readDouble();
    this.modelId = reader.readByte();
    this.ownerId = reader.readDouble();
    this.level = reader.readVarShort();
  }
}

export class BaseSpawnMonsterInformation extends SpawnInformation {
  public static id: number = 736;
  public id: number = 736;

  public creatureGenericId: number | undefined = 0;

  public constructor(creatureGenericId?: number | undefined) {
    super();
    this.creatureGenericId = creatureGenericId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.creatureGenericId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.creatureGenericId = reader.readVarShort();
  }
}

export class SpawnScaledMonsterInformation extends BaseSpawnMonsterInformation {
  public static id: number = 6368;
  public id: number = 6368;

  public creatureLevel: number | undefined = 0;

  public constructor(
    creatureGenericId?: number | undefined,
    creatureLevel?: number | undefined,
  ) {
    super(creatureGenericId);
    this.creatureLevel = creatureLevel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.creatureLevel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.creatureLevel = reader.readShort();
  }
}

export class GameContextBasicSpawnInformation extends DofusType {
  public static id: number = 2015;
  public id: number = 2015;

  public teamId: number | undefined = 2;
  public informations: GameContextActorPositionInformations | undefined;
  public alive: boolean | undefined = false;

  public constructor(
    teamId?: number | undefined,
    informations?: GameContextActorPositionInformations | undefined,
    alive?: boolean | undefined,
  ) {
    super();
    this.teamId = teamId;
    this.informations = informations;
    this.alive = alive;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.teamId!);
    writer.writeShort(this.informations!.id);
    this.informations!.serialize(writer);
    writer.writeBoolean(this.alive!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.teamId = reader.readByte();
    const informationsTypeId: number = reader.readShort();
    this.informations = new types[
      informationsTypeId
    ]() as GameContextActorPositionInformations;
    this.informations!.deserialize(reader);
    this.alive = reader.readBoolean();
  }
}

export class GameFightSpellCooldown extends DofusType {
  public static id: number = 5389;
  public id: number = 5389;

  public cooldown: number | undefined = 0;
  public spellId: number | undefined = 0;

  public constructor(
    cooldown?: number | undefined,
    spellId?: number | undefined,
  ) {
    super();
    this.cooldown = cooldown;
    this.spellId = spellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.cooldown!);
    writer.writeInt(this.spellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cooldown = reader.readByte();
    this.spellId = reader.readInt();
  }
}

export class SpawnCharacterInformation extends SpawnInformation {
  public static id: number = 457;
  public id: number = 457;

  public level: number | undefined = 0;
  public name: string | undefined;

  public constructor(level?: number | undefined, name?: string | undefined) {
    super();
    this.level = level;
    this.name = name;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.level!);
    writer.writeUTF(this.name!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.level = reader.readVarShort();
    this.name = reader.readUTF();
  }
}

export class SpawnMonsterInformation extends BaseSpawnMonsterInformation {
  public static id: number = 3120;
  public id: number = 3120;

  public creatureGrade: number | undefined = 0;

  public constructor(
    creatureGenericId?: number | undefined,
    creatureGrade?: number | undefined,
  ) {
    super(creatureGenericId);
    this.creatureGrade = creatureGrade;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.creatureGrade!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.creatureGrade = reader.readByte();
  }
}

export class EntityDispositionInformations extends DofusType {
  public static id: number = 7424;
  public id: number = 7424;

  public direction: number | undefined = 1;
  public cellId: number | undefined = 0;

  public constructor(
    direction?: number | undefined,
    cellId?: number | undefined,
  ) {
    super();
    this.direction = direction;
    this.cellId = cellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.direction!);
    writer.writeShort(this.cellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.direction = reader.readByte();
    this.cellId = reader.readShort();
  }
}

export class HumanOption extends DofusType {
  public static id: number = 693;
  public id: number = 693;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class HumanOptionAlliance extends HumanOption {
  public static id: number = 3939;
  public id: number = 3939;

  public allianceInformations: AllianceInformations | undefined;
  public aggressable: number | undefined = 0;

  public constructor(
    allianceInformations?: AllianceInformations | undefined,
    aggressable?: number | undefined,
  ) {
    super();
    this.allianceInformations = allianceInformations;
    this.aggressable = aggressable;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.allianceInformations!.serialize(writer);
    writer.writeByte(this.aggressable!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceInformations = new AllianceInformations();
    this.allianceInformations!.deserialize(reader);
    this.aggressable = reader.readByte();
  }
}

export class HumanOptionFollowers extends HumanOption {
  public static id: number = 77;
  public id: number = 77;

  public followingCharactersLook: IndexedEntityLook[] | undefined;

  public constructor(
    followingCharactersLook?: IndexedEntityLook[] | undefined,
  ) {
    super();
    this.followingCharactersLook = followingCharactersLook;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.followingCharactersLook!.length);
    this.followingCharactersLook!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.followingCharactersLook = [];
    const countFollowingCharactersLook = reader.readShort();
    for (let i: number = 0; i < countFollowingCharactersLook; i++) {
      const type: IndexedEntityLook = new IndexedEntityLook();
      type.deserialize(reader);
      this.followingCharactersLook.push(type);
    }
  }
}

export class ActorOrientation extends DofusType {
  public static id: number = 6459;
  public id: number = 6459;

  public direction: number | undefined = 1;
  public id_: number | undefined = 0;

  public constructor(direction?: number | undefined, id_?: number | undefined) {
    super();
    this.direction = direction;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.direction!);
    writer.writeDouble(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.direction = reader.readByte();
    this.id_ = reader.readDouble();
  }
}

export class GroupMonsterStaticInformations extends DofusType {
  public static id: number = 9226;
  public id: number = 9226;

  public mainCreatureLightInfos: MonsterInGroupLightInformations | undefined;
  public underlings: MonsterInGroupInformations[] | undefined;

  public constructor(
    mainCreatureLightInfos?: MonsterInGroupLightInformations | undefined,
    underlings?: MonsterInGroupInformations[] | undefined,
  ) {
    super();
    this.mainCreatureLightInfos = mainCreatureLightInfos;
    this.underlings = underlings;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.mainCreatureLightInfos!.serialize(writer);
    writer.writeShort(this.underlings!.length);
    this.underlings!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mainCreatureLightInfos = new MonsterInGroupLightInformations();
    this.mainCreatureLightInfos!.deserialize(reader);
    this.underlings = [];
    const countUnderlings = reader.readShort();
    for (let i: number = 0; i < countUnderlings; i++) {
      const type: MonsterInGroupInformations = new MonsterInGroupInformations();
      type.deserialize(reader);
      this.underlings.push(type);
    }
  }
}

export class HumanInformations extends DofusType {
  public static id: number = 7547;
  public id: number = 7547;

  public restrictions: ActorRestrictionsInformations | undefined;
  public options: HumanOption[] | undefined;
  public sex: boolean | undefined = false;

  public constructor(
    restrictions?: ActorRestrictionsInformations | undefined,
    options?: HumanOption[] | undefined,
    sex?: boolean | undefined,
  ) {
    super();
    this.restrictions = restrictions;
    this.options = options;
    this.sex = sex;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.restrictions!.serialize(writer);
    writer.writeShort(this.options!.length);
    this.options!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeBoolean(this.sex!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.restrictions = new ActorRestrictionsInformations();
    this.restrictions!.deserialize(reader);
    this.options = [];
    const countOptions = reader.readShort();
    for (let i: number = 0; i < countOptions; i++) {
      const optionsTypeId: number = reader.readShort();
      const type: HumanOption = new types[optionsTypeId]() as HumanOption;
      type.deserialize(reader);
      this.options.push(type);
    }
    this.sex = reader.readBoolean();
  }
}

export class FightTeamMemberInformations extends DofusType {
  public static id: number = 5640;
  public id: number = 5640;

  public id_: number | undefined = 0;

  public constructor(id_?: number | undefined) {
    super();
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readDouble();
  }
}

export class HouseInformations extends DofusType {
  public static id: number = 3346;
  public id: number = 3346;

  public modelId: number | undefined = 0;
  public houseId: number | undefined = 0;

  public constructor(
    modelId?: number | undefined,
    houseId?: number | undefined,
  ) {
    super();
    this.modelId = modelId;
    this.houseId = houseId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.modelId!);
    writer.writeVarInt(this.houseId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.modelId = reader.readVarShort();
    this.houseId = reader.readVarInt();
  }
}

export class HouseOnMapInformations extends HouseInformations {
  public static id: number = 8890;
  public id: number = 8890;

  public doorsOnMap: number[] | undefined;
  public houseInstances: HouseInstanceInformations[] | undefined;

  public constructor(
    modelId?: number | undefined,
    houseId?: number | undefined,
    doorsOnMap?: number[] | undefined,
    houseInstances?: HouseInstanceInformations[] | undefined,
  ) {
    super(modelId, houseId);
    this.doorsOnMap = doorsOnMap;
    this.houseInstances = houseInstances;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.doorsOnMap!.length);
    this.doorsOnMap!.forEach((current: number) => writer.writeInt(current));
    writer.writeShort(this.houseInstances!.length);
    this.houseInstances!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.doorsOnMap = [];
    const countDoorsOnMap = reader.readShort();
    for (let i: number = 0; i < countDoorsOnMap; i++) {
      this.doorsOnMap.push(reader.readInt());
    }
    this.houseInstances = [];
    const countHouseInstances = reader.readShort();
    for (let i: number = 0; i < countHouseInstances; i++) {
      const type: HouseInstanceInformations = new HouseInstanceInformations();
      type.deserialize(reader);
      this.houseInstances.push(type);
    }
  }
}

export class HumanOptionObjectUse extends HumanOption {
  public static id: number = 1192;
  public id: number = 1192;

  public objectGID: number | undefined = 0;
  public delayTypeId: number | undefined = 0;
  public delayEndTime: number | undefined = 0;

  public constructor(
    objectGID?: number | undefined,
    delayTypeId?: number | undefined,
    delayEndTime?: number | undefined,
  ) {
    super();
    this.objectGID = objectGID;
    this.delayTypeId = delayTypeId;
    this.delayEndTime = delayEndTime;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.objectGID!);
    writer.writeByte(this.delayTypeId!);
    writer.writeDouble(this.delayEndTime!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectGID = reader.readVarShort();
    this.delayTypeId = reader.readByte();
    this.delayEndTime = reader.readDouble();
  }
}

export class HouseInstanceInformations extends DofusType {
  public static id: number = 3243;
  public id: number = 3243;

  public price: number | undefined = 0;
  public instanceId: number | undefined = 0;
  public ownerTag: AccountTagInformation | undefined;
  public secondHand: boolean | undefined = false;
  public isLocked: boolean | undefined = false;
  public hasOwner: boolean | undefined = false;
  public isSaleLocked: boolean | undefined = false;

  public constructor(
    price?: number | undefined,
    instanceId?: number | undefined,
    ownerTag?: AccountTagInformation | undefined,
    secondHand?: boolean | undefined,
    isLocked?: boolean | undefined,
    hasOwner?: boolean | undefined,
    isSaleLocked?: boolean | undefined,
  ) {
    super();
    this.price = price;
    this.instanceId = instanceId;
    this.ownerTag = ownerTag;
    this.secondHand = secondHand;
    this.isLocked = isLocked;
    this.hasOwner = hasOwner;
    this.isSaleLocked = isSaleLocked;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.price!);
    writer.writeInt(this.instanceId!);
    this.ownerTag!.serialize(writer);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.secondHand!);
    box0 = setFlag(box0, 1, this.isLocked!);
    box0 = setFlag(box0, 2, this.hasOwner!);
    box0 = setFlag(box0, 3, this.isSaleLocked!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.price = reader.readVarLong();
    this.instanceId = reader.readInt();
    this.ownerTag = new AccountTagInformation();
    this.ownerTag!.deserialize(reader);
    const box0 = reader.readByte();
    this.secondHand = getFlag(box0, 0);
    this.isLocked = getFlag(box0, 1);
    this.hasOwner = getFlag(box0, 2);
    this.isSaleLocked = getFlag(box0, 3);
  }
}

export class HumanOptionEmote extends HumanOption {
  public static id: number = 3456;
  public id: number = 3456;

  public emoteStartTime: number | undefined = 0;
  public emoteId: number | undefined = 0;

  public constructor(
    emoteStartTime?: number | undefined,
    emoteId?: number | undefined,
  ) {
    super();
    this.emoteStartTime = emoteStartTime;
    this.emoteId = emoteId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.emoteStartTime!);
    writer.writeShort(this.emoteId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.emoteStartTime = reader.readDouble();
    this.emoteId = reader.readShort();
  }
}

export class ObjectItemInRolePlay extends DofusType {
  public static id: number = 4848;
  public id: number = 4848;

  public objectGID: number | undefined = 0;
  public cellId: number | undefined = 0;

  public constructor(
    objectGID?: number | undefined,
    cellId?: number | undefined,
  ) {
    super();
    this.objectGID = objectGID;
    this.cellId = cellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.objectGID!);
    writer.writeVarShort(this.cellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectGID = reader.readVarShort();
    this.cellId = reader.readVarShort();
  }
}

export class PaddockItem extends ObjectItemInRolePlay {
  public static id: number = 5575;
  public id: number = 5575;

  public durability: ItemDurability | undefined;

  public constructor(
    objectGID?: number | undefined,
    cellId?: number | undefined,
    durability?: ItemDurability | undefined,
  ) {
    super(objectGID, cellId);
    this.durability = durability;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.durability!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.durability = new ItemDurability();
    this.durability!.deserialize(reader);
  }
}

export class AbstractFightTeamInformations extends DofusType {
  public static id: number = 3071;
  public id: number = 3071;

  public nbWaves: number | undefined = 0;
  public teamId: number | undefined = 2;
  public teamTypeId: number | undefined = 0;
  public teamSide: number | undefined = 0;
  public leaderId: number | undefined = 0;

  public constructor(
    nbWaves?: number | undefined,
    teamId?: number | undefined,
    teamTypeId?: number | undefined,
    teamSide?: number | undefined,
    leaderId?: number | undefined,
  ) {
    super();
    this.nbWaves = nbWaves;
    this.teamId = teamId;
    this.teamTypeId = teamTypeId;
    this.teamSide = teamSide;
    this.leaderId = leaderId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.nbWaves!);
    writer.writeByte(this.teamId!);
    writer.writeByte(this.teamTypeId!);
    writer.writeByte(this.teamSide!);
    writer.writeDouble(this.leaderId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.nbWaves = reader.readByte();
    this.teamId = reader.readByte();
    this.teamTypeId = reader.readByte();
    this.teamSide = reader.readByte();
    this.leaderId = reader.readDouble();
  }
}

export class FightTeamInformations extends AbstractFightTeamInformations {
  public static id: number = 4654;
  public id: number = 4654;

  public teamMembers: FightTeamMemberInformations[] | undefined;

  public constructor(
    nbWaves?: number | undefined,
    teamId?: number | undefined,
    teamTypeId?: number | undefined,
    teamSide?: number | undefined,
    leaderId?: number | undefined,
    teamMembers?: FightTeamMemberInformations[] | undefined,
  ) {
    super(nbWaves, teamId, teamTypeId, teamSide, leaderId);
    this.teamMembers = teamMembers;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.teamMembers!.length);
    this.teamMembers!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.teamMembers = [];
    const countTeamMembers = reader.readShort();
    for (let i: number = 0; i < countTeamMembers; i++) {
      const teamMembersTypeId: number = reader.readShort();
      const type: FightTeamMemberInformations = new types[
        teamMembersTypeId
      ]() as FightTeamMemberInformations;
      type.deserialize(reader);
      this.teamMembers.push(type);
    }
  }
}

export class IndexedEntityLook extends DofusType {
  public static id: number = 1904;
  public id: number = 1904;

  public look: EntityLook | undefined;
  public index: number | undefined = 0;

  public constructor(
    look?: EntityLook | undefined,
    index?: number | undefined,
  ) {
    super();
    this.look = look;
    this.index = index;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.look!.serialize(writer);
    writer.writeByte(this.index!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.look = new EntityLook();
    this.look!.deserialize(reader);
    this.index = reader.readByte();
  }
}

export class HumanOptionSkillUse extends HumanOption {
  public static id: number = 2427;
  public id: number = 2427;

  public elementId: number | undefined = 0;
  public skillEndTime: number | undefined = 0;
  public skillId: number | undefined = 0;

  public constructor(
    elementId?: number | undefined,
    skillEndTime?: number | undefined,
    skillId?: number | undefined,
  ) {
    super();
    this.elementId = elementId;
    this.skillEndTime = skillEndTime;
    this.skillId = skillId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.elementId!);
    writer.writeDouble(this.skillEndTime!);
    writer.writeVarShort(this.skillId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.elementId = reader.readVarInt();
    this.skillEndTime = reader.readDouble();
    this.skillId = reader.readVarShort();
  }
}

export class AlternativeMonstersInGroupLightInformations extends DofusType {
  public static id: number = 1183;
  public id: number = 1183;

  public playerCount: number | undefined = 0;
  public monsters: MonsterInGroupLightInformations[] | undefined;

  public constructor(
    playerCount?: number | undefined,
    monsters?: MonsterInGroupLightInformations[] | undefined,
  ) {
    super();
    this.playerCount = playerCount;
    this.monsters = monsters;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.playerCount!);
    writer.writeShort(this.monsters!.length);
    this.monsters!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerCount = reader.readInt();
    this.monsters = [];
    const countMonsters = reader.readShort();
    for (let i: number = 0; i < countMonsters; i++) {
      const type: MonsterInGroupLightInformations =
        new MonsterInGroupLightInformations();
      type.deserialize(reader);
      this.monsters.push(type);
    }
  }
}

export class FightCommonInformations extends DofusType {
  public static id: number = 5008;
  public id: number = 5008;

  public fightType: number | undefined = 0;
  public fightId: number | undefined = 0;
  public fightTeams: FightTeamInformations[] | undefined;
  public fightTeamsOptions: FightOptionsInformations[] | undefined;
  public fightTeamsPositions: number[] | undefined;

  public constructor(
    fightType?: number | undefined,
    fightId?: number | undefined,
    fightTeams?: FightTeamInformations[] | undefined,
    fightTeamsOptions?: FightOptionsInformations[] | undefined,
    fightTeamsPositions?: number[] | undefined,
  ) {
    super();
    this.fightType = fightType;
    this.fightId = fightId;
    this.fightTeams = fightTeams;
    this.fightTeamsOptions = fightTeamsOptions;
    this.fightTeamsPositions = fightTeamsPositions;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.fightType!);
    writer.writeVarShort(this.fightId!);
    writer.writeShort(this.fightTeams!.length);
    this.fightTeams!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.fightTeamsOptions!.length);
    this.fightTeamsOptions!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.fightTeamsPositions!.length);
    this.fightTeamsPositions!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fightType = reader.readByte();
    this.fightId = reader.readVarShort();
    this.fightTeams = [];
    const countFightTeams = reader.readShort();
    for (let i: number = 0; i < countFightTeams; i++) {
      const fightTeamsTypeId: number = reader.readShort();
      const type: FightTeamInformations = new types[
        fightTeamsTypeId
      ]() as FightTeamInformations;
      type.deserialize(reader);
      this.fightTeams.push(type);
    }
    this.fightTeamsOptions = [];
    const countFightTeamsOptions = reader.readShort();
    for (let i: number = 0; i < countFightTeamsOptions; i++) {
      const type: FightOptionsInformations = new FightOptionsInformations();
      type.deserialize(reader);
      this.fightTeamsOptions.push(type);
    }
    this.fightTeamsPositions = [];
    const countFightTeamsPositions = reader.readShort();
    for (let i: number = 0; i < countFightTeamsPositions; i++) {
      this.fightTeamsPositions.push(reader.readVarShort());
    }
  }
}

export class MapNpcQuestInfo extends DofusType {
  public static id: number = 7429;
  public id: number = 7429;

  public mapId: number | undefined = 0;
  public questFlags: GameRolePlayNpcQuestFlag[] | undefined;
  public npcsIdsWithQuest: number[] | undefined;

  public constructor(
    mapId?: number | undefined,
    questFlags?: GameRolePlayNpcQuestFlag[] | undefined,
    npcsIdsWithQuest?: number[] | undefined,
  ) {
    super();
    this.mapId = mapId;
    this.questFlags = questFlags;
    this.npcsIdsWithQuest = npcsIdsWithQuest;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.mapId!);
    writer.writeShort(this.questFlags!.length);
    this.questFlags!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.npcsIdsWithQuest!.length);
    this.npcsIdsWithQuest!.forEach((current: number) =>
      writer.writeInt(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapId = reader.readDouble();
    this.questFlags = [];
    const countQuestFlags = reader.readShort();
    for (let i: number = 0; i < countQuestFlags; i++) {
      const type: GameRolePlayNpcQuestFlag = new GameRolePlayNpcQuestFlag();
      type.deserialize(reader);
      this.questFlags.push(type);
    }
    this.npcsIdsWithQuest = [];
    const countNpcsIdsWithQuest = reader.readShort();
    for (let i: number = 0; i < countNpcsIdsWithQuest; i++) {
      this.npcsIdsWithQuest.push(reader.readInt());
    }
  }
}

export class MonsterInGroupLightInformations extends DofusType {
  public static id: number = 4246;
  public id: number = 4246;

  public level: number | undefined = 0;
  public genericId: number | undefined = 0;
  public grade: number | undefined = 0;

  public constructor(
    level?: number | undefined,
    genericId?: number | undefined,
    grade?: number | undefined,
  ) {
    super();
    this.level = level;
    this.genericId = genericId;
    this.grade = grade;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.level!);
    writer.writeInt(this.genericId!);
    writer.writeByte(this.grade!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.level = reader.readShort();
    this.genericId = reader.readInt();
    this.grade = reader.readByte();
  }
}

export class MonsterInGroupInformations extends MonsterInGroupLightInformations {
  public static id: number = 2614;
  public id: number = 2614;

  public look: EntityLook | undefined;

  public constructor(
    level?: number | undefined,
    genericId?: number | undefined,
    grade?: number | undefined,
    look?: EntityLook | undefined,
  ) {
    super(level, genericId, grade);
    this.look = look;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.look!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.look = new EntityLook();
    this.look!.deserialize(reader);
  }
}

export class MapObstacle extends DofusType {
  public static id: number = 5512;
  public id: number = 5512;

  public state: number | undefined = 0;
  public obstacleCellId: number | undefined = 0;

  public constructor(
    state?: number | undefined,
    obstacleCellId?: number | undefined,
  ) {
    super();
    this.state = state;
    this.obstacleCellId = obstacleCellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.state!);
    writer.writeVarShort(this.obstacleCellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.state = reader.readByte();
    this.obstacleCellId = reader.readVarShort();
  }
}

export class GroupMonsterStaticInformationsWithAlternatives extends GroupMonsterStaticInformations {
  public static id: number = 1240;
  public id: number = 1240;

  public alternatives:
    | AlternativeMonstersInGroupLightInformations[]
    | undefined;

  public constructor(
    mainCreatureLightInfos?: MonsterInGroupLightInformations | undefined,
    underlings?: MonsterInGroupInformations[] | undefined,
    alternatives?: AlternativeMonstersInGroupLightInformations[] | undefined,
  ) {
    super(mainCreatureLightInfos, underlings);
    this.alternatives = alternatives;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.alternatives!.length);
    this.alternatives!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.alternatives = [];
    const countAlternatives = reader.readShort();
    for (let i: number = 0; i < countAlternatives; i++) {
      const type: AlternativeMonstersInGroupLightInformations =
        new AlternativeMonstersInGroupLightInformations();
      type.deserialize(reader);
      this.alternatives.push(type);
    }
  }
}

export class FightEntityDispositionInformations extends EntityDispositionInformations {
  public static id: number = 7794;
  public id: number = 7794;

  public carryingCharacterId: number | undefined = 0;

  public constructor(
    direction?: number | undefined,
    cellId?: number | undefined,
    carryingCharacterId?: number | undefined,
  ) {
    super(direction, cellId);
    this.carryingCharacterId = carryingCharacterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.carryingCharacterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.carryingCharacterId = reader.readDouble();
  }
}

export class BreachBranch extends DofusType {
  public static id: number = 5320;
  public id: number = 5320;

  public monsters: MonsterInGroupLightInformations[] | undefined;
  public relativeScore: number | undefined = 0;
  public room: number | undefined = 0;
  public bosses: MonsterInGroupLightInformations[] | undefined;
  public map: number | undefined = 0;
  public element: number | undefined = 0;
  public score: number | undefined = 0;

  public constructor(
    monsters?: MonsterInGroupLightInformations[] | undefined,
    relativeScore?: number | undefined,
    room?: number | undefined,
    bosses?: MonsterInGroupLightInformations[] | undefined,
    map?: number | undefined,
    element?: number | undefined,
    score?: number | undefined,
  ) {
    super();
    this.monsters = monsters;
    this.relativeScore = relativeScore;
    this.room = room;
    this.bosses = bosses;
    this.map = map;
    this.element = element;
    this.score = score;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.monsters!.length);
    this.monsters!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.relativeScore!);
    writer.writeByte(this.room!);
    writer.writeShort(this.bosses!.length);
    this.bosses!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeDouble(this.map!);
    writer.writeInt(this.element!);
    writer.writeShort(this.score!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.monsters = [];
    const countMonsters = reader.readShort();
    for (let i: number = 0; i < countMonsters; i++) {
      const type: MonsterInGroupLightInformations =
        new MonsterInGroupLightInformations();
      type.deserialize(reader);
      this.monsters.push(type);
    }
    this.relativeScore = reader.readShort();
    this.room = reader.readByte();
    this.bosses = [];
    const countBosses = reader.readShort();
    for (let i: number = 0; i < countBosses; i++) {
      const type: MonsterInGroupLightInformations =
        new MonsterInGroupLightInformations();
      type.deserialize(reader);
      this.bosses.push(type);
    }
    this.map = reader.readDouble();
    this.element = reader.readInt();
    this.score = reader.readShort();
  }
}

export class IdentifiedEntityDispositionInformations extends EntityDispositionInformations {
  public static id: number = 8490;
  public id: number = 8490;

  public id_: number | undefined = 0;

  public constructor(
    direction?: number | undefined,
    cellId?: number | undefined,
    id_?: number | undefined,
  ) {
    super(direction, cellId);
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readDouble();
  }
}

export class StatedElement extends DofusType {
  public static id: number = 7058;
  public id: number = 7058;

  public onCurrentMap: boolean | undefined = false;
  public elementState: number | undefined = 0;
  public elementId: number | undefined = 0;
  public elementCellId: number | undefined = 0;

  public constructor(
    onCurrentMap?: boolean | undefined,
    elementState?: number | undefined,
    elementId?: number | undefined,
    elementCellId?: number | undefined,
  ) {
    super();
    this.onCurrentMap = onCurrentMap;
    this.elementState = elementState;
    this.elementId = elementId;
    this.elementCellId = elementCellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.onCurrentMap!);
    writer.writeVarInt(this.elementState!);
    writer.writeInt(this.elementId!);
    writer.writeVarShort(this.elementCellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.onCurrentMap = reader.readBoolean();
    this.elementState = reader.readVarInt();
    this.elementId = reader.readInt();
    this.elementCellId = reader.readVarShort();
  }
}

export class ActorRestrictionsInformations extends DofusType {
  public static id: number = 8982;
  public id: number = 8982;

  public cantBeAggressed: boolean | undefined = false;
  public cantBeChallenged: boolean | undefined = false;
  public cantTrade: boolean | undefined = false;
  public cantBeAttackedByMutant: boolean | undefined = false;
  public cantRun: boolean | undefined = false;
  public forceSlowWalk: boolean | undefined = false;
  public cantMinimize: boolean | undefined = false;
  public cantMove: boolean | undefined = false;
  public cantAggress: boolean | undefined = false;
  public cantChallenge: boolean | undefined = false;
  public cantExchange: boolean | undefined = false;
  public cantAttack: boolean | undefined = false;
  public cantChat: boolean | undefined = false;
  public cantBeMerchant: boolean | undefined = false;
  public cantUseObject: boolean | undefined = false;
  public cantUseTaxCollector: boolean | undefined = false;
  public cantUseInteractive: boolean | undefined = false;
  public cantSpeakToNPC: boolean | undefined = false;
  public cantChangeZone: boolean | undefined = false;
  public cantAttackMonster: boolean | undefined = false;

  public constructor(
    cantBeAggressed?: boolean | undefined,
    cantBeChallenged?: boolean | undefined,
    cantTrade?: boolean | undefined,
    cantBeAttackedByMutant?: boolean | undefined,
    cantRun?: boolean | undefined,
    forceSlowWalk?: boolean | undefined,
    cantMinimize?: boolean | undefined,
    cantMove?: boolean | undefined,
    cantAggress?: boolean | undefined,
    cantChallenge?: boolean | undefined,
    cantExchange?: boolean | undefined,
    cantAttack?: boolean | undefined,
    cantChat?: boolean | undefined,
    cantBeMerchant?: boolean | undefined,
    cantUseObject?: boolean | undefined,
    cantUseTaxCollector?: boolean | undefined,
    cantUseInteractive?: boolean | undefined,
    cantSpeakToNPC?: boolean | undefined,
    cantChangeZone?: boolean | undefined,
    cantAttackMonster?: boolean | undefined,
  ) {
    super();
    this.cantBeAggressed = cantBeAggressed;
    this.cantBeChallenged = cantBeChallenged;
    this.cantTrade = cantTrade;
    this.cantBeAttackedByMutant = cantBeAttackedByMutant;
    this.cantRun = cantRun;
    this.forceSlowWalk = forceSlowWalk;
    this.cantMinimize = cantMinimize;
    this.cantMove = cantMove;
    this.cantAggress = cantAggress;
    this.cantChallenge = cantChallenge;
    this.cantExchange = cantExchange;
    this.cantAttack = cantAttack;
    this.cantChat = cantChat;
    this.cantBeMerchant = cantBeMerchant;
    this.cantUseObject = cantUseObject;
    this.cantUseTaxCollector = cantUseTaxCollector;
    this.cantUseInteractive = cantUseInteractive;
    this.cantSpeakToNPC = cantSpeakToNPC;
    this.cantChangeZone = cantChangeZone;
    this.cantAttackMonster = cantAttackMonster;
  }

  public serialize(writer: BinaryDataWriter): void {
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.cantBeAggressed!);
    box0 = setFlag(box0, 1, this.cantBeChallenged!);
    box0 = setFlag(box0, 2, this.cantTrade!);
    box0 = setFlag(box0, 3, this.cantBeAttackedByMutant!);
    box0 = setFlag(box0, 4, this.cantRun!);
    box0 = setFlag(box0, 5, this.forceSlowWalk!);
    box0 = setFlag(box0, 6, this.cantMinimize!);
    box0 = setFlag(box0, 7, this.cantMove!);
    box0 = setFlag(box0, 8, this.cantAggress!);
    box0 = setFlag(box0, 9, this.cantChallenge!);
    box0 = setFlag(box0, 10, this.cantExchange!);
    box0 = setFlag(box0, 11, this.cantAttack!);
    box0 = setFlag(box0, 12, this.cantChat!);
    box0 = setFlag(box0, 13, this.cantBeMerchant!);
    box0 = setFlag(box0, 14, this.cantUseObject!);
    box0 = setFlag(box0, 15, this.cantUseTaxCollector!);
    box0 = setFlag(box0, 16, this.cantUseInteractive!);
    box0 = setFlag(box0, 17, this.cantSpeakToNPC!);
    box0 = setFlag(box0, 18, this.cantChangeZone!);
    box0 = setFlag(box0, 19, this.cantAttackMonster!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    const box0 = reader.readByte();
    this.cantBeAggressed = getFlag(box0, 0);
    this.cantBeChallenged = getFlag(box0, 1);
    this.cantTrade = getFlag(box0, 2);
    this.cantBeAttackedByMutant = getFlag(box0, 3);
    this.cantRun = getFlag(box0, 4);
    this.forceSlowWalk = getFlag(box0, 5);
    this.cantMinimize = getFlag(box0, 6);
    this.cantMove = getFlag(box0, 7);
    this.cantAggress = getFlag(box0, 8);
    this.cantChallenge = getFlag(box0, 9);
    this.cantExchange = getFlag(box0, 10);
    this.cantAttack = getFlag(box0, 11);
    this.cantChat = getFlag(box0, 12);
    this.cantBeMerchant = getFlag(box0, 13);
    this.cantUseObject = getFlag(box0, 14);
    this.cantUseTaxCollector = getFlag(box0, 15);
    this.cantUseInteractive = getFlag(box0, 16);
    this.cantSpeakToNPC = getFlag(box0, 17);
    this.cantChangeZone = getFlag(box0, 18);
    this.cantAttackMonster = getFlag(box0, 19);
  }
}

export class CharacterCharacteristicsInformations extends DofusType {
  public static id: number = 1918;
  public id: number = 1918;

  public kamas: number | undefined = 0;
  public experienceBonusLimit: number | undefined = 0;
  public experienceNextLevelFloor: number | undefined = 0;
  public criticalHitWeapon: number | undefined = 0;
  public experience: number | undefined = 0;
  public alignmentInfos: ActorExtendedAlignmentInformations | undefined;
  public experienceLevelFloor: number | undefined = 0;
  public spellModifications: CharacterSpellModification[] | undefined;
  public characteristics: CharacterCharacteristic[] | undefined;
  public probationTime: number | undefined = 0;

  public constructor(
    kamas?: number | undefined,
    experienceBonusLimit?: number | undefined,
    experienceNextLevelFloor?: number | undefined,
    criticalHitWeapon?: number | undefined,
    experience?: number | undefined,
    alignmentInfos?: ActorExtendedAlignmentInformations | undefined,
    experienceLevelFloor?: number | undefined,
    spellModifications?: CharacterSpellModification[] | undefined,
    characteristics?: CharacterCharacteristic[] | undefined,
    probationTime?: number | undefined,
  ) {
    super();
    this.kamas = kamas;
    this.experienceBonusLimit = experienceBonusLimit;
    this.experienceNextLevelFloor = experienceNextLevelFloor;
    this.criticalHitWeapon = criticalHitWeapon;
    this.experience = experience;
    this.alignmentInfos = alignmentInfos;
    this.experienceLevelFloor = experienceLevelFloor;
    this.spellModifications = spellModifications;
    this.characteristics = characteristics;
    this.probationTime = probationTime;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.kamas!);
    writer.writeVarLong(this.experienceBonusLimit!);
    writer.writeVarLong(this.experienceNextLevelFloor!);
    writer.writeVarShort(this.criticalHitWeapon!);
    writer.writeVarLong(this.experience!);
    this.alignmentInfos!.serialize(writer);
    writer.writeVarLong(this.experienceLevelFloor!);
    writer.writeShort(this.spellModifications!.length);
    this.spellModifications!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.characteristics!.length);
    this.characteristics!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeInt(this.probationTime!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.kamas = reader.readVarLong();
    this.experienceBonusLimit = reader.readVarLong();
    this.experienceNextLevelFloor = reader.readVarLong();
    this.criticalHitWeapon = reader.readVarShort();
    this.experience = reader.readVarLong();
    this.alignmentInfos = new ActorExtendedAlignmentInformations();
    this.alignmentInfos!.deserialize(reader);
    this.experienceLevelFloor = reader.readVarLong();
    this.spellModifications = [];
    const countSpellModifications = reader.readShort();
    for (let i: number = 0; i < countSpellModifications; i++) {
      const type: CharacterSpellModification = new CharacterSpellModification();
      type.deserialize(reader);
      this.spellModifications.push(type);
    }
    this.characteristics = [];
    const countCharacteristics = reader.readShort();
    for (let i: number = 0; i < countCharacteristics; i++) {
      const characteristicsTypeId: number = reader.readShort();
      const type: CharacterCharacteristic = new types[
        characteristicsTypeId
      ]() as CharacterCharacteristic;
      type.deserialize(reader);
      this.characteristics.push(type);
    }
    this.probationTime = reader.readInt();
  }
}

export class GuildApplicationInformation extends DofusType {
  public static id: number = 7662;
  public id: number = 7662;

  public creationDate: number | undefined = 0;
  public playerInfo: ApplicationPlayerInformation | undefined;
  public applyText: string | undefined;

  public constructor(
    creationDate?: number | undefined,
    playerInfo?: ApplicationPlayerInformation | undefined,
    applyText?: string | undefined,
  ) {
    super();
    this.creationDate = creationDate;
    this.playerInfo = playerInfo;
    this.applyText = applyText;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.creationDate!);
    this.playerInfo!.serialize(writer);
    writer.writeUTF(this.applyText!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.creationDate = reader.readDouble();
    this.playerInfo = new ApplicationPlayerInformation();
    this.playerInfo!.deserialize(reader);
    this.applyText = reader.readUTF();
  }
}

export class AbstractSocialGroupInfos extends DofusType {
  public static id: number = 6359;
  public id: number = 6359;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class BasicGuildInformations extends AbstractSocialGroupInfos {
  public static id: number = 4374;
  public id: number = 4374;

  public guildLevel: number | undefined = 0;
  public guildId: number | undefined = 0;
  public guildName: string | undefined;

  public constructor(
    guildLevel?: number | undefined,
    guildId?: number | undefined,
    guildName?: string | undefined,
  ) {
    super();
    this.guildLevel = guildLevel;
    this.guildId = guildId;
    this.guildName = guildName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.guildLevel!);
    writer.writeVarInt(this.guildId!);
    writer.writeUTF(this.guildName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildLevel = reader.readByte();
    this.guildId = reader.readVarInt();
    this.guildName = reader.readUTF();
  }
}

export class GuildInformations extends BasicGuildInformations {
  public static id: number = 1201;
  public id: number = 1201;

  public guildEmblem: GuildEmblem | undefined;

  public constructor(
    guildLevel?: number | undefined,
    guildId?: number | undefined,
    guildName?: string | undefined,
    guildEmblem?: GuildEmblem | undefined,
  ) {
    super(guildLevel, guildId, guildName);
    this.guildEmblem = guildEmblem;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.guildEmblem!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildEmblem = new GuildEmblem();
    this.guildEmblem!.deserialize(reader);
  }
}

export class AbstractCharacterInformation extends DofusType {
  public static id: number = 2714;
  public id: number = 2714;

  public id_: number | undefined = 0;

  public constructor(id_?: number | undefined) {
    super();
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readVarLong();
  }
}

export class CharacterBasicMinimalInformations extends AbstractCharacterInformation {
  public static id: number = 4480;
  public id: number = 4480;

  public name: string | undefined;

  public constructor(id_?: number | undefined, name?: string | undefined) {
    super(id_);
    this.name = name;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.name!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.name = reader.readUTF();
  }
}

export class CharacterMinimalInformations extends CharacterBasicMinimalInformations {
  public static id: number = 6674;
  public id: number = 6674;

  public level: number | undefined = 0;

  public constructor(
    id_?: number | undefined,
    name?: string | undefined,
    level?: number | undefined,
  ) {
    super(id_, name);
    this.level = level;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.level!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.level = reader.readVarShort();
  }
}

export class CharacterMinimalPlusLookInformations extends CharacterMinimalInformations {
  public static id: number = 9551;
  public id: number = 9551;

  public entityLook: EntityLook | undefined;
  public breed: number | undefined = 0;

  public constructor(
    id_?: number | undefined,
    name?: string | undefined,
    level?: number | undefined,
    entityLook?: EntityLook | undefined,
    breed?: number | undefined,
  ) {
    super(id_, name, level);
    this.entityLook = entityLook;
    this.breed = breed;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.entityLook!.serialize(writer);
    writer.writeByte(this.breed!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.entityLook = new EntityLook();
    this.entityLook!.deserialize(reader);
    this.breed = reader.readByte();
  }
}

export class CharacterBaseInformations extends CharacterMinimalPlusLookInformations {
  public static id: number = 8097;
  public id: number = 8097;

  public sex: boolean | undefined = false;

  public constructor(
    id_?: number | undefined,
    name?: string | undefined,
    level?: number | undefined,
    entityLook?: EntityLook | undefined,
    breed?: number | undefined,
    sex?: boolean | undefined,
  ) {
    super(id_, name, level, entityLook, breed);
    this.sex = sex;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.sex!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.sex = reader.readBoolean();
  }
}

export class FightDispellableEffectExtendedInformations extends DofusType {
  public static id: number = 8005;
  public id: number = 8005;

  public effect: AbstractFightDispellableEffect | undefined;
  public actionId: number | undefined = 0;
  public sourceId: number | undefined = 0;

  public constructor(
    effect?: AbstractFightDispellableEffect | undefined,
    actionId?: number | undefined,
    sourceId?: number | undefined,
  ) {
    super();
    this.effect = effect;
    this.actionId = actionId;
    this.sourceId = sourceId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.effect!.id);
    this.effect!.serialize(writer);
    writer.writeVarShort(this.actionId!);
    writer.writeDouble(this.sourceId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    const effectTypeId: number = reader.readShort();
    this.effect = new types[effectTypeId]() as AbstractFightDispellableEffect;
    this.effect!.deserialize(reader);
    this.actionId = reader.readVarShort();
    this.sourceId = reader.readDouble();
  }
}

export class GameActionMarkedCell extends DofusType {
  public static id: number = 2389;
  public id: number = 2389;

  public cellColor: number | undefined = 0;
  public cellsType: number | undefined = 0;
  public cellId: number | undefined = 0;
  public zoneSize: number | undefined = 0;

  public constructor(
    cellColor?: number | undefined,
    cellsType?: number | undefined,
    cellId?: number | undefined,
    zoneSize?: number | undefined,
  ) {
    super();
    this.cellColor = cellColor;
    this.cellsType = cellsType;
    this.cellId = cellId;
    this.zoneSize = zoneSize;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.cellColor!);
    writer.writeByte(this.cellsType!);
    writer.writeVarShort(this.cellId!);
    writer.writeByte(this.zoneSize!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellColor = reader.readInt();
    this.cellsType = reader.readByte();
    this.cellId = reader.readVarShort();
    this.zoneSize = reader.readByte();
  }
}

export class FightResultListEntry extends DofusType {
  public static id: number = 6627;
  public id: number = 6627;

  public rewards: FightLoot | undefined;
  public outcome: number | undefined = 0;
  public wave: number | undefined = 0;

  public constructor(
    rewards?: FightLoot | undefined,
    outcome?: number | undefined,
    wave?: number | undefined,
  ) {
    super();
    this.rewards = rewards;
    this.outcome = outcome;
    this.wave = wave;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.rewards!.serialize(writer);
    writer.writeVarShort(this.outcome!);
    writer.writeByte(this.wave!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.rewards = new FightLoot();
    this.rewards!.deserialize(reader);
    this.outcome = reader.readVarShort();
    this.wave = reader.readByte();
  }
}

export class FightResultFighterListEntry extends FightResultListEntry {
  public static id: number = 4819;
  public id: number = 4819;

  public alive: boolean | undefined = false;
  public id_: number | undefined = 0;

  public constructor(
    rewards?: FightLoot | undefined,
    outcome?: number | undefined,
    wave?: number | undefined,
    alive?: boolean | undefined,
    id_?: number | undefined,
  ) {
    super(rewards, outcome, wave);
    this.alive = alive;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.alive!);
    writer.writeDouble(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.alive = reader.readBoolean();
    this.id_ = reader.readDouble();
  }
}

export class GameFightResumeSlaveInfo extends DofusType {
  public static id: number = 8117;
  public id: number = 8117;

  public bombCount: number | undefined = 0;
  public summonCount: number | undefined = 0;
  public slaveId: number | undefined = 0;
  public spellCooldowns: GameFightSpellCooldown[] | undefined;

  public constructor(
    bombCount?: number | undefined,
    summonCount?: number | undefined,
    slaveId?: number | undefined,
    spellCooldowns?: GameFightSpellCooldown[] | undefined,
  ) {
    super();
    this.bombCount = bombCount;
    this.summonCount = summonCount;
    this.slaveId = slaveId;
    this.spellCooldowns = spellCooldowns;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.bombCount!);
    writer.writeByte(this.summonCount!);
    writer.writeDouble(this.slaveId!);
    writer.writeShort(this.spellCooldowns!.length);
    this.spellCooldowns!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.bombCount = reader.readByte();
    this.summonCount = reader.readByte();
    this.slaveId = reader.readDouble();
    this.spellCooldowns = [];
    const countSpellCooldowns = reader.readShort();
    for (let i: number = 0; i < countSpellCooldowns; i++) {
      const type: GameFightSpellCooldown = new GameFightSpellCooldown();
      type.deserialize(reader);
      this.spellCooldowns.push(type);
    }
  }
}

export class NamedPartyTeamWithOutcome extends DofusType {
  public static id: number = 5095;
  public id: number = 5095;

  public team: NamedPartyTeam | undefined;
  public outcome: number | undefined = 0;

  public constructor(
    team?: NamedPartyTeam | undefined,
    outcome?: number | undefined,
  ) {
    super();
    this.team = team;
    this.outcome = outcome;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.team!.serialize(writer);
    writer.writeVarShort(this.outcome!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.team = new NamedPartyTeam();
    this.team!.deserialize(reader);
    this.outcome = reader.readVarShort();
  }
}

export class GameActionMark extends DofusType {
  public static id: number = 158;
  public id: number = 158;

  public markimpactCell: number | undefined = 0;
  public markTeamId: number | undefined = 2;
  public markId: number | undefined = 0;
  public cells: GameActionMarkedCell[] | undefined;
  public markAuthorId: number | undefined = 0;
  public markType: number | undefined = 0;
  public markSpellId: number | undefined = 0;
  public active: boolean | undefined = false;
  public markSpellLevel: number | undefined = 0;

  public constructor(
    markimpactCell?: number | undefined,
    markTeamId?: number | undefined,
    markId?: number | undefined,
    cells?: GameActionMarkedCell[] | undefined,
    markAuthorId?: number | undefined,
    markType?: number | undefined,
    markSpellId?: number | undefined,
    active?: boolean | undefined,
    markSpellLevel?: number | undefined,
  ) {
    super();
    this.markimpactCell = markimpactCell;
    this.markTeamId = markTeamId;
    this.markId = markId;
    this.cells = cells;
    this.markAuthorId = markAuthorId;
    this.markType = markType;
    this.markSpellId = markSpellId;
    this.active = active;
    this.markSpellLevel = markSpellLevel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.markimpactCell!);
    writer.writeByte(this.markTeamId!);
    writer.writeShort(this.markId!);
    writer.writeShort(this.cells!.length);
    this.cells!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeDouble(this.markAuthorId!);
    writer.writeByte(this.markType!);
    writer.writeInt(this.markSpellId!);
    writer.writeBoolean(this.active!);
    writer.writeShort(this.markSpellLevel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.markimpactCell = reader.readShort();
    this.markTeamId = reader.readByte();
    this.markId = reader.readShort();
    this.cells = [];
    const countCells = reader.readShort();
    for (let i: number = 0; i < countCells; i++) {
      const type: GameActionMarkedCell = new GameActionMarkedCell();
      type.deserialize(reader);
      this.cells.push(type);
    }
    this.markAuthorId = reader.readDouble();
    this.markType = reader.readByte();
    this.markSpellId = reader.readInt();
    this.active = reader.readBoolean();
    this.markSpellLevel = reader.readShort();
  }
}

export class NamedPartyTeam extends DofusType {
  public static id: number = 6995;
  public id: number = 6995;

  public partyName: string | undefined;
  public teamId: number | undefined = 2;

  public constructor(
    partyName?: string | undefined,
    teamId?: number | undefined,
  ) {
    super();
    this.partyName = partyName;
    this.teamId = teamId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.partyName!);
    writer.writeByte(this.teamId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.partyName = reader.readUTF();
    this.teamId = reader.readByte();
  }
}

export class Idol extends DofusType {
  public static id: number = 960;
  public id: number = 960;

  public dropBonusPercent: number | undefined = 0;
  public id_: number | undefined = 0;
  public xpBonusPercent: number | undefined = 0;

  public constructor(
    dropBonusPercent?: number | undefined,
    id_?: number | undefined,
    xpBonusPercent?: number | undefined,
  ) {
    super();
    this.dropBonusPercent = dropBonusPercent;
    this.id_ = id_;
    this.xpBonusPercent = xpBonusPercent;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.dropBonusPercent!);
    writer.writeVarShort(this.id_!);
    writer.writeVarShort(this.xpBonusPercent!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dropBonusPercent = reader.readVarShort();
    this.id_ = reader.readVarShort();
    this.xpBonusPercent = reader.readVarShort();
  }
}

export class GameFightMutantInformations extends GameFightFighterNamedInformations {
  public static id: number = 2861;
  public id: number = 2861;

  public powerLevel: number | undefined = 0;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    wave?: number | undefined,
    spawnInfo?: GameContextBasicSpawnInformation | undefined,
    previousPositions?: number[] | undefined,
    stats?: GameFightCharacteristics | undefined,
    status?: PlayerStatus | undefined,
    name?: string | undefined,
    hiddenInPrefight?: boolean | undefined,
    leagueId?: number | undefined,
    ladderPosition?: number | undefined,
    powerLevel?: number | undefined,
  ) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats,
      status,
      name,
      hiddenInPrefight,
      leagueId,
      ladderPosition,
    );
    this.powerLevel = powerLevel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.powerLevel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.powerLevel = reader.readByte();
  }
}

export class FightResultPlayerListEntry extends FightResultFighterListEntry {
  public static id: number = 9771;
  public id: number = 9771;

  public level: number | undefined = 0;
  public additional: FightResultAdditionalData[] | undefined;

  public constructor(
    rewards?: FightLoot | undefined,
    outcome?: number | undefined,
    wave?: number | undefined,
    alive?: boolean | undefined,
    id_?: number | undefined,
    level?: number | undefined,
    additional?: FightResultAdditionalData[] | undefined,
  ) {
    super(rewards, outcome, wave, alive, id_);
    this.level = level;
    this.additional = additional;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.level!);
    writer.writeShort(this.additional!.length);
    this.additional!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.level = reader.readVarShort();
    this.additional = [];
    const countAdditional = reader.readShort();
    for (let i: number = 0; i < countAdditional; i++) {
      const additionalTypeId: number = reader.readShort();
      const type: FightResultAdditionalData = new types[
        additionalTypeId
      ]() as FightResultAdditionalData;
      type.deserialize(reader);
      this.additional.push(type);
    }
  }
}

export class FightResultTaxCollectorListEntry extends FightResultFighterListEntry {
  public static id: number = 1517;
  public id: number = 1517;

  public experienceForGuild: number | undefined = 0;
  public level: number | undefined = 0;
  public guildInfo: BasicGuildInformations | undefined;

  public constructor(
    rewards?: FightLoot | undefined,
    outcome?: number | undefined,
    wave?: number | undefined,
    alive?: boolean | undefined,
    id_?: number | undefined,
    experienceForGuild?: number | undefined,
    level?: number | undefined,
    guildInfo?: BasicGuildInformations | undefined,
  ) {
    super(rewards, outcome, wave, alive, id_);
    this.experienceForGuild = experienceForGuild;
    this.level = level;
    this.guildInfo = guildInfo;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.experienceForGuild!);
    writer.writeByte(this.level!);
    this.guildInfo!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.experienceForGuild = reader.readInt();
    this.level = reader.readByte();
    this.guildInfo = new BasicGuildInformations();
    this.guildInfo!.deserialize(reader);
  }
}

export class GameFightEffectTriggerCount extends DofusType {
  public static id: number = 3026;
  public id: number = 3026;

  public count: number | undefined = 0;
  public effectId: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    count?: number | undefined,
    effectId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super();
    this.count = count;
    this.effectId = effectId;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.count!);
    writer.writeVarInt(this.effectId!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.count = reader.readByte();
    this.effectId = reader.readVarInt();
    this.targetId = reader.readDouble();
  }
}

export class CharacterCharacteristic extends DofusType {
  public static id: number = 4565;
  public id: number = 4565;

  public characteristicId: number | undefined = 0;

  public constructor(characteristicId?: number | undefined) {
    super();
    this.characteristicId = characteristicId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.characteristicId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.characteristicId = reader.readShort();
  }
}

export class CharacterCharacteristicDetailed extends CharacterCharacteristic {
  public static id: number = 9089;
  public id: number = 9089;

  public objectsAndMountBonus: number | undefined = 0;
  public alignGiftBonus: number | undefined = 0;
  public base: number | undefined = 0;
  public contextModif: number | undefined = 0;
  public additional: number | undefined = 0;

  public constructor(
    characteristicId?: number | undefined,
    objectsAndMountBonus?: number | undefined,
    alignGiftBonus?: number | undefined,
    base?: number | undefined,
    contextModif?: number | undefined,
    additional?: number | undefined,
  ) {
    super(characteristicId);
    this.objectsAndMountBonus = objectsAndMountBonus;
    this.alignGiftBonus = alignGiftBonus;
    this.base = base;
    this.contextModif = contextModif;
    this.additional = additional;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.objectsAndMountBonus!);
    writer.writeVarShort(this.alignGiftBonus!);
    writer.writeVarShort(this.base!);
    writer.writeVarShort(this.contextModif!);
    writer.writeVarShort(this.additional!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectsAndMountBonus = reader.readVarShort();
    this.alignGiftBonus = reader.readVarShort();
    this.base = reader.readVarShort();
    this.contextModif = reader.readVarShort();
    this.additional = reader.readVarShort();
  }
}

export class CharacterUsableCharacteristicDetailed extends CharacterCharacteristicDetailed {
  public static id: number = 9575;
  public id: number = 9575;

  public used: number | undefined = 0;

  public constructor(
    characteristicId?: number | undefined,
    objectsAndMountBonus?: number | undefined,
    alignGiftBonus?: number | undefined,
    base?: number | undefined,
    contextModif?: number | undefined,
    additional?: number | undefined,
    used?: number | undefined,
  ) {
    super(
      characteristicId,
      objectsAndMountBonus,
      alignGiftBonus,
      base,
      contextModif,
      additional,
    );
    this.used = used;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.used!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.used = reader.readVarShort();
  }
}

export class CharacterCharacteristicValue extends CharacterCharacteristic {
  public static id: number = 1995;
  public id: number = 1995;

  public total: number | undefined = 0;

  public constructor(
    characteristicId?: number | undefined,
    total?: number | undefined,
  ) {
    super(characteristicId);
    this.total = total;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.total!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.total = reader.readInt();
  }
}

export class Item extends DofusType {
  public static id: number = 842;
  public id: number = 842;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ObjectItem extends Item {
  public static id: number = 2916;
  public id: number = 2916;

  public objectGID: number | undefined = 0;
  public position: number | undefined = 63;
  public objectUID: number | undefined = 0;
  public effects: ObjectEffect[] | undefined;
  public quantity: number | undefined = 0;

  public constructor(
    objectGID?: number | undefined,
    position?: number | undefined,
    objectUID?: number | undefined,
    effects?: ObjectEffect[] | undefined,
    quantity?: number | undefined,
  ) {
    super();
    this.objectGID = objectGID;
    this.position = position;
    this.objectUID = objectUID;
    this.effects = effects;
    this.quantity = quantity;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.objectGID!);
    writer.writeShort(this.position!);
    writer.writeVarInt(this.objectUID!);
    writer.writeShort(this.effects!.length);
    this.effects!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarInt(this.quantity!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectGID = reader.readVarShort();
    this.position = reader.readShort();
    this.objectUID = reader.readVarInt();
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i: number = 0; i < countEffects; i++) {
      const effectsTypeId: number = reader.readShort();
      const type: ObjectEffect = new types[effectsTypeId]() as ObjectEffect;
      type.deserialize(reader);
      this.effects.push(type);
    }
    this.quantity = reader.readVarInt();
  }
}

export class ObjectEffect extends DofusType {
  public static id: number = 5685;
  public id: number = 5685;

  public actionId: number | undefined = 0;

  public constructor(actionId?: number | undefined) {
    super();
    this.actionId = actionId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.actionId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.actionId = reader.readVarShort();
  }
}

export class ObjectEffectInteger extends ObjectEffect {
  public static id: number = 2163;
  public id: number = 2163;

  public value: number | undefined = 0;

  public constructor(
    actionId?: number | undefined,
    value?: number | undefined,
  ) {
    super(actionId);
    this.value = value;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.value!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = reader.readVarInt();
  }
}

export class TrustCertificate extends DofusType {
  public static id: number = 8866;
  public id: number = 8866;

  public hash: string | undefined;
  public id_: number | undefined = 0;

  public constructor(hash?: string | undefined, id_?: number | undefined) {
    super();
    this.hash = hash;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.hash!);
    writer.writeInt(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.hash = reader.readUTF();
    this.id_ = reader.readInt();
  }
}

export class CharacterSpellModification extends DofusType {
  public static id: number = 4425;
  public id: number = 4425;

  public value: CharacterCharacteristicDetailed | undefined;
  public modificationType: number | undefined = 0;
  public spellId: number | undefined = 0;

  public constructor(
    value?: CharacterCharacteristicDetailed | undefined,
    modificationType?: number | undefined,
    spellId?: number | undefined,
  ) {
    super();
    this.value = value;
    this.modificationType = modificationType;
    this.spellId = spellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.value!.serialize(writer);
    writer.writeByte(this.modificationType!);
    writer.writeVarShort(this.spellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = new CharacterCharacteristicDetailed();
    this.value!.deserialize(reader);
    this.modificationType = reader.readByte();
    this.spellId = reader.readVarShort();
  }
}

export class InteractiveElementSkill extends DofusType {
  public static id: number = 6784;
  public id: number = 6784;

  public skillInstanceUid: number | undefined = 0;
  public skillId: number | undefined = 0;

  public constructor(
    skillInstanceUid?: number | undefined,
    skillId?: number | undefined,
  ) {
    super();
    this.skillInstanceUid = skillInstanceUid;
    this.skillId = skillId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.skillInstanceUid!);
    writer.writeVarInt(this.skillId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.skillInstanceUid = reader.readInt();
    this.skillId = reader.readVarInt();
  }
}

export class QuestActiveInformations extends DofusType {
  public static id: number = 1975;
  public id: number = 1975;

  public questId: number | undefined = 0;

  public constructor(questId?: number | undefined) {
    super();
    this.questId = questId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.questId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.questId = reader.readVarShort();
  }
}

export class GameFightCharacteristics extends DofusType {
  public static id: number = 7425;
  public id: number = 7425;

  public invisibilityState: number | undefined = 0;
  public characteristics: CharacterCharacteristics | undefined;
  public summoned: boolean | undefined = false;
  public summoner: number | undefined = 0;

  public constructor(
    invisibilityState?: number | undefined,
    characteristics?: CharacterCharacteristics | undefined,
    summoned?: boolean | undefined,
    summoner?: number | undefined,
  ) {
    super();
    this.invisibilityState = invisibilityState;
    this.characteristics = characteristics;
    this.summoned = summoned;
    this.summoner = summoner;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.invisibilityState!);
    this.characteristics!.serialize(writer);
    writer.writeBoolean(this.summoned!);
    writer.writeDouble(this.summoner!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.invisibilityState = reader.readByte();
    this.characteristics = new CharacterCharacteristics();
    this.characteristics!.deserialize(reader);
    this.summoned = reader.readBoolean();
    this.summoner = reader.readDouble();
  }
}

export class PrismInformation extends DofusType {
  public static id: number = 6060;
  public id: number = 6060;

  public rewardTokenCount: number | undefined = 0;
  public placementDate: number | undefined = 0;
  public typeId: number | undefined = 0;
  public nextVulnerabilityDate: number | undefined = 0;
  public state: number | undefined = 1;

  public constructor(
    rewardTokenCount?: number | undefined,
    placementDate?: number | undefined,
    typeId?: number | undefined,
    nextVulnerabilityDate?: number | undefined,
    state?: number | undefined,
  ) {
    super();
    this.rewardTokenCount = rewardTokenCount;
    this.placementDate = placementDate;
    this.typeId = typeId;
    this.nextVulnerabilityDate = nextVulnerabilityDate;
    this.state = state;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.rewardTokenCount!);
    writer.writeInt(this.placementDate!);
    writer.writeByte(this.typeId!);
    writer.writeInt(this.nextVulnerabilityDate!);
    writer.writeByte(this.state!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.rewardTokenCount = reader.readVarInt();
    this.placementDate = reader.readInt();
    this.typeId = reader.readByte();
    this.nextVulnerabilityDate = reader.readInt();
    this.state = reader.readByte();
  }
}

export class TaxCollectorStaticInformations extends DofusType {
  public static id: number = 4022;
  public id: number = 4022;

  public callerId: number | undefined = 0;
  public guildIdentity: GuildInformations | undefined;
  public firstNameId: number | undefined = 0;
  public lastNameId: number | undefined = 0;

  public constructor(
    callerId?: number | undefined,
    guildIdentity?: GuildInformations | undefined,
    firstNameId?: number | undefined,
    lastNameId?: number | undefined,
  ) {
    super();
    this.callerId = callerId;
    this.guildIdentity = guildIdentity;
    this.firstNameId = firstNameId;
    this.lastNameId = lastNameId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.callerId!);
    this.guildIdentity!.serialize(writer);
    writer.writeVarShort(this.firstNameId!);
    writer.writeVarShort(this.lastNameId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.callerId = reader.readVarLong();
    this.guildIdentity = new GuildInformations();
    this.guildIdentity!.deserialize(reader);
    this.firstNameId = reader.readVarShort();
    this.lastNameId = reader.readVarShort();
  }
}

export class SkillActionDescription extends DofusType {
  public static id: number = 2262;
  public id: number = 2262;

  public skillId: number | undefined = 0;

  public constructor(skillId?: number | undefined) {
    super();
    this.skillId = skillId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.skillId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.skillId = reader.readVarShort();
  }
}

export class SkillActionDescriptionCraft extends SkillActionDescription {
  public static id: number = 6151;
  public id: number = 6151;

  public probability: number | undefined = 0;

  public constructor(
    skillId?: number | undefined,
    probability?: number | undefined,
  ) {
    super(skillId);
    this.probability = probability;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.probability!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.probability = reader.readByte();
  }
}

export class JobDescription extends DofusType {
  public static id: number = 2005;
  public id: number = 2005;

  public jobId: number | undefined = 0;
  public skills: SkillActionDescription[] | undefined;

  public constructor(
    jobId?: number | undefined,
    skills?: SkillActionDescription[] | undefined,
  ) {
    super();
    this.jobId = jobId;
    this.skills = skills;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.jobId!);
    writer.writeShort(this.skills!.length);
    this.skills!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.jobId = reader.readByte();
    this.skills = [];
    const countSkills = reader.readShort();
    for (let i: number = 0; i < countSkills; i++) {
      const skillsTypeId: number = reader.readShort();
      const type: SkillActionDescription = new types[
        skillsTypeId
      ]() as SkillActionDescription;
      type.deserialize(reader);
      this.skills.push(type);
    }
  }
}

export class SkillActionDescriptionTimed extends SkillActionDescription {
  public static id: number = 9286;
  public id: number = 9286;

  public time: number | undefined = 0;

  public constructor(skillId?: number | undefined, time?: number | undefined) {
    super(skillId);
    this.time = time;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.time!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.time = reader.readByte();
  }
}

export class SkillActionDescriptionCollect extends SkillActionDescriptionTimed {
  public static id: number = 5191;
  public id: number = 5191;

  public max: number | undefined = 0;
  public min: number | undefined = 0;

  public constructor(
    skillId?: number | undefined,
    time?: number | undefined,
    max?: number | undefined,
    min?: number | undefined,
  ) {
    super(skillId, time);
    this.max = max;
    this.min = min;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.max!);
    writer.writeVarShort(this.min!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.max = reader.readVarShort();
    this.min = reader.readVarShort();
  }
}

export class GameServerInformations extends DofusType {
  public static id: number = 5238;
  public id: number = 5238;

  public date: number | undefined = 0;
  public charactersCount: number | undefined = 0;
  public type: number | undefined = -1;
  public id_: number | undefined = 0;
  public status: number | undefined = 1;
  public completion: number | undefined = 0;
  public charactersSlots: number | undefined = 0;
  public isMonoAccount: boolean | undefined = false;
  public isSelectable: boolean | undefined = false;

  public constructor(
    date?: number | undefined,
    charactersCount?: number | undefined,
    type?: number | undefined,
    id_?: number | undefined,
    status?: number | undefined,
    completion?: number | undefined,
    charactersSlots?: number | undefined,
    isMonoAccount?: boolean | undefined,
    isSelectable?: boolean | undefined,
  ) {
    super();
    this.date = date;
    this.charactersCount = charactersCount;
    this.type = type;
    this.id_ = id_;
    this.status = status;
    this.completion = completion;
    this.charactersSlots = charactersSlots;
    this.isMonoAccount = isMonoAccount;
    this.isSelectable = isSelectable;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.date!);
    writer.writeByte(this.charactersCount!);
    writer.writeByte(this.type!);
    writer.writeVarShort(this.id_!);
    writer.writeByte(this.status!);
    writer.writeByte(this.completion!);
    writer.writeByte(this.charactersSlots!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.isMonoAccount!);
    box0 = setFlag(box0, 1, this.isSelectable!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.date = reader.readDouble();
    this.charactersCount = reader.readByte();
    this.type = reader.readByte();
    this.id_ = reader.readVarShort();
    this.status = reader.readByte();
    this.completion = reader.readByte();
    this.charactersSlots = reader.readByte();
    const box0 = reader.readByte();
    this.isMonoAccount = getFlag(box0, 0);
    this.isSelectable = getFlag(box0, 1);
  }
}

export class PaddockInformations extends DofusType {
  public static id: number = 1965;
  public id: number = 1965;

  public maxItems: number | undefined = 0;
  public maxOutdoorMount: number | undefined = 0;

  public constructor(
    maxItems?: number | undefined,
    maxOutdoorMount?: number | undefined,
  ) {
    super();
    this.maxItems = maxItems;
    this.maxOutdoorMount = maxOutdoorMount;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.maxItems!);
    writer.writeVarShort(this.maxOutdoorMount!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.maxItems = reader.readVarShort();
    this.maxOutdoorMount = reader.readVarShort();
  }
}

export class PaddockInstancesInformations extends PaddockInformations {
  public static id: number = 3435;
  public id: number = 3435;

  public paddocks: PaddockBuyableInformations[] | undefined;

  public constructor(
    maxItems?: number | undefined,
    maxOutdoorMount?: number | undefined,
    paddocks?: PaddockBuyableInformations[] | undefined,
  ) {
    super(maxItems, maxOutdoorMount);
    this.paddocks = paddocks;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.paddocks!.length);
    this.paddocks!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.paddocks = [];
    const countPaddocks = reader.readShort();
    for (let i: number = 0; i < countPaddocks; i++) {
      const paddocksTypeId: number = reader.readShort();
      const type: PaddockBuyableInformations = new types[
        paddocksTypeId
      ]() as PaddockBuyableInformations;
      type.deserialize(reader);
      this.paddocks.push(type);
    }
  }
}

export class PaddockBuyableInformations extends DofusType {
  public static id: number = 3536;
  public id: number = 3536;

  public locked: boolean | undefined = false;
  public price: number | undefined = 0;

  public constructor(locked?: boolean | undefined, price?: number | undefined) {
    super();
    this.locked = locked;
    this.price = price;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.locked!);
    writer.writeVarLong(this.price!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.locked = reader.readBoolean();
    this.price = reader.readVarLong();
  }
}

export class GameRolePlayNpcQuestFlag extends DofusType {
  public static id: number = 3944;
  public id: number = 3944;

  public questsToValidId: number[] | undefined;
  public questsToStartId: number[] | undefined;

  public constructor(
    questsToValidId?: number[] | undefined,
    questsToStartId?: number[] | undefined,
  ) {
    super();
    this.questsToValidId = questsToValidId;
    this.questsToStartId = questsToStartId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.questsToValidId!.length);
    this.questsToValidId!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
    writer.writeShort(this.questsToStartId!.length);
    this.questsToStartId!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.questsToValidId = [];
    const countQuestsToValidId = reader.readShort();
    for (let i: number = 0; i < countQuestsToValidId; i++) {
      this.questsToValidId.push(reader.readVarShort());
    }
    this.questsToStartId = [];
    const countQuestsToStartId = reader.readShort();
    for (let i: number = 0; i < countQuestsToStartId; i++) {
      this.questsToStartId.push(reader.readVarShort());
    }
  }
}

export class ItemDurability extends DofusType {
  public static id: number = 2055;
  public id: number = 2055;

  public durabilityMax: number | undefined = 0;
  public durability: number | undefined = 0;

  public constructor(
    durabilityMax?: number | undefined,
    durability?: number | undefined,
  ) {
    super();
    this.durabilityMax = durabilityMax;
    this.durability = durability;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.durabilityMax!);
    writer.writeShort(this.durability!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.durabilityMax = reader.readShort();
    this.durability = reader.readShort();
  }
}

export class AchievementAchieved extends DofusType {
  public static id: number = 1836;
  public id: number = 1836;

  public achievedBy: number | undefined = 0;
  public id_: number | undefined = 0;

  public constructor(
    achievedBy?: number | undefined,
    id_?: number | undefined,
  ) {
    super();
    this.achievedBy = achievedBy;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.achievedBy!);
    writer.writeVarShort(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.achievedBy = reader.readVarLong();
    this.id_ = reader.readVarShort();
  }
}

export class AchievementAchievedRewardable extends AchievementAchieved {
  public static id: number = 4851;
  public id: number = 4851;

  public finishedlevel: number | undefined = 0;

  public constructor(
    achievedBy?: number | undefined,
    id_?: number | undefined,
    finishedlevel?: number | undefined,
  ) {
    super(achievedBy, id_);
    this.finishedlevel = finishedlevel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.finishedlevel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.finishedlevel = reader.readVarShort();
  }
}

export class HumanOptionOrnament extends HumanOption {
  public static id: number = 5510;
  public id: number = 5510;

  public leagueId: number | undefined = 0;
  public ornamentId: number | undefined = 0;
  public ladderPosition: number | undefined = 0;
  public level: number | undefined = 0;

  public constructor(
    leagueId?: number | undefined,
    ornamentId?: number | undefined,
    ladderPosition?: number | undefined,
    level?: number | undefined,
  ) {
    super();
    this.leagueId = leagueId;
    this.ornamentId = ornamentId;
    this.ladderPosition = ladderPosition;
    this.level = level;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.leagueId!);
    writer.writeVarShort(this.ornamentId!);
    writer.writeInt(this.ladderPosition!);
    writer.writeVarShort(this.level!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.leagueId = reader.readVarShort();
    this.ornamentId = reader.readVarShort();
    this.ladderPosition = reader.readInt();
    this.level = reader.readVarShort();
  }
}

export class HumanOptionTitle extends HumanOption {
  public static id: number = 1813;
  public id: number = 1813;

  public titleParam: string | undefined;
  public titleId: number | undefined = 0;

  public constructor(
    titleParam?: string | undefined,
    titleId?: number | undefined,
  ) {
    super();
    this.titleParam = titleParam;
    this.titleId = titleId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.titleParam!);
    writer.writeVarShort(this.titleId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.titleParam = reader.readUTF();
    this.titleId = reader.readVarShort();
  }
}

export class AccountHouseInformations extends HouseInformations {
  public static id: number = 3170;
  public id: number = 3170;

  public worldX: number | undefined = 0;
  public houseInfos: HouseInstanceInformations | undefined;
  public worldY: number | undefined = 0;
  public mapId: number | undefined = 0;
  public subAreaId: number | undefined = 0;

  public constructor(
    modelId?: number | undefined,
    houseId?: number | undefined,
    worldX?: number | undefined,
    houseInfos?: HouseInstanceInformations | undefined,
    worldY?: number | undefined,
    mapId?: number | undefined,
    subAreaId?: number | undefined,
  ) {
    super(modelId, houseId);
    this.worldX = worldX;
    this.houseInfos = houseInfos;
    this.worldY = worldY;
    this.mapId = mapId;
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.worldX!);
    writer.writeShort(this.houseInfos!.id);
    this.houseInfos!.serialize(writer);
    writer.writeShort(this.worldY!);
    writer.writeDouble(this.mapId!);
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.worldX = reader.readShort();
    const houseInfosTypeId: number = reader.readShort();
    this.houseInfos = new types[
      houseInfosTypeId
    ]() as HouseInstanceInformations;
    this.houseInfos!.deserialize(reader);
    this.worldY = reader.readShort();
    this.mapId = reader.readDouble();
    this.subAreaId = reader.readVarShort();
  }
}

export class HouseInformationsInside extends HouseInformations {
  public static id: number = 2517;
  public id: number = 2517;

  public worldY: number | undefined = 0;
  public houseInfos: HouseInstanceInformations | undefined;
  public worldX: number | undefined = 0;

  public constructor(
    modelId?: number | undefined,
    houseId?: number | undefined,
    worldY?: number | undefined,
    houseInfos?: HouseInstanceInformations | undefined,
    worldX?: number | undefined,
  ) {
    super(modelId, houseId);
    this.worldY = worldY;
    this.houseInfos = houseInfos;
    this.worldX = worldX;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.worldY!);
    writer.writeShort(this.houseInfos!.id);
    this.houseInfos!.serialize(writer);
    writer.writeShort(this.worldX!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.worldY = reader.readShort();
    const houseInfosTypeId: number = reader.readShort();
    this.houseInfos = new types[
      houseInfosTypeId
    ]() as HouseInstanceInformations;
    this.houseInfos!.deserialize(reader);
    this.worldX = reader.readShort();
  }
}

export class ActorAlignmentInformations extends DofusType {
  public static id: number = 3635;
  public id: number = 3635;

  public characterPower: number | undefined = 0;
  public alignmentGrade: number | undefined = 0;
  public alignmentSide: number | undefined = 0;
  public alignmentValue: number | undefined = 0;

  public constructor(
    characterPower?: number | undefined,
    alignmentGrade?: number | undefined,
    alignmentSide?: number | undefined,
    alignmentValue?: number | undefined,
  ) {
    super();
    this.characterPower = characterPower;
    this.alignmentGrade = alignmentGrade;
    this.alignmentSide = alignmentSide;
    this.alignmentValue = alignmentValue;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.characterPower!);
    writer.writeByte(this.alignmentGrade!);
    writer.writeByte(this.alignmentSide!);
    writer.writeByte(this.alignmentValue!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.characterPower = reader.readDouble();
    this.alignmentGrade = reader.readByte();
    this.alignmentSide = reader.readByte();
    this.alignmentValue = reader.readByte();
  }
}

export class PortalInformation extends DofusType {
  public static id: number = 2145;
  public id: number = 2145;

  public areaId: number | undefined = 0;
  public portalId: number | undefined = 0;

  public constructor(
    areaId?: number | undefined,
    portalId?: number | undefined,
  ) {
    super();
    this.areaId = areaId;
    this.portalId = portalId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.areaId!);
    writer.writeInt(this.portalId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.areaId = reader.readShort();
    this.portalId = reader.readInt();
  }
}

export class AlliancePrismInformation extends PrismInformation {
  public static id: number = 1469;
  public id: number = 1469;

  public alliance: AllianceInformations | undefined;

  public constructor(
    rewardTokenCount?: number | undefined,
    placementDate?: number | undefined,
    typeId?: number | undefined,
    nextVulnerabilityDate?: number | undefined,
    state?: number | undefined,
    alliance?: AllianceInformations | undefined,
  ) {
    super(
      rewardTokenCount,
      placementDate,
      typeId,
      nextVulnerabilityDate,
      state,
    );
    this.alliance = alliance;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.alliance!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.alliance = new AllianceInformations();
    this.alliance!.deserialize(reader);
  }
}

export class AllianceInsiderPrismInformation extends PrismInformation {
  public static id: number = 8201;
  public id: number = 8201;

  public lastTimeSlotModificationAuthorGuildId: number | undefined = 0;
  public lastTimeSlotModificationAuthorId: number | undefined = 0;
  public lastTimeSlotModificationDate: number | undefined = 0;
  public lastTimeSlotModificationAuthorName: string | undefined;
  public modulesObjects: ObjectItem[] | undefined;

  public constructor(
    rewardTokenCount?: number | undefined,
    placementDate?: number | undefined,
    typeId?: number | undefined,
    nextVulnerabilityDate?: number | undefined,
    state?: number | undefined,
    lastTimeSlotModificationAuthorGuildId?: number | undefined,
    lastTimeSlotModificationAuthorId?: number | undefined,
    lastTimeSlotModificationDate?: number | undefined,
    lastTimeSlotModificationAuthorName?: string | undefined,
    modulesObjects?: ObjectItem[] | undefined,
  ) {
    super(
      rewardTokenCount,
      placementDate,
      typeId,
      nextVulnerabilityDate,
      state,
    );
    this.lastTimeSlotModificationAuthorGuildId =
      lastTimeSlotModificationAuthorGuildId;
    this.lastTimeSlotModificationAuthorId = lastTimeSlotModificationAuthorId;
    this.lastTimeSlotModificationDate = lastTimeSlotModificationDate;
    this.lastTimeSlotModificationAuthorName =
      lastTimeSlotModificationAuthorName;
    this.modulesObjects = modulesObjects;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.lastTimeSlotModificationAuthorGuildId!);
    writer.writeVarLong(this.lastTimeSlotModificationAuthorId!);
    writer.writeInt(this.lastTimeSlotModificationDate!);
    writer.writeUTF(this.lastTimeSlotModificationAuthorName!);
    writer.writeShort(this.modulesObjects!.length);
    this.modulesObjects!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.lastTimeSlotModificationAuthorGuildId = reader.readVarInt();
    this.lastTimeSlotModificationAuthorId = reader.readVarLong();
    this.lastTimeSlotModificationDate = reader.readInt();
    this.lastTimeSlotModificationAuthorName = reader.readUTF();
    this.modulesObjects = [];
    const countModulesObjects = reader.readShort();
    for (let i: number = 0; i < countModulesObjects; i++) {
      const type: ObjectItem = new ObjectItem();
      type.deserialize(reader);
      this.modulesObjects.push(type);
    }
  }
}

export class PaddockContentInformations extends PaddockInformations {
  public static id: number = 8051;
  public id: number = 8051;

  public abandonned: boolean | undefined = false;
  public worldX: number | undefined = 0;
  public mountsInformations: MountInformationsForPaddock[] | undefined;
  public paddockId: number | undefined = 0;
  public worldY: number | undefined = 0;
  public mapId: number | undefined = 0;
  public subAreaId: number | undefined = 0;

  public constructor(
    maxItems?: number | undefined,
    maxOutdoorMount?: number | undefined,
    abandonned?: boolean | undefined,
    worldX?: number | undefined,
    mountsInformations?: MountInformationsForPaddock[] | undefined,
    paddockId?: number | undefined,
    worldY?: number | undefined,
    mapId?: number | undefined,
    subAreaId?: number | undefined,
  ) {
    super(maxItems, maxOutdoorMount);
    this.abandonned = abandonned;
    this.worldX = worldX;
    this.mountsInformations = mountsInformations;
    this.paddockId = paddockId;
    this.worldY = worldY;
    this.mapId = mapId;
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.abandonned!);
    writer.writeShort(this.worldX!);
    writer.writeShort(this.mountsInformations!.length);
    this.mountsInformations!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeDouble(this.paddockId!);
    writer.writeShort(this.worldY!);
    writer.writeDouble(this.mapId!);
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.abandonned = reader.readBoolean();
    this.worldX = reader.readShort();
    this.mountsInformations = [];
    const countMountsInformations = reader.readShort();
    for (let i: number = 0; i < countMountsInformations; i++) {
      const type: MountInformationsForPaddock =
        new MountInformationsForPaddock();
      type.deserialize(reader);
      this.mountsInformations.push(type);
    }
    this.paddockId = reader.readDouble();
    this.worldY = reader.readShort();
    this.mapId = reader.readDouble();
    this.subAreaId = reader.readVarShort();
  }
}

export class GuildMember extends CharacterMinimalInformations {
  public static id: number = 5491;
  public id: number = 5491;

  public status: PlayerStatus | undefined;
  public achievementPoints: number | undefined = 0;
  public givenExperience: number | undefined = 0;
  public rank: number | undefined = 0;
  public experienceGivenPercent: number | undefined = 0;
  public moodSmileyId: number | undefined = 0;
  public accountId: number | undefined = 0;
  public alignmentSide: number | undefined = 0;
  public rights: number | undefined = 0;
  public breed: number | undefined = 0;
  public connected: number | undefined = 99;
  public hoursSinceLastConnection: number | undefined = 0;
  public sex: boolean | undefined = false;
  public havenBagShared: boolean | undefined = false;

  public constructor(
    id_?: number | undefined,
    name?: string | undefined,
    level?: number | undefined,
    status?: PlayerStatus | undefined,
    achievementPoints?: number | undefined,
    givenExperience?: number | undefined,
    rank?: number | undefined,
    experienceGivenPercent?: number | undefined,
    moodSmileyId?: number | undefined,
    accountId?: number | undefined,
    alignmentSide?: number | undefined,
    rights?: number | undefined,
    breed?: number | undefined,
    connected?: number | undefined,
    hoursSinceLastConnection?: number | undefined,
    sex?: boolean | undefined,
    havenBagShared?: boolean | undefined,
  ) {
    super(id_, name, level);
    this.status = status;
    this.achievementPoints = achievementPoints;
    this.givenExperience = givenExperience;
    this.rank = rank;
    this.experienceGivenPercent = experienceGivenPercent;
    this.moodSmileyId = moodSmileyId;
    this.accountId = accountId;
    this.alignmentSide = alignmentSide;
    this.rights = rights;
    this.breed = breed;
    this.connected = connected;
    this.hoursSinceLastConnection = hoursSinceLastConnection;
    this.sex = sex;
    this.havenBagShared = havenBagShared;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.status!.id);
    this.status!.serialize(writer);
    writer.writeInt(this.achievementPoints!);
    writer.writeVarLong(this.givenExperience!);
    writer.writeVarShort(this.rank!);
    writer.writeByte(this.experienceGivenPercent!);
    writer.writeVarShort(this.moodSmileyId!);
    writer.writeInt(this.accountId!);
    writer.writeByte(this.alignmentSide!);
    writer.writeVarInt(this.rights!);
    writer.writeByte(this.breed!);
    writer.writeByte(this.connected!);
    writer.writeShort(this.hoursSinceLastConnection!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.sex!);
    box0 = setFlag(box0, 1, this.havenBagShared!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    const statusTypeId: number = reader.readShort();
    this.status = new types[statusTypeId]() as PlayerStatus;
    this.status!.deserialize(reader);
    this.achievementPoints = reader.readInt();
    this.givenExperience = reader.readVarLong();
    this.rank = reader.readVarShort();
    this.experienceGivenPercent = reader.readByte();
    this.moodSmileyId = reader.readVarShort();
    this.accountId = reader.readInt();
    this.alignmentSide = reader.readByte();
    this.rights = reader.readVarInt();
    this.breed = reader.readByte();
    this.connected = reader.readByte();
    this.hoursSinceLastConnection = reader.readShort();
    const box0 = reader.readByte();
    this.sex = getFlag(box0, 0);
    this.havenBagShared = getFlag(box0, 1);
  }
}

export class SpellItem extends Item {
  public static id: number = 1179;
  public id: number = 1179;

  public spellLevel: number | undefined = 0;
  public spellId: number | undefined = 0;

  public constructor(
    spellLevel?: number | undefined,
    spellId?: number | undefined,
  ) {
    super();
    this.spellLevel = spellLevel;
    this.spellId = spellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.spellLevel!);
    writer.writeInt(this.spellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.spellLevel = reader.readShort();
    this.spellId = reader.readInt();
  }
}

export class ForgettableSpellItem extends SpellItem {
  public static id: number = 2497;
  public id: number = 2497;

  public available: boolean | undefined = false;

  public constructor(
    spellLevel?: number | undefined,
    spellId?: number | undefined,
    available?: boolean | undefined,
  ) {
    super(spellLevel, spellId);
    this.available = available;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.available!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.available = reader.readBoolean();
  }
}

export class PlayerStatus extends DofusType {
  public static id: number = 3077;
  public id: number = 3077;

  public statusId: number | undefined = 1;

  public constructor(statusId?: number | undefined) {
    super();
    this.statusId = statusId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.statusId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.statusId = reader.readByte();
  }
}

export class HumanOptionGuild extends HumanOption {
  public static id: number = 1437;
  public id: number = 1437;

  public guildInformations: GuildInformations | undefined;

  public constructor(guildInformations?: GuildInformations | undefined) {
    super();
    this.guildInformations = guildInformations;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.guildInformations!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildInformations = new GuildInformations();
    this.guildInformations!.deserialize(reader);
  }
}

export class Version extends DofusType {
  public static id: number = 3781;
  public id: number = 3781;

  public buildType: number | undefined = 0;
  public build: number | undefined = 0;
  public code: number | undefined = 0;
  public major: number | undefined = 0;
  public minor: number | undefined = 0;

  public constructor(
    buildType?: number | undefined,
    build?: number | undefined,
    code?: number | undefined,
    major?: number | undefined,
    minor?: number | undefined,
  ) {
    super();
    this.buildType = buildType;
    this.build = build;
    this.code = code;
    this.major = major;
    this.minor = minor;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.buildType!);
    writer.writeInt(this.build!);
    writer.writeByte(this.code!);
    writer.writeByte(this.major!);
    writer.writeByte(this.minor!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.buildType = reader.readByte();
    this.build = reader.readInt();
    this.code = reader.readByte();
    this.major = reader.readByte();
    this.minor = reader.readByte();
  }
}

export class ObjectItemToSell extends Item {
  public static id: number = 4244;
  public id: number = 4244;

  public effects: ObjectEffect[] | undefined;
  public quantity: number | undefined = 0;
  public objectGID: number | undefined = 0;
  public objectUID: number | undefined = 0;
  public objectPrice: number | undefined = 0;

  public constructor(
    effects?: ObjectEffect[] | undefined,
    quantity?: number | undefined,
    objectGID?: number | undefined,
    objectUID?: number | undefined,
    objectPrice?: number | undefined,
  ) {
    super();
    this.effects = effects;
    this.quantity = quantity;
    this.objectGID = objectGID;
    this.objectUID = objectUID;
    this.objectPrice = objectPrice;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.effects!.length);
    this.effects!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarInt(this.quantity!);
    writer.writeVarShort(this.objectGID!);
    writer.writeVarInt(this.objectUID!);
    writer.writeVarLong(this.objectPrice!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i: number = 0; i < countEffects; i++) {
      const effectsTypeId: number = reader.readShort();
      const type: ObjectEffect = new types[effectsTypeId]() as ObjectEffect;
      type.deserialize(reader);
      this.effects.push(type);
    }
    this.quantity = reader.readVarInt();
    this.objectGID = reader.readVarShort();
    this.objectUID = reader.readVarInt();
    this.objectPrice = reader.readVarLong();
  }
}

export class ObjectItemToSellInBid extends ObjectItemToSell {
  public static id: number = 3500;
  public id: number = 3500;

  public unsoldDelay: number | undefined = 0;

  public constructor(
    effects?: ObjectEffect[] | undefined,
    quantity?: number | undefined,
    objectGID?: number | undefined,
    objectUID?: number | undefined,
    objectPrice?: number | undefined,
    unsoldDelay?: number | undefined,
  ) {
    super(effects, quantity, objectGID, objectUID, objectPrice);
    this.unsoldDelay = unsoldDelay;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.unsoldDelay!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.unsoldDelay = reader.readInt();
  }
}

export class SellerBuyerDescriptor extends DofusType {
  public static id: number = 5475;
  public id: number = 5475;

  public npcContextualId: number | undefined = 0;
  public maxItemPerAccount: number | undefined = 0;
  public types: number[] | undefined;
  public quantities: number[] | undefined;
  public taxPercentage: number | undefined = 0;
  public taxModificationPercentage: number | undefined = 0;
  public unsoldDelay: number | undefined = 0;
  public maxItemLevel: number | undefined = 0;

  public constructor(
    npcContextualId?: number | undefined,
    maxItemPerAccount?: number | undefined,
    types?: number[] | undefined,
    quantities?: number[] | undefined,
    taxPercentage?: number | undefined,
    taxModificationPercentage?: number | undefined,
    unsoldDelay?: number | undefined,
    maxItemLevel?: number | undefined,
  ) {
    super();
    this.npcContextualId = npcContextualId;
    this.maxItemPerAccount = maxItemPerAccount;
    this.types = types;
    this.quantities = quantities;
    this.taxPercentage = taxPercentage;
    this.taxModificationPercentage = taxModificationPercentage;
    this.unsoldDelay = unsoldDelay;
    this.maxItemLevel = maxItemLevel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.npcContextualId!);
    writer.writeVarInt(this.maxItemPerAccount!);
    writer.writeShort(this.types!.length);
    this.types!.forEach((current: number) => writer.writeVarInt(current));
    writer.writeShort(this.quantities!.length);
    this.quantities!.forEach((current: number) => writer.writeVarInt(current));
    writer.writeFloat(this.taxPercentage!);
    writer.writeFloat(this.taxModificationPercentage!);
    writer.writeVarShort(this.unsoldDelay!);
    writer.writeByte(this.maxItemLevel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.npcContextualId = reader.readInt();
    this.maxItemPerAccount = reader.readVarInt();
    this.types = [];
    const countTypes = reader.readShort();
    for (let i: number = 0; i < countTypes; i++) {
      this.types.push(reader.readVarInt());
    }
    this.quantities = [];
    const countQuantities = reader.readShort();
    for (let i: number = 0; i < countQuantities; i++) {
      this.quantities.push(reader.readVarInt());
    }
    this.taxPercentage = reader.readFloat();
    this.taxModificationPercentage = reader.readFloat();
    this.unsoldDelay = reader.readVarShort();
    this.maxItemLevel = reader.readByte();
  }
}

export class FightExternalInformations extends DofusType {
  public static id: number = 7149;
  public id: number = 7149;

  public fightType: number | undefined = 0;
  public fightId: number | undefined = 0;
  public fightTeamsOptions: FightOptionsInformations[] | undefined;
  public fightSpectatorLocked: boolean | undefined = false;
  public fightStart: number | undefined = 0;
  public fightTeams: FightTeamLightInformations[] | undefined;

  public constructor(
    fightType?: number | undefined,
    fightId?: number | undefined,
    fightTeamsOptions?: FightOptionsInformations[] | undefined,
    fightSpectatorLocked?: boolean | undefined,
    fightStart?: number | undefined,
    fightTeams?: FightTeamLightInformations[] | undefined,
  ) {
    super();
    this.fightType = fightType;
    this.fightId = fightId;
    this.fightTeamsOptions = fightTeamsOptions;
    this.fightSpectatorLocked = fightSpectatorLocked;
    this.fightStart = fightStart;
    this.fightTeams = fightTeams;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.fightType!);
    writer.writeVarShort(this.fightId!);
    this.fightTeamsOptions!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeBoolean(this.fightSpectatorLocked!);
    writer.writeInt(this.fightStart!);
    this.fightTeams!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fightType = reader.readByte();
    this.fightId = reader.readVarShort();
    this.fightTeamsOptions = [];
    for (let i: number = 0; i < 2; i++) {
      const type: FightOptionsInformations = new FightOptionsInformations();
      type.deserialize(reader);
      this.fightTeamsOptions.push(type);
    }
    this.fightSpectatorLocked = reader.readBoolean();
    this.fightStart = reader.readInt();
    this.fightTeams = [];
    for (let i: number = 0; i < 2; i++) {
      const type: FightTeamLightInformations = new FightTeamLightInformations();
      type.deserialize(reader);
      this.fightTeams.push(type);
    }
  }
}

export class AbstractPlayerSearchInformation extends DofusType {
  public static id: number = 1294;
  public id: number = 1294;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PlayerSearchTagInformation extends AbstractPlayerSearchInformation {
  public static id: number = 3556;
  public id: number = 3556;

  public tag: AccountTagInformation | undefined;

  public constructor(tag?: AccountTagInformation | undefined) {
    super();
    this.tag = tag;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.tag!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.tag = new AccountTagInformation();
    this.tag!.deserialize(reader);
  }
}

export class TaxCollectorMovement extends DofusType {
  public static id: number = 6775;
  public id: number = 6775;

  public playerName: string | undefined;
  public movementType: number | undefined = 0;
  public playerId: number | undefined = 0;
  public basicInfos: TaxCollectorBasicInformations | undefined;

  public constructor(
    playerName?: string | undefined,
    movementType?: number | undefined,
    playerId?: number | undefined,
    basicInfos?: TaxCollectorBasicInformations | undefined,
  ) {
    super();
    this.playerName = playerName;
    this.movementType = movementType;
    this.playerId = playerId;
    this.basicInfos = basicInfos;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.playerName!);
    writer.writeByte(this.movementType!);
    writer.writeVarLong(this.playerId!);
    this.basicInfos!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerName = reader.readUTF();
    this.movementType = reader.readByte();
    this.playerId = reader.readVarLong();
    this.basicInfos = new TaxCollectorBasicInformations();
    this.basicInfos!.deserialize(reader);
  }
}

export class HouseInformationsForGuild extends HouseInformations {
  public static id: number = 3219;
  public id: number = 3219;

  public subAreaId: number | undefined = 0;
  public guildshareParams: number | undefined = 0;
  public mapId: number | undefined = 0;
  public secondHand: boolean | undefined = false;
  public skillListIds: number[] | undefined;
  public instanceId: number | undefined = 0;
  public worldY: number | undefined = 0;
  public ownerTag: AccountTagInformation | undefined;
  public worldX: number | undefined = 0;

  public constructor(
    modelId?: number | undefined,
    houseId?: number | undefined,
    subAreaId?: number | undefined,
    guildshareParams?: number | undefined,
    mapId?: number | undefined,
    secondHand?: boolean | undefined,
    skillListIds?: number[] | undefined,
    instanceId?: number | undefined,
    worldY?: number | undefined,
    ownerTag?: AccountTagInformation | undefined,
    worldX?: number | undefined,
  ) {
    super(modelId, houseId);
    this.subAreaId = subAreaId;
    this.guildshareParams = guildshareParams;
    this.mapId = mapId;
    this.secondHand = secondHand;
    this.skillListIds = skillListIds;
    this.instanceId = instanceId;
    this.worldY = worldY;
    this.ownerTag = ownerTag;
    this.worldX = worldX;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.subAreaId!);
    writer.writeVarInt(this.guildshareParams!);
    writer.writeDouble(this.mapId!);
    writer.writeBoolean(this.secondHand!);
    writer.writeShort(this.skillListIds!.length);
    this.skillListIds!.forEach((current: number) => writer.writeInt(current));
    writer.writeInt(this.instanceId!);
    writer.writeShort(this.worldY!);
    this.ownerTag!.serialize(writer);
    writer.writeShort(this.worldX!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.subAreaId = reader.readVarShort();
    this.guildshareParams = reader.readVarInt();
    this.mapId = reader.readDouble();
    this.secondHand = reader.readBoolean();
    this.skillListIds = [];
    const countSkillListIds = reader.readShort();
    for (let i: number = 0; i < countSkillListIds; i++) {
      this.skillListIds.push(reader.readInt());
    }
    this.instanceId = reader.readInt();
    this.worldY = reader.readShort();
    this.ownerTag = new AccountTagInformation();
    this.ownerTag!.deserialize(reader);
    this.worldX = reader.readShort();
  }
}

export class AbstractContactInformations extends DofusType {
  public static id: number = 6684;
  public id: number = 6684;

  public accountId: number | undefined = 0;
  public accountTag: AccountTagInformation | undefined;

  public constructor(
    accountId?: number | undefined,
    accountTag?: AccountTagInformation | undefined,
  ) {
    super();
    this.accountId = accountId;
    this.accountTag = accountTag;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.accountId!);
    this.accountTag!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accountId = reader.readInt();
    this.accountTag = new AccountTagInformation();
    this.accountTag!.deserialize(reader);
  }
}

export class FriendInformations extends AbstractContactInformations {
  public static id: number = 8035;
  public id: number = 8035;

  public ladderPosition: number | undefined = 0;
  public leagueId: number | undefined = 0;
  public achievementPoints: number | undefined = 0;
  public playerState: number | undefined = 99;
  public lastConnection: number | undefined = 0;

  public constructor(
    accountId?: number | undefined,
    accountTag?: AccountTagInformation | undefined,
    ladderPosition?: number | undefined,
    leagueId?: number | undefined,
    achievementPoints?: number | undefined,
    playerState?: number | undefined,
    lastConnection?: number | undefined,
  ) {
    super(accountId, accountTag);
    this.ladderPosition = ladderPosition;
    this.leagueId = leagueId;
    this.achievementPoints = achievementPoints;
    this.playerState = playerState;
    this.lastConnection = lastConnection;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.ladderPosition!);
    writer.writeVarShort(this.leagueId!);
    writer.writeInt(this.achievementPoints!);
    writer.writeByte(this.playerState!);
    writer.writeVarShort(this.lastConnection!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ladderPosition = reader.readInt();
    this.leagueId = reader.readVarShort();
    this.achievementPoints = reader.readInt();
    this.playerState = reader.readByte();
    this.lastConnection = reader.readVarShort();
  }
}

export class FriendOnlineInformations extends FriendInformations {
  public static id: number = 3896;
  public id: number = 3896;

  public level: number | undefined = 0;
  public playerId: number | undefined = 0;
  public breed: number | undefined = 0;
  public moodSmileyId: number | undefined = 0;
  public playerName: string | undefined;
  public alignmentSide: number | undefined = 0;
  public status: PlayerStatus | undefined;
  public guildInfo: GuildInformations | undefined;
  public sex: boolean | undefined = false;
  public havenBagShared: boolean | undefined = false;

  public constructor(
    accountId?: number | undefined,
    accountTag?: AccountTagInformation | undefined,
    ladderPosition?: number | undefined,
    leagueId?: number | undefined,
    achievementPoints?: number | undefined,
    playerState?: number | undefined,
    lastConnection?: number | undefined,
    level?: number | undefined,
    playerId?: number | undefined,
    breed?: number | undefined,
    moodSmileyId?: number | undefined,
    playerName?: string | undefined,
    alignmentSide?: number | undefined,
    status?: PlayerStatus | undefined,
    guildInfo?: GuildInformations | undefined,
    sex?: boolean | undefined,
    havenBagShared?: boolean | undefined,
  ) {
    super(
      accountId,
      accountTag,
      ladderPosition,
      leagueId,
      achievementPoints,
      playerState,
      lastConnection,
    );
    this.level = level;
    this.playerId = playerId;
    this.breed = breed;
    this.moodSmileyId = moodSmileyId;
    this.playerName = playerName;
    this.alignmentSide = alignmentSide;
    this.status = status;
    this.guildInfo = guildInfo;
    this.sex = sex;
    this.havenBagShared = havenBagShared;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.level!);
    writer.writeVarLong(this.playerId!);
    writer.writeByte(this.breed!);
    writer.writeVarShort(this.moodSmileyId!);
    writer.writeUTF(this.playerName!);
    writer.writeByte(this.alignmentSide!);
    writer.writeShort(this.status!.id);
    this.status!.serialize(writer);
    this.guildInfo!.serialize(writer);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.sex!);
    box0 = setFlag(box0, 1, this.havenBagShared!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.level = reader.readVarShort();
    this.playerId = reader.readVarLong();
    this.breed = reader.readByte();
    this.moodSmileyId = reader.readVarShort();
    this.playerName = reader.readUTF();
    this.alignmentSide = reader.readByte();
    const statusTypeId: number = reader.readShort();
    this.status = new types[statusTypeId]() as PlayerStatus;
    this.status!.deserialize(reader);
    this.guildInfo = new GuildInformations();
    this.guildInfo!.deserialize(reader);
    const box0 = reader.readByte();
    this.sex = getFlag(box0, 0);
    this.havenBagShared = getFlag(box0, 1);
  }
}

export class PlayerStatusExtended extends PlayerStatus {
  public static id: number = 1176;
  public id: number = 1176;

  public message: string | undefined;

  public constructor(
    statusId?: number | undefined,
    message?: string | undefined,
  ) {
    super(statusId);
    this.message = message;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.message!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.message = reader.readUTF();
  }
}

export class AcquaintanceInformation extends AbstractContactInformations {
  public static id: number = 6223;
  public id: number = 6223;

  public playerState: number | undefined = 99;

  public constructor(
    accountId?: number | undefined,
    accountTag?: AccountTagInformation | undefined,
    playerState?: number | undefined,
  ) {
    super(accountId, accountTag);
    this.playerState = playerState;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.playerState!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerState = reader.readByte();
  }
}

export class AcquaintanceOnlineInformation extends AcquaintanceInformation {
  public static id: number = 4750;
  public id: number = 4750;

  public moodSmileyId: number | undefined = 0;
  public status: PlayerStatus | undefined;
  public playerId: number | undefined = 0;
  public playerName: string | undefined;

  public constructor(
    accountId?: number | undefined,
    accountTag?: AccountTagInformation | undefined,
    playerState?: number | undefined,
    moodSmileyId?: number | undefined,
    status?: PlayerStatus | undefined,
    playerId?: number | undefined,
    playerName?: string | undefined,
  ) {
    super(accountId, accountTag, playerState);
    this.moodSmileyId = moodSmileyId;
    this.status = status;
    this.playerId = playerId;
    this.playerName = playerName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.moodSmileyId!);
    writer.writeShort(this.status!.id);
    this.status!.serialize(writer);
    writer.writeVarLong(this.playerId!);
    writer.writeUTF(this.playerName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.moodSmileyId = reader.readVarShort();
    const statusTypeId: number = reader.readShort();
    this.status = new types[statusTypeId]() as PlayerStatus;
    this.status!.deserialize(reader);
    this.playerId = reader.readVarLong();
    this.playerName = reader.readUTF();
  }
}

export class ObjectItemGenericQuantity extends Item {
  public static id: number = 7873;
  public id: number = 7873;

  public quantity: number | undefined = 0;
  public objectGID: number | undefined = 0;

  public constructor(
    quantity?: number | undefined,
    objectGID?: number | undefined,
  ) {
    super();
    this.quantity = quantity;
    this.objectGID = objectGID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.quantity!);
    writer.writeVarShort(this.objectGID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarInt();
    this.objectGID = reader.readVarShort();
  }
}

export class AccountTagInformation extends DofusType {
  public static id: number = 7636;
  public id: number = 7636;

  public tagNumber: string | undefined;
  public nickname: string | undefined;

  public constructor(
    tagNumber?: string | undefined,
    nickname?: string | undefined,
  ) {
    super();
    this.tagNumber = tagNumber;
    this.nickname = nickname;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.tagNumber!);
    writer.writeUTF(this.nickname!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.tagNumber = reader.readUTF();
    this.nickname = reader.readUTF();
  }
}

export class IgnoredInformations extends AbstractContactInformations {
  public static id: number = 1909;
  public id: number = 1909;

  public constructor(
    accountId?: number | undefined,
    accountTag?: AccountTagInformation | undefined,
  ) {
    super(accountId, accountTag);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class IgnoredOnlineInformations extends IgnoredInformations {
  public static id: number = 7223;
  public id: number = 7223;

  public playerId: number | undefined = 0;
  public sex: boolean | undefined = false;
  public breed: number | undefined = 0;
  public playerName: string | undefined;

  public constructor(
    accountId?: number | undefined,
    accountTag?: AccountTagInformation | undefined,
    playerId?: number | undefined,
    sex?: boolean | undefined,
    breed?: number | undefined,
    playerName?: string | undefined,
  ) {
    super(accountId, accountTag);
    this.playerId = playerId;
    this.sex = sex;
    this.breed = breed;
    this.playerName = playerName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
    writer.writeBoolean(this.sex!);
    writer.writeByte(this.breed!);
    writer.writeUTF(this.playerName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
    this.sex = reader.readBoolean();
    this.breed = reader.readByte();
    this.playerName = reader.readUTF();
  }
}

export class TaxCollectorInformations extends DofusType {
  public static id: number = 3820;
  public id: number = 3820;

  public additionalInfos: AdditionalTaxCollectorInformations | undefined;
  public lastNameId: number | undefined = 0;
  public uniqueId: number | undefined = 0;
  public complements: TaxCollectorComplementaryInformations[] | undefined;
  public firtNameId: number | undefined = 0;
  public worldX: number | undefined = 0;
  public worldY: number | undefined = 0;
  public state: number | undefined = 0;
  public subAreaId: number | undefined = 0;
  public look: EntityLook | undefined;

  public constructor(
    additionalInfos?: AdditionalTaxCollectorInformations | undefined,
    lastNameId?: number | undefined,
    uniqueId?: number | undefined,
    complements?: TaxCollectorComplementaryInformations[] | undefined,
    firtNameId?: number | undefined,
    worldX?: number | undefined,
    worldY?: number | undefined,
    state?: number | undefined,
    subAreaId?: number | undefined,
    look?: EntityLook | undefined,
  ) {
    super();
    this.additionalInfos = additionalInfos;
    this.lastNameId = lastNameId;
    this.uniqueId = uniqueId;
    this.complements = complements;
    this.firtNameId = firtNameId;
    this.worldX = worldX;
    this.worldY = worldY;
    this.state = state;
    this.subAreaId = subAreaId;
    this.look = look;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.additionalInfos!.serialize(writer);
    writer.writeVarShort(this.lastNameId!);
    writer.writeDouble(this.uniqueId!);
    writer.writeShort(this.complements!.length);
    this.complements!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarShort(this.firtNameId!);
    writer.writeShort(this.worldX!);
    writer.writeShort(this.worldY!);
    writer.writeByte(this.state!);
    writer.writeVarShort(this.subAreaId!);
    this.look!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.additionalInfos = new AdditionalTaxCollectorInformations();
    this.additionalInfos!.deserialize(reader);
    this.lastNameId = reader.readVarShort();
    this.uniqueId = reader.readDouble();
    this.complements = [];
    const countComplements = reader.readShort();
    for (let i: number = 0; i < countComplements; i++) {
      const complementsTypeId: number = reader.readShort();
      const type: TaxCollectorComplementaryInformations = new types[
        complementsTypeId
      ]() as TaxCollectorComplementaryInformations;
      type.deserialize(reader);
      this.complements.push(type);
    }
    this.firtNameId = reader.readVarShort();
    this.worldX = reader.readShort();
    this.worldY = reader.readShort();
    this.state = reader.readByte();
    this.subAreaId = reader.readVarShort();
    this.look = new EntityLook();
    this.look!.deserialize(reader);
  }
}

export class PlayerSearchCharacterNameInformation extends AbstractPlayerSearchInformation {
  public static id: number = 6431;
  public id: number = 6431;

  public name: string | undefined;

  public constructor(name?: string | undefined) {
    super();
    this.name = name;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.name!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.name = reader.readUTF();
  }
}

export class GuildFactSheetInformations extends GuildInformations {
  public static id: number = 7387;
  public id: number = 7387;

  public leaderId: number | undefined = 0;
  public lastActivityDay: number | undefined = 0;
  public recruitment: GuildRecruitmentInformation | undefined;
  public nbMembers: number | undefined = 0;
  public nbPendingApply: number | undefined = 0;

  public constructor(
    guildLevel?: number | undefined,
    guildId?: number | undefined,
    guildName?: string | undefined,
    guildEmblem?: GuildEmblem | undefined,
    leaderId?: number | undefined,
    lastActivityDay?: number | undefined,
    recruitment?: GuildRecruitmentInformation | undefined,
    nbMembers?: number | undefined,
    nbPendingApply?: number | undefined,
  ) {
    super(guildLevel, guildId, guildName, guildEmblem);
    this.leaderId = leaderId;
    this.lastActivityDay = lastActivityDay;
    this.recruitment = recruitment;
    this.nbMembers = nbMembers;
    this.nbPendingApply = nbPendingApply;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.leaderId!);
    writer.writeShort(this.lastActivityDay!);
    this.recruitment!.serialize(writer);
    writer.writeVarShort(this.nbMembers!);
    writer.writeInt(this.nbPendingApply!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.leaderId = reader.readVarLong();
    this.lastActivityDay = reader.readShort();
    this.recruitment = new GuildRecruitmentInformation();
    this.recruitment!.deserialize(reader);
    this.nbMembers = reader.readVarShort();
    this.nbPendingApply = reader.readInt();
  }
}

export class BasicAllianceInformations extends AbstractSocialGroupInfos {
  public static id: number = 183;
  public id: number = 183;

  public allianceTag: string | undefined;
  public allianceId: number | undefined = 0;

  public constructor(
    allianceTag?: string | undefined,
    allianceId?: number | undefined,
  ) {
    super();
    this.allianceTag = allianceTag;
    this.allianceId = allianceId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.allianceTag!);
    writer.writeVarInt(this.allianceId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceTag = reader.readUTF();
    this.allianceId = reader.readVarInt();
  }
}

export class ObjectItemQuantityPriceDateEffects extends ObjectItemGenericQuantity {
  public static id: number = 7217;
  public id: number = 7217;

  public date: number | undefined = 0;
  public price: number | undefined = 0;
  public effects: ObjectEffects | undefined;

  public constructor(
    quantity?: number | undefined,
    objectGID?: number | undefined,
    date?: number | undefined,
    price?: number | undefined,
    effects?: ObjectEffects | undefined,
  ) {
    super(quantity, objectGID);
    this.date = date;
    this.price = price;
    this.effects = effects;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.date!);
    writer.writeVarLong(this.price!);
    this.effects!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.date = reader.readInt();
    this.price = reader.readVarLong();
    this.effects = new ObjectEffects();
    this.effects!.deserialize(reader);
  }
}

export class DungeonPartyFinderPlayer extends DofusType {
  public static id: number = 5806;
  public id: number = 5806;

  public level: number | undefined = 0;
  public playerId: number | undefined = 0;
  public sex: boolean | undefined = false;
  public breed: number | undefined = 0;
  public playerName: string | undefined;

  public constructor(
    level?: number | undefined,
    playerId?: number | undefined,
    sex?: boolean | undefined,
    breed?: number | undefined,
    playerName?: string | undefined,
  ) {
    super();
    this.level = level;
    this.playerId = playerId;
    this.sex = sex;
    this.breed = breed;
    this.playerName = playerName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.level!);
    writer.writeVarLong(this.playerId!);
    writer.writeBoolean(this.sex!);
    writer.writeByte(this.breed!);
    writer.writeUTF(this.playerName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.level = reader.readVarShort();
    this.playerId = reader.readVarLong();
    this.sex = reader.readBoolean();
    this.breed = reader.readByte();
    this.playerName = reader.readUTF();
  }
}

export class PartyMemberInformations extends CharacterBaseInformations {
  public static id: number = 8492;
  public id: number = 8492;

  public prospecting: number | undefined = 0;
  public lifePoints: number | undefined = 0;
  public subAreaId: number | undefined = 0;
  public maxLifePoints: number | undefined = 0;
  public mapId: number | undefined = 0;
  public entities: PartyEntityBaseInformation[] | undefined;
  public alignmentSide: number | undefined = 0;
  public worldX: number | undefined = 0;
  public regenRate: number | undefined = 0;
  public worldY: number | undefined = 0;
  public initiative: number | undefined = 0;
  public status: PlayerStatus | undefined;

  public constructor(
    id_?: number | undefined,
    name?: string | undefined,
    level?: number | undefined,
    entityLook?: EntityLook | undefined,
    breed?: number | undefined,
    sex?: boolean | undefined,
    prospecting?: number | undefined,
    lifePoints?: number | undefined,
    subAreaId?: number | undefined,
    maxLifePoints?: number | undefined,
    mapId?: number | undefined,
    entities?: PartyEntityBaseInformation[] | undefined,
    alignmentSide?: number | undefined,
    worldX?: number | undefined,
    regenRate?: number | undefined,
    worldY?: number | undefined,
    initiative?: number | undefined,
    status?: PlayerStatus | undefined,
  ) {
    super(id_, name, level, entityLook, breed, sex);
    this.prospecting = prospecting;
    this.lifePoints = lifePoints;
    this.subAreaId = subAreaId;
    this.maxLifePoints = maxLifePoints;
    this.mapId = mapId;
    this.entities = entities;
    this.alignmentSide = alignmentSide;
    this.worldX = worldX;
    this.regenRate = regenRate;
    this.worldY = worldY;
    this.initiative = initiative;
    this.status = status;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.prospecting!);
    writer.writeVarInt(this.lifePoints!);
    writer.writeVarShort(this.subAreaId!);
    writer.writeVarInt(this.maxLifePoints!);
    writer.writeDouble(this.mapId!);
    writer.writeShort(this.entities!.length);
    this.entities!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeByte(this.alignmentSide!);
    writer.writeShort(this.worldX!);
    writer.writeByte(this.regenRate!);
    writer.writeShort(this.worldY!);
    writer.writeVarShort(this.initiative!);
    writer.writeShort(this.status!.id);
    this.status!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.prospecting = reader.readVarShort();
    this.lifePoints = reader.readVarInt();
    this.subAreaId = reader.readVarShort();
    this.maxLifePoints = reader.readVarInt();
    this.mapId = reader.readDouble();
    this.entities = [];
    const countEntities = reader.readShort();
    for (let i: number = 0; i < countEntities; i++) {
      const entitiesTypeId: number = reader.readShort();
      const type: PartyEntityBaseInformation = new types[
        entitiesTypeId
      ]() as PartyEntityBaseInformation;
      type.deserialize(reader);
      this.entities.push(type);
    }
    this.alignmentSide = reader.readByte();
    this.worldX = reader.readShort();
    this.regenRate = reader.readByte();
    this.worldY = reader.readShort();
    this.initiative = reader.readVarShort();
    const statusTypeId: number = reader.readShort();
    this.status = new types[statusTypeId]() as PlayerStatus;
    this.status!.deserialize(reader);
  }
}

export class PartyMemberArenaInformations extends PartyMemberInformations {
  public static id: number = 2694;
  public id: number = 2694;

  public rank: number | undefined = 0;

  public constructor(
    id_?: number | undefined,
    name?: string | undefined,
    level?: number | undefined,
    entityLook?: EntityLook | undefined,
    breed?: number | undefined,
    sex?: boolean | undefined,
    prospecting?: number | undefined,
    lifePoints?: number | undefined,
    subAreaId?: number | undefined,
    maxLifePoints?: number | undefined,
    mapId?: number | undefined,
    entities?: PartyEntityBaseInformation[] | undefined,
    alignmentSide?: number | undefined,
    worldX?: number | undefined,
    regenRate?: number | undefined,
    worldY?: number | undefined,
    initiative?: number | undefined,
    status?: PlayerStatus | undefined,
    rank?: number | undefined,
  ) {
    super(
      id_,
      name,
      level,
      entityLook,
      breed,
      sex,
      prospecting,
      lifePoints,
      subAreaId,
      maxLifePoints,
      mapId,
      entities,
      alignmentSide,
      worldX,
      regenRate,
      worldY,
      initiative,
      status,
    );
    this.rank = rank;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.rank!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.rank = reader.readVarShort();
  }
}

export class PartyEntityBaseInformation extends DofusType {
  public static id: number = 8087;
  public id: number = 8087;

  public entityLook: EntityLook | undefined;
  public indexId: number | undefined = 0;
  public entityModelId: number | undefined = 0;

  public constructor(
    entityLook?: EntityLook | undefined,
    indexId?: number | undefined,
    entityModelId?: number | undefined,
  ) {
    super();
    this.entityLook = entityLook;
    this.indexId = indexId;
    this.entityModelId = entityModelId;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.entityLook!.serialize(writer);
    writer.writeByte(this.indexId!);
    writer.writeByte(this.entityModelId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.entityLook = new EntityLook();
    this.entityLook!.deserialize(reader);
    this.indexId = reader.readByte();
    this.entityModelId = reader.readByte();
  }
}

export class PartyInvitationMemberInformations extends CharacterBaseInformations {
  public static id: number = 436;
  public id: number = 436;

  public mapId: number | undefined = 0;
  public worldX: number | undefined = 0;
  public subAreaId: number | undefined = 0;
  public worldY: number | undefined = 0;
  public entities: PartyEntityBaseInformation[] | undefined;

  public constructor(
    id_?: number | undefined,
    name?: string | undefined,
    level?: number | undefined,
    entityLook?: EntityLook | undefined,
    breed?: number | undefined,
    sex?: boolean | undefined,
    mapId?: number | undefined,
    worldX?: number | undefined,
    subAreaId?: number | undefined,
    worldY?: number | undefined,
    entities?: PartyEntityBaseInformation[] | undefined,
  ) {
    super(id_, name, level, entityLook, breed, sex);
    this.mapId = mapId;
    this.worldX = worldX;
    this.subAreaId = subAreaId;
    this.worldY = worldY;
    this.entities = entities;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.mapId!);
    writer.writeShort(this.worldX!);
    writer.writeVarShort(this.subAreaId!);
    writer.writeShort(this.worldY!);
    writer.writeShort(this.entities!.length);
    this.entities!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapId = reader.readDouble();
    this.worldX = reader.readShort();
    this.subAreaId = reader.readVarShort();
    this.worldY = reader.readShort();
    this.entities = [];
    const countEntities = reader.readShort();
    for (let i: number = 0; i < countEntities; i++) {
      const type: PartyEntityBaseInformation = new PartyEntityBaseInformation();
      type.deserialize(reader);
      this.entities.push(type);
    }
  }
}

export class PartyGuestInformations extends DofusType {
  public static id: number = 1057;
  public id: number = 1057;

  public entities: PartyEntityBaseInformation[] | undefined;
  public status: PlayerStatus | undefined;
  public sex: boolean | undefined = false;
  public hostId: number | undefined = 0;
  public guestId: number | undefined = 0;
  public name: string | undefined;
  public guestLook: EntityLook | undefined;
  public breed: number | undefined = 0;

  public constructor(
    entities?: PartyEntityBaseInformation[] | undefined,
    status?: PlayerStatus | undefined,
    sex?: boolean | undefined,
    hostId?: number | undefined,
    guestId?: number | undefined,
    name?: string | undefined,
    guestLook?: EntityLook | undefined,
    breed?: number | undefined,
  ) {
    super();
    this.entities = entities;
    this.status = status;
    this.sex = sex;
    this.hostId = hostId;
    this.guestId = guestId;
    this.name = name;
    this.guestLook = guestLook;
    this.breed = breed;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.entities!.length);
    this.entities!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.status!.id);
    this.status!.serialize(writer);
    writer.writeBoolean(this.sex!);
    writer.writeVarLong(this.hostId!);
    writer.writeVarLong(this.guestId!);
    writer.writeUTF(this.name!);
    this.guestLook!.serialize(writer);
    writer.writeByte(this.breed!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.entities = [];
    const countEntities = reader.readShort();
    for (let i: number = 0; i < countEntities; i++) {
      const type: PartyEntityBaseInformation = new PartyEntityBaseInformation();
      type.deserialize(reader);
      this.entities.push(type);
    }
    const statusTypeId: number = reader.readShort();
    this.status = new types[statusTypeId]() as PlayerStatus;
    this.status!.deserialize(reader);
    this.sex = reader.readBoolean();
    this.hostId = reader.readVarLong();
    this.guestId = reader.readVarLong();
    this.name = reader.readUTF();
    this.guestLook = new EntityLook();
    this.guestLook!.deserialize(reader);
    this.breed = reader.readByte();
  }
}

export class PartyEntityMemberInformation extends PartyEntityBaseInformation {
  public static id: number = 2136;
  public id: number = 2136;

  public prospecting: number | undefined = 0;
  public regenRate: number | undefined = 0;
  public maxLifePoints: number | undefined = 0;
  public initiative: number | undefined = 0;
  public lifePoints: number | undefined = 0;

  public constructor(
    entityLook?: EntityLook | undefined,
    indexId?: number | undefined,
    entityModelId?: number | undefined,
    prospecting?: number | undefined,
    regenRate?: number | undefined,
    maxLifePoints?: number | undefined,
    initiative?: number | undefined,
    lifePoints?: number | undefined,
  ) {
    super(entityLook, indexId, entityModelId);
    this.prospecting = prospecting;
    this.regenRate = regenRate;
    this.maxLifePoints = maxLifePoints;
    this.initiative = initiative;
    this.lifePoints = lifePoints;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.prospecting!);
    writer.writeByte(this.regenRate!);
    writer.writeVarInt(this.maxLifePoints!);
    writer.writeVarShort(this.initiative!);
    writer.writeVarInt(this.lifePoints!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.prospecting = reader.readVarShort();
    this.regenRate = reader.readByte();
    this.maxLifePoints = reader.readVarInt();
    this.initiative = reader.readVarShort();
    this.lifePoints = reader.readVarInt();
  }
}

export class GuildInAllianceInformations extends GuildInformations {
  public static id: number = 8343;
  public id: number = 8343;

  public joinDate: number | undefined = 0;
  public nbMembers: number | undefined = 0;

  public constructor(
    guildLevel?: number | undefined,
    guildId?: number | undefined,
    guildName?: string | undefined,
    guildEmblem?: GuildEmblem | undefined,
    joinDate?: number | undefined,
    nbMembers?: number | undefined,
  ) {
    super(guildLevel, guildId, guildName, guildEmblem);
    this.joinDate = joinDate;
    this.nbMembers = nbMembers;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.joinDate!);
    writer.writeByte(this.nbMembers!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.joinDate = reader.readInt();
    this.nbMembers = reader.readByte();
  }
}

export class PrismSubareaEmptyInfo extends DofusType {
  public static id: number = 6884;
  public id: number = 6884;

  public allianceId: number | undefined = 0;
  public subAreaId: number | undefined = 0;

  public constructor(
    allianceId?: number | undefined,
    subAreaId?: number | undefined,
  ) {
    super();
    this.allianceId = allianceId;
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.allianceId!);
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceId = reader.readVarInt();
    this.subAreaId = reader.readVarShort();
  }
}

export class PrismGeolocalizedInformation extends PrismSubareaEmptyInfo {
  public static id: number = 2406;
  public id: number = 2406;

  public prism: PrismInformation | undefined;
  public worldX: number | undefined = 0;
  public mapId: number | undefined = 0;
  public worldY: number | undefined = 0;

  public constructor(
    allianceId?: number | undefined,
    subAreaId?: number | undefined,
    prism?: PrismInformation | undefined,
    worldX?: number | undefined,
    mapId?: number | undefined,
    worldY?: number | undefined,
  ) {
    super(allianceId, subAreaId);
    this.prism = prism;
    this.worldX = worldX;
    this.mapId = mapId;
    this.worldY = worldY;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.prism!.id);
    this.prism!.serialize(writer);
    writer.writeShort(this.worldX!);
    writer.writeDouble(this.mapId!);
    writer.writeShort(this.worldY!);
  }

  public deserialize(reader: BinaryDataReader): void {
    const prismTypeId: number = reader.readShort();
    this.prism = new types[prismTypeId]() as PrismInformation;
    this.prism!.deserialize(reader);
    this.worldX = reader.readShort();
    this.mapId = reader.readDouble();
    this.worldY = reader.readShort();
  }
}

export class GuildInsiderFactSheetInformations extends GuildFactSheetInformations {
  public static id: number = 8132;
  public id: number = 8132;

  public nbTaxCollectors: number | undefined = 0;
  public leaderName: string | undefined;
  public nbConnectedMembers: number | undefined = 0;

  public constructor(
    guildLevel?: number | undefined,
    guildId?: number | undefined,
    guildName?: string | undefined,
    guildEmblem?: GuildEmblem | undefined,
    leaderId?: number | undefined,
    lastActivityDay?: number | undefined,
    recruitment?: GuildRecruitmentInformation | undefined,
    nbMembers?: number | undefined,
    nbPendingApply?: number | undefined,
    nbTaxCollectors?: number | undefined,
    leaderName?: string | undefined,
    nbConnectedMembers?: number | undefined,
  ) {
    super(
      guildLevel,
      guildId,
      guildName,
      guildEmblem,
      leaderId,
      lastActivityDay,
      recruitment,
      nbMembers,
      nbPendingApply,
    );
    this.nbTaxCollectors = nbTaxCollectors;
    this.leaderName = leaderName;
    this.nbConnectedMembers = nbConnectedMembers;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.nbTaxCollectors!);
    writer.writeUTF(this.leaderName!);
    writer.writeVarShort(this.nbConnectedMembers!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.nbTaxCollectors = reader.readByte();
    this.leaderName = reader.readUTF();
    this.nbConnectedMembers = reader.readVarShort();
  }
}

export class FightTriggeredEffect extends AbstractFightDispellableEffect {
  public static id: number = 1349;
  public id: number = 1349;

  public delay: number | undefined = 0;
  public param3: number | undefined = 0;
  public param1: number | undefined = 0;
  public param2: number | undefined = 0;

  public constructor(
    parentBoostUid?: number | undefined,
    effectId?: number | undefined,
    targetId?: number | undefined,
    uid?: number | undefined,
    turnDuration?: number | undefined,
    spellId?: number | undefined,
    dispelable?: number | undefined,
    delay?: number | undefined,
    param3?: number | undefined,
    param1?: number | undefined,
    param2?: number | undefined,
  ) {
    super(
      parentBoostUid,
      effectId,
      targetId,
      uid,
      turnDuration,
      spellId,
      dispelable,
    );
    this.delay = delay;
    this.param3 = param3;
    this.param1 = param1;
    this.param2 = param2;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.delay!);
    writer.writeInt(this.param3!);
    writer.writeInt(this.param1!);
    writer.writeInt(this.param2!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.delay = reader.readShort();
    this.param3 = reader.readInt();
    this.param1 = reader.readInt();
    this.param2 = reader.readInt();
  }
}

export class FightTemporarySpellImmunityEffect extends AbstractFightDispellableEffect {
  public static id: number = 4141;
  public id: number = 4141;

  public immuneSpellId: number | undefined = 0;

  public constructor(
    parentBoostUid?: number | undefined,
    effectId?: number | undefined,
    targetId?: number | undefined,
    uid?: number | undefined,
    turnDuration?: number | undefined,
    spellId?: number | undefined,
    dispelable?: number | undefined,
    immuneSpellId?: number | undefined,
  ) {
    super(
      parentBoostUid,
      effectId,
      targetId,
      uid,
      turnDuration,
      spellId,
      dispelable,
    );
    this.immuneSpellId = immuneSpellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.immuneSpellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.immuneSpellId = reader.readInt();
  }
}

export class FightTemporaryBoostWeaponDamagesEffect extends FightTemporaryBoostEffect {
  public static id: number = 15;
  public id: number = 15;

  public weaponTypeId: number | undefined = 0;

  public constructor(
    parentBoostUid?: number | undefined,
    effectId?: number | undefined,
    targetId?: number | undefined,
    uid?: number | undefined,
    turnDuration?: number | undefined,
    spellId?: number | undefined,
    dispelable?: number | undefined,
    delta?: number | undefined,
    weaponTypeId?: number | undefined,
  ) {
    super(
      parentBoostUid,
      effectId,
      targetId,
      uid,
      turnDuration,
      spellId,
      dispelable,
      delta,
    );
    this.weaponTypeId = weaponTypeId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.weaponTypeId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.weaponTypeId = reader.readShort();
  }
}

export class FightTemporaryBoostStateEffect extends FightTemporaryBoostEffect {
  public static id: number = 8281;
  public id: number = 8281;

  public stateId: number | undefined = 0;

  public constructor(
    parentBoostUid?: number | undefined,
    effectId?: number | undefined,
    targetId?: number | undefined,
    uid?: number | undefined,
    turnDuration?: number | undefined,
    spellId?: number | undefined,
    dispelable?: number | undefined,
    delta?: number | undefined,
    stateId?: number | undefined,
  ) {
    super(
      parentBoostUid,
      effectId,
      targetId,
      uid,
      turnDuration,
      spellId,
      dispelable,
      delta,
    );
    this.stateId = stateId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.stateId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.stateId = reader.readShort();
  }
}

export class FightTemporarySpellBoostEffect extends FightTemporaryBoostEffect {
  public static id: number = 540;
  public id: number = 540;

  public boostedSpellId: number | undefined = 0;

  public constructor(
    parentBoostUid?: number | undefined,
    effectId?: number | undefined,
    targetId?: number | undefined,
    uid?: number | undefined,
    turnDuration?: number | undefined,
    spellId?: number | undefined,
    dispelable?: number | undefined,
    delta?: number | undefined,
    boostedSpellId?: number | undefined,
  ) {
    super(
      parentBoostUid,
      effectId,
      targetId,
      uid,
      turnDuration,
      spellId,
      dispelable,
      delta,
    );
    this.boostedSpellId = boostedSpellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.boostedSpellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.boostedSpellId = reader.readVarShort();
  }
}

export class FinishMoveInformations extends DofusType {
  public static id: number = 2972;
  public id: number = 2972;

  public finishMoveState: boolean | undefined = false;
  public finishMoveId: number | undefined = 0;

  public constructor(
    finishMoveState?: boolean | undefined,
    finishMoveId?: number | undefined,
  ) {
    super();
    this.finishMoveState = finishMoveState;
    this.finishMoveId = finishMoveId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.finishMoveState!);
    writer.writeInt(this.finishMoveId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.finishMoveState = reader.readBoolean();
    this.finishMoveId = reader.readInt();
  }
}

export class FightStartingPositions extends DofusType {
  public static id: number = 9707;
  public id: number = 9707;

  public positionsForChallengers: number[] | undefined;
  public positionsForDefenders: number[] | undefined;

  public constructor(
    positionsForChallengers?: number[] | undefined,
    positionsForDefenders?: number[] | undefined,
  ) {
    super();
    this.positionsForChallengers = positionsForChallengers;
    this.positionsForDefenders = positionsForDefenders;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.positionsForChallengers!.length);
    this.positionsForChallengers!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
    writer.writeShort(this.positionsForDefenders!.length);
    this.positionsForDefenders!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.positionsForChallengers = [];
    const countPositionsForChallengers = reader.readShort();
    for (let i: number = 0; i < countPositionsForChallengers; i++) {
      this.positionsForChallengers.push(reader.readVarShort());
    }
    this.positionsForDefenders = [];
    const countPositionsForDefenders = reader.readShort();
    for (let i: number = 0; i < countPositionsForDefenders; i++) {
      this.positionsForDefenders.push(reader.readVarShort());
    }
  }
}

export class BasicNamedAllianceInformations extends BasicAllianceInformations {
  public static id: number = 949;
  public id: number = 949;

  public allianceName: string | undefined;

  public constructor(
    allianceTag?: string | undefined,
    allianceId?: number | undefined,
    allianceName?: string | undefined,
  ) {
    super(allianceTag, allianceId);
    this.allianceName = allianceName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.allianceName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceName = reader.readUTF();
  }
}

export class AllianceInformations extends BasicNamedAllianceInformations {
  public static id: number = 5338;
  public id: number = 5338;

  public allianceEmblem: GuildEmblem | undefined;

  public constructor(
    allianceTag?: string | undefined,
    allianceId?: number | undefined,
    allianceName?: string | undefined,
    allianceEmblem?: GuildEmblem | undefined,
  ) {
    super(allianceTag, allianceId, allianceName);
    this.allianceEmblem = allianceEmblem;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.allianceEmblem!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceEmblem = new GuildEmblem();
    this.allianceEmblem!.deserialize(reader);
  }
}

export class FightTeamMemberCharacterInformations extends FightTeamMemberInformations {
  public static id: number = 6593;
  public id: number = 6593;

  public level: number | undefined = 0;
  public name: string | undefined;

  public constructor(
    id_?: number | undefined,
    level?: number | undefined,
    name?: string | undefined,
  ) {
    super(id_);
    this.level = level;
    this.name = name;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.level!);
    writer.writeUTF(this.name!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.level = reader.readVarShort();
    this.name = reader.readUTF();
  }
}

export class FightTeamMemberWithAllianceCharacterInformations extends FightTeamMemberCharacterInformations {
  public static id: number = 2689;
  public id: number = 2689;

  public allianceInfos: BasicAllianceInformations | undefined;

  public constructor(
    id_?: number | undefined,
    level?: number | undefined,
    name?: string | undefined,
    allianceInfos?: BasicAllianceInformations | undefined,
  ) {
    super(id_, level, name);
    this.allianceInfos = allianceInfos;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.allianceInfos!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceInfos = new BasicAllianceInformations();
    this.allianceInfos!.deserialize(reader);
  }
}

export class ExtendedBreachBranch extends BreachBranch {
  public static id: number = 9376;
  public id: number = 9376;

  public prize: number | undefined = 0;
  public rewards: BreachReward[] | undefined;
  public modifier: number | undefined = 0;

  public constructor(
    monsters?: MonsterInGroupLightInformations[] | undefined,
    relativeScore?: number | undefined,
    room?: number | undefined,
    bosses?: MonsterInGroupLightInformations[] | undefined,
    map?: number | undefined,
    element?: number | undefined,
    score?: number | undefined,
    prize?: number | undefined,
    rewards?: BreachReward[] | undefined,
    modifier?: number | undefined,
  ) {
    super(monsters, relativeScore, room, bosses, map, element, score);
    this.prize = prize;
    this.rewards = rewards;
    this.modifier = modifier;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.prize!);
    writer.writeShort(this.rewards!.length);
    this.rewards!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarInt(this.modifier!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.prize = reader.readVarInt();
    this.rewards = [];
    const countRewards = reader.readShort();
    for (let i: number = 0; i < countRewards; i++) {
      const type: BreachReward = new BreachReward();
      type.deserialize(reader);
      this.rewards.push(type);
    }
    this.modifier = reader.readVarInt();
  }
}

export class BreachReward extends DofusType {
  public static id: number = 2317;
  public id: number = 2317;

  public id_: number | undefined = 0;
  public buyCriterion: string | undefined;
  public remainingQty: number | undefined = 0;
  public buyLocks: number[] | undefined;
  public price: number | undefined = 0;

  public constructor(
    id_?: number | undefined,
    buyCriterion?: string | undefined,
    remainingQty?: number | undefined,
    buyLocks?: number[] | undefined,
    price?: number | undefined,
  ) {
    super();
    this.id_ = id_;
    this.buyCriterion = buyCriterion;
    this.remainingQty = remainingQty;
    this.buyLocks = buyLocks;
    this.price = price;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.id_!);
    writer.writeUTF(this.buyCriterion!);
    writer.writeVarInt(this.remainingQty!);
    writer.writeShort(this.buyLocks!.length);
    this.buyLocks!.forEach((current: number) => writer.writeByte(current));
    writer.writeVarInt(this.price!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readVarInt();
    this.buyCriterion = reader.readUTF();
    this.remainingQty = reader.readVarInt();
    this.buyLocks = [];
    const countBuyLocks = reader.readShort();
    for (let i: number = 0; i < countBuyLocks; i++) {
      this.buyLocks.push(reader.readByte());
    }
    this.price = reader.readVarInt();
  }
}

export class HouseGuildedInformations extends HouseInstanceInformations {
  public static id: number = 856;
  public id: number = 856;

  public guildInfo: GuildInformations | undefined;

  public constructor(
    price?: number | undefined,
    instanceId?: number | undefined,
    ownerTag?: AccountTagInformation | undefined,
    secondHand?: boolean | undefined,
    isLocked?: boolean | undefined,
    hasOwner?: boolean | undefined,
    isSaleLocked?: boolean | undefined,
    guildInfo?: GuildInformations | undefined,
  ) {
    super(
      price,
      instanceId,
      ownerTag,
      secondHand,
      isLocked,
      hasOwner,
      isSaleLocked,
    );
    this.guildInfo = guildInfo;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.guildInfo!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildInfo = new GuildInformations();
    this.guildInfo!.deserialize(reader);
  }
}

export class FightOptionsInformations extends DofusType {
  public static id: number = 5639;
  public id: number = 5639;

  public isSecret: boolean | undefined = false;
  public isRestrictedToPartyOnly: boolean | undefined = false;
  public isClosed: boolean | undefined = false;
  public isAskingForHelp: boolean | undefined = false;

  public constructor(
    isSecret?: boolean | undefined,
    isRestrictedToPartyOnly?: boolean | undefined,
    isClosed?: boolean | undefined,
    isAskingForHelp?: boolean | undefined,
  ) {
    super();
    this.isSecret = isSecret;
    this.isRestrictedToPartyOnly = isRestrictedToPartyOnly;
    this.isClosed = isClosed;
    this.isAskingForHelp = isAskingForHelp;
  }

  public serialize(writer: BinaryDataWriter): void {
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.isSecret!);
    box0 = setFlag(box0, 1, this.isRestrictedToPartyOnly!);
    box0 = setFlag(box0, 2, this.isClosed!);
    box0 = setFlag(box0, 3, this.isAskingForHelp!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    const box0 = reader.readByte();
    this.isSecret = getFlag(box0, 0);
    this.isRestrictedToPartyOnly = getFlag(box0, 1);
    this.isClosed = getFlag(box0, 2);
    this.isAskingForHelp = getFlag(box0, 3);
  }
}

export class FightTeamMemberTaxCollectorInformations extends FightTeamMemberInformations {
  public static id: number = 9850;
  public id: number = 9850;

  public guildId: number | undefined = 0;
  public level: number | undefined = 0;
  public uid: number | undefined = 0;
  public firstNameId: number | undefined = 0;
  public lastNameId: number | undefined = 0;

  public constructor(
    id_?: number | undefined,
    guildId?: number | undefined,
    level?: number | undefined,
    uid?: number | undefined,
    firstNameId?: number | undefined,
    lastNameId?: number | undefined,
  ) {
    super(id_);
    this.guildId = guildId;
    this.level = level;
    this.uid = uid;
    this.firstNameId = firstNameId;
    this.lastNameId = lastNameId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.guildId!);
    writer.writeByte(this.level!);
    writer.writeDouble(this.uid!);
    writer.writeVarShort(this.firstNameId!);
    writer.writeVarShort(this.lastNameId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildId = reader.readVarInt();
    this.level = reader.readByte();
    this.uid = reader.readDouble();
    this.firstNameId = reader.readVarShort();
    this.lastNameId = reader.readVarShort();
  }
}

export class TaxCollectorStaticExtendedInformations extends TaxCollectorStaticInformations {
  public static id: number = 6505;
  public id: number = 6505;

  public allianceIdentity: AllianceInformations | undefined;

  public constructor(
    callerId?: number | undefined,
    guildIdentity?: GuildInformations | undefined,
    firstNameId?: number | undefined,
    lastNameId?: number | undefined,
    allianceIdentity?: AllianceInformations | undefined,
  ) {
    super(callerId, guildIdentity, firstNameId, lastNameId);
    this.allianceIdentity = allianceIdentity;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.allianceIdentity!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceIdentity = new AllianceInformations();
    this.allianceIdentity!.deserialize(reader);
  }
}

export class GameRolePlayTreasureHintInformations extends GameRolePlayActorInformations {
  public static id: number = 8741;
  public id: number = 8741;

  public npcId: number | undefined = 0;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    npcId?: number | undefined,
  ) {
    super(contextualId, disposition, look);
    this.npcId = npcId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.npcId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.npcId = reader.readVarShort();
  }
}

export class FightResultMutantListEntry extends FightResultFighterListEntry {
  public static id: number = 815;
  public id: number = 815;

  public level: number | undefined = 0;

  public constructor(
    rewards?: FightLoot | undefined,
    outcome?: number | undefined,
    wave?: number | undefined,
    alive?: boolean | undefined,
    id_?: number | undefined,
    level?: number | undefined,
  ) {
    super(rewards, outcome, wave, alive, id_);
    this.level = level;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.level!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.level = reader.readVarShort();
  }
}

export class TreasureHuntStep extends DofusType {
  public static id: number = 7141;
  public id: number = 7141;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class TreasureHuntStepFight extends TreasureHuntStep {
  public static id: number = 4747;
  public id: number = 4747;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class MapCoordinates extends DofusType {
  public static id: number = 3568;
  public id: number = 3568;

  public worldY: number | undefined = 0;
  public worldX: number | undefined = 0;

  public constructor(worldY?: number | undefined, worldX?: number | undefined) {
    super();
    this.worldY = worldY;
    this.worldX = worldX;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.worldY!);
    writer.writeShort(this.worldX!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.worldY = reader.readShort();
    this.worldX = reader.readShort();
  }
}

export class FriendSpouseInformations extends DofusType {
  public static id: number = 9956;
  public id: number = 9956;

  public alignmentSide: number | undefined = 0;
  public spouseEntityLook: EntityLook | undefined;
  public sex: number | undefined = 0;
  public spouseId: number | undefined = 0;
  public guildInfo: GuildInformations | undefined;
  public spouseName: string | undefined;
  public spouseLevel: number | undefined = 0;
  public spouseAccountId: number | undefined = 0;
  public breed: number | undefined = 0;

  public constructor(
    alignmentSide?: number | undefined,
    spouseEntityLook?: EntityLook | undefined,
    sex?: number | undefined,
    spouseId?: number | undefined,
    guildInfo?: GuildInformations | undefined,
    spouseName?: string | undefined,
    spouseLevel?: number | undefined,
    spouseAccountId?: number | undefined,
    breed?: number | undefined,
  ) {
    super();
    this.alignmentSide = alignmentSide;
    this.spouseEntityLook = spouseEntityLook;
    this.sex = sex;
    this.spouseId = spouseId;
    this.guildInfo = guildInfo;
    this.spouseName = spouseName;
    this.spouseLevel = spouseLevel;
    this.spouseAccountId = spouseAccountId;
    this.breed = breed;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.alignmentSide!);
    this.spouseEntityLook!.serialize(writer);
    writer.writeByte(this.sex!);
    writer.writeVarLong(this.spouseId!);
    this.guildInfo!.serialize(writer);
    writer.writeUTF(this.spouseName!);
    writer.writeVarShort(this.spouseLevel!);
    writer.writeInt(this.spouseAccountId!);
    writer.writeByte(this.breed!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.alignmentSide = reader.readByte();
    this.spouseEntityLook = new EntityLook();
    this.spouseEntityLook!.deserialize(reader);
    this.sex = reader.readByte();
    this.spouseId = reader.readVarLong();
    this.guildInfo = new GuildInformations();
    this.guildInfo!.deserialize(reader);
    this.spouseName = reader.readUTF();
    this.spouseLevel = reader.readVarShort();
    this.spouseAccountId = reader.readInt();
    this.breed = reader.readByte();
  }
}

export class FriendSpouseOnlineInformations extends FriendSpouseInformations {
  public static id: number = 1910;
  public id: number = 1910;

  public mapId: number | undefined = 0;
  public subAreaId: number | undefined = 0;
  public inFight: boolean | undefined = false;
  public followSpouse: boolean | undefined = false;

  public constructor(
    alignmentSide?: number | undefined,
    spouseEntityLook?: EntityLook | undefined,
    sex?: number | undefined,
    spouseId?: number | undefined,
    guildInfo?: GuildInformations | undefined,
    spouseName?: string | undefined,
    spouseLevel?: number | undefined,
    spouseAccountId?: number | undefined,
    breed?: number | undefined,
    mapId?: number | undefined,
    subAreaId?: number | undefined,
    inFight?: boolean | undefined,
    followSpouse?: boolean | undefined,
  ) {
    super(
      alignmentSide,
      spouseEntityLook,
      sex,
      spouseId,
      guildInfo,
      spouseName,
      spouseLevel,
      spouseAccountId,
      breed,
    );
    this.mapId = mapId;
    this.subAreaId = subAreaId;
    this.inFight = inFight;
    this.followSpouse = followSpouse;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.mapId!);
    writer.writeVarShort(this.subAreaId!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.inFight!);
    box0 = setFlag(box0, 1, this.followSpouse!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapId = reader.readDouble();
    this.subAreaId = reader.readVarShort();
    const box0 = reader.readByte();
    this.inFight = getFlag(box0, 0);
    this.followSpouse = getFlag(box0, 1);
  }
}

export class CharacterMinimalPlusLookAndGradeInformations extends CharacterMinimalPlusLookInformations {
  public static id: number = 7522;
  public id: number = 7522;

  public grade: number | undefined = 0;

  public constructor(
    id_?: number | undefined,
    name?: string | undefined,
    level?: number | undefined,
    entityLook?: EntityLook | undefined,
    breed?: number | undefined,
    grade?: number | undefined,
  ) {
    super(id_, name, level, entityLook, breed);
    this.grade = grade;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.grade!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.grade = reader.readVarInt();
  }
}

export class StatisticData extends DofusType {
  public static id: number = 9162;
  public id: number = 9162;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class StatisticDataShort extends StatisticData {
  public static id: number = 5872;
  public id: number = 5872;

  public value: number | undefined = 0;

  public constructor(value?: number | undefined) {
    super();
    this.value = value;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.value!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = reader.readShort();
  }
}

export class FightResultAdditionalData extends DofusType {
  public static id: number = 6654;
  public id: number = 6654;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class FightResultExperienceData extends FightResultAdditionalData {
  public static id: number = 9530;
  public id: number = 9530;

  public rerollExperienceMul: number | undefined = 0;
  public experienceLevelFloor: number | undefined = 0;
  public experienceNextLevelFloor: number | undefined = 0;
  public experience: number | undefined = 0;
  public experienceFightDelta: number | undefined = 0;
  public experienceForGuild: number | undefined = 0;
  public experienceForMount: number | undefined = 0;
  public showExperience: boolean | undefined = false;
  public showExperienceLevelFloor: boolean | undefined = false;
  public showExperienceNextLevelFloor: boolean | undefined = false;
  public showExperienceFightDelta: boolean | undefined = false;
  public showExperienceForGuild: boolean | undefined = false;
  public showExperienceForMount: boolean | undefined = false;
  public isIncarnationExperience: boolean | undefined = false;

  public constructor(
    rerollExperienceMul?: number | undefined,
    experienceLevelFloor?: number | undefined,
    experienceNextLevelFloor?: number | undefined,
    experience?: number | undefined,
    experienceFightDelta?: number | undefined,
    experienceForGuild?: number | undefined,
    experienceForMount?: number | undefined,
    showExperience?: boolean | undefined,
    showExperienceLevelFloor?: boolean | undefined,
    showExperienceNextLevelFloor?: boolean | undefined,
    showExperienceFightDelta?: boolean | undefined,
    showExperienceForGuild?: boolean | undefined,
    showExperienceForMount?: boolean | undefined,
    isIncarnationExperience?: boolean | undefined,
  ) {
    super();
    this.rerollExperienceMul = rerollExperienceMul;
    this.experienceLevelFloor = experienceLevelFloor;
    this.experienceNextLevelFloor = experienceNextLevelFloor;
    this.experience = experience;
    this.experienceFightDelta = experienceFightDelta;
    this.experienceForGuild = experienceForGuild;
    this.experienceForMount = experienceForMount;
    this.showExperience = showExperience;
    this.showExperienceLevelFloor = showExperienceLevelFloor;
    this.showExperienceNextLevelFloor = showExperienceNextLevelFloor;
    this.showExperienceFightDelta = showExperienceFightDelta;
    this.showExperienceForGuild = showExperienceForGuild;
    this.showExperienceForMount = showExperienceForMount;
    this.isIncarnationExperience = isIncarnationExperience;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.rerollExperienceMul!);
    writer.writeVarLong(this.experienceLevelFloor!);
    writer.writeVarLong(this.experienceNextLevelFloor!);
    writer.writeVarLong(this.experience!);
    writer.writeVarLong(this.experienceFightDelta!);
    writer.writeVarLong(this.experienceForGuild!);
    writer.writeVarLong(this.experienceForMount!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.showExperience!);
    box0 = setFlag(box0, 1, this.showExperienceLevelFloor!);
    box0 = setFlag(box0, 2, this.showExperienceNextLevelFloor!);
    box0 = setFlag(box0, 3, this.showExperienceFightDelta!);
    box0 = setFlag(box0, 4, this.showExperienceForGuild!);
    box0 = setFlag(box0, 5, this.showExperienceForMount!);
    box0 = setFlag(box0, 6, this.isIncarnationExperience!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.rerollExperienceMul = reader.readByte();
    this.experienceLevelFloor = reader.readVarLong();
    this.experienceNextLevelFloor = reader.readVarLong();
    this.experience = reader.readVarLong();
    this.experienceFightDelta = reader.readVarLong();
    this.experienceForGuild = reader.readVarLong();
    this.experienceForMount = reader.readVarLong();
    const box0 = reader.readByte();
    this.showExperience = getFlag(box0, 0);
    this.showExperienceLevelFloor = getFlag(box0, 1);
    this.showExperienceNextLevelFloor = getFlag(box0, 2);
    this.showExperienceFightDelta = getFlag(box0, 3);
    this.showExperienceForGuild = getFlag(box0, 4);
    this.showExperienceForMount = getFlag(box0, 5);
    this.isIncarnationExperience = getFlag(box0, 6);
  }
}

export class ObjectEffectString extends ObjectEffect {
  public static id: number = 576;
  public id: number = 576;

  public value: string | undefined;

  public constructor(
    actionId?: number | undefined,
    value?: string | undefined,
  ) {
    super(actionId);
    this.value = value;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.value!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = reader.readUTF();
  }
}

export class Preset extends DofusType {
  public static id: number = 6024;
  public id: number = 6024;

  public id_: number | undefined = 0;

  public constructor(id_?: number | undefined) {
    super();
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readShort();
  }
}

export class IdolsPreset extends Preset {
  public static id: number = 6343;
  public id: number = 6343;

  public iconId: number | undefined = 0;
  public idolIds: number[] | undefined;

  public constructor(
    id_?: number | undefined,
    iconId?: number | undefined,
    idolIds?: number[] | undefined,
  ) {
    super(id_);
    this.iconId = iconId;
    this.idolIds = idolIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.iconId!);
    writer.writeShort(this.idolIds!.length);
    this.idolIds!.forEach((current: number) => writer.writeVarShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.iconId = reader.readShort();
    this.idolIds = [];
    const countIdolIds = reader.readShort();
    for (let i: number = 0; i < countIdolIds; i++) {
      this.idolIds.push(reader.readVarShort());
    }
  }
}

export class AlliancedGuildFactSheetInformations extends GuildInformations {
  public static id: number = 1714;
  public id: number = 1714;

  public allianceInfos: BasicNamedAllianceInformations | undefined;

  public constructor(
    guildLevel?: number | undefined,
    guildId?: number | undefined,
    guildName?: string | undefined,
    guildEmblem?: GuildEmblem | undefined,
    allianceInfos?: BasicNamedAllianceInformations | undefined,
  ) {
    super(guildLevel, guildId, guildName, guildEmblem);
    this.allianceInfos = allianceInfos;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.allianceInfos!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceInfos = new BasicNamedAllianceInformations();
    this.allianceInfos!.deserialize(reader);
  }
}

export class ForgettableSpellsPreset extends Preset {
  public static id: number = 8231;
  public id: number = 8231;

  public baseSpellsPreset: SpellsPreset | undefined;
  public forgettableSpells: SpellForPreset[] | undefined;

  public constructor(
    id_?: number | undefined,
    baseSpellsPreset?: SpellsPreset | undefined,
    forgettableSpells?: SpellForPreset[] | undefined,
  ) {
    super(id_);
    this.baseSpellsPreset = baseSpellsPreset;
    this.forgettableSpells = forgettableSpells;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.baseSpellsPreset!.serialize(writer);
    writer.writeShort(this.forgettableSpells!.length);
    this.forgettableSpells!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.baseSpellsPreset = new SpellsPreset();
    this.baseSpellsPreset!.deserialize(reader);
    this.forgettableSpells = [];
    const countForgettableSpells = reader.readShort();
    for (let i: number = 0; i < countForgettableSpells; i++) {
      const type: SpellForPreset = new SpellForPreset();
      type.deserialize(reader);
      this.forgettableSpells.push(type);
    }
  }
}

export class Shortcut extends DofusType {
  public static id: number = 5511;
  public id: number = 5511;

  public slot: number | undefined = 0;

  public constructor(slot?: number | undefined) {
    super();
    this.slot = slot;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.slot!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.slot = reader.readByte();
  }
}

export class ShortcutSpell extends Shortcut {
  public static id: number = 445;
  public id: number = 445;

  public spellId: number | undefined = 0;

  public constructor(slot?: number | undefined, spellId?: number | undefined) {
    super(slot);
    this.spellId = spellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.spellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.spellId = reader.readVarShort();
  }
}

export class StatisticDataByte extends StatisticData {
  public static id: number = 6844;
  public id: number = 6844;

  public value: number | undefined = 0;

  public constructor(value?: number | undefined) {
    super();
    this.value = value;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.value!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = reader.readByte();
  }
}

export class TreasureHuntStepDig extends TreasureHuntStep {
  public static id: number = 199;
  public id: number = 199;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class FullStatsPreset extends Preset {
  public static id: number = 9471;
  public id: number = 9471;

  public stats: CharacterCharacteristicForPreset[] | undefined;

  public constructor(
    id_?: number | undefined,
    stats?: CharacterCharacteristicForPreset[] | undefined,
  ) {
    super(id_);
    this.stats = stats;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.stats!.length);
    this.stats!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.stats = [];
    const countStats = reader.readShort();
    for (let i: number = 0; i < countStats; i++) {
      const type: CharacterCharacteristicForPreset =
        new CharacterCharacteristicForPreset();
      type.deserialize(reader);
      this.stats.push(type);
    }
  }
}

export class InteractiveElementNamedSkill extends InteractiveElementSkill {
  public static id: number = 3340;
  public id: number = 3340;

  public nameId: number | undefined = 0;

  public constructor(
    skillInstanceUid?: number | undefined,
    skillId?: number | undefined,
    nameId?: number | undefined,
  ) {
    super(skillInstanceUid, skillId);
    this.nameId = nameId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.nameId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.nameId = reader.readVarInt();
  }
}

export class FightResultPvpData extends FightResultAdditionalData {
  public static id: number = 9919;
  public id: number = 9919;

  public honorDelta: number | undefined = 0;
  public honor: number | undefined = 0;
  public maxHonorForGrade: number | undefined = 0;
  public grade: number | undefined = 0;
  public minHonorForGrade: number | undefined = 0;

  public constructor(
    honorDelta?: number | undefined,
    honor?: number | undefined,
    maxHonorForGrade?: number | undefined,
    grade?: number | undefined,
    minHonorForGrade?: number | undefined,
  ) {
    super();
    this.honorDelta = honorDelta;
    this.honor = honor;
    this.maxHonorForGrade = maxHonorForGrade;
    this.grade = grade;
    this.minHonorForGrade = minHonorForGrade;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.honorDelta!);
    writer.writeVarShort(this.honor!);
    writer.writeVarShort(this.maxHonorForGrade!);
    writer.writeByte(this.grade!);
    writer.writeVarShort(this.minHonorForGrade!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.honorDelta = reader.readVarShort();
    this.honor = reader.readVarShort();
    this.maxHonorForGrade = reader.readVarShort();
    this.grade = reader.readByte();
    this.minHonorForGrade = reader.readVarShort();
  }
}

export class TreasureHuntStepFollowDirectionToHint extends TreasureHuntStep {
  public static id: number = 4752;
  public id: number = 4752;

  public npcId: number | undefined = 0;
  public direction: number | undefined = 1;

  public constructor(
    npcId?: number | undefined,
    direction?: number | undefined,
  ) {
    super();
    this.npcId = npcId;
    this.direction = direction;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.npcId!);
    writer.writeByte(this.direction!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.npcId = reader.readVarShort();
    this.direction = reader.readByte();
  }
}

export class GuildVersatileInformations extends DofusType {
  public static id: number = 4170;
  public id: number = 4170;

  public nbMembers: number | undefined = 0;
  public guildLevel: number | undefined = 0;
  public guildId: number | undefined = 0;
  public leaderId: number | undefined = 0;

  public constructor(
    nbMembers?: number | undefined,
    guildLevel?: number | undefined,
    guildId?: number | undefined,
    leaderId?: number | undefined,
  ) {
    super();
    this.nbMembers = nbMembers;
    this.guildLevel = guildLevel;
    this.guildId = guildId;
    this.leaderId = leaderId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.nbMembers!);
    writer.writeByte(this.guildLevel!);
    writer.writeVarInt(this.guildId!);
    writer.writeVarLong(this.leaderId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.nbMembers = reader.readByte();
    this.guildLevel = reader.readByte();
    this.guildId = reader.readVarInt();
    this.leaderId = reader.readVarLong();
  }
}

export class GuildInAllianceVersatileInformations extends GuildVersatileInformations {
  public static id: number = 9740;
  public id: number = 9740;

  public allianceId: number | undefined = 0;

  public constructor(
    nbMembers?: number | undefined,
    guildLevel?: number | undefined,
    guildId?: number | undefined,
    leaderId?: number | undefined,
    allianceId?: number | undefined,
  ) {
    super(nbMembers, guildLevel, guildId, leaderId);
    this.allianceId = allianceId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.allianceId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceId = reader.readVarInt();
  }
}

export class ShortcutObject extends Shortcut {
  public static id: number = 8583;
  public id: number = 8583;

  public constructor(slot?: number | undefined) {
    super(slot);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ObjectEffectDice extends ObjectEffect {
  public static id: number = 1048;
  public id: number = 1048;

  public diceConst: number | undefined = 0;
  public diceNum: number | undefined = 0;
  public diceSide: number | undefined = 0;

  public constructor(
    actionId?: number | undefined,
    diceConst?: number | undefined,
    diceNum?: number | undefined,
    diceSide?: number | undefined,
  ) {
    super(actionId);
    this.diceConst = diceConst;
    this.diceNum = diceNum;
    this.diceSide = diceSide;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.diceConst!);
    writer.writeVarInt(this.diceNum!);
    writer.writeVarInt(this.diceSide!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.diceConst = reader.readVarInt();
    this.diceNum = reader.readVarInt();
    this.diceSide = reader.readVarInt();
  }
}

export class ObjectEffectDate extends ObjectEffect {
  public static id: number = 5415;
  public id: number = 5415;

  public hour: number | undefined = 0;
  public year: number | undefined = 0;
  public minute: number | undefined = 0;
  public day: number | undefined = 0;
  public month: number | undefined = 0;

  public constructor(
    actionId?: number | undefined,
    hour?: number | undefined,
    year?: number | undefined,
    minute?: number | undefined,
    day?: number | undefined,
    month?: number | undefined,
  ) {
    super(actionId);
    this.hour = hour;
    this.year = year;
    this.minute = minute;
    this.day = day;
    this.month = month;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.hour!);
    writer.writeVarShort(this.year!);
    writer.writeByte(this.minute!);
    writer.writeByte(this.day!);
    writer.writeByte(this.month!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.hour = reader.readByte();
    this.year = reader.readVarShort();
    this.minute = reader.readByte();
    this.day = reader.readByte();
    this.month = reader.readByte();
  }
}

export class UpdateMountCharacteristic extends DofusType {
  public static id: number = 826;
  public id: number = 826;

  public type: number | undefined = 0;

  public constructor(type?: number | undefined) {
    super();
    this.type = type;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.type!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.type = reader.readByte();
  }
}

export class UpdateMountIntegerCharacteristic extends UpdateMountCharacteristic {
  public static id: number = 305;
  public id: number = 305;

  public value: number | undefined = 0;

  public constructor(type?: number | undefined, value?: number | undefined) {
    super(type);
    this.value = value;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.value!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = reader.readInt();
  }
}

export class ShortcutObjectItem extends ShortcutObject {
  public static id: number = 6510;
  public id: number = 6510;

  public itemGID: number | undefined = 0;
  public itemUID: number | undefined = 0;

  public constructor(
    slot?: number | undefined,
    itemGID?: number | undefined,
    itemUID?: number | undefined,
  ) {
    super(slot);
    this.itemGID = itemGID;
    this.itemUID = itemUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.itemGID!);
    writer.writeInt(this.itemUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.itemGID = reader.readInt();
    this.itemUID = reader.readInt();
  }
}

export class QuestObjectiveInformations extends DofusType {
  public static id: number = 4677;
  public id: number = 4677;

  public dialogParams: string[] | undefined;
  public objectiveId: number | undefined = 0;
  public objectiveStatus: boolean | undefined = false;

  public constructor(
    dialogParams?: string[] | undefined,
    objectiveId?: number | undefined,
    objectiveStatus?: boolean | undefined,
  ) {
    super();
    this.dialogParams = dialogParams;
    this.objectiveId = objectiveId;
    this.objectiveStatus = objectiveStatus;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.dialogParams!.length);
    this.dialogParams!.forEach((current: string) => writer.writeUTF(current));
    writer.writeVarShort(this.objectiveId!);
    writer.writeBoolean(this.objectiveStatus!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dialogParams = [];
    const countDialogParams = reader.readShort();
    for (let i: number = 0; i < countDialogParams; i++) {
      this.dialogParams.push(reader.readUTF());
    }
    this.objectiveId = reader.readVarShort();
    this.objectiveStatus = reader.readBoolean();
  }
}

export class QuestObjectiveInformationsWithCompletion extends QuestObjectiveInformations {
  public static id: number = 5115;
  public id: number = 5115;

  public maxCompletion: number | undefined = 0;
  public curCompletion: number | undefined = 0;

  public constructor(
    dialogParams?: string[] | undefined,
    objectiveId?: number | undefined,
    objectiveStatus?: boolean | undefined,
    maxCompletion?: number | undefined,
    curCompletion?: number | undefined,
  ) {
    super(dialogParams, objectiveId, objectiveStatus);
    this.maxCompletion = maxCompletion;
    this.curCompletion = curCompletion;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.maxCompletion!);
    writer.writeVarShort(this.curCompletion!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.maxCompletion = reader.readVarShort();
    this.curCompletion = reader.readVarShort();
  }
}

export class FightTeamMemberEntityInformation extends FightTeamMemberInformations {
  public static id: number = 5487;
  public id: number = 5487;

  public entityModelId: number | undefined = 0;
  public masterId: number | undefined = 0;
  public level: number | undefined = 0;

  public constructor(
    id_?: number | undefined,
    entityModelId?: number | undefined,
    masterId?: number | undefined,
    level?: number | undefined,
  ) {
    super(id_);
    this.entityModelId = entityModelId;
    this.masterId = masterId;
    this.level = level;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.entityModelId!);
    writer.writeDouble(this.masterId!);
    writer.writeVarShort(this.level!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.entityModelId = reader.readByte();
    this.masterId = reader.readDouble();
    this.level = reader.readVarShort();
  }
}

export class UpdateMountBooleanCharacteristic extends UpdateMountCharacteristic {
  public static id: number = 1756;
  public id: number = 1756;

  public value: boolean | undefined = false;

  public constructor(type?: number | undefined, value?: boolean | undefined) {
    super(type);
    this.value = value;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.value!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = reader.readBoolean();
  }
}

export class CharacterMinimalGuildInformations extends CharacterMinimalPlusLookInformations {
  public static id: number = 4548;
  public id: number = 4548;

  public guild: BasicGuildInformations | undefined;

  public constructor(
    id_?: number | undefined,
    name?: string | undefined,
    level?: number | undefined,
    entityLook?: EntityLook | undefined,
    breed?: number | undefined,
    guild?: BasicGuildInformations | undefined,
  ) {
    super(id_, name, level, entityLook, breed);
    this.guild = guild;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.guild!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guild = new BasicGuildInformations();
    this.guild!.deserialize(reader);
  }
}

export class CharacterMinimalAllianceInformations extends CharacterMinimalGuildInformations {
  public static id: number = 4354;
  public id: number = 4354;

  public alliance: BasicAllianceInformations | undefined;

  public constructor(
    id_?: number | undefined,
    name?: string | undefined,
    level?: number | undefined,
    entityLook?: EntityLook | undefined,
    breed?: number | undefined,
    guild?: BasicGuildInformations | undefined,
    alliance?: BasicAllianceInformations | undefined,
  ) {
    super(id_, name, level, entityLook, breed, guild);
    this.alliance = alliance;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.alliance!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.alliance = new BasicAllianceInformations();
    this.alliance!.deserialize(reader);
  }
}

export class ItemsPreset extends Preset {
  public static id: number = 5400;
  public id: number = 5400;

  public look: EntityLook | undefined;
  public items: ItemForPreset[] | undefined;
  public mountEquipped: boolean | undefined = false;

  public constructor(
    id_?: number | undefined,
    look?: EntityLook | undefined,
    items?: ItemForPreset[] | undefined,
    mountEquipped?: boolean | undefined,
  ) {
    super(id_);
    this.look = look;
    this.items = items;
    this.mountEquipped = mountEquipped;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.look!.serialize(writer);
    writer.writeShort(this.items!.length);
    this.items!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeBoolean(this.mountEquipped!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.look = new EntityLook();
    this.look!.deserialize(reader);
    this.items = [];
    const countItems = reader.readShort();
    for (let i: number = 0; i < countItems; i++) {
      const type: ItemForPreset = new ItemForPreset();
      type.deserialize(reader);
      this.items.push(type);
    }
    this.mountEquipped = reader.readBoolean();
  }
}

export class ServerSessionConstant extends DofusType {
  public static id: number = 7504;
  public id: number = 7504;

  public id_: number | undefined = 0;

  public constructor(id_?: number | undefined) {
    super();
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readVarShort();
  }
}

export class ServerSessionConstantInteger extends ServerSessionConstant {
  public static id: number = 6620;
  public id: number = 6620;

  public value: number | undefined = 0;

  public constructor(id_?: number | undefined, value?: number | undefined) {
    super(id_);
    this.value = value;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.value!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = reader.readInt();
  }
}

export class ShortcutEmote extends Shortcut {
  public static id: number = 3292;
  public id: number = 3292;

  public emoteId: number | undefined = 0;

  public constructor(slot?: number | undefined, emoteId?: number | undefined) {
    super(slot);
    this.emoteId = emoteId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.emoteId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.emoteId = reader.readShort();
  }
}

export class TaxCollectorComplementaryInformations extends DofusType {
  public static id: number = 9875;
  public id: number = 9875;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class TaxCollectorLootInformations extends TaxCollectorComplementaryInformations {
  public static id: number = 8142;
  public id: number = 8142;

  public itemsValue: number | undefined = 0;
  public pods: number | undefined = 0;
  public kamas: number | undefined = 0;
  public experience: number | undefined = 0;

  public constructor(
    itemsValue?: number | undefined,
    pods?: number | undefined,
    kamas?: number | undefined,
    experience?: number | undefined,
  ) {
    super();
    this.itemsValue = itemsValue;
    this.pods = pods;
    this.kamas = kamas;
    this.experience = experience;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.itemsValue!);
    writer.writeVarInt(this.pods!);
    writer.writeVarLong(this.kamas!);
    writer.writeVarLong(this.experience!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.itemsValue = reader.readVarLong();
    this.pods = reader.readVarInt();
    this.kamas = reader.readVarLong();
    this.experience = reader.readVarLong();
  }
}

export class MapCoordinatesAndId extends MapCoordinates {
  public static id: number = 1741;
  public id: number = 1741;

  public mapId: number | undefined = 0;

  public constructor(
    worldY?: number | undefined,
    worldX?: number | undefined,
    mapId?: number | undefined,
  ) {
    super(worldY, worldX);
    this.mapId = mapId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.mapId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapId = reader.readDouble();
  }
}

export class EntitiesPreset extends Preset {
  public static id: number = 1197;
  public id: number = 1197;

  public iconId: number | undefined = 0;
  public entityIds: number[] | undefined;

  public constructor(
    id_?: number | undefined,
    iconId?: number | undefined,
    entityIds?: number[] | undefined,
  ) {
    super(id_);
    this.iconId = iconId;
    this.entityIds = entityIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.iconId!);
    writer.writeShort(this.entityIds!.length);
    this.entityIds!.forEach((current: number) => writer.writeVarShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.iconId = reader.readShort();
    this.entityIds = [];
    const countEntityIds = reader.readShort();
    for (let i: number = 0; i < countEntityIds; i++) {
      this.entityIds.push(reader.readVarShort());
    }
  }
}

export class DebtInformation extends DofusType {
  public static id: number = 9735;
  public id: number = 9735;

  public timestamp: number | undefined = 0;
  public id_: number | undefined = 0;

  public constructor(timestamp?: number | undefined, id_?: number | undefined) {
    super();
    this.timestamp = timestamp;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.timestamp!);
    writer.writeDouble(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.timestamp = reader.readDouble();
    this.id_ = reader.readDouble();
  }
}

export class PaddockGuildedInformations extends PaddockBuyableInformations {
  public static id: number = 6908;
  public id: number = 6908;

  public deserted: boolean | undefined = false;
  public guildInfo: GuildInformations | undefined;

  public constructor(
    locked?: boolean | undefined,
    price?: number | undefined,
    deserted?: boolean | undefined,
    guildInfo?: GuildInformations | undefined,
  ) {
    super(locked, price);
    this.deserted = deserted;
    this.guildInfo = guildInfo;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.deserted!);
    this.guildInfo!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.deserted = reader.readBoolean();
    this.guildInfo = new GuildInformations();
    this.guildInfo!.deserialize(reader);
  }
}

export class KamaDebtInformation extends DebtInformation {
  public static id: number = 2979;
  public id: number = 2979;

  public kamas: number | undefined = 0;

  public constructor(
    timestamp?: number | undefined,
    id_?: number | undefined,
    kamas?: number | undefined,
  ) {
    super(timestamp, id_);
    this.kamas = kamas;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.kamas!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.kamas = reader.readVarLong();
  }
}

export class StatisticDataString extends StatisticData {
  public static id: number = 6983;
  public id: number = 6983;

  public value: string | undefined;

  public constructor(value?: string | undefined) {
    super();
    this.value = value;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.value!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = reader.readUTF();
  }
}

export class PresetsContainerPreset extends Preset {
  public static id: number = 4853;
  public id: number = 4853;

  public presets: Preset[] | undefined;

  public constructor(id_?: number | undefined, presets?: Preset[] | undefined) {
    super(id_);
    this.presets = presets;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.presets!.length);
    this.presets!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.presets = [];
    const countPresets = reader.readShort();
    for (let i: number = 0; i < countPresets; i++) {
      const presetsTypeId: number = reader.readShort();
      const type: Preset = new types[presetsTypeId]() as Preset;
      type.deserialize(reader);
      this.presets.push(type);
    }
  }
}

export class IconNamedPreset extends PresetsContainerPreset {
  public static id: number = 876;
  public id: number = 876;

  public name: string | undefined;
  public iconId: number | undefined = 0;

  public constructor(
    id_?: number | undefined,
    presets?: Preset[] | undefined,
    name?: string | undefined,
    iconId?: number | undefined,
  ) {
    super(id_, presets);
    this.name = name;
    this.iconId = iconId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.name!);
    writer.writeShort(this.iconId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.name = reader.readUTF();
    this.iconId = reader.readShort();
  }
}

export class ServerSessionConstantString extends ServerSessionConstant {
  public static id: number = 8535;
  public id: number = 8535;

  public value: string | undefined;

  public constructor(id_?: number | undefined, value?: string | undefined) {
    super(id_);
    this.value = value;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.value!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = reader.readUTF();
  }
}

export class QuestActiveDetailedInformations extends QuestActiveInformations {
  public static id: number = 2409;
  public id: number = 2409;

  public stepId: number | undefined = 0;
  public objectives: QuestObjectiveInformations[] | undefined;

  public constructor(
    questId?: number | undefined,
    stepId?: number | undefined,
    objectives?: QuestObjectiveInformations[] | undefined,
  ) {
    super(questId);
    this.stepId = stepId;
    this.objectives = objectives;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.stepId!);
    writer.writeShort(this.objectives!.length);
    this.objectives!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.stepId = reader.readVarShort();
    this.objectives = [];
    const countObjectives = reader.readShort();
    for (let i: number = 0; i < countObjectives; i++) {
      const objectivesTypeId: number = reader.readShort();
      const type: QuestObjectiveInformations = new types[
        objectivesTypeId
      ]() as QuestObjectiveInformations;
      type.deserialize(reader);
      this.objectives.push(type);
    }
  }
}

export class ShortcutEntitiesPreset extends Shortcut {
  public static id: number = 3590;
  public id: number = 3590;

  public presetId: number | undefined = 0;

  public constructor(slot?: number | undefined, presetId?: number | undefined) {
    super(slot);
    this.presetId = presetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.presetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.presetId = reader.readShort();
  }
}

export class ObjectEffectCreature extends ObjectEffect {
  public static id: number = 8829;
  public id: number = 8829;

  public monsterFamilyId: number | undefined = 0;

  public constructor(
    actionId?: number | undefined,
    monsterFamilyId?: number | undefined,
  ) {
    super(actionId);
    this.monsterFamilyId = monsterFamilyId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.monsterFamilyId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.monsterFamilyId = reader.readVarShort();
  }
}

export class ObjectEffectLadder extends ObjectEffectCreature {
  public static id: number = 7384;
  public id: number = 7384;

  public monsterCount: number | undefined = 0;

  public constructor(
    actionId?: number | undefined,
    monsterFamilyId?: number | undefined,
    monsterCount?: number | undefined,
  ) {
    super(actionId, monsterFamilyId);
    this.monsterCount = monsterCount;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.monsterCount!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.monsterCount = reader.readVarInt();
  }
}

export class FightTeamMemberMonsterInformations extends FightTeamMemberInformations {
  public static id: number = 6386;
  public id: number = 6386;

  public grade: number | undefined = 0;
  public monsterId: number | undefined = 0;

  public constructor(
    id_?: number | undefined,
    grade?: number | undefined,
    monsterId?: number | undefined,
  ) {
    super(id_);
    this.grade = grade;
    this.monsterId = monsterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.grade!);
    writer.writeInt(this.monsterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.grade = reader.readByte();
    this.monsterId = reader.readInt();
  }
}

export class ShortcutObjectIdolsPreset extends ShortcutObject {
  public static id: number = 83;
  public id: number = 83;

  public presetId: number | undefined = 0;

  public constructor(slot?: number | undefined, presetId?: number | undefined) {
    super(slot);
    this.presetId = presetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.presetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.presetId = reader.readShort();
  }
}

export class ShortcutObjectPreset extends ShortcutObject {
  public static id: number = 5044;
  public id: number = 5044;

  public presetId: number | undefined = 0;

  public constructor(slot?: number | undefined, presetId?: number | undefined) {
    super(slot);
    this.presetId = presetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.presetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.presetId = reader.readShort();
  }
}

export class TaxCollectorGuildInformations extends TaxCollectorComplementaryInformations {
  public static id: number = 2529;
  public id: number = 2529;

  public guild: BasicGuildInformations | undefined;

  public constructor(guild?: BasicGuildInformations | undefined) {
    super();
    this.guild = guild;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.guild!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guild = new BasicGuildInformations();
    this.guild!.deserialize(reader);
  }
}

export class TaxCollectorWaitingForHelpInformations extends TaxCollectorComplementaryInformations {
  public static id: number = 3199;
  public id: number = 3199;

  public waitingForHelpInfo: ProtectedEntityWaitingForHelpInfo | undefined;

  public constructor(
    waitingForHelpInfo?: ProtectedEntityWaitingForHelpInfo | undefined,
  ) {
    super();
    this.waitingForHelpInfo = waitingForHelpInfo;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.waitingForHelpInfo!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
    this.waitingForHelpInfo!.deserialize(reader);
  }
}

export class StatsPreset extends Preset {
  public static id: number = 6559;
  public id: number = 6559;

  public stats: SimpleCharacterCharacteristicForPreset[] | undefined;

  public constructor(
    id_?: number | undefined,
    stats?: SimpleCharacterCharacteristicForPreset[] | undefined,
  ) {
    super(id_);
    this.stats = stats;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.stats!.length);
    this.stats!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.stats = [];
    const countStats = reader.readShort();
    for (let i: number = 0; i < countStats; i++) {
      const type: SimpleCharacterCharacteristicForPreset =
        new SimpleCharacterCharacteristicForPreset();
      type.deserialize(reader);
      this.stats.push(type);
    }
  }
}

export class ObjectEffectDuration extends ObjectEffect {
  public static id: number = 5502;
  public id: number = 5502;

  public minutes: number | undefined = 0;
  public days: number | undefined = 0;
  public hours: number | undefined = 0;

  public constructor(
    actionId?: number | undefined,
    minutes?: number | undefined,
    days?: number | undefined,
    hours?: number | undefined,
  ) {
    super(actionId);
    this.minutes = minutes;
    this.days = days;
    this.hours = hours;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.minutes!);
    writer.writeVarShort(this.days!);
    writer.writeByte(this.hours!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.minutes = reader.readByte();
    this.days = reader.readVarShort();
    this.hours = reader.readByte();
  }
}

export class GameFightFighterLightInformations extends DofusType {
  public static id: number = 6482;
  public id: number = 6482;

  public wave: number | undefined = 0;
  public id_: number | undefined = 0;
  public level: number | undefined = 0;
  public breed: number | undefined = 0;
  public sex: boolean | undefined = false;
  public alive: boolean | undefined = false;

  public constructor(
    wave?: number | undefined,
    id_?: number | undefined,
    level?: number | undefined,
    breed?: number | undefined,
    sex?: boolean | undefined,
    alive?: boolean | undefined,
  ) {
    super();
    this.wave = wave;
    this.id_ = id_;
    this.level = level;
    this.breed = breed;
    this.sex = sex;
    this.alive = alive;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.wave!);
    writer.writeDouble(this.id_!);
    writer.writeVarShort(this.level!);
    writer.writeByte(this.breed!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.sex!);
    box0 = setFlag(box0, 1, this.alive!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.wave = reader.readByte();
    this.id_ = reader.readDouble();
    this.level = reader.readVarShort();
    this.breed = reader.readByte();
    const box0 = reader.readByte();
    this.sex = getFlag(box0, 0);
    this.alive = getFlag(box0, 1);
  }
}

export class GameFightFighterMonsterLightInformations extends GameFightFighterLightInformations {
  public static id: number = 4254;
  public id: number = 4254;

  public creatureGenericId: number | undefined = 0;

  public constructor(
    wave?: number | undefined,
    id_?: number | undefined,
    level?: number | undefined,
    breed?: number | undefined,
    sex?: boolean | undefined,
    alive?: boolean | undefined,
    creatureGenericId?: number | undefined,
  ) {
    super(wave, id_, level, breed, sex, alive);
    this.creatureGenericId = creatureGenericId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.creatureGenericId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.creatureGenericId = reader.readVarShort();
  }
}

export class GameFightFighterTaxCollectorLightInformations extends GameFightFighterLightInformations {
  public static id: number = 6139;
  public id: number = 6139;

  public lastNameId: number | undefined = 0;
  public firstNameId: number | undefined = 0;

  public constructor(
    wave?: number | undefined,
    id_?: number | undefined,
    level?: number | undefined,
    breed?: number | undefined,
    sex?: boolean | undefined,
    alive?: boolean | undefined,
    lastNameId?: number | undefined,
    firstNameId?: number | undefined,
  ) {
    super(wave, id_, level, breed, sex, alive);
    this.lastNameId = lastNameId;
    this.firstNameId = firstNameId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.lastNameId!);
    writer.writeVarShort(this.firstNameId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.lastNameId = reader.readVarShort();
    this.firstNameId = reader.readVarShort();
  }
}

export class FightAllianceTeamInformations extends FightTeamInformations {
  public static id: number = 2398;
  public id: number = 2398;

  public relation: number | undefined = 0;

  public constructor(
    nbWaves?: number | undefined,
    teamId?: number | undefined,
    teamTypeId?: number | undefined,
    teamSide?: number | undefined,
    leaderId?: number | undefined,
    teamMembers?: FightTeamMemberInformations[] | undefined,
    relation?: number | undefined,
  ) {
    super(nbWaves, teamId, teamTypeId, teamSide, leaderId, teamMembers);
    this.relation = relation;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.relation!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.relation = reader.readByte();
  }
}

export class CharacterHardcoreOrEpicInformations extends CharacterBaseInformations {
  public static id: number = 7850;
  public id: number = 7850;

  public deathMaxLevel: number | undefined = 0;
  public deathState: number | undefined = 0;
  public deathCount: number | undefined = 0;

  public constructor(
    id_?: number | undefined,
    name?: string | undefined,
    level?: number | undefined,
    entityLook?: EntityLook | undefined,
    breed?: number | undefined,
    sex?: boolean | undefined,
    deathMaxLevel?: number | undefined,
    deathState?: number | undefined,
    deathCount?: number | undefined,
  ) {
    super(id_, name, level, entityLook, breed, sex);
    this.deathMaxLevel = deathMaxLevel;
    this.deathState = deathState;
    this.deathCount = deathCount;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.deathMaxLevel!);
    writer.writeByte(this.deathState!);
    writer.writeVarShort(this.deathCount!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.deathMaxLevel = reader.readVarShort();
    this.deathState = reader.readByte();
    this.deathCount = reader.readVarShort();
  }
}

export class GameFightFighterEntityLightInformation extends GameFightFighterLightInformations {
  public static id: number = 4268;
  public id: number = 4268;

  public masterId: number | undefined = 0;
  public entityModelId: number | undefined = 0;

  public constructor(
    wave?: number | undefined,
    id_?: number | undefined,
    level?: number | undefined,
    breed?: number | undefined,
    sex?: boolean | undefined,
    alive?: boolean | undefined,
    masterId?: number | undefined,
    entityModelId?: number | undefined,
  ) {
    super(wave, id_, level, breed, sex, alive);
    this.masterId = masterId;
    this.entityModelId = entityModelId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.masterId!);
    writer.writeByte(this.entityModelId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.masterId = reader.readDouble();
    this.entityModelId = reader.readByte();
  }
}

export class ServerSessionConstantLong extends ServerSessionConstant {
  public static id: number = 4492;
  public id: number = 4492;

  public value: number | undefined = 0;

  public constructor(id_?: number | undefined, value?: number | undefined) {
    super(id_);
    this.value = value;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.value!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = reader.readDouble();
  }
}

export class InteractiveElementWithAgeBonus extends InteractiveElement {
  public static id: number = 2510;
  public id: number = 2510;

  public ageBonus: number | undefined = 0;

  public constructor(
    elementTypeId?: number | undefined,
    elementId?: number | undefined,
    disabledSkills?: InteractiveElementSkill[] | undefined,
    enabledSkills?: InteractiveElementSkill[] | undefined,
    onCurrentMap?: boolean | undefined,
    ageBonus?: number | undefined,
  ) {
    super(
      elementTypeId,
      elementId,
      disabledSkills,
      enabledSkills,
      onCurrentMap,
    );
    this.ageBonus = ageBonus;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.ageBonus!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ageBonus = reader.readShort();
  }
}

export class StatisticDataInt extends StatisticData {
  public static id: number = 4720;
  public id: number = 4720;

  public value: number | undefined = 0;

  public constructor(value?: number | undefined) {
    super();
    this.value = value;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.value!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = reader.readInt();
  }
}

export class AllianceFactSheetInformations extends AllianceInformations {
  public static id: number = 9654;
  public id: number = 9654;

  public creationDate: number | undefined = 0;

  public constructor(
    allianceTag?: string | undefined,
    allianceId?: number | undefined,
    allianceName?: string | undefined,
    allianceEmblem?: GuildEmblem | undefined,
    creationDate?: number | undefined,
  ) {
    super(allianceTag, allianceId, allianceName, allianceEmblem);
    this.creationDate = creationDate;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.creationDate!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.creationDate = reader.readInt();
  }
}

export class GameFightFighterNamedLightInformations extends GameFightFighterLightInformations {
  public static id: number = 2754;
  public id: number = 2754;

  public name: string | undefined;

  public constructor(
    wave?: number | undefined,
    id_?: number | undefined,
    level?: number | undefined,
    breed?: number | undefined,
    sex?: boolean | undefined,
    alive?: boolean | undefined,
    name?: string | undefined,
  ) {
    super(wave, id_, level, breed, sex, alive);
    this.name = name;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.name!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.name = reader.readUTF();
  }
}

export class TreasureHuntStepFollowDirectionToPOI extends TreasureHuntStep {
  public static id: number = 2093;
  public id: number = 2093;

  public poiLabelId: number | undefined = 0;
  public direction: number | undefined = 1;

  public constructor(
    poiLabelId?: number | undefined,
    direction?: number | undefined,
  ) {
    super();
    this.poiLabelId = poiLabelId;
    this.direction = direction;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.poiLabelId!);
    writer.writeByte(this.direction!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.poiLabelId = reader.readVarShort();
    this.direction = reader.readByte();
  }
}

export class StatisticDataBoolean extends StatisticData {
  public static id: number = 8397;
  public id: number = 8397;

  public value: boolean | undefined = false;

  public constructor(value?: boolean | undefined) {
    super();
    this.value = value;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.value!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = reader.readBoolean();
  }
}

export class ExtendedLockedBreachBranch extends ExtendedBreachBranch {
  public static id: number = 169;
  public id: number = 169;

  public unlockPrice: number | undefined = 0;

  public constructor(
    monsters?: MonsterInGroupLightInformations[] | undefined,
    relativeScore?: number | undefined,
    room?: number | undefined,
    bosses?: MonsterInGroupLightInformations[] | undefined,
    map?: number | undefined,
    element?: number | undefined,
    score?: number | undefined,
    prize?: number | undefined,
    rewards?: BreachReward[] | undefined,
    modifier?: number | undefined,
    unlockPrice?: number | undefined,
  ) {
    super(
      monsters,
      relativeScore,
      room,
      bosses,
      map,
      element,
      score,
      prize,
      rewards,
      modifier,
    );
    this.unlockPrice = unlockPrice;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.unlockPrice!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.unlockPrice = reader.readVarInt();
  }
}

export class PartyIdol extends Idol {
  public static id: number = 563;
  public id: number = 563;

  public ownersIds: number[] | undefined;

  public constructor(
    dropBonusPercent?: number | undefined,
    id_?: number | undefined,
    xpBonusPercent?: number | undefined,
    ownersIds?: number[] | undefined,
  ) {
    super(dropBonusPercent, id_, xpBonusPercent);
    this.ownersIds = ownersIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.ownersIds!.length);
    this.ownersIds!.forEach((current: number) => writer.writeVarLong(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ownersIds = [];
    const countOwnersIds = reader.readShort();
    for (let i: number = 0; i < countOwnersIds; i++) {
      this.ownersIds.push(reader.readVarLong());
    }
  }
}

export class GameFightMonsterWithAlignmentInformations extends GameFightMonsterInformations {
  public static id: number = 108;
  public id: number = 108;

  public alignmentInfos: ActorAlignmentInformations | undefined;

  public constructor(
    contextualId?: number | undefined,
    disposition?: EntityDispositionInformations | undefined,
    look?: EntityLook | undefined,
    wave?: number | undefined,
    spawnInfo?: GameContextBasicSpawnInformation | undefined,
    previousPositions?: number[] | undefined,
    stats?: GameFightCharacteristics | undefined,
    creatureLevel?: number | undefined,
    creatureGenericId?: number | undefined,
    creatureGrade?: number | undefined,
    alignmentInfos?: ActorAlignmentInformations | undefined,
  ) {
    super(
      contextualId,
      disposition,
      look,
      wave,
      spawnInfo,
      previousPositions,
      stats,
      creatureLevel,
      creatureGenericId,
      creatureGrade,
    );
    this.alignmentInfos = alignmentInfos;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.alignmentInfos!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.alignmentInfos = new ActorAlignmentInformations();
    this.alignmentInfos!.deserialize(reader);
  }
}

export class MapCoordinatesExtended extends MapCoordinatesAndId {
  public static id: number = 3550;
  public id: number = 3550;

  public subAreaId: number | undefined = 0;

  public constructor(
    worldY?: number | undefined,
    worldX?: number | undefined,
    mapId?: number | undefined,
    subAreaId?: number | undefined,
  ) {
    super(worldY, worldX, mapId);
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.subAreaId = reader.readVarShort();
  }
}

export class TreasureHuntStepFollowDirection extends TreasureHuntStep {
  public static id: number = 5753;
  public id: number = 5753;

  public mapCount: number | undefined = 0;
  public direction: number | undefined = 1;

  public constructor(
    mapCount?: number | undefined,
    direction?: number | undefined,
  ) {
    super();
    this.mapCount = mapCount;
    this.direction = direction;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.mapCount!);
    writer.writeByte(this.direction!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapCount = reader.readVarShort();
    this.direction = reader.readByte();
  }
}

export class ShortcutSmiley extends Shortcut {
  public static id: number = 4590;
  public id: number = 4590;

  public smileyId: number | undefined = 0;

  public constructor(slot?: number | undefined, smileyId?: number | undefined) {
    super(slot);
    this.smileyId = smileyId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.smileyId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.smileyId = reader.readVarShort();
  }
}

export class ObjectEffectMinMax extends ObjectEffect {
  public static id: number = 5720;
  public id: number = 5720;

  public max: number | undefined = 0;
  public min: number | undefined = 0;

  public constructor(
    actionId?: number | undefined,
    max?: number | undefined,
    min?: number | undefined,
  ) {
    super(actionId);
    this.max = max;
    this.min = min;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.max!);
    writer.writeVarInt(this.min!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.max = reader.readVarInt();
    this.min = reader.readVarInt();
  }
}

export class SpellsPreset extends Preset {
  public static id: number = 1337;
  public id: number = 1337;

  public spells: SpellForPreset[] | undefined;

  public constructor(
    id_?: number | undefined,
    spells?: SpellForPreset[] | undefined,
  ) {
    super(id_);
    this.spells = spells;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.spells!.length);
    this.spells!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.spells = [];
    const countSpells = reader.readShort();
    for (let i: number = 0; i < countSpells; i++) {
      const type: SpellForPreset = new SpellForPreset();
      type.deserialize(reader);
      this.spells.push(type);
    }
  }
}

export class ObjectEffectMount extends ObjectEffect {
  public static id: number = 4916;
  public id: number = 4916;

  public owner: string | undefined;
  public id_: number | undefined = 0;
  public capacities: number[] | undefined;
  public expirationDate: number | undefined = 0;
  public name: string | undefined;
  public model: number | undefined = 0;
  public level: number | undefined = 0;
  public effects: ObjectEffectInteger[] | undefined;
  public reproductionCountMax: number | undefined = 0;
  public reproductionCount: number | undefined = 0;
  public sex: boolean | undefined = false;
  public isRideable: boolean | undefined = false;
  public isFeconded: boolean | undefined = false;
  public isFecondationReady: boolean | undefined = false;

  public constructor(
    actionId?: number | undefined,
    owner?: string | undefined,
    id_?: number | undefined,
    capacities?: number[] | undefined,
    expirationDate?: number | undefined,
    name?: string | undefined,
    model?: number | undefined,
    level?: number | undefined,
    effects?: ObjectEffectInteger[] | undefined,
    reproductionCountMax?: number | undefined,
    reproductionCount?: number | undefined,
    sex?: boolean | undefined,
    isRideable?: boolean | undefined,
    isFeconded?: boolean | undefined,
    isFecondationReady?: boolean | undefined,
  ) {
    super(actionId);
    this.owner = owner;
    this.id_ = id_;
    this.capacities = capacities;
    this.expirationDate = expirationDate;
    this.name = name;
    this.model = model;
    this.level = level;
    this.effects = effects;
    this.reproductionCountMax = reproductionCountMax;
    this.reproductionCount = reproductionCount;
    this.sex = sex;
    this.isRideable = isRideable;
    this.isFeconded = isFeconded;
    this.isFecondationReady = isFecondationReady;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.owner!);
    writer.writeVarLong(this.id_!);
    writer.writeShort(this.capacities!.length);
    this.capacities!.forEach((current: number) => writer.writeVarInt(current));
    writer.writeVarLong(this.expirationDate!);
    writer.writeUTF(this.name!);
    writer.writeVarInt(this.model!);
    writer.writeByte(this.level!);
    writer.writeShort(this.effects!.length);
    this.effects!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarInt(this.reproductionCountMax!);
    writer.writeVarInt(this.reproductionCount!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.sex!);
    box0 = setFlag(box0, 1, this.isRideable!);
    box0 = setFlag(box0, 2, this.isFeconded!);
    box0 = setFlag(box0, 3, this.isFecondationReady!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.owner = reader.readUTF();
    this.id_ = reader.readVarLong();
    this.capacities = [];
    const countCapacities = reader.readShort();
    for (let i: number = 0; i < countCapacities; i++) {
      this.capacities.push(reader.readVarInt());
    }
    this.expirationDate = reader.readVarLong();
    this.name = reader.readUTF();
    this.model = reader.readVarInt();
    this.level = reader.readByte();
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i: number = 0; i < countEffects; i++) {
      const type: ObjectEffectInteger = new ObjectEffectInteger();
      type.deserialize(reader);
      this.effects.push(type);
    }
    this.reproductionCountMax = reader.readVarInt();
    this.reproductionCount = reader.readVarInt();
    const box0 = reader.readByte();
    this.sex = getFlag(box0, 0);
    this.isRideable = getFlag(box0, 1);
    this.isFeconded = getFlag(box0, 2);
    this.isFecondationReady = getFlag(box0, 3);
  }
}

export class ItemForPreset extends DofusType {
  public static id: number = 4107;
  public id: number = 4107;

  public position: number | undefined = 63;
  public objUid: number | undefined = 0;
  public objGid: number | undefined = 0;

  public constructor(
    position?: number | undefined,
    objUid?: number | undefined,
    objGid?: number | undefined,
  ) {
    super();
    this.position = position;
    this.objUid = objUid;
    this.objGid = objGid;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.position!);
    writer.writeVarInt(this.objUid!);
    writer.writeVarShort(this.objGid!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.position = reader.readShort();
    this.objUid = reader.readVarInt();
    this.objGid = reader.readVarShort();
  }
}

export class ActorExtendedAlignmentInformations extends ActorAlignmentInformations {
  public static id: number = 4302;
  public id: number = 4302;

  public aggressable: number | undefined = 0;
  public honorNextGradeFloor: number | undefined = 0;
  public honor: number | undefined = 0;
  public honorGradeFloor: number | undefined = 0;

  public constructor(
    characterPower?: number | undefined,
    alignmentGrade?: number | undefined,
    alignmentSide?: number | undefined,
    alignmentValue?: number | undefined,
    aggressable?: number | undefined,
    honorNextGradeFloor?: number | undefined,
    honor?: number | undefined,
    honorGradeFloor?: number | undefined,
  ) {
    super(characterPower, alignmentGrade, alignmentSide, alignmentValue);
    this.aggressable = aggressable;
    this.honorNextGradeFloor = honorNextGradeFloor;
    this.honor = honor;
    this.honorGradeFloor = honorGradeFloor;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.aggressable!);
    writer.writeVarShort(this.honorNextGradeFloor!);
    writer.writeVarShort(this.honor!);
    writer.writeVarShort(this.honorGradeFloor!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.aggressable = reader.readByte();
    this.honorNextGradeFloor = reader.readVarShort();
    this.honor = reader.readVarShort();
    this.honorGradeFloor = reader.readVarShort();
  }
}

export class ApplicationPlayerInformation extends DofusType {
  public static id: number = 3872;
  public id: number = 3872;

  public accountTag: string | undefined;
  public playerName: string | undefined;
  public accountId: number | undefined = 0;
  public breed: number | undefined = 0;
  public status: PlayerStatus | undefined;
  public sex: boolean | undefined = false;
  public accountNickname: string | undefined;
  public playerId: number | undefined = 0;
  public level: number | undefined = 0;

  public constructor(
    accountTag?: string | undefined,
    playerName?: string | undefined,
    accountId?: number | undefined,
    breed?: number | undefined,
    status?: PlayerStatus | undefined,
    sex?: boolean | undefined,
    accountNickname?: string | undefined,
    playerId?: number | undefined,
    level?: number | undefined,
  ) {
    super();
    this.accountTag = accountTag;
    this.playerName = playerName;
    this.accountId = accountId;
    this.breed = breed;
    this.status = status;
    this.sex = sex;
    this.accountNickname = accountNickname;
    this.playerId = playerId;
    this.level = level;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.accountTag!);
    writer.writeUTF(this.playerName!);
    writer.writeVarInt(this.accountId!);
    writer.writeByte(this.breed!);
    this.status!.serialize(writer);
    writer.writeBoolean(this.sex!);
    writer.writeUTF(this.accountNickname!);
    writer.writeVarInt(this.playerId!);
    writer.writeVarInt(this.level!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accountTag = reader.readUTF();
    this.playerName = reader.readUTF();
    this.accountId = reader.readVarInt();
    this.breed = reader.readByte();
    this.status = new PlayerStatus();
    this.status!.deserialize(reader);
    this.sex = reader.readBoolean();
    this.accountNickname = reader.readUTF();
    this.playerId = reader.readVarInt();
    this.level = reader.readVarInt();
  }
}

export class GuildEmblem extends DofusType {
  public static id: number = 2994;
  public id: number = 2994;

  public backgroundColor: number | undefined = 0;
  public backgroundShape: number | undefined = 0;
  public symbolShape: number | undefined = 0;
  public symbolColor: number | undefined = 0;

  public constructor(
    backgroundColor?: number | undefined,
    backgroundShape?: number | undefined,
    symbolShape?: number | undefined,
    symbolColor?: number | undefined,
  ) {
    super();
    this.backgroundColor = backgroundColor;
    this.backgroundShape = backgroundShape;
    this.symbolShape = symbolShape;
    this.symbolColor = symbolColor;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.backgroundColor!);
    writer.writeByte(this.backgroundShape!);
    writer.writeVarShort(this.symbolShape!);
    writer.writeInt(this.symbolColor!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.backgroundColor = reader.readInt();
    this.backgroundShape = reader.readByte();
    this.symbolShape = reader.readVarShort();
    this.symbolColor = reader.readInt();
  }
}

export class MountClientData extends DofusType {
  public static id: number = 9874;
  public id: number = 9874;

  public effectList: ObjectEffectInteger[] | undefined;
  public boostLimiter: number | undefined = 0;
  public fecondationTime: number | undefined = 0;
  public loveMax: number | undefined = 0;
  public level: number | undefined = 0;
  public experienceForNextLevel: number | undefined = 0;
  public harnessGID: number | undefined = 0;
  public reproductionCountMax: number | undefined = 0;
  public model: number | undefined = 0;
  public maxPods: number | undefined = 0;
  public boostMax: number | undefined = 0;
  public serenity: number | undefined = 0;
  public energy: number | undefined = 0;
  public name: string | undefined;
  public id_: number | undefined = 0;
  public ancestor: number[] | undefined;
  public experienceForLevel: number | undefined = 0;
  public ownerId: number | undefined = 0;
  public stamina: number | undefined = 0;
  public love: number | undefined = 0;
  public experience: number | undefined = 0;
  public staminaMax: number | undefined = 0;
  public behaviors: number[] | undefined;
  public maturity: number | undefined = 0;
  public reproductionCount: number | undefined = 0;
  public maturityForAdult: number | undefined = 0;
  public energyMax: number | undefined = 0;
  public aggressivityMax: number | undefined = 0;
  public serenityMax: number | undefined = 0;
  public sex: boolean | undefined = false;
  public isRideable: boolean | undefined = false;
  public isWild: boolean | undefined = false;
  public isFecondationReady: boolean | undefined = false;
  public useHarnessColors: boolean | undefined = false;

  public constructor(
    effectList?: ObjectEffectInteger[] | undefined,
    boostLimiter?: number | undefined,
    fecondationTime?: number | undefined,
    loveMax?: number | undefined,
    level?: number | undefined,
    experienceForNextLevel?: number | undefined,
    harnessGID?: number | undefined,
    reproductionCountMax?: number | undefined,
    model?: number | undefined,
    maxPods?: number | undefined,
    boostMax?: number | undefined,
    serenity?: number | undefined,
    energy?: number | undefined,
    name?: string | undefined,
    id_?: number | undefined,
    ancestor?: number[] | undefined,
    experienceForLevel?: number | undefined,
    ownerId?: number | undefined,
    stamina?: number | undefined,
    love?: number | undefined,
    experience?: number | undefined,
    staminaMax?: number | undefined,
    behaviors?: number[] | undefined,
    maturity?: number | undefined,
    reproductionCount?: number | undefined,
    maturityForAdult?: number | undefined,
    energyMax?: number | undefined,
    aggressivityMax?: number | undefined,
    serenityMax?: number | undefined,
    sex?: boolean | undefined,
    isRideable?: boolean | undefined,
    isWild?: boolean | undefined,
    isFecondationReady?: boolean | undefined,
    useHarnessColors?: boolean | undefined,
  ) {
    super();
    this.effectList = effectList;
    this.boostLimiter = boostLimiter;
    this.fecondationTime = fecondationTime;
    this.loveMax = loveMax;
    this.level = level;
    this.experienceForNextLevel = experienceForNextLevel;
    this.harnessGID = harnessGID;
    this.reproductionCountMax = reproductionCountMax;
    this.model = model;
    this.maxPods = maxPods;
    this.boostMax = boostMax;
    this.serenity = serenity;
    this.energy = energy;
    this.name = name;
    this.id_ = id_;
    this.ancestor = ancestor;
    this.experienceForLevel = experienceForLevel;
    this.ownerId = ownerId;
    this.stamina = stamina;
    this.love = love;
    this.experience = experience;
    this.staminaMax = staminaMax;
    this.behaviors = behaviors;
    this.maturity = maturity;
    this.reproductionCount = reproductionCount;
    this.maturityForAdult = maturityForAdult;
    this.energyMax = energyMax;
    this.aggressivityMax = aggressivityMax;
    this.serenityMax = serenityMax;
    this.sex = sex;
    this.isRideable = isRideable;
    this.isWild = isWild;
    this.isFecondationReady = isFecondationReady;
    this.useHarnessColors = useHarnessColors;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.effectList!.length);
    this.effectList!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeInt(this.boostLimiter!);
    writer.writeInt(this.fecondationTime!);
    writer.writeVarInt(this.loveMax!);
    writer.writeByte(this.level!);
    writer.writeDouble(this.experienceForNextLevel!);
    writer.writeVarShort(this.harnessGID!);
    writer.writeVarInt(this.reproductionCountMax!);
    writer.writeVarInt(this.model!);
    writer.writeVarInt(this.maxPods!);
    writer.writeDouble(this.boostMax!);
    writer.writeInt(this.serenity!);
    writer.writeVarInt(this.energy!);
    writer.writeUTF(this.name!);
    writer.writeDouble(this.id_!);
    writer.writeShort(this.ancestor!.length);
    this.ancestor!.forEach((current: number) => writer.writeInt(current));
    writer.writeVarLong(this.experienceForLevel!);
    writer.writeInt(this.ownerId!);
    writer.writeVarInt(this.stamina!);
    writer.writeVarInt(this.love!);
    writer.writeVarLong(this.experience!);
    writer.writeVarInt(this.staminaMax!);
    writer.writeShort(this.behaviors!.length);
    this.behaviors!.forEach((current: number) => writer.writeInt(current));
    writer.writeVarInt(this.maturity!);
    writer.writeInt(this.reproductionCount!);
    writer.writeVarInt(this.maturityForAdult!);
    writer.writeVarInt(this.energyMax!);
    writer.writeInt(this.aggressivityMax!);
    writer.writeVarInt(this.serenityMax!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.sex!);
    box0 = setFlag(box0, 1, this.isRideable!);
    box0 = setFlag(box0, 2, this.isWild!);
    box0 = setFlag(box0, 3, this.isFecondationReady!);
    box0 = setFlag(box0, 4, this.useHarnessColors!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.effectList = [];
    const countEffectList = reader.readShort();
    for (let i: number = 0; i < countEffectList; i++) {
      const type: ObjectEffectInteger = new ObjectEffectInteger();
      type.deserialize(reader);
      this.effectList.push(type);
    }
    this.boostLimiter = reader.readInt();
    this.fecondationTime = reader.readInt();
    this.loveMax = reader.readVarInt();
    this.level = reader.readByte();
    this.experienceForNextLevel = reader.readDouble();
    this.harnessGID = reader.readVarShort();
    this.reproductionCountMax = reader.readVarInt();
    this.model = reader.readVarInt();
    this.maxPods = reader.readVarInt();
    this.boostMax = reader.readDouble();
    this.serenity = reader.readInt();
    this.energy = reader.readVarInt();
    this.name = reader.readUTF();
    this.id_ = reader.readDouble();
    this.ancestor = [];
    const countAncestor = reader.readShort();
    for (let i: number = 0; i < countAncestor; i++) {
      this.ancestor.push(reader.readInt());
    }
    this.experienceForLevel = reader.readVarLong();
    this.ownerId = reader.readInt();
    this.stamina = reader.readVarInt();
    this.love = reader.readVarInt();
    this.experience = reader.readVarLong();
    this.staminaMax = reader.readVarInt();
    this.behaviors = [];
    const countBehaviors = reader.readShort();
    for (let i: number = 0; i < countBehaviors; i++) {
      this.behaviors.push(reader.readInt());
    }
    this.maturity = reader.readVarInt();
    this.reproductionCount = reader.readInt();
    this.maturityForAdult = reader.readVarInt();
    this.energyMax = reader.readVarInt();
    this.aggressivityMax = reader.readInt();
    this.serenityMax = reader.readVarInt();
    const box0 = reader.readByte();
    this.sex = getFlag(box0, 0);
    this.isRideable = getFlag(box0, 1);
    this.isWild = getFlag(box0, 2);
    this.isFecondationReady = getFlag(box0, 3);
    this.useHarnessColors = getFlag(box0, 4);
  }
}

export class FightLoot extends DofusType {
  public static id: number = 7224;
  public id: number = 7224;

  public objects: number[] | undefined;
  public kamas: number | undefined = 0;

  public constructor(
    objects?: number[] | undefined,
    kamas?: number | undefined,
  ) {
    super();
    this.objects = objects;
    this.kamas = kamas;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objects!.length);
    this.objects!.forEach((current: number) => writer.writeVarInt(current));
    writer.writeVarLong(this.kamas!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objects = [];
    const countObjects = reader.readShort();
    for (let i: number = 0; i < countObjects; i++) {
      this.objects.push(reader.readVarInt());
    }
    this.kamas = reader.readVarLong();
  }
}

export class TreasureHuntFlag extends DofusType {
  public static id: number = 4191;
  public id: number = 4191;

  public state: number | undefined = 0;
  public mapId: number | undefined = 0;

  public constructor(state?: number | undefined, mapId?: number | undefined) {
    super();
    this.state = state;
    this.mapId = mapId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.state!);
    writer.writeDouble(this.mapId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.state = reader.readByte();
    this.mapId = reader.readDouble();
  }
}

export class ObjectItemMinimalInformation extends Item {
  public static id: number = 4918;
  public id: number = 4918;

  public objectGID: number | undefined = 0;
  public effects: ObjectEffect[] | undefined;

  public constructor(
    objectGID?: number | undefined,
    effects?: ObjectEffect[] | undefined,
  ) {
    super();
    this.objectGID = objectGID;
    this.effects = effects;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.objectGID!);
    writer.writeShort(this.effects!.length);
    this.effects!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectGID = reader.readVarShort();
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i: number = 0; i < countEffects; i++) {
      const effectsTypeId: number = reader.readShort();
      const type: ObjectEffect = new types[effectsTypeId]() as ObjectEffect;
      type.deserialize(reader);
      this.effects.push(type);
    }
  }
}

export class ObjectItemInformationWithQuantity extends ObjectItemMinimalInformation {
  public static id: number = 4715;
  public id: number = 4715;

  public quantity: number | undefined = 0;

  public constructor(
    objectGID?: number | undefined,
    effects?: ObjectEffect[] | undefined,
    quantity?: number | undefined,
  ) {
    super(objectGID, effects);
    this.quantity = quantity;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.quantity!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarInt();
  }
}

export class StartupActionAddObject extends DofusType {
  public static id: number = 6157;
  public id: number = 6157;

  public items: ObjectItemInformationWithQuantity[] | undefined;
  public title: string | undefined;
  public uid: number | undefined = 0;
  public text: string | undefined;
  public pictureUrl: string | undefined;
  public descUrl: string | undefined;

  public constructor(
    items?: ObjectItemInformationWithQuantity[] | undefined,
    title?: string | undefined,
    uid?: number | undefined,
    text?: string | undefined,
    pictureUrl?: string | undefined,
    descUrl?: string | undefined,
  ) {
    super();
    this.items = items;
    this.title = title;
    this.uid = uid;
    this.text = text;
    this.pictureUrl = pictureUrl;
    this.descUrl = descUrl;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.items!.length);
    this.items!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeUTF(this.title!);
    writer.writeInt(this.uid!);
    writer.writeUTF(this.text!);
    writer.writeUTF(this.pictureUrl!);
    writer.writeUTF(this.descUrl!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.items = [];
    const countItems = reader.readShort();
    for (let i: number = 0; i < countItems; i++) {
      const type: ObjectItemInformationWithQuantity =
        new ObjectItemInformationWithQuantity();
      type.deserialize(reader);
      this.items.push(type);
    }
    this.title = reader.readUTF();
    this.uid = reader.readInt();
    this.text = reader.readUTF();
    this.pictureUrl = reader.readUTF();
    this.descUrl = reader.readUTF();
  }
}

export class CharacterRemodelingInformation extends AbstractCharacterInformation {
  public static id: number = 5402;
  public id: number = 5402;

  public breed: number | undefined = 0;
  public sex: boolean | undefined = false;
  public cosmeticId: number | undefined = 0;
  public name: string | undefined;
  public colors: number[] | undefined;

  public constructor(
    id_?: number | undefined,
    breed?: number | undefined,
    sex?: boolean | undefined,
    cosmeticId?: number | undefined,
    name?: string | undefined,
    colors?: number[] | undefined,
  ) {
    super(id_);
    this.breed = breed;
    this.sex = sex;
    this.cosmeticId = cosmeticId;
    this.name = name;
    this.colors = colors;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.breed!);
    writer.writeBoolean(this.sex!);
    writer.writeVarShort(this.cosmeticId!);
    writer.writeUTF(this.name!);
    writer.writeShort(this.colors!.length);
    this.colors!.forEach((current: number) => writer.writeInt(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.breed = reader.readByte();
    this.sex = reader.readBoolean();
    this.cosmeticId = reader.readVarShort();
    this.name = reader.readUTF();
    this.colors = [];
    const countColors = reader.readShort();
    for (let i: number = 0; i < countColors; i++) {
      this.colors.push(reader.readInt());
    }
  }
}

export class CharacterToRemodelInformations extends CharacterRemodelingInformation {
  public static id: number = 2646;
  public id: number = 2646;

  public mandatoryChangeMask: number | undefined = 0;
  public possibleChangeMask: number | undefined = 0;

  public constructor(
    id_?: number | undefined,
    breed?: number | undefined,
    sex?: boolean | undefined,
    cosmeticId?: number | undefined,
    name?: string | undefined,
    colors?: number[] | undefined,
    mandatoryChangeMask?: number | undefined,
    possibleChangeMask?: number | undefined,
  ) {
    super(id_, breed, sex, cosmeticId, name, colors);
    this.mandatoryChangeMask = mandatoryChangeMask;
    this.possibleChangeMask = possibleChangeMask;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.mandatoryChangeMask!);
    writer.writeByte(this.possibleChangeMask!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mandatoryChangeMask = reader.readByte();
    this.possibleChangeMask = reader.readByte();
  }
}

export class RemodelingInformation extends DofusType {
  public static id: number = 8002;
  public id: number = 8002;

  public breed: number | undefined = 0;
  public sex: boolean | undefined = false;
  public cosmeticId: number | undefined = 0;
  public name: string | undefined;
  public colors: number[] | undefined;

  public constructor(
    breed?: number | undefined,
    sex?: boolean | undefined,
    cosmeticId?: number | undefined,
    name?: string | undefined,
    colors?: number[] | undefined,
  ) {
    super();
    this.breed = breed;
    this.sex = sex;
    this.cosmeticId = cosmeticId;
    this.name = name;
    this.colors = colors;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.breed!);
    writer.writeBoolean(this.sex!);
    writer.writeVarShort(this.cosmeticId!);
    writer.writeUTF(this.name!);
    writer.writeShort(this.colors!.length);
    this.colors!.forEach((current: number) => writer.writeInt(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.breed = reader.readByte();
    this.sex = reader.readBoolean();
    this.cosmeticId = reader.readVarShort();
    this.name = reader.readUTF();
    this.colors = [];
    const countColors = reader.readShort();
    for (let i: number = 0; i < countColors; i++) {
      this.colors.push(reader.readInt());
    }
  }
}

export class CharacterCharacteristics extends DofusType {
  public static id: number = 5368;
  public id: number = 5368;

  public characteristics: CharacterCharacteristic[] | undefined;

  public constructor(characteristics?: CharacterCharacteristic[] | undefined) {
    super();
    this.characteristics = characteristics;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.characteristics!.length);
    this.characteristics!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.characteristics = [];
    const countCharacteristics = reader.readShort();
    for (let i: number = 0; i < countCharacteristics; i++) {
      const characteristicsTypeId: number = reader.readShort();
      const type: CharacterCharacteristic = new types[
        characteristicsTypeId
      ]() as CharacterCharacteristic;
      type.deserialize(reader);
      this.characteristics.push(type);
    }
  }
}

export class SimpleCharacterCharacteristicForPreset extends DofusType {
  public static id: number = 7495;
  public id: number = 7495;

  public additionnal: number | undefined = 0;
  public keyword: string | undefined;
  public base: number | undefined = 0;

  public constructor(
    additionnal?: number | undefined,
    keyword?: string | undefined,
    base?: number | undefined,
  ) {
    super();
    this.additionnal = additionnal;
    this.keyword = keyword;
    this.base = base;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.additionnal!);
    writer.writeUTF(this.keyword!);
    writer.writeVarShort(this.base!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.additionnal = reader.readVarShort();
    this.keyword = reader.readUTF();
    this.base = reader.readVarShort();
  }
}

export class CharacterCharacteristicForPreset extends SimpleCharacterCharacteristicForPreset {
  public static id: number = 4303;
  public id: number = 4303;

  public stuff: number | undefined = 0;

  public constructor(
    additionnal?: number | undefined,
    keyword?: string | undefined,
    base?: number | undefined,
    stuff?: number | undefined,
  ) {
    super(additionnal, keyword, base);
    this.stuff = stuff;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.stuff!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.stuff = reader.readVarShort();
  }
}

export class SpellForPreset extends DofusType {
  public static id: number = 7500;
  public id: number = 7500;

  public spellId: number | undefined = 0;
  public shortcuts: number[] | undefined;

  public constructor(
    spellId?: number | undefined,
    shortcuts?: number[] | undefined,
  ) {
    super();
    this.spellId = spellId;
    this.shortcuts = shortcuts;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.spellId!);
    writer.writeShort(this.shortcuts!.length);
    this.shortcuts!.forEach((current: number) => writer.writeShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.spellId = reader.readVarShort();
    this.shortcuts = [];
    const countShortcuts = reader.readShort();
    for (let i: number = 0; i < countShortcuts; i++) {
      this.shortcuts.push(reader.readShort());
    }
  }
}

export class Achievement extends DofusType {
  public static id: number = 8621;
  public id: number = 8621;

  public startedObjectives: AchievementStartedObjective[] | undefined;
  public id_: number | undefined = 0;
  public finishedObjective: AchievementObjective[] | undefined;

  public constructor(
    startedObjectives?: AchievementStartedObjective[] | undefined,
    id_?: number | undefined,
    finishedObjective?: AchievementObjective[] | undefined,
  ) {
    super();
    this.startedObjectives = startedObjectives;
    this.id_ = id_;
    this.finishedObjective = finishedObjective;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.startedObjectives!.length);
    this.startedObjectives!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.id_!);
    writer.writeShort(this.finishedObjective!.length);
    this.finishedObjective!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.startedObjectives = [];
    const countStartedObjectives = reader.readShort();
    for (let i: number = 0; i < countStartedObjectives; i++) {
      const type: AchievementStartedObjective =
        new AchievementStartedObjective();
      type.deserialize(reader);
      this.startedObjectives.push(type);
    }
    this.id_ = reader.readVarShort();
    this.finishedObjective = [];
    const countFinishedObjective = reader.readShort();
    for (let i: number = 0; i < countFinishedObjective; i++) {
      const type: AchievementObjective = new AchievementObjective();
      type.deserialize(reader);
      this.finishedObjective.push(type);
    }
  }
}

export class ObjectItemNotInContainer extends Item {
  public static id: number = 8362;
  public id: number = 8362;

  public objectUID: number | undefined = 0;
  public objectGID: number | undefined = 0;
  public quantity: number | undefined = 0;
  public effects: ObjectEffect[] | undefined;

  public constructor(
    objectUID?: number | undefined,
    objectGID?: number | undefined,
    quantity?: number | undefined,
    effects?: ObjectEffect[] | undefined,
  ) {
    super();
    this.objectUID = objectUID;
    this.objectGID = objectGID;
    this.quantity = quantity;
    this.effects = effects;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.objectUID!);
    writer.writeVarShort(this.objectGID!);
    writer.writeVarInt(this.quantity!);
    writer.writeShort(this.effects!.length);
    this.effects!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectUID = reader.readVarInt();
    this.objectGID = reader.readVarShort();
    this.quantity = reader.readVarInt();
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i: number = 0; i < countEffects; i++) {
      const effectsTypeId: number = reader.readShort();
      const type: ObjectEffect = new types[effectsTypeId]() as ObjectEffect;
      type.deserialize(reader);
      this.effects.push(type);
    }
  }
}

export class TaxCollectorFightersInformation extends DofusType {
  public static id: number = 9650;
  public id: number = 9650;

  public enemyCharactersInformations:
    | CharacterMinimalPlusLookInformations[]
    | undefined;
  public collectorId: number | undefined = 0;
  public allyCharactersInformations:
    | CharacterMinimalPlusLookInformations[]
    | undefined;

  public constructor(
    enemyCharactersInformations?:
      | CharacterMinimalPlusLookInformations[]
      | undefined,
    collectorId?: number | undefined,
    allyCharactersInformations?:
      | CharacterMinimalPlusLookInformations[]
      | undefined,
  ) {
    super();
    this.enemyCharactersInformations = enemyCharactersInformations;
    this.collectorId = collectorId;
    this.allyCharactersInformations = allyCharactersInformations;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.enemyCharactersInformations!.length);
    this.enemyCharactersInformations!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeDouble(this.collectorId!);
    writer.writeShort(this.allyCharactersInformations!.length);
    this.allyCharactersInformations!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enemyCharactersInformations = [];
    const countEnemyCharactersInformations = reader.readShort();
    for (let i: number = 0; i < countEnemyCharactersInformations; i++) {
      const enemyCharactersInformationsTypeId: number = reader.readShort();
      const type: CharacterMinimalPlusLookInformations = new types[
        enemyCharactersInformationsTypeId
      ]() as CharacterMinimalPlusLookInformations;
      type.deserialize(reader);
      this.enemyCharactersInformations.push(type);
    }
    this.collectorId = reader.readDouble();
    this.allyCharactersInformations = [];
    const countAllyCharactersInformations = reader.readShort();
    for (let i: number = 0; i < countAllyCharactersInformations; i++) {
      const allyCharactersInformationsTypeId: number = reader.readShort();
      const type: CharacterMinimalPlusLookInformations = new types[
        allyCharactersInformationsTypeId
      ]() as CharacterMinimalPlusLookInformations;
      type.deserialize(reader);
      this.allyCharactersInformations.push(type);
    }
  }
}

export class TeleportDestination extends DofusType {
  public static id: number = 9066;
  public id: number = 9066;

  public cost: number | undefined = 0;
  public level: number | undefined = 0;
  public subAreaId: number | undefined = 0;
  public type: number | undefined = 0;
  public mapId: number | undefined = 0;

  public constructor(
    cost?: number | undefined,
    level?: number | undefined,
    subAreaId?: number | undefined,
    type?: number | undefined,
    mapId?: number | undefined,
  ) {
    super();
    this.cost = cost;
    this.level = level;
    this.subAreaId = subAreaId;
    this.type = type;
    this.mapId = mapId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.cost!);
    writer.writeVarShort(this.level!);
    writer.writeVarShort(this.subAreaId!);
    writer.writeByte(this.type!);
    writer.writeDouble(this.mapId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cost = reader.readVarShort();
    this.level = reader.readVarShort();
    this.subAreaId = reader.readVarShort();
    this.type = reader.readByte();
    this.mapId = reader.readDouble();
  }
}

export class MonsterBoosts extends DofusType {
  public static id: number = 7719;
  public id: number = 7719;

  public dropBoost: number | undefined = 0;
  public id_: number | undefined = 0;
  public xpBoost: number | undefined = 0;

  public constructor(
    dropBoost?: number | undefined,
    id_?: number | undefined,
    xpBoost?: number | undefined,
  ) {
    super();
    this.dropBoost = dropBoost;
    this.id_ = id_;
    this.xpBoost = xpBoost;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.dropBoost!);
    writer.writeVarInt(this.id_!);
    writer.writeVarShort(this.xpBoost!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dropBoost = reader.readVarShort();
    this.id_ = reader.readVarInt();
    this.xpBoost = reader.readVarShort();
  }
}

export class DecraftedItemStackInfo extends DofusType {
  public static id: number = 8215;
  public id: number = 8215;

  public bonusMin: number | undefined = 0;
  public runesQty: number[] | undefined;
  public objectUID: number | undefined = 0;
  public bonusMax: number | undefined = 0;
  public runesId: number[] | undefined;

  public constructor(
    bonusMin?: number | undefined,
    runesQty?: number[] | undefined,
    objectUID?: number | undefined,
    bonusMax?: number | undefined,
    runesId?: number[] | undefined,
  ) {
    super();
    this.bonusMin = bonusMin;
    this.runesQty = runesQty;
    this.objectUID = objectUID;
    this.bonusMax = bonusMax;
    this.runesId = runesId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeFloat(this.bonusMin!);
    writer.writeShort(this.runesQty!.length);
    this.runesQty!.forEach((current: number) => writer.writeVarInt(current));
    writer.writeVarInt(this.objectUID!);
    writer.writeFloat(this.bonusMax!);
    writer.writeShort(this.runesId!.length);
    this.runesId!.forEach((current: number) => writer.writeVarShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.bonusMin = reader.readFloat();
    this.runesQty = [];
    const countRunesQty = reader.readShort();
    for (let i: number = 0; i < countRunesQty; i++) {
      this.runesQty.push(reader.readVarInt());
    }
    this.objectUID = reader.readVarInt();
    this.bonusMax = reader.readFloat();
    this.runesId = [];
    const countRunesId = reader.readShort();
    for (let i: number = 0; i < countRunesId; i++) {
      this.runesId.push(reader.readVarShort());
    }
  }
}

export class TaxCollectorBasicInformations extends DofusType {
  public static id: number = 1488;
  public id: number = 1488;

  public subAreaId: number | undefined = 0;
  public lastNameId: number | undefined = 0;
  public worldY: number | undefined = 0;
  public firstNameId: number | undefined = 0;
  public mapId: number | undefined = 0;
  public worldX: number | undefined = 0;

  public constructor(
    subAreaId?: number | undefined,
    lastNameId?: number | undefined,
    worldY?: number | undefined,
    firstNameId?: number | undefined,
    mapId?: number | undefined,
    worldX?: number | undefined,
  ) {
    super();
    this.subAreaId = subAreaId;
    this.lastNameId = lastNameId;
    this.worldY = worldY;
    this.firstNameId = firstNameId;
    this.mapId = mapId;
    this.worldX = worldX;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.subAreaId!);
    writer.writeVarShort(this.lastNameId!);
    writer.writeShort(this.worldY!);
    writer.writeVarShort(this.firstNameId!);
    writer.writeDouble(this.mapId!);
    writer.writeShort(this.worldX!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.subAreaId = reader.readVarShort();
    this.lastNameId = reader.readVarShort();
    this.worldY = reader.readShort();
    this.firstNameId = reader.readVarShort();
    this.mapId = reader.readDouble();
    this.worldX = reader.readShort();
  }
}

export class PartyMemberGeoPosition extends DofusType {
  public static id: number = 6723;
  public id: number = 6723;

  public mapId: number | undefined = 0;
  public worldY: number | undefined = 0;
  public subAreaId: number | undefined = 0;
  public memberId: number | undefined = 0;
  public worldX: number | undefined = 0;

  public constructor(
    mapId?: number | undefined,
    worldY?: number | undefined,
    subAreaId?: number | undefined,
    memberId?: number | undefined,
    worldX?: number | undefined,
  ) {
    super();
    this.mapId = mapId;
    this.worldY = worldY;
    this.subAreaId = subAreaId;
    this.memberId = memberId;
    this.worldX = worldX;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.mapId!);
    writer.writeShort(this.worldY!);
    writer.writeVarShort(this.subAreaId!);
    writer.writeInt(this.memberId!);
    writer.writeShort(this.worldX!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapId = reader.readDouble();
    this.worldY = reader.readShort();
    this.subAreaId = reader.readVarShort();
    this.memberId = reader.readInt();
    this.worldX = reader.readShort();
  }
}

export class ObjectItemToSellInNpcShop extends ObjectItemMinimalInformation {
  public static id: number = 6097;
  public id: number = 6097;

  public buyCriterion: string | undefined;
  public objectPrice: number | undefined = 0;

  public constructor(
    objectGID?: number | undefined,
    effects?: ObjectEffect[] | undefined,
    buyCriterion?: string | undefined,
    objectPrice?: number | undefined,
  ) {
    super(objectGID, effects);
    this.buyCriterion = buyCriterion;
    this.objectPrice = objectPrice;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.buyCriterion!);
    writer.writeVarLong(this.objectPrice!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.buyCriterion = reader.readUTF();
    this.objectPrice = reader.readVarLong();
  }
}

export class JobCrafterDirectoryEntryPlayerInfo extends DofusType {
  public static id: number = 4905;
  public id: number = 4905;

  public status: PlayerStatus | undefined;
  public playerId: number | undefined = 0;
  public isInWorkshop: boolean | undefined = false;
  public canCraftLegendary: boolean | undefined = false;
  public subAreaId: number | undefined = 0;
  public sex: boolean | undefined = false;
  public alignmentSide: number | undefined = 0;
  public playerName: string | undefined;
  public worldX: number | undefined = 0;
  public worldY: number | undefined = 0;
  public breed: number | undefined = 0;
  public mapId: number | undefined = 0;

  public constructor(
    status?: PlayerStatus | undefined,
    playerId?: number | undefined,
    isInWorkshop?: boolean | undefined,
    canCraftLegendary?: boolean | undefined,
    subAreaId?: number | undefined,
    sex?: boolean | undefined,
    alignmentSide?: number | undefined,
    playerName?: string | undefined,
    worldX?: number | undefined,
    worldY?: number | undefined,
    breed?: number | undefined,
    mapId?: number | undefined,
  ) {
    super();
    this.status = status;
    this.playerId = playerId;
    this.isInWorkshop = isInWorkshop;
    this.canCraftLegendary = canCraftLegendary;
    this.subAreaId = subAreaId;
    this.sex = sex;
    this.alignmentSide = alignmentSide;
    this.playerName = playerName;
    this.worldX = worldX;
    this.worldY = worldY;
    this.breed = breed;
    this.mapId = mapId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.status!.id);
    this.status!.serialize(writer);
    writer.writeVarLong(this.playerId!);
    writer.writeBoolean(this.isInWorkshop!);
    writer.writeBoolean(this.canCraftLegendary!);
    writer.writeVarShort(this.subAreaId!);
    writer.writeBoolean(this.sex!);
    writer.writeByte(this.alignmentSide!);
    writer.writeUTF(this.playerName!);
    writer.writeShort(this.worldX!);
    writer.writeShort(this.worldY!);
    writer.writeByte(this.breed!);
    writer.writeDouble(this.mapId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    const statusTypeId: number = reader.readShort();
    this.status = new types[statusTypeId]() as PlayerStatus;
    this.status!.deserialize(reader);
    this.playerId = reader.readVarLong();
    this.isInWorkshop = reader.readBoolean();
    this.canCraftLegendary = reader.readBoolean();
    this.subAreaId = reader.readVarShort();
    this.sex = reader.readBoolean();
    this.alignmentSide = reader.readByte();
    this.playerName = reader.readUTF();
    this.worldX = reader.readShort();
    this.worldY = reader.readShort();
    this.breed = reader.readByte();
    this.mapId = reader.readDouble();
  }
}

export class JobCrafterDirectoryEntryJobInfo extends DofusType {
  public static id: number = 5220;
  public id: number = 5220;

  public minLevel: number | undefined = 0;
  public free: boolean | undefined = false;
  public jobId: number | undefined = 0;
  public jobLevel: number | undefined = 0;

  public constructor(
    minLevel?: number | undefined,
    free?: boolean | undefined,
    jobId?: number | undefined,
    jobLevel?: number | undefined,
  ) {
    super();
    this.minLevel = minLevel;
    this.free = free;
    this.jobId = jobId;
    this.jobLevel = jobLevel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.minLevel!);
    writer.writeBoolean(this.free!);
    writer.writeByte(this.jobId!);
    writer.writeByte(this.jobLevel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.minLevel = reader.readByte();
    this.free = reader.readBoolean();
    this.jobId = reader.readByte();
    this.jobLevel = reader.readByte();
  }
}

export class JobCrafterDirectoryListEntry extends DofusType {
  public static id: number = 3897;
  public id: number = 3897;

  public playerInfo: JobCrafterDirectoryEntryPlayerInfo | undefined;
  public jobInfo: JobCrafterDirectoryEntryJobInfo | undefined;

  public constructor(
    playerInfo?: JobCrafterDirectoryEntryPlayerInfo | undefined,
    jobInfo?: JobCrafterDirectoryEntryJobInfo | undefined,
  ) {
    super();
    this.playerInfo = playerInfo;
    this.jobInfo = jobInfo;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.playerInfo!.serialize(writer);
    this.jobInfo!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
    this.playerInfo!.deserialize(reader);
    this.jobInfo = new JobCrafterDirectoryEntryJobInfo();
    this.jobInfo!.deserialize(reader);
  }
}

export class JobCrafterDirectorySettings extends DofusType {
  public static id: number = 6079;
  public id: number = 6079;

  public free: boolean | undefined = false;
  public jobId: number | undefined = 0;
  public minLevel: number | undefined = 0;

  public constructor(
    free?: boolean | undefined,
    jobId?: number | undefined,
    minLevel?: number | undefined,
  ) {
    super();
    this.free = free;
    this.jobId = jobId;
    this.minLevel = minLevel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.free!);
    writer.writeByte(this.jobId!);
    writer.writeByte(this.minLevel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.free = reader.readBoolean();
    this.jobId = reader.readByte();
    this.minLevel = reader.readByte();
  }
}

export class LeagueFriendInformations extends AbstractContactInformations {
  public static id: number = 107;
  public id: number = 107;

  public totalLeaguePoints: number | undefined = 0;
  public leagueId: number | undefined = 0;
  public ladderPosition: number | undefined = 0;
  public playerName: string | undefined;
  public breed: number | undefined = 0;
  public sex: boolean | undefined = false;
  public playerId: number | undefined = 0;
  public level: number | undefined = 0;

  public constructor(
    accountId?: number | undefined,
    accountTag?: AccountTagInformation | undefined,
    totalLeaguePoints?: number | undefined,
    leagueId?: number | undefined,
    ladderPosition?: number | undefined,
    playerName?: string | undefined,
    breed?: number | undefined,
    sex?: boolean | undefined,
    playerId?: number | undefined,
    level?: number | undefined,
  ) {
    super(accountId, accountTag);
    this.totalLeaguePoints = totalLeaguePoints;
    this.leagueId = leagueId;
    this.ladderPosition = ladderPosition;
    this.playerName = playerName;
    this.breed = breed;
    this.sex = sex;
    this.playerId = playerId;
    this.level = level;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.totalLeaguePoints!);
    writer.writeVarShort(this.leagueId!);
    writer.writeInt(this.ladderPosition!);
    writer.writeUTF(this.playerName!);
    writer.writeByte(this.breed!);
    writer.writeBoolean(this.sex!);
    writer.writeVarLong(this.playerId!);
    writer.writeVarShort(this.level!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.totalLeaguePoints = reader.readVarShort();
    this.leagueId = reader.readVarShort();
    this.ladderPosition = reader.readInt();
    this.playerName = reader.readUTF();
    this.breed = reader.readByte();
    this.sex = reader.readBoolean();
    this.playerId = reader.readVarLong();
    this.level = reader.readVarShort();
  }
}

export class ArenaRankInfos extends DofusType {
  public static id: number = 750;
  public id: number = 750;

  public leagueRanking: ArenaLeagueRanking | undefined;
  public ranking: ArenaRanking | undefined;
  public victoryCount: number | undefined = 0;
  public fightcount: number | undefined = 0;
  public numFightNeededForLadder: number | undefined = 0;

  public constructor(
    leagueRanking?: ArenaLeagueRanking | undefined,
    ranking?: ArenaRanking | undefined,
    victoryCount?: number | undefined,
    fightcount?: number | undefined,
    numFightNeededForLadder?: number | undefined,
  ) {
    super();
    this.leagueRanking = leagueRanking;
    this.ranking = ranking;
    this.victoryCount = victoryCount;
    this.fightcount = fightcount;
    this.numFightNeededForLadder = numFightNeededForLadder;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.leagueRanking!.serialize(writer);
    this.ranking!.serialize(writer);
    writer.writeVarShort(this.victoryCount!);
    writer.writeVarShort(this.fightcount!);
    writer.writeShort(this.numFightNeededForLadder!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.leagueRanking = new ArenaLeagueRanking();
    this.leagueRanking!.deserialize(reader);
    this.ranking = new ArenaRanking();
    this.ranking!.deserialize(reader);
    this.victoryCount = reader.readVarShort();
    this.fightcount = reader.readVarShort();
    this.numFightNeededForLadder = reader.readShort();
  }
}

export class JobExperience extends DofusType {
  public static id: number = 1579;
  public id: number = 1579;

  public jobXpNextLevelFloor: number | undefined = 0;
  public jobId: number | undefined = 0;
  public jobXpLevelFloor: number | undefined = 0;
  public jobXP: number | undefined = 0;
  public jobLevel: number | undefined = 0;

  public constructor(
    jobXpNextLevelFloor?: number | undefined,
    jobId?: number | undefined,
    jobXpLevelFloor?: number | undefined,
    jobXP?: number | undefined,
    jobLevel?: number | undefined,
  ) {
    super();
    this.jobXpNextLevelFloor = jobXpNextLevelFloor;
    this.jobId = jobId;
    this.jobXpLevelFloor = jobXpLevelFloor;
    this.jobXP = jobXP;
    this.jobLevel = jobLevel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.jobXpNextLevelFloor!);
    writer.writeByte(this.jobId!);
    writer.writeVarLong(this.jobXpLevelFloor!);
    writer.writeVarLong(this.jobXP!);
    writer.writeByte(this.jobLevel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.jobXpNextLevelFloor = reader.readVarLong();
    this.jobId = reader.readByte();
    this.jobXpLevelFloor = reader.readVarLong();
    this.jobXP = reader.readVarLong();
    this.jobLevel = reader.readByte();
  }
}

export class AllianceVersatileInformations extends DofusType {
  public static id: number = 1207;
  public id: number = 1207;

  public nbSubarea: number | undefined = 0;
  public nbMembers: number | undefined = 0;
  public allianceId: number | undefined = 0;
  public nbGuilds: number | undefined = 0;

  public constructor(
    nbSubarea?: number | undefined,
    nbMembers?: number | undefined,
    allianceId?: number | undefined,
    nbGuilds?: number | undefined,
  ) {
    super();
    this.nbSubarea = nbSubarea;
    this.nbMembers = nbMembers;
    this.allianceId = allianceId;
    this.nbGuilds = nbGuilds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.nbSubarea!);
    writer.writeVarShort(this.nbMembers!);
    writer.writeVarInt(this.allianceId!);
    writer.writeVarShort(this.nbGuilds!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.nbSubarea = reader.readVarShort();
    this.nbMembers = reader.readVarShort();
    this.allianceId = reader.readVarInt();
    this.nbGuilds = reader.readVarShort();
  }
}

export class PrismFightersInformation extends DofusType {
  public static id: number = 8909;
  public id: number = 8909;

  public allyCharactersInformations:
    | CharacterMinimalPlusLookInformations[]
    | undefined;
  public enemyCharactersInformations:
    | CharacterMinimalPlusLookInformations[]
    | undefined;
  public waitingForHelpInfo: ProtectedEntityWaitingForHelpInfo | undefined;
  public subAreaId: number | undefined = 0;

  public constructor(
    allyCharactersInformations?:
      | CharacterMinimalPlusLookInformations[]
      | undefined,
    enemyCharactersInformations?:
      | CharacterMinimalPlusLookInformations[]
      | undefined,
    waitingForHelpInfo?: ProtectedEntityWaitingForHelpInfo | undefined,
    subAreaId?: number | undefined,
  ) {
    super();
    this.allyCharactersInformations = allyCharactersInformations;
    this.enemyCharactersInformations = enemyCharactersInformations;
    this.waitingForHelpInfo = waitingForHelpInfo;
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.allyCharactersInformations!.length);
    this.allyCharactersInformations!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.enemyCharactersInformations!.length);
    this.enemyCharactersInformations!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    this.waitingForHelpInfo!.serialize(writer);
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allyCharactersInformations = [];
    const countAllyCharactersInformations = reader.readShort();
    for (let i: number = 0; i < countAllyCharactersInformations; i++) {
      const allyCharactersInformationsTypeId: number = reader.readShort();
      const type: CharacterMinimalPlusLookInformations = new types[
        allyCharactersInformationsTypeId
      ]() as CharacterMinimalPlusLookInformations;
      type.deserialize(reader);
      this.allyCharactersInformations.push(type);
    }
    this.enemyCharactersInformations = [];
    const countEnemyCharactersInformations = reader.readShort();
    for (let i: number = 0; i < countEnemyCharactersInformations; i++) {
      const enemyCharactersInformationsTypeId: number = reader.readShort();
      const type: CharacterMinimalPlusLookInformations = new types[
        enemyCharactersInformationsTypeId
      ]() as CharacterMinimalPlusLookInformations;
      type.deserialize(reader);
      this.enemyCharactersInformations.push(type);
    }
    this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
    this.waitingForHelpInfo!.deserialize(reader);
    this.subAreaId = reader.readVarShort();
  }
}

export class HavenBagFurnitureInformation extends DofusType {
  public static id: number = 3647;
  public id: number = 3647;

  public cellId: number | undefined = 0;
  public orientation: number | undefined = 0;
  public funitureId: number | undefined = 0;

  public constructor(
    cellId?: number | undefined,
    orientation?: number | undefined,
    funitureId?: number | undefined,
  ) {
    super();
    this.cellId = cellId;
    this.orientation = orientation;
    this.funitureId = funitureId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.cellId!);
    writer.writeByte(this.orientation!);
    writer.writeInt(this.funitureId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readVarShort();
    this.orientation = reader.readByte();
    this.funitureId = reader.readInt();
  }
}

export class BufferInformation extends DofusType {
  public static id: number = 3684;
  public id: number = 3684;

  public amount: number | undefined = 0;
  public id_: number | undefined = 0;

  public constructor(amount?: number | undefined, id_?: number | undefined) {
    super();
    this.amount = amount;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.amount!);
    writer.writeVarLong(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.amount = reader.readVarLong();
    this.id_ = reader.readVarLong();
  }
}

export class AnomalySubareaInformation extends DofusType {
  public static id: number = 8338;
  public id: number = 8338;

  public anomalyClosingTime: number | undefined = 0;
  public hasAnomaly: boolean | undefined = false;
  public subAreaId: number | undefined = 0;
  public rewardRate: number | undefined = 0;

  public constructor(
    anomalyClosingTime?: number | undefined,
    hasAnomaly?: boolean | undefined,
    subAreaId?: number | undefined,
    rewardRate?: number | undefined,
  ) {
    super();
    this.anomalyClosingTime = anomalyClosingTime;
    this.hasAnomaly = hasAnomaly;
    this.subAreaId = subAreaId;
    this.rewardRate = rewardRate;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.anomalyClosingTime!);
    writer.writeBoolean(this.hasAnomaly!);
    writer.writeVarShort(this.subAreaId!);
    writer.writeVarShort(this.rewardRate!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.anomalyClosingTime = reader.readVarLong();
    this.hasAnomaly = reader.readBoolean();
    this.subAreaId = reader.readVarShort();
    this.rewardRate = reader.readVarShort();
  }
}

export class PaddockInformationsForSell extends DofusType {
  public static id: number = 1249;
  public id: number = 1249;

  public nbObject: number | undefined = 0;
  public worldX: number | undefined = 0;
  public worldY: number | undefined = 0;
  public price: number | undefined = 0;
  public guildOwner: string | undefined;
  public nbMount: number | undefined = 0;
  public subAreaId: number | undefined = 0;

  public constructor(
    nbObject?: number | undefined,
    worldX?: number | undefined,
    worldY?: number | undefined,
    price?: number | undefined,
    guildOwner?: string | undefined,
    nbMount?: number | undefined,
    subAreaId?: number | undefined,
  ) {
    super();
    this.nbObject = nbObject;
    this.worldX = worldX;
    this.worldY = worldY;
    this.price = price;
    this.guildOwner = guildOwner;
    this.nbMount = nbMount;
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.nbObject!);
    writer.writeShort(this.worldX!);
    writer.writeShort(this.worldY!);
    writer.writeVarLong(this.price!);
    writer.writeUTF(this.guildOwner!);
    writer.writeByte(this.nbMount!);
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.nbObject = reader.readByte();
    this.worldX = reader.readShort();
    this.worldY = reader.readShort();
    this.price = reader.readVarLong();
    this.guildOwner = reader.readUTF();
    this.nbMount = reader.readByte();
    this.subAreaId = reader.readVarShort();
  }
}

export class CharacterMinimalGuildPublicInformations extends CharacterMinimalInformations {
  public static id: number = 393;
  public id: number = 393;

  public rank: number | undefined = 0;

  public constructor(
    id_?: number | undefined,
    name?: string | undefined,
    level?: number | undefined,
    rank?: number | undefined,
  ) {
    super(id_, name, level);
    this.rank = rank;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.rank!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.rank = reader.readVarInt();
  }
}

export class EntityInformation extends DofusType {
  public static id: number = 6041;
  public id: number = 6041;

  public status: boolean | undefined = false;
  public id_: number | undefined = 0;
  public experience: number | undefined = 0;

  public constructor(
    status?: boolean | undefined,
    id_?: number | undefined,
    experience?: number | undefined,
  ) {
    super();
    this.status = status;
    this.id_ = id_;
    this.experience = experience;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.status!);
    writer.writeVarShort(this.id_!);
    writer.writeVarInt(this.experience!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.status = reader.readBoolean();
    this.id_ = reader.readVarShort();
    this.experience = reader.readVarInt();
  }
}

export class AlignmentWarEffortInformation extends DofusType {
  public static id: number = 3356;
  public id: number = 3356;

  public alignmentWarEffort: number | undefined = 0;
  public alignmentSide: number | undefined = 0;

  public constructor(
    alignmentWarEffort?: number | undefined,
    alignmentSide?: number | undefined,
  ) {
    super();
    this.alignmentWarEffort = alignmentWarEffort;
    this.alignmentSide = alignmentSide;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.alignmentWarEffort!);
    writer.writeByte(this.alignmentSide!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.alignmentWarEffort = reader.readVarLong();
    this.alignmentSide = reader.readByte();
  }
}

export class RecycledItem extends DofusType {
  public static id: number = 161;
  public id: number = 161;

  public qty: number | undefined = 0;
  public id_: number | undefined = 0;

  public constructor(qty?: number | undefined, id_?: number | undefined) {
    super();
    this.qty = qty;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUInt(this.qty!);
    writer.writeVarShort(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.qty = reader.readUInt();
    this.id_ = reader.readVarShort();
  }
}

export class HouseInformationsForSell extends DofusType {
  public static id: number = 1011;
  public id: number = 1011;

  public skillListIds: number[] | undefined;
  public ownerTag: AccountTagInformation | undefined;
  public price: number | undefined = 0;
  public isLocked: boolean | undefined = false;
  public modelId: number | undefined = 0;
  public nbRoom: number | undefined = 0;
  public secondHand: boolean | undefined = false;
  public worldX: number | undefined = 0;
  public ownerCharacterName: string | undefined;
  public worldY: number | undefined = 0;
  public hasOwner: boolean | undefined = false;
  public instanceId: number | undefined = 0;
  public nbChest: number | undefined = 0;
  public subAreaId: number | undefined = 0;

  public constructor(
    skillListIds?: number[] | undefined,
    ownerTag?: AccountTagInformation | undefined,
    price?: number | undefined,
    isLocked?: boolean | undefined,
    modelId?: number | undefined,
    nbRoom?: number | undefined,
    secondHand?: boolean | undefined,
    worldX?: number | undefined,
    ownerCharacterName?: string | undefined,
    worldY?: number | undefined,
    hasOwner?: boolean | undefined,
    instanceId?: number | undefined,
    nbChest?: number | undefined,
    subAreaId?: number | undefined,
  ) {
    super();
    this.skillListIds = skillListIds;
    this.ownerTag = ownerTag;
    this.price = price;
    this.isLocked = isLocked;
    this.modelId = modelId;
    this.nbRoom = nbRoom;
    this.secondHand = secondHand;
    this.worldX = worldX;
    this.ownerCharacterName = ownerCharacterName;
    this.worldY = worldY;
    this.hasOwner = hasOwner;
    this.instanceId = instanceId;
    this.nbChest = nbChest;
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.skillListIds!.length);
    this.skillListIds!.forEach((current: number) => writer.writeInt(current));
    this.ownerTag!.serialize(writer);
    writer.writeVarLong(this.price!);
    writer.writeBoolean(this.isLocked!);
    writer.writeVarInt(this.modelId!);
    writer.writeByte(this.nbRoom!);
    writer.writeBoolean(this.secondHand!);
    writer.writeShort(this.worldX!);
    writer.writeUTF(this.ownerCharacterName!);
    writer.writeShort(this.worldY!);
    writer.writeBoolean(this.hasOwner!);
    writer.writeInt(this.instanceId!);
    writer.writeByte(this.nbChest!);
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.skillListIds = [];
    const countSkillListIds = reader.readShort();
    for (let i: number = 0; i < countSkillListIds; i++) {
      this.skillListIds.push(reader.readInt());
    }
    this.ownerTag = new AccountTagInformation();
    this.ownerTag!.deserialize(reader);
    this.price = reader.readVarLong();
    this.isLocked = reader.readBoolean();
    this.modelId = reader.readVarInt();
    this.nbRoom = reader.readByte();
    this.secondHand = reader.readBoolean();
    this.worldX = reader.readShort();
    this.ownerCharacterName = reader.readUTF();
    this.worldY = reader.readShort();
    this.hasOwner = reader.readBoolean();
    this.instanceId = reader.readInt();
    this.nbChest = reader.readByte();
    this.subAreaId = reader.readVarShort();
  }
}

export class JobBookSubscription extends DofusType {
  public static id: number = 6658;
  public id: number = 6658;

  public subscribed: boolean | undefined = false;
  public jobId: number | undefined = 0;

  public constructor(
    subscribed?: boolean | undefined,
    jobId?: number | undefined,
  ) {
    super();
    this.subscribed = subscribed;
    this.jobId = jobId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.subscribed!);
    writer.writeByte(this.jobId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.subscribed = reader.readBoolean();
    this.jobId = reader.readByte();
  }
}

export class GoldItem extends Item {
  public static id: number = 396;
  public id: number = 396;

  public sum: number | undefined = 0;

  public constructor(sum?: number | undefined) {
    super();
    this.sum = sum;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.sum!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.sum = reader.readVarLong();
  }
}

export class GuildRecruitmentInformation extends DofusType {
  public static id: number = 4584;
  public id: number = 4584;

  public lastEditDate: number | undefined = 0;
  public lastEditPlayerName: string | undefined;
  public recruitmentText: string | undefined;
  public guildId: number | undefined = 0;
  public recruitmentType: number | undefined = 0;
  public recruitmentTitle: string | undefined;
  public selectedCriterion: number[] | undefined;
  public minLevel: number | undefined = 0;
  public minSuccess: number | undefined = 0;
  public selectedLanguages: number[] | undefined;
  public minLevelFacultative: boolean | undefined = false;
  public minSuccessFacultative: boolean | undefined = false;
  public invalidatedByModeration: boolean | undefined = false;
  public recruitmentAutoLocked: boolean | undefined = false;

  public constructor(
    lastEditDate?: number | undefined,
    lastEditPlayerName?: string | undefined,
    recruitmentText?: string | undefined,
    guildId?: number | undefined,
    recruitmentType?: number | undefined,
    recruitmentTitle?: string | undefined,
    selectedCriterion?: number[] | undefined,
    minLevel?: number | undefined,
    minSuccess?: number | undefined,
    selectedLanguages?: number[] | undefined,
    minLevelFacultative?: boolean | undefined,
    minSuccessFacultative?: boolean | undefined,
    invalidatedByModeration?: boolean | undefined,
    recruitmentAutoLocked?: boolean | undefined,
  ) {
    super();
    this.lastEditDate = lastEditDate;
    this.lastEditPlayerName = lastEditPlayerName;
    this.recruitmentText = recruitmentText;
    this.guildId = guildId;
    this.recruitmentType = recruitmentType;
    this.recruitmentTitle = recruitmentTitle;
    this.selectedCriterion = selectedCriterion;
    this.minLevel = minLevel;
    this.minSuccess = minSuccess;
    this.selectedLanguages = selectedLanguages;
    this.minLevelFacultative = minLevelFacultative;
    this.minSuccessFacultative = minSuccessFacultative;
    this.invalidatedByModeration = invalidatedByModeration;
    this.recruitmentAutoLocked = recruitmentAutoLocked;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.lastEditDate!);
    writer.writeUTF(this.lastEditPlayerName!);
    writer.writeUTF(this.recruitmentText!);
    writer.writeVarInt(this.guildId!);
    writer.writeByte(this.recruitmentType!);
    writer.writeUTF(this.recruitmentTitle!);
    writer.writeShort(this.selectedCriterion!.length);
    this.selectedCriterion!.forEach((current: number) =>
      writer.writeVarInt(current),
    );
    writer.writeShort(this.minLevel!);
    writer.writeVarInt(this.minSuccess!);
    writer.writeShort(this.selectedLanguages!.length);
    this.selectedLanguages!.forEach((current: number) =>
      writer.writeVarInt(current),
    );
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.minLevelFacultative!);
    box0 = setFlag(box0, 1, this.minSuccessFacultative!);
    box0 = setFlag(box0, 2, this.invalidatedByModeration!);
    box0 = setFlag(box0, 3, this.recruitmentAutoLocked!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.lastEditDate = reader.readDouble();
    this.lastEditPlayerName = reader.readUTF();
    this.recruitmentText = reader.readUTF();
    this.guildId = reader.readVarInt();
    this.recruitmentType = reader.readByte();
    this.recruitmentTitle = reader.readUTF();
    this.selectedCriterion = [];
    const countSelectedCriterion = reader.readShort();
    for (let i: number = 0; i < countSelectedCriterion; i++) {
      this.selectedCriterion.push(reader.readVarInt());
    }
    this.minLevel = reader.readShort();
    this.minSuccess = reader.readVarInt();
    this.selectedLanguages = [];
    const countSelectedLanguages = reader.readShort();
    for (let i: number = 0; i < countSelectedLanguages; i++) {
      this.selectedLanguages.push(reader.readVarInt());
    }
    const box0 = reader.readByte();
    this.minLevelFacultative = getFlag(box0, 0);
    this.minSuccessFacultative = getFlag(box0, 1);
    this.invalidatedByModeration = getFlag(box0, 2);
    this.recruitmentAutoLocked = getFlag(box0, 3);
  }
}

export class ObjectItemToSellInHumanVendorShop extends Item {
  public static id: number = 3057;
  public id: number = 3057;

  public publicPrice: number | undefined = 0;
  public effects: ObjectEffect[] | undefined;
  public quantity: number | undefined = 0;
  public objectGID: number | undefined = 0;
  public objectUID: number | undefined = 0;
  public objectPrice: number | undefined = 0;

  public constructor(
    publicPrice?: number | undefined,
    effects?: ObjectEffect[] | undefined,
    quantity?: number | undefined,
    objectGID?: number | undefined,
    objectUID?: number | undefined,
    objectPrice?: number | undefined,
  ) {
    super();
    this.publicPrice = publicPrice;
    this.effects = effects;
    this.quantity = quantity;
    this.objectGID = objectGID;
    this.objectUID = objectUID;
    this.objectPrice = objectPrice;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.publicPrice!);
    writer.writeShort(this.effects!.length);
    this.effects!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarInt(this.quantity!);
    writer.writeVarShort(this.objectGID!);
    writer.writeVarInt(this.objectUID!);
    writer.writeVarLong(this.objectPrice!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.publicPrice = reader.readVarLong();
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i: number = 0; i < countEffects; i++) {
      const effectsTypeId: number = reader.readShort();
      const type: ObjectEffect = new types[effectsTypeId]() as ObjectEffect;
      type.deserialize(reader);
      this.effects.push(type);
    }
    this.quantity = reader.readVarInt();
    this.objectGID = reader.readVarShort();
    this.objectUID = reader.readVarInt();
    this.objectPrice = reader.readVarLong();
  }
}

export class ObjectItemQuantity extends Item {
  public static id: number = 3674;
  public id: number = 3674;

  public quantity: number | undefined = 0;
  public objectUID: number | undefined = 0;

  public constructor(
    quantity?: number | undefined,
    objectUID?: number | undefined,
  ) {
    super();
    this.quantity = quantity;
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.quantity!);
    writer.writeVarInt(this.objectUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarInt();
    this.objectUID = reader.readVarInt();
  }
}

export class EntityMovementInformations extends DofusType {
  public static id: number = 7283;
  public id: number = 7283;

  public id_: number | undefined = 0;
  public steps: number[] | undefined;

  public constructor(id_?: number | undefined, steps?: number[] | undefined) {
    super();
    this.id_ = id_;
    this.steps = steps;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.id_!);
    writer.writeShort(this.steps!.length);
    this.steps!.forEach((current: number) => writer.writeByte(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readInt();
    this.steps = [];
    const countSteps = reader.readShort();
    for (let i: number = 0; i < countSteps; i++) {
      this.steps.push(reader.readByte());
    }
  }
}

export class BidExchangerObjectInfo extends DofusType {
  public static id: number = 461;
  public id: number = 461;

  public objectGID: number | undefined = 0;
  public prices: number[] | undefined;
  public objectType: number | undefined = 0;
  public objectUID: number | undefined = 0;
  public effects: ObjectEffect[] | undefined;

  public constructor(
    objectGID?: number | undefined,
    prices?: number[] | undefined,
    objectType?: number | undefined,
    objectUID?: number | undefined,
    effects?: ObjectEffect[] | undefined,
  ) {
    super();
    this.objectGID = objectGID;
    this.prices = prices;
    this.objectType = objectType;
    this.objectUID = objectUID;
    this.effects = effects;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.objectGID!);
    writer.writeShort(this.prices!.length);
    this.prices!.forEach((current: number) => writer.writeVarLong(current));
    writer.writeInt(this.objectType!);
    writer.writeVarInt(this.objectUID!);
    writer.writeShort(this.effects!.length);
    this.effects!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectGID = reader.readVarShort();
    this.prices = [];
    const countPrices = reader.readShort();
    for (let i: number = 0; i < countPrices; i++) {
      this.prices.push(reader.readVarLong());
    }
    this.objectType = reader.readInt();
    this.objectUID = reader.readVarInt();
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i: number = 0; i < countEffects; i++) {
      const effectsTypeId: number = reader.readShort();
      const type: ObjectEffect = new types[effectsTypeId]() as ObjectEffect;
      type.deserialize(reader);
      this.effects.push(type);
    }
  }
}

export class AtlasPointsInformations extends DofusType {
  public static id: number = 4410;
  public id: number = 4410;

  public type: number | undefined = 0;
  public coords: MapCoordinatesExtended[] | undefined;

  public constructor(
    type?: number | undefined,
    coords?: MapCoordinatesExtended[] | undefined,
  ) {
    super();
    this.type = type;
    this.coords = coords;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.type!);
    writer.writeShort(this.coords!.length);
    this.coords!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.type = reader.readByte();
    this.coords = [];
    const countCoords = reader.readShort();
    for (let i: number = 0; i < countCoords; i++) {
      const type: MapCoordinatesExtended = new MapCoordinatesExtended();
      type.deserialize(reader);
      this.coords.push(type);
    }
  }
}

export class AdditionalTaxCollectorInformations extends DofusType {
  public static id: number = 9432;
  public id: number = 9432;

  public date: number | undefined = 0;
  public collectorCallerName: string | undefined;

  public constructor(
    date?: number | undefined,
    collectorCallerName?: string | undefined,
  ) {
    super();
    this.date = date;
    this.collectorCallerName = collectorCallerName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.date!);
    writer.writeUTF(this.collectorCallerName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.date = reader.readInt();
    this.collectorCallerName = reader.readUTF();
  }
}

export class ProtectedEntityWaitingForHelpInfo extends DofusType {
  public static id: number = 2847;
  public id: number = 2847;

  public timeLeftBeforeFight: number | undefined = 0;
  public nbPositionForDefensors: number | undefined = 0;
  public waitTimeForPlacement: number | undefined = 0;

  public constructor(
    timeLeftBeforeFight?: number | undefined,
    nbPositionForDefensors?: number | undefined,
    waitTimeForPlacement?: number | undefined,
  ) {
    super();
    this.timeLeftBeforeFight = timeLeftBeforeFight;
    this.nbPositionForDefensors = nbPositionForDefensors;
    this.waitTimeForPlacement = waitTimeForPlacement;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.timeLeftBeforeFight!);
    writer.writeByte(this.nbPositionForDefensors!);
    writer.writeInt(this.waitTimeForPlacement!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.timeLeftBeforeFight = reader.readInt();
    this.nbPositionForDefensors = reader.readByte();
    this.waitTimeForPlacement = reader.readInt();
  }
}

export class MountInformationsForPaddock extends DofusType {
  public static id: number = 1513;
  public id: number = 1513;

  public ownerName: string | undefined;
  public modelId: number | undefined = 0;
  public name: string | undefined;

  public constructor(
    ownerName?: string | undefined,
    modelId?: number | undefined,
    name?: string | undefined,
  ) {
    super();
    this.ownerName = ownerName;
    this.modelId = modelId;
    this.name = name;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.ownerName!);
    writer.writeVarShort(this.modelId!);
    writer.writeUTF(this.name!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ownerName = reader.readUTF();
    this.modelId = reader.readVarShort();
    this.name = reader.readUTF();
  }
}

export class FightTeamLightInformations extends AbstractFightTeamInformations {
  public static id: number = 68;
  public id: number = 68;

  public meanLevel: number | undefined = 0;
  public teamMembersCount: number | undefined = 0;
  public hasFriend: boolean | undefined = false;
  public hasGuildMember: boolean | undefined = false;
  public hasAllianceMember: boolean | undefined = false;
  public hasGroupMember: boolean | undefined = false;
  public hasMyTaxCollector: boolean | undefined = false;

  public constructor(
    nbWaves?: number | undefined,
    teamId?: number | undefined,
    teamTypeId?: number | undefined,
    teamSide?: number | undefined,
    leaderId?: number | undefined,
    meanLevel?: number | undefined,
    teamMembersCount?: number | undefined,
    hasFriend?: boolean | undefined,
    hasGuildMember?: boolean | undefined,
    hasAllianceMember?: boolean | undefined,
    hasGroupMember?: boolean | undefined,
    hasMyTaxCollector?: boolean | undefined,
  ) {
    super(nbWaves, teamId, teamTypeId, teamSide, leaderId);
    this.meanLevel = meanLevel;
    this.teamMembersCount = teamMembersCount;
    this.hasFriend = hasFriend;
    this.hasGuildMember = hasGuildMember;
    this.hasAllianceMember = hasAllianceMember;
    this.hasGroupMember = hasGroupMember;
    this.hasMyTaxCollector = hasMyTaxCollector;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.meanLevel!);
    writer.writeByte(this.teamMembersCount!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.hasFriend!);
    box0 = setFlag(box0, 1, this.hasGuildMember!);
    box0 = setFlag(box0, 2, this.hasAllianceMember!);
    box0 = setFlag(box0, 3, this.hasGroupMember!);
    box0 = setFlag(box0, 4, this.hasMyTaxCollector!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.meanLevel = reader.readVarInt();
    this.teamMembersCount = reader.readByte();
    const box0 = reader.readByte();
    this.hasFriend = getFlag(box0, 0);
    this.hasGuildMember = getFlag(box0, 1);
    this.hasAllianceMember = getFlag(box0, 2);
    this.hasGroupMember = getFlag(box0, 3);
    this.hasMyTaxCollector = getFlag(box0, 4);
  }
}

export class ObjectEffects extends DofusType {
  public static id: number = 5613;
  public id: number = 5613;

  public effects: ObjectEffect[] | undefined;

  public constructor(effects?: ObjectEffect[] | undefined) {
    super();
    this.effects = effects;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.effects!.length);
    this.effects!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i: number = 0; i < countEffects; i++) {
      const effectsTypeId: number = reader.readShort();
      const type: ObjectEffect = new types[effectsTypeId]() as ObjectEffect;
      type.deserialize(reader);
      this.effects.push(type);
    }
  }
}

export class AchievementObjective extends DofusType {
  public static id: number = 8917;
  public id: number = 8917;

  public maxValue: number | undefined = 0;
  public id_: number | undefined = 0;

  public constructor(maxValue?: number | undefined, id_?: number | undefined) {
    super();
    this.maxValue = maxValue;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.maxValue!);
    writer.writeVarInt(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.maxValue = reader.readVarShort();
    this.id_ = reader.readVarInt();
  }
}

export class AchievementStartedObjective extends AchievementObjective {
  public static id: number = 5823;
  public id: number = 5823;

  public value: number | undefined = 0;

  public constructor(
    maxValue?: number | undefined,
    id_?: number | undefined,
    value?: number | undefined,
  ) {
    super(maxValue, id_);
    this.value = value;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.value!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = reader.readVarShort();
  }
}

export class ArenaRanking extends DofusType {
  public static id: number = 6311;
  public id: number = 6311;

  public bestRank: number | undefined = 0;
  public rank: number | undefined = 0;

  public constructor(bestRank?: number | undefined, rank?: number | undefined) {
    super();
    this.bestRank = bestRank;
    this.rank = rank;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.bestRank!);
    writer.writeVarShort(this.rank!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.bestRank = reader.readVarShort();
    this.rank = reader.readVarShort();
  }
}

export class ArenaLeagueRanking extends DofusType {
  public static id: number = 2820;
  public id: number = 2820;

  public leaguePoints: number | undefined = 0;
  public ladderPosition: number | undefined = 0;
  public totalLeaguePoints: number | undefined = 0;
  public rank: number | undefined = 0;
  public leagueId: number | undefined = 0;

  public constructor(
    leaguePoints?: number | undefined,
    ladderPosition?: number | undefined,
    totalLeaguePoints?: number | undefined,
    rank?: number | undefined,
    leagueId?: number | undefined,
  ) {
    super();
    this.leaguePoints = leaguePoints;
    this.ladderPosition = ladderPosition;
    this.totalLeaguePoints = totalLeaguePoints;
    this.rank = rank;
    this.leagueId = leagueId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.leaguePoints!);
    writer.writeInt(this.ladderPosition!);
    writer.writeVarShort(this.totalLeaguePoints!);
    writer.writeVarShort(this.rank!);
    writer.writeVarShort(this.leagueId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.leaguePoints = reader.readVarShort();
    this.ladderPosition = reader.readInt();
    this.totalLeaguePoints = reader.readVarShort();
    this.rank = reader.readVarShort();
    this.leagueId = reader.readVarShort();
  }
}

export class BasicPingMessage extends DofusMessage {
  public static id: number = 8161;

  public quiet: boolean | undefined = false;

  public constructor(quiet?: boolean | undefined) {
    super();
    this.quiet = quiet;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.quiet!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quiet = reader.readBoolean();
  }
}

export class AbstractGameActionMessage extends DofusMessage {
  public static id: number = 5037;

  public sourceId: number | undefined = 0;
  public actionId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
  ) {
    super();
    this.sourceId = sourceId;
    this.actionId = actionId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.sourceId!);
    writer.writeVarShort(this.actionId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.sourceId = reader.readDouble();
    this.actionId = reader.readVarShort();
  }
}

export class AbstractGameActionFightTargetedAbilityMessage extends AbstractGameActionMessage {
  public static id = 8860;

  public destinationCellId: number | undefined = 0;
  public targetId: number | undefined = 0;
  public critical: number | undefined = 1;
  public silentCast: boolean | undefined = false;
  public verboseCast: boolean | undefined = false;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    destinationCellId?: number | undefined,
    targetId?: number | undefined,
    critical?: number | undefined,
    silentCast?: boolean | undefined,
    verboseCast?: boolean | undefined,
  ) {
    super(sourceId, actionId);
    this.destinationCellId = destinationCellId;
    this.targetId = targetId;
    this.critical = critical;
    this.silentCast = silentCast;
    this.verboseCast = verboseCast;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.destinationCellId!);
    writer.writeDouble(this.targetId!);
    writer.writeByte(this.critical!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.silentCast!);
    box0 = setFlag(box0, 1, this.verboseCast!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.destinationCellId = reader.readShort();
    this.targetId = reader.readDouble();
    this.critical = reader.readByte();
    const box0 = reader.readByte();
    this.silentCast = getFlag(box0, 0);
    this.verboseCast = getFlag(box0, 1);
  }
}

export class GameActionFightCloseCombatMessage extends AbstractGameActionFightTargetedAbilityMessage {
  public static id = 9973;

  public weaponGenericId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    destinationCellId?: number | undefined,
    targetId?: number | undefined,
    critical?: number | undefined,
    silentCast?: boolean | undefined,
    verboseCast?: boolean | undefined,
    weaponGenericId?: number | undefined,
  ) {
    super(
      sourceId,
      actionId,
      destinationCellId,
      targetId,
      critical,
      silentCast,
      verboseCast,
    );
    this.weaponGenericId = weaponGenericId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.weaponGenericId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.weaponGenericId = reader.readVarShort();
  }
}

export class GameActionFightReduceDamagesMessage extends AbstractGameActionMessage {
  public static id = 3304;

  public amount: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    amount?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.amount = amount;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.amount!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.amount = reader.readVarInt();
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightLifePointsGainMessage extends AbstractGameActionMessage {
  public static id = 6777;

  public delta: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    delta?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.delta = delta;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.delta!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.delta = reader.readVarInt();
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightModifyEffectsDurationMessage extends AbstractGameActionMessage {
  public static id = 7980;

  public delta: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    delta?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.delta = delta;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.delta!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.delta = reader.readShort();
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightInvisibleDetectedMessage extends AbstractGameActionMessage {
  public static id = 5294;

  public cellId: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    cellId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.cellId = cellId;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.cellId!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readShort();
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightDispellMessage extends AbstractGameActionMessage {
  public static id = 4560;

  public verboseCast: boolean | undefined = false;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    verboseCast?: boolean | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.verboseCast = verboseCast;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.verboseCast!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.verboseCast = reader.readBoolean();
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightDispellEffectMessage extends GameActionFightDispellMessage {
  public static id = 1560;

  public boostUID: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    verboseCast?: boolean | undefined,
    targetId?: number | undefined,
    boostUID?: number | undefined,
  ) {
    super(sourceId, actionId, verboseCast, targetId);
    this.boostUID = boostUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.boostUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.boostUID = reader.readInt();
  }
}

export class GameFightTurnListMessage extends DofusMessage {
  public static id: number = 7238;

  public deadsIds: number[] | undefined;
  public ids: number[] | undefined;

  public constructor(
    deadsIds?: number[] | undefined,
    ids?: number[] | undefined,
  ) {
    super();
    this.deadsIds = deadsIds;
    this.ids = ids;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.deadsIds!.length);
    this.deadsIds!.forEach((current: number) => writer.writeDouble(current));
    writer.writeShort(this.ids!.length);
    this.ids!.forEach((current: number) => writer.writeDouble(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.deadsIds = [];
    const countDeadsIds = reader.readShort();
    for (let i: number = 0; i < countDeadsIds; i++) {
      this.deadsIds.push(reader.readDouble());
    }
    this.ids = [];
    const countIds = reader.readShort();
    for (let i: number = 0; i < countIds; i++) {
      this.ids.push(reader.readDouble());
    }
  }
}

export class SequenceStartMessage extends DofusMessage {
  public static id: number = 8598;

  public authorId: number | undefined = 0;
  public sequenceType: number | undefined = 0;

  public constructor(
    authorId?: number | undefined,
    sequenceType?: number | undefined,
  ) {
    super();
    this.authorId = authorId;
    this.sequenceType = sequenceType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.authorId!);
    writer.writeByte(this.sequenceType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.authorId = reader.readDouble();
    this.sequenceType = reader.readByte();
  }
}

export class GameActionFightVanishMessage extends AbstractGameActionMessage {
  public static id = 5414;

  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightMultipleSummonMessage extends AbstractGameActionMessage {
  public static id = 710;

  public summons: GameContextSummonsInformation[] | undefined;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    summons?: GameContextSummonsInformation[] | undefined,
  ) {
    super(sourceId, actionId);
    this.summons = summons;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.summons!.length);
    this.summons!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.summons = [];
    const countSummons = reader.readShort();
    for (let i: number = 0; i < countSummons; i++) {
      const summonsTypeId: number = reader.readShort();
      const type: GameContextSummonsInformation = new types[
        summonsTypeId
      ]() as GameContextSummonsInformation;
      type.deserialize(reader);
      this.summons.push(type);
    }
  }
}

export class GameActionFightSlideMessage extends AbstractGameActionMessage {
  public static id = 914;

  public endCellId: number | undefined = 0;
  public startCellId: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    endCellId?: number | undefined,
    startCellId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.endCellId = endCellId;
    this.startCellId = startCellId;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.endCellId!);
    writer.writeShort(this.startCellId!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.endCellId = reader.readShort();
    this.startCellId = reader.readShort();
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightKillMessage extends AbstractGameActionMessage {
  public static id = 8091;

  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightSpellCooldownVariationMessage extends AbstractGameActionMessage {
  public static id = 2288;

  public value: number | undefined = 0;
  public spellId: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    value?: number | undefined,
    spellId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.value = value;
    this.spellId = spellId;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.value!);
    writer.writeVarShort(this.spellId!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = reader.readVarShort();
    this.spellId = reader.readVarShort();
    this.targetId = reader.readDouble();
  }
}

export class FighterStatsListMessage extends DofusMessage {
  public static id: number = 534;

  public stats: CharacterCharacteristicsInformations | undefined;

  public constructor(stats?: CharacterCharacteristicsInformations | undefined) {
    super();
    this.stats = stats;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.stats!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.stats = new CharacterCharacteristicsInformations();
    this.stats!.deserialize(reader);
  }
}

export class GameMapMovementMessage extends DofusMessage {
  public static id: number = 1972;

  public forcedDirection: number | undefined = 0;
  public actorId: number | undefined = 0;
  public keyMovements: number[] | undefined;

  public constructor(
    forcedDirection?: number | undefined,
    actorId?: number | undefined,
    keyMovements?: number[] | undefined,
  ) {
    super();
    this.forcedDirection = forcedDirection;
    this.actorId = actorId;
    this.keyMovements = keyMovements;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.forcedDirection!);
    writer.writeDouble(this.actorId!);
    writer.writeShort(this.keyMovements!.length);
    this.keyMovements!.forEach((current: number) => writer.writeShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.forcedDirection = reader.readShort();
    this.actorId = reader.readDouble();
    this.keyMovements = [];
    const countKeyMovements = reader.readShort();
    for (let i: number = 0; i < countKeyMovements; i++) {
      this.keyMovements.push(reader.readShort());
    }
  }
}

export class GameActionFightDropCharacterMessage extends AbstractGameActionMessage {
  public static id = 2160;

  public cellId: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    cellId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.cellId = cellId;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.cellId!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readShort();
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightTriggerGlyphTrapMessage extends AbstractGameActionMessage {
  public static id = 1777;

  public triggeredSpellId: number | undefined = 0;
  public triggeringCharacterId: number | undefined = 0;
  public markImpactCell: number | undefined = 0;
  public markId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    triggeredSpellId?: number | undefined,
    triggeringCharacterId?: number | undefined,
    markImpactCell?: number | undefined,
    markId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.triggeredSpellId = triggeredSpellId;
    this.triggeringCharacterId = triggeringCharacterId;
    this.markImpactCell = markImpactCell;
    this.markId = markId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.triggeredSpellId!);
    writer.writeDouble(this.triggeringCharacterId!);
    writer.writeVarShort(this.markImpactCell!);
    writer.writeShort(this.markId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.triggeredSpellId = reader.readVarShort();
    this.triggeringCharacterId = reader.readDouble();
    this.markImpactCell = reader.readVarShort();
    this.markId = reader.readShort();
  }
}

export class GameActionFightPointsVariationMessage extends AbstractGameActionMessage {
  public static id = 7694;

  public delta: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    delta?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.delta = delta;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.delta!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.delta = reader.readShort();
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightReflectSpellMessage extends AbstractGameActionMessage {
  public static id = 8272;

  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightDeathMessage extends AbstractGameActionMessage {
  public static id = 7663;

  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightActivateGlyphTrapMessage extends AbstractGameActionMessage {
  public static id = 9234;

  public active: boolean | undefined = false;
  public markId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    active?: boolean | undefined,
    markId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.active = active;
    this.markId = markId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.active!);
    writer.writeShort(this.markId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.active = reader.readBoolean();
    this.markId = reader.readShort();
  }
}

export class GameFightSynchronizeMessage extends DofusMessage {
  public static id: number = 3028;

  public fighters: GameFightFighterInformations[] | undefined;

  public constructor(fighters?: GameFightFighterInformations[] | undefined) {
    super();
    this.fighters = fighters;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.fighters!.length);
    this.fighters!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fighters = [];
    const countFighters = reader.readShort();
    for (let i: number = 0; i < countFighters; i++) {
      const fightersTypeId: number = reader.readShort();
      const type: GameFightFighterInformations = new types[
        fightersTypeId
      ]() as GameFightFighterInformations;
      type.deserialize(reader);
      this.fighters.push(type);
    }
  }
}

export class GameActionFightSpellCastMessage extends AbstractGameActionFightTargetedAbilityMessage {
  public static id = 2648;

  public portalsIds: number[] | undefined;
  public spellLevel: number | undefined = 0;
  public spellId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    destinationCellId?: number | undefined,
    targetId?: number | undefined,
    critical?: number | undefined,
    silentCast?: boolean | undefined,
    verboseCast?: boolean | undefined,
    portalsIds?: number[] | undefined,
    spellLevel?: number | undefined,
    spellId?: number | undefined,
  ) {
    super(
      sourceId,
      actionId,
      destinationCellId,
      targetId,
      critical,
      silentCast,
      verboseCast,
    );
    this.portalsIds = portalsIds;
    this.spellLevel = spellLevel;
    this.spellId = spellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.portalsIds!.length);
    this.portalsIds!.forEach((current: number) => writer.writeShort(current));
    writer.writeShort(this.spellLevel!);
    writer.writeVarShort(this.spellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.portalsIds = [];
    const countPortalsIds = reader.readShort();
    for (let i: number = 0; i < countPortalsIds; i++) {
      this.portalsIds.push(reader.readShort());
    }
    this.spellLevel = reader.readShort();
    this.spellId = reader.readVarShort();
  }
}

export class GameActionFightTriggerEffectMessage extends GameActionFightDispellEffectMessage {
  public static id = 6409;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    verboseCast?: boolean | undefined,
    targetId?: number | undefined,
    boostUID?: number | undefined,
  ) {
    super(sourceId, actionId, verboseCast, targetId, boostUID);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GameActionFightTackledMessage extends AbstractGameActionMessage {
  public static id = 4448;

  public tacklersIds: number[] | undefined;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    tacklersIds?: number[] | undefined,
  ) {
    super(sourceId, actionId);
    this.tacklersIds = tacklersIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.tacklersIds!.length);
    this.tacklersIds!.forEach((current: number) => writer.writeDouble(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.tacklersIds = [];
    const countTacklersIds = reader.readShort();
    for (let i: number = 0; i < countTacklersIds; i++) {
      this.tacklersIds.push(reader.readDouble());
    }
  }
}

export class GameActionFightInvisibilityMessage extends AbstractGameActionMessage {
  public static id = 7441;

  public state: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    state?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.state = state;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.state!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.state = reader.readByte();
    this.targetId = reader.readDouble();
  }
}

export class GameFightShowFighterMessage extends DofusMessage {
  public static id: number = 2781;

  public informations: GameFightFighterInformations | undefined;

  public constructor(informations?: GameFightFighterInformations | undefined) {
    super();
    this.informations = informations;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.informations!.id);
    this.informations!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const informationsTypeId: number = reader.readShort();
    this.informations = new types[
      informationsTypeId
    ]() as GameFightFighterInformations;
    this.informations!.deserialize(reader);
  }
}

export class GameFightShowFighterRandomStaticPoseMessage extends GameFightShowFighterMessage {
  public static id = 7534;

  public constructor(informations?: GameFightFighterInformations | undefined) {
    super(informations);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GameActionFightTeleportOnSameMapMessage extends AbstractGameActionMessage {
  public static id = 7589;

  public cellId: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    cellId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.cellId = cellId;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.cellId!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readShort();
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightDispellSpellMessage extends GameActionFightDispellMessage {
  public static id = 6878;

  public spellId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    verboseCast?: boolean | undefined,
    targetId?: number | undefined,
    spellId?: number | undefined,
  ) {
    super(sourceId, actionId, verboseCast, targetId);
    this.spellId = spellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.spellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.spellId = reader.readVarShort();
  }
}

export class GameActionFightChangeLookMessage extends AbstractGameActionMessage {
  public static id = 4039;

  public entityLook: EntityLook | undefined;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    entityLook?: EntityLook | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.entityLook = entityLook;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.entityLook!.serialize(writer);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.entityLook = new EntityLook();
    this.entityLook!.deserialize(reader);
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightDodgePointLossMessage extends AbstractGameActionMessage {
  public static id = 7629;

  public amount: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    amount?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.amount = amount;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.amount!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.amount = reader.readVarShort();
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightSpellImmunityMessage extends AbstractGameActionMessage {
  public static id = 7640;

  public spellId: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    spellId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.spellId = spellId;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.spellId!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.spellId = reader.readVarShort();
    this.targetId = reader.readDouble();
  }
}

export class RefreshCharacterStatsMessage extends DofusMessage {
  public static id: number = 154;

  public stats: GameFightCharacteristics | undefined;
  public fighterId: number | undefined = 0;

  public constructor(
    stats?: GameFightCharacteristics | undefined,
    fighterId?: number | undefined,
  ) {
    super();
    this.stats = stats;
    this.fighterId = fighterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.stats!.serialize(writer);
    writer.writeDouble(this.fighterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.stats = new GameFightCharacteristics();
    this.stats!.deserialize(reader);
    this.fighterId = reader.readDouble();
  }
}

export class GameActionFightDispellableEffectMessage extends AbstractGameActionMessage {
  public static id = 9416;

  public effect: AbstractFightDispellableEffect | undefined;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    effect?: AbstractFightDispellableEffect | undefined,
  ) {
    super(sourceId, actionId);
    this.effect = effect;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.effect!.id);
    this.effect!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const effectTypeId: number = reader.readShort();
    this.effect = new types[effectTypeId]() as AbstractFightDispellableEffect;
    this.effect!.deserialize(reader);
  }
}

export class GameActionFightThrowCharacterMessage extends AbstractGameActionMessage {
  public static id = 1069;

  public cellId: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    cellId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.cellId = cellId;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.cellId!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readShort();
    this.targetId = reader.readDouble();
  }
}

export class GameFightRefreshFighterMessage extends DofusMessage {
  public static id: number = 6738;

  public informations: GameContextActorInformations | undefined;

  public constructor(informations?: GameContextActorInformations | undefined) {
    super();
    this.informations = informations;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.informations!.id);
    this.informations!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const informationsTypeId: number = reader.readShort();
    this.informations = new types[
      informationsTypeId
    ]() as GameContextActorInformations;
    this.informations!.deserialize(reader);
  }
}

export class GameActionFightMarkCellsMessage extends AbstractGameActionMessage {
  public static id = 1180;

  public mark: GameActionMark | undefined;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    mark?: GameActionMark | undefined,
  ) {
    super(sourceId, actionId);
    this.mark = mark;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.mark!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mark = new GameActionMark();
    this.mark!.deserialize(reader);
  }
}

export class GameActionFightSummonMessage extends AbstractGameActionMessage {
  public static id = 2879;

  public summons: GameFightFighterInformations[] | undefined;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    summons?: GameFightFighterInformations[] | undefined,
  ) {
    super(sourceId, actionId);
    this.summons = summons;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.summons!.length);
    this.summons!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.summons = [];
    const countSummons = reader.readShort();
    for (let i: number = 0; i < countSummons; i++) {
      const summonsTypeId: number = reader.readShort();
      const type: GameFightFighterInformations = new types[
        summonsTypeId
      ]() as GameFightFighterInformations;
      type.deserialize(reader);
      this.summons.push(type);
    }
  }
}

export class GameActionFightStealKamaMessage extends AbstractGameActionMessage {
  public static id = 8847;

  public amount: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    amount?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.amount = amount;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.amount!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.amount = reader.readVarLong();
    this.targetId = reader.readDouble();
  }
}

export class SequenceEndMessage extends DofusMessage {
  public static id: number = 5912;

  public sequenceType: number | undefined = 0;
  public authorId: number | undefined = 0;
  public actionId: number | undefined = 0;

  public constructor(
    sequenceType?: number | undefined,
    authorId?: number | undefined,
    actionId?: number | undefined,
  ) {
    super();
    this.sequenceType = sequenceType;
    this.authorId = authorId;
    this.actionId = actionId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.sequenceType!);
    writer.writeDouble(this.authorId!);
    writer.writeVarShort(this.actionId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.sequenceType = reader.readByte();
    this.authorId = reader.readDouble();
    this.actionId = reader.readVarShort();
  }
}

export class GameActionFightLifePointsLostMessage extends AbstractGameActionMessage {
  public static id = 4520;

  public permanentDamages: number | undefined = 0;
  public elementId: number | undefined = 0;
  public loss: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    permanentDamages?: number | undefined,
    elementId?: number | undefined,
    loss?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.permanentDamages = permanentDamages;
    this.elementId = elementId;
    this.loss = loss;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.permanentDamages!);
    writer.writeVarInt(this.elementId!);
    writer.writeVarInt(this.loss!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.permanentDamages = reader.readVarInt();
    this.elementId = reader.readVarInt();
    this.loss = reader.readVarInt();
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightLifeAndShieldPointsLostMessage extends GameActionFightLifePointsLostMessage {
  public static id = 6816;

  public shieldLoss: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    permanentDamages?: number | undefined,
    elementId?: number | undefined,
    loss?: number | undefined,
    targetId?: number | undefined,
    shieldLoss?: number | undefined,
  ) {
    super(sourceId, actionId, permanentDamages, elementId, loss, targetId);
    this.shieldLoss = shieldLoss;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.shieldLoss!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.shieldLoss = reader.readVarShort();
  }
}

export class GameActionFightCarryCharacterMessage extends AbstractGameActionMessage {
  public static id = 5643;

  public cellId: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    cellId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.cellId = cellId;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.cellId!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readShort();
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightUnmarkCellsMessage extends AbstractGameActionMessage {
  public static id = 302;

  public markId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    markId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.markId = markId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.markId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.markId = reader.readShort();
  }
}

export class GameActionFightReflectDamagesMessage extends AbstractGameActionMessage {
  public static id = 140;

  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetId = reader.readDouble();
  }
}

export class GameActionFightExchangePositionsMessage extends AbstractGameActionMessage {
  public static id = 8844;

  public targetCellId: number | undefined = 0;
  public casterCellId: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    targetCellId?: number | undefined,
    casterCellId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.targetCellId = targetCellId;
    this.casterCellId = casterCellId;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.targetCellId!);
    writer.writeShort(this.casterCellId!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetCellId = reader.readShort();
    this.casterCellId = reader.readShort();
    this.targetId = reader.readDouble();
  }
}

export class MapComplementaryInformationsDataMessage extends DofusMessage {
  public static id: number = 1182;

  public actors: GameRolePlayActorInformations[] | undefined;
  public houses: HouseInformations[] | undefined;
  public mapId: number | undefined = 0;
  public obstacles: MapObstacle[] | undefined;
  public subAreaId: number | undefined = 0;
  public interactiveElements: InteractiveElement[] | undefined;
  public statedElements: StatedElement[] | undefined;
  public hasAggressiveMonsters: boolean | undefined = false;
  public fightStartPositions: FightStartingPositions | undefined;
  public fights: FightCommonInformations[] | undefined;

  public constructor(
    actors?: GameRolePlayActorInformations[] | undefined,
    houses?: HouseInformations[] | undefined,
    mapId?: number | undefined,
    obstacles?: MapObstacle[] | undefined,
    subAreaId?: number | undefined,
    interactiveElements?: InteractiveElement[] | undefined,
    statedElements?: StatedElement[] | undefined,
    hasAggressiveMonsters?: boolean | undefined,
    fightStartPositions?: FightStartingPositions | undefined,
    fights?: FightCommonInformations[] | undefined,
  ) {
    super();
    this.actors = actors;
    this.houses = houses;
    this.mapId = mapId;
    this.obstacles = obstacles;
    this.subAreaId = subAreaId;
    this.interactiveElements = interactiveElements;
    this.statedElements = statedElements;
    this.hasAggressiveMonsters = hasAggressiveMonsters;
    this.fightStartPositions = fightStartPositions;
    this.fights = fights;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.actors!.length);
    this.actors!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.houses!.length);
    this.houses!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeDouble(this.mapId!);
    writer.writeShort(this.obstacles!.length);
    this.obstacles!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.subAreaId!);
    writer.writeShort(this.interactiveElements!.length);
    this.interactiveElements!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.statedElements!.length);
    this.statedElements!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeBoolean(this.hasAggressiveMonsters!);
    this.fightStartPositions!.serialize(writer);
    writer.writeShort(this.fights!.length);
    this.fights!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.actors = [];
    const countActors = reader.readShort();
    for (let i: number = 0; i < countActors; i++) {
      const actorsTypeId: number = reader.readShort();
      const type: GameRolePlayActorInformations = new types[
        actorsTypeId
      ]() as GameRolePlayActorInformations;
      type.deserialize(reader);
      this.actors.push(type);
    }
    this.houses = [];
    const countHouses = reader.readShort();
    for (let i: number = 0; i < countHouses; i++) {
      const housesTypeId: number = reader.readShort();
      const type: HouseInformations = new types[
        housesTypeId
      ]() as HouseInformations;
      type.deserialize(reader);
      this.houses.push(type);
    }
    this.mapId = reader.readDouble();
    this.obstacles = [];
    const countObstacles = reader.readShort();
    for (let i: number = 0; i < countObstacles; i++) {
      const type: MapObstacle = new MapObstacle();
      type.deserialize(reader);
      this.obstacles.push(type);
    }
    this.subAreaId = reader.readVarShort();
    this.interactiveElements = [];
    const countInteractiveElements = reader.readShort();
    for (let i: number = 0; i < countInteractiveElements; i++) {
      const interactiveElementsTypeId: number = reader.readShort();
      const type: InteractiveElement = new types[
        interactiveElementsTypeId
      ]() as InteractiveElement;
      type.deserialize(reader);
      this.interactiveElements.push(type);
    }
    this.statedElements = [];
    const countStatedElements = reader.readShort();
    for (let i: number = 0; i < countStatedElements; i++) {
      const type: StatedElement = new StatedElement();
      type.deserialize(reader);
      this.statedElements.push(type);
    }
    this.hasAggressiveMonsters = reader.readBoolean();
    this.fightStartPositions = new FightStartingPositions();
    this.fightStartPositions!.deserialize(reader);
    this.fights = [];
    const countFights = reader.readShort();
    for (let i: number = 0; i < countFights; i++) {
      const type: FightCommonInformations = new FightCommonInformations();
      type.deserialize(reader);
      this.fights.push(type);
    }
  }
}

export class MapComplementaryInformationsAnomalyMessage extends MapComplementaryInformationsDataMessage {
  public static id = 6414;

  public closingTime: number | undefined = 0;
  public level: number | undefined = 0;

  public constructor(
    actors?: GameRolePlayActorInformations[] | undefined,
    houses?: HouseInformations[] | undefined,
    mapId?: number | undefined,
    obstacles?: MapObstacle[] | undefined,
    subAreaId?: number | undefined,
    interactiveElements?: InteractiveElement[] | undefined,
    statedElements?: StatedElement[] | undefined,
    hasAggressiveMonsters?: boolean | undefined,
    fightStartPositions?: FightStartingPositions | undefined,
    fights?: FightCommonInformations[] | undefined,
    closingTime?: number | undefined,
    level?: number | undefined,
  ) {
    super(
      actors,
      houses,
      mapId,
      obstacles,
      subAreaId,
      interactiveElements,
      statedElements,
      hasAggressiveMonsters,
      fightStartPositions,
      fights,
    );
    this.closingTime = closingTime;
    this.level = level;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.closingTime!);
    writer.writeVarShort(this.level!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.closingTime = reader.readVarLong();
    this.level = reader.readVarShort();
  }
}

export class GameFightUpdateTeamMessage extends DofusMessage {
  public static id: number = 9785;

  public team: FightTeamInformations | undefined;
  public fightId: number | undefined = 0;

  public constructor(
    team?: FightTeamInformations | undefined,
    fightId?: number | undefined,
  ) {
    super();
    this.team = team;
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.team!.serialize(writer);
    writer.writeVarShort(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.team = new FightTeamInformations();
    this.team!.deserialize(reader);
    this.fightId = reader.readVarShort();
  }
}

export class GameDataPaddockObjectRemoveMessage extends DofusMessage {
  public static id: number = 7808;

  public cellId: number | undefined = 0;

  public constructor(cellId?: number | undefined) {
    super();
    this.cellId = cellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.cellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readVarShort();
  }
}

export class ObjectGroundRemovedMultipleMessage extends DofusMessage {
  public static id: number = 6993;

  public cells: number[] | undefined;

  public constructor(cells?: number[] | undefined) {
    super();
    this.cells = cells;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.cells!.length);
    this.cells!.forEach((current: number) => writer.writeVarShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cells = [];
    const countCells = reader.readShort();
    for (let i: number = 0; i < countCells; i++) {
      this.cells.push(reader.readVarShort());
    }
  }
}

export class GameFightRemoveTeamMemberMessage extends DofusMessage {
  public static id: number = 6697;

  public charId: number | undefined = 0;
  public teamId: number | undefined = 2;
  public fightId: number | undefined = 0;

  public constructor(
    charId?: number | undefined,
    teamId?: number | undefined,
    fightId?: number | undefined,
  ) {
    super();
    this.charId = charId;
    this.teamId = teamId;
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.charId!);
    writer.writeByte(this.teamId!);
    writer.writeVarShort(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.charId = reader.readDouble();
    this.teamId = reader.readByte();
    this.fightId = reader.readVarShort();
  }
}

export class EmotePlayRequestMessage extends DofusMessage {
  public static id: number = 5775;

  public emoteId: number | undefined = 0;

  public constructor(emoteId?: number | undefined) {
    super();
    this.emoteId = emoteId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.emoteId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.emoteId = reader.readShort();
  }
}

export class UpdateMapPlayersAgressableStatusMessage extends DofusMessage {
  public static id: number = 3658;

  public enable: number[] | undefined;
  public playerIds: number[] | undefined;

  public constructor(
    enable?: number[] | undefined,
    playerIds?: number[] | undefined,
  ) {
    super();
    this.enable = enable;
    this.playerIds = playerIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.enable!.length);
    this.enable!.forEach((current: number) => writer.writeByte(current));
    writer.writeShort(this.playerIds!.length);
    this.playerIds!.forEach((current: number) => writer.writeVarLong(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = [];
    const countEnable = reader.readShort();
    for (let i: number = 0; i < countEnable; i++) {
      this.enable.push(reader.readByte());
    }
    this.playerIds = [];
    const countPlayerIds = reader.readShort();
    for (let i: number = 0; i < countPlayerIds; i++) {
      this.playerIds.push(reader.readVarLong());
    }
  }
}

export class PaddockMoveItemRequestMessage extends DofusMessage {
  public static id: number = 8484;

  public newCellId: number | undefined = 0;
  public oldCellId: number | undefined = 0;

  public constructor(
    newCellId?: number | undefined,
    oldCellId?: number | undefined,
  ) {
    super();
    this.newCellId = newCellId;
    this.oldCellId = oldCellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.newCellId!);
    writer.writeVarShort(this.oldCellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.newCellId = reader.readVarShort();
    this.oldCellId = reader.readVarShort();
  }
}

export class ObjectGroundListAddedMessage extends DofusMessage {
  public static id: number = 6617;

  public referenceIds: number[] | undefined;
  public cells: number[] | undefined;

  public constructor(
    referenceIds?: number[] | undefined,
    cells?: number[] | undefined,
  ) {
    super();
    this.referenceIds = referenceIds;
    this.cells = cells;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.referenceIds!.length);
    this.referenceIds!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
    writer.writeShort(this.cells!.length);
    this.cells!.forEach((current: number) => writer.writeVarShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.referenceIds = [];
    const countReferenceIds = reader.readShort();
    for (let i: number = 0; i < countReferenceIds; i++) {
      this.referenceIds.push(reader.readVarShort());
    }
    this.cells = [];
    const countCells = reader.readShort();
    for (let i: number = 0; i < countCells; i++) {
      this.cells.push(reader.readVarShort());
    }
  }
}

export class UpdateSelfAgressableStatusMessage extends DofusMessage {
  public static id: number = 4140;

  public probationTime: number | undefined = 0;
  public status: number | undefined = 0;

  public constructor(
    probationTime?: number | undefined,
    status?: number | undefined,
  ) {
    super();
    this.probationTime = probationTime;
    this.status = status;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.probationTime!);
    writer.writeByte(this.status!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.probationTime = reader.readInt();
    this.status = reader.readByte();
  }
}

export class MapComplementaryInformationsWithCoordsMessage extends MapComplementaryInformationsDataMessage {
  public static id = 5440;

  public worldY: number | undefined = 0;
  public worldX: number | undefined = 0;

  public constructor(
    actors?: GameRolePlayActorInformations[] | undefined,
    houses?: HouseInformations[] | undefined,
    mapId?: number | undefined,
    obstacles?: MapObstacle[] | undefined,
    subAreaId?: number | undefined,
    interactiveElements?: InteractiveElement[] | undefined,
    statedElements?: StatedElement[] | undefined,
    hasAggressiveMonsters?: boolean | undefined,
    fightStartPositions?: FightStartingPositions | undefined,
    fights?: FightCommonInformations[] | undefined,
    worldY?: number | undefined,
    worldX?: number | undefined,
  ) {
    super(
      actors,
      houses,
      mapId,
      obstacles,
      subAreaId,
      interactiveElements,
      statedElements,
      hasAggressiveMonsters,
      fightStartPositions,
      fights,
    );
    this.worldY = worldY;
    this.worldX = worldX;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.worldY!);
    writer.writeShort(this.worldX!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.worldY = reader.readShort();
    this.worldX = reader.readShort();
  }
}

export class GameContextRefreshEntityLookMessage extends DofusMessage {
  public static id: number = 5261;

  public look: EntityLook | undefined;
  public id_: number | undefined = 0;

  public constructor(look?: EntityLook | undefined, id_?: number | undefined) {
    super();
    this.look = look;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.look!.serialize(writer);
    writer.writeDouble(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.look = new EntityLook();
    this.look!.deserialize(reader);
    this.id_ = reader.readDouble();
  }
}

export class ListMapNpcsQuestStatusUpdateMessage extends DofusMessage {
  public static id: number = 5996;

  public mapInfo: MapNpcQuestInfo[] | undefined;

  public constructor(mapInfo?: MapNpcQuestInfo[] | undefined) {
    super();
    this.mapInfo = mapInfo;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.mapInfo!.length);
    this.mapInfo!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapInfo = [];
    const countMapInfo = reader.readShort();
    for (let i: number = 0; i < countMapInfo; i++) {
      const type: MapNpcQuestInfo = new MapNpcQuestInfo();
      type.deserialize(reader);
      this.mapInfo.push(type);
    }
  }
}

export class MapComplementaryInformationsDataInHavenBagMessage extends MapComplementaryInformationsDataMessage {
  public static id = 3738;

  public ownerInformations: CharacterMinimalInformations | undefined;
  public roomId: number | undefined = 0;
  public theme: number | undefined = 0;
  public maxRoomId: number | undefined = 0;

  public constructor(
    actors?: GameRolePlayActorInformations[] | undefined,
    houses?: HouseInformations[] | undefined,
    mapId?: number | undefined,
    obstacles?: MapObstacle[] | undefined,
    subAreaId?: number | undefined,
    interactiveElements?: InteractiveElement[] | undefined,
    statedElements?: StatedElement[] | undefined,
    hasAggressiveMonsters?: boolean | undefined,
    fightStartPositions?: FightStartingPositions | undefined,
    fights?: FightCommonInformations[] | undefined,
    ownerInformations?: CharacterMinimalInformations | undefined,
    roomId?: number | undefined,
    theme?: number | undefined,
    maxRoomId?: number | undefined,
  ) {
    super(
      actors,
      houses,
      mapId,
      obstacles,
      subAreaId,
      interactiveElements,
      statedElements,
      hasAggressiveMonsters,
      fightStartPositions,
      fights,
    );
    this.ownerInformations = ownerInformations;
    this.roomId = roomId;
    this.theme = theme;
    this.maxRoomId = maxRoomId;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.ownerInformations!.serialize(writer);
    writer.writeByte(this.roomId!);
    writer.writeByte(this.theme!);
    writer.writeByte(this.maxRoomId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ownerInformations = new CharacterMinimalInformations();
    this.ownerInformations!.deserialize(reader);
    this.roomId = reader.readByte();
    this.theme = reader.readByte();
    this.maxRoomId = reader.readByte();
  }
}

export class BreachExitResponseMessage extends DofusMessage {
  public static id: number = 7143;

  public exited: boolean | undefined = false;

  public constructor(exited?: boolean | undefined) {
    super();
    this.exited = exited;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.exited!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.exited = reader.readBoolean();
  }
}

export class PaddockRemoveItemRequestMessage extends DofusMessage {
  public static id: number = 9863;

  public cellId: number | undefined = 0;

  public constructor(cellId?: number | undefined) {
    super();
    this.cellId = cellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.cellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readVarShort();
  }
}

export class GameMapChangeOrientationMessage extends DofusMessage {
  public static id: number = 595;

  public orientation: ActorOrientation | undefined;

  public constructor(orientation?: ActorOrientation | undefined) {
    super();
    this.orientation = orientation;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.orientation!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.orientation = new ActorOrientation();
    this.orientation!.deserialize(reader);
  }
}

export class ObjectGroundAddedMessage extends DofusMessage {
  public static id: number = 3936;

  public objectGID: number | undefined = 0;
  public cellId: number | undefined = 0;

  public constructor(
    objectGID?: number | undefined,
    cellId?: number | undefined,
  ) {
    super();
    this.objectGID = objectGID;
    this.cellId = cellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.objectGID!);
    writer.writeVarShort(this.cellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectGID = reader.readVarShort();
    this.cellId = reader.readVarShort();
  }
}

export class BreachEnterMessage extends DofusMessage {
  public static id: number = 6485;

  public owner: number | undefined = 0;

  public constructor(owner?: number | undefined) {
    super();
    this.owner = owner;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.owner!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.owner = reader.readVarLong();
  }
}

export class GameRolePlayShowActorMessage extends DofusMessage {
  public static id: number = 503;

  public informations: GameRolePlayActorInformations | undefined;

  public constructor(informations?: GameRolePlayActorInformations | undefined) {
    super();
    this.informations = informations;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.informations!.id);
    this.informations!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const informationsTypeId: number = reader.readShort();
    this.informations = new types[
      informationsTypeId
    ]() as GameRolePlayActorInformations;
    this.informations!.deserialize(reader);
  }
}

export class GameDataPlayFarmObjectAnimationMessage extends DofusMessage {
  public static id: number = 7212;

  public cellId: number[] | undefined;

  public constructor(cellId?: number[] | undefined) {
    super();
    this.cellId = cellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.cellId!.length);
    this.cellId!.forEach((current: number) => writer.writeVarShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = [];
    const countCellId = reader.readShort();
    for (let i: number = 0; i < countCellId; i++) {
      this.cellId.push(reader.readVarShort());
    }
  }
}

export class GameRolePlayShowChallengeMessage extends DofusMessage {
  public static id: number = 5734;

  public commonsInfos: FightCommonInformations | undefined;

  public constructor(commonsInfos?: FightCommonInformations | undefined) {
    super();
    this.commonsInfos = commonsInfos;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.commonsInfos!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.commonsInfos = new FightCommonInformations();
    this.commonsInfos!.deserialize(reader);
  }
}

export class GameRolePlayRemoveChallengeMessage extends DofusMessage {
  public static id: number = 5911;

  public fightId: number | undefined = 0;

  public constructor(fightId?: number | undefined) {
    super();
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fightId = reader.readVarShort();
  }
}

export class MapRewardRateMessage extends DofusMessage {
  public static id: number = 1514;

  public subAreaRate: number | undefined = 0;
  public totalRate: number | undefined = 0;
  public mapRate: number | undefined = 0;

  public constructor(
    subAreaRate?: number | undefined,
    totalRate?: number | undefined,
    mapRate?: number | undefined,
  ) {
    super();
    this.subAreaRate = subAreaRate;
    this.totalRate = totalRate;
    this.mapRate = mapRate;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.subAreaRate!);
    writer.writeVarShort(this.totalRate!);
    writer.writeVarShort(this.mapRate!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.subAreaRate = reader.readVarShort();
    this.totalRate = reader.readVarShort();
    this.mapRate = reader.readVarShort();
  }
}

export class GameRolePlayMonsterAngryAtPlayerMessage extends DofusMessage {
  public static id: number = 465;

  public attackTime: number | undefined = 0;
  public angryStartTime: number | undefined = 0;
  public monsterGroupId: number | undefined = 0;
  public playerId: number | undefined = 0;

  public constructor(
    attackTime?: number | undefined,
    angryStartTime?: number | undefined,
    monsterGroupId?: number | undefined,
    playerId?: number | undefined,
  ) {
    super();
    this.attackTime = attackTime;
    this.angryStartTime = angryStartTime;
    this.monsterGroupId = monsterGroupId;
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.attackTime!);
    writer.writeDouble(this.angryStartTime!);
    writer.writeDouble(this.monsterGroupId!);
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.attackTime = reader.readDouble();
    this.angryStartTime = reader.readDouble();
    this.monsterGroupId = reader.readDouble();
    this.playerId = reader.readVarLong();
  }
}

export class GameDataPaddockObjectAddMessage extends DofusMessage {
  public static id: number = 8122;

  public paddockItemDescription: PaddockItem | undefined;

  public constructor(paddockItemDescription?: PaddockItem | undefined) {
    super();
    this.paddockItemDescription = paddockItemDescription;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.paddockItemDescription!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.paddockItemDescription = new PaddockItem();
    this.paddockItemDescription!.deserialize(reader);
  }
}

export class MapComplementaryInformationsDataInHouseMessage extends MapComplementaryInformationsDataMessage {
  public static id = 2024;

  public currentHouse: HouseInformationsInside | undefined;

  public constructor(
    actors?: GameRolePlayActorInformations[] | undefined,
    houses?: HouseInformations[] | undefined,
    mapId?: number | undefined,
    obstacles?: MapObstacle[] | undefined,
    subAreaId?: number | undefined,
    interactiveElements?: InteractiveElement[] | undefined,
    statedElements?: StatedElement[] | undefined,
    hasAggressiveMonsters?: boolean | undefined,
    fightStartPositions?: FightStartingPositions | undefined,
    fights?: FightCommonInformations[] | undefined,
    currentHouse?: HouseInformationsInside | undefined,
  ) {
    super(
      actors,
      houses,
      mapId,
      obstacles,
      subAreaId,
      interactiveElements,
      statedElements,
      hasAggressiveMonsters,
      fightStartPositions,
      fights,
    );
    this.currentHouse = currentHouse;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.currentHouse!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.currentHouse = new HouseInformationsInside();
    this.currentHouse!.deserialize(reader);
  }
}

export class StatedMapUpdateMessage extends DofusMessage {
  public static id: number = 8689;

  public statedElements: StatedElement[] | undefined;

  public constructor(statedElements?: StatedElement[] | undefined) {
    super();
    this.statedElements = statedElements;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.statedElements!.length);
    this.statedElements!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.statedElements = [];
    const countStatedElements = reader.readShort();
    for (let i: number = 0; i < countStatedElements; i++) {
      const type: StatedElement = new StatedElement();
      type.deserialize(reader);
      this.statedElements.push(type);
    }
  }
}

export class GameMapChangeOrientationsMessage extends DofusMessage {
  public static id: number = 5656;

  public orientations: ActorOrientation[] | undefined;

  public constructor(orientations?: ActorOrientation[] | undefined) {
    super();
    this.orientations = orientations;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.orientations!.length);
    this.orientations!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.orientations = [];
    const countOrientations = reader.readShort();
    for (let i: number = 0; i < countOrientations; i++) {
      const type: ActorOrientation = new ActorOrientation();
      type.deserialize(reader);
      this.orientations.push(type);
    }
  }
}

export class ShowCellMessage extends DofusMessage {
  public static id: number = 2286;

  public cellId: number | undefined = 0;
  public sourceId: number | undefined = 0;

  public constructor(
    cellId?: number | undefined,
    sourceId?: number | undefined,
  ) {
    super();
    this.cellId = cellId;
    this.sourceId = sourceId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.cellId!);
    writer.writeDouble(this.sourceId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readVarShort();
    this.sourceId = reader.readDouble();
  }
}

export class HousePropertiesMessage extends DofusMessage {
  public static id: number = 3830;

  public houseId: number | undefined = 0;
  public properties: HouseInstanceInformations | undefined;
  public doorsOnMap: number[] | undefined;

  public constructor(
    houseId?: number | undefined,
    properties?: HouseInstanceInformations | undefined,
    doorsOnMap?: number[] | undefined,
  ) {
    super();
    this.houseId = houseId;
    this.properties = properties;
    this.doorsOnMap = doorsOnMap;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.houseId!);
    writer.writeShort(this.properties!.id);
    this.properties!.serialize(writer);
    writer.writeShort(this.doorsOnMap!.length);
    this.doorsOnMap!.forEach((current: number) => writer.writeInt(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.houseId = reader.readVarInt();
    const propertiesTypeId: number = reader.readShort();
    this.properties = new types[
      propertiesTypeId
    ]() as HouseInstanceInformations;
    this.properties!.deserialize(reader);
    this.doorsOnMap = [];
    const countDoorsOnMap = reader.readShort();
    for (let i: number = 0; i < countDoorsOnMap; i++) {
      this.doorsOnMap.push(reader.readInt());
    }
  }
}

export class GameRolePlayMonsterNotAngryAtPlayerMessage extends DofusMessage {
  public static id: number = 7726;

  public monsterGroupId: number | undefined = 0;
  public playerId: number | undefined = 0;

  public constructor(
    monsterGroupId?: number | undefined,
    playerId?: number | undefined,
  ) {
    super();
    this.monsterGroupId = monsterGroupId;
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.monsterGroupId!);
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.monsterGroupId = reader.readDouble();
    this.playerId = reader.readVarLong();
  }
}

export class BreachTeleportResponseMessage extends DofusMessage {
  public static id: number = 4766;

  public teleported: boolean | undefined = false;

  public constructor(teleported?: boolean | undefined) {
    super();
    this.teleported = teleported;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.teleported!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.teleported = reader.readBoolean();
  }
}

export class GameContextRemoveMultipleElementsMessage extends DofusMessage {
  public static id: number = 9667;

  public elementsIds: number[] | undefined;

  public constructor(elementsIds?: number[] | undefined) {
    super();
    this.elementsIds = elementsIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.elementsIds!.length);
    this.elementsIds!.forEach((current: number) => writer.writeDouble(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.elementsIds = [];
    const countElementsIds = reader.readShort();
    for (let i: number = 0; i < countElementsIds; i++) {
      this.elementsIds.push(reader.readDouble());
    }
  }
}

export class GameRolePlayShowMultipleActorsMessage extends DofusMessage {
  public static id: number = 1377;

  public informationsList: GameRolePlayActorInformations[] | undefined;

  public constructor(
    informationsList?: GameRolePlayActorInformations[] | undefined,
  ) {
    super();
    this.informationsList = informationsList;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.informationsList!.length);
    this.informationsList!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.informationsList = [];
    const countInformationsList = reader.readShort();
    for (let i: number = 0; i < countInformationsList; i++) {
      const informationsListTypeId: number = reader.readShort();
      const type: GameRolePlayActorInformations = new types[
        informationsListTypeId
      ]() as GameRolePlayActorInformations;
      type.deserialize(reader);
      this.informationsList.push(type);
    }
  }
}

export class ObjectGroundRemovedMessage extends DofusMessage {
  public static id: number = 7554;

  public cell: number | undefined = 0;

  public constructor(cell?: number | undefined) {
    super();
    this.cell = cell;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.cell!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cell = reader.readVarShort();
  }
}

export class GameDataPaddockObjectListAddMessage extends DofusMessage {
  public static id: number = 6584;

  public paddockItemDescription: PaddockItem[] | undefined;

  public constructor(paddockItemDescription?: PaddockItem[] | undefined) {
    super();
    this.paddockItemDescription = paddockItemDescription;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.paddockItemDescription!.length);
    this.paddockItemDescription!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.paddockItemDescription = [];
    const countPaddockItemDescription = reader.readShort();
    for (let i: number = 0; i < countPaddockItemDescription; i++) {
      const type: PaddockItem = new PaddockItem();
      type.deserialize(reader);
      this.paddockItemDescription.push(type);
    }
  }
}

export class AnomalyStateMessage extends DofusMessage {
  public static id: number = 4879;

  public closingTime: number | undefined = 0;
  public open: boolean | undefined = false;
  public subAreaId: number | undefined = 0;

  public constructor(
    closingTime?: number | undefined,
    open?: boolean | undefined,
    subAreaId?: number | undefined,
  ) {
    super();
    this.closingTime = closingTime;
    this.open = open;
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.closingTime!);
    writer.writeBoolean(this.open!);
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.closingTime = reader.readVarLong();
    this.open = reader.readBoolean();
    this.subAreaId = reader.readVarShort();
  }
}

export class MapInformationsRequestMessage extends DofusMessage {
  public static id: number = 2396;

  public mapId: number | undefined = 0;

  public constructor(mapId?: number | undefined) {
    super();
    this.mapId = mapId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.mapId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapId = reader.readDouble();
  }
}

export class InteractiveUsedMessage extends DofusMessage {
  public static id: number = 4971;

  public entityId: number | undefined = 0;
  public canMove: boolean | undefined = false;
  public skillId: number | undefined = 0;
  public elemId: number | undefined = 0;
  public duration: number | undefined = 0;

  public constructor(
    entityId?: number | undefined,
    canMove?: boolean | undefined,
    skillId?: number | undefined,
    elemId?: number | undefined,
    duration?: number | undefined,
  ) {
    super();
    this.entityId = entityId;
    this.canMove = canMove;
    this.skillId = skillId;
    this.elemId = elemId;
    this.duration = duration;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.entityId!);
    writer.writeBoolean(this.canMove!);
    writer.writeVarShort(this.skillId!);
    writer.writeVarInt(this.elemId!);
    writer.writeVarShort(this.duration!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.entityId = reader.readVarLong();
    this.canMove = reader.readBoolean();
    this.skillId = reader.readVarShort();
    this.elemId = reader.readVarInt();
    this.duration = reader.readVarShort();
  }
}

export class MapFightCountMessage extends DofusMessage {
  public static id: number = 9018;

  public fightCount: number | undefined = 0;

  public constructor(fightCount?: number | undefined) {
    super();
    this.fightCount = fightCount;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.fightCount!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fightCount = reader.readVarShort();
  }
}

export class InteractiveMapUpdateMessage extends DofusMessage {
  public static id: number = 8375;

  public interactiveElements: InteractiveElement[] | undefined;

  public constructor(interactiveElements?: InteractiveElement[] | undefined) {
    super();
    this.interactiveElements = interactiveElements;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.interactiveElements!.length);
    this.interactiveElements!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.interactiveElements = [];
    const countInteractiveElements = reader.readShort();
    for (let i: number = 0; i < countInteractiveElements; i++) {
      const interactiveElementsTypeId: number = reader.readShort();
      const type: InteractiveElement = new types[
        interactiveElementsTypeId
      ]() as InteractiveElement;
      type.deserialize(reader);
      this.interactiveElements.push(type);
    }
  }
}

export class GameContextRemoveElementMessage extends DofusMessage {
  public static id: number = 5284;

  public id_: number | undefined = 0;

  public constructor(id_?: number | undefined) {
    super();
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readDouble();
  }
}

export class GameFightOptionStateUpdateMessage extends DofusMessage {
  public static id: number = 4608;

  public state: boolean | undefined = false;
  public option: number | undefined = 3;
  public teamId: number | undefined = 2;
  public fightId: number | undefined = 0;

  public constructor(
    state?: boolean | undefined,
    option?: number | undefined,
    teamId?: number | undefined,
    fightId?: number | undefined,
  ) {
    super();
    this.state = state;
    this.option = option;
    this.teamId = teamId;
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.state!);
    writer.writeByte(this.option!);
    writer.writeByte(this.teamId!);
    writer.writeVarShort(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.state = reader.readBoolean();
    this.option = reader.readByte();
    this.teamId = reader.readByte();
    this.fightId = reader.readVarShort();
  }
}

export class BreachTeleportRequestMessage extends DofusMessage {
  public static id: number = 2818;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class MapComplementaryInformationsBreachMessage extends MapComplementaryInformationsDataMessage {
  public static id = 6429;

  public floor: number | undefined = 0;
  public room: number | undefined = 0;
  public infinityMode: number | undefined = 0;
  public branches: BreachBranch[] | undefined;

  public constructor(
    actors?: GameRolePlayActorInformations[] | undefined,
    houses?: HouseInformations[] | undefined,
    mapId?: number | undefined,
    obstacles?: MapObstacle[] | undefined,
    subAreaId?: number | undefined,
    interactiveElements?: InteractiveElement[] | undefined,
    statedElements?: StatedElement[] | undefined,
    hasAggressiveMonsters?: boolean | undefined,
    fightStartPositions?: FightStartingPositions | undefined,
    fights?: FightCommonInformations[] | undefined,
    floor?: number | undefined,
    room?: number | undefined,
    infinityMode?: number | undefined,
    branches?: BreachBranch[] | undefined,
  ) {
    super(
      actors,
      houses,
      mapId,
      obstacles,
      subAreaId,
      interactiveElements,
      statedElements,
      hasAggressiveMonsters,
      fightStartPositions,
      fights,
    );
    this.floor = floor;
    this.room = room;
    this.infinityMode = infinityMode;
    this.branches = branches;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.floor!);
    writer.writeByte(this.room!);
    writer.writeShort(this.infinityMode!);
    writer.writeShort(this.branches!.length);
    this.branches!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.floor = reader.readVarInt();
    this.room = reader.readByte();
    this.infinityMode = reader.readShort();
    this.branches = [];
    const countBranches = reader.readShort();
    for (let i: number = 0; i < countBranches; i++) {
      const branchesTypeId: number = reader.readShort();
      const type: BreachBranch = new types[branchesTypeId]() as BreachBranch;
      type.deserialize(reader);
      this.branches.push(type);
    }
  }
}

export class GameEntitiesDispositionMessage extends DofusMessage {
  public static id: number = 853;

  public dispositions: IdentifiedEntityDispositionInformations[] | undefined;

  public constructor(
    dispositions?: IdentifiedEntityDispositionInformations[] | undefined,
  ) {
    super();
    this.dispositions = dispositions;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.dispositions!.length);
    this.dispositions!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dispositions = [];
    const countDispositions = reader.readShort();
    for (let i: number = 0; i < countDispositions; i++) {
      const type: IdentifiedEntityDispositionInformations =
        new IdentifiedEntityDispositionInformations();
      type.deserialize(reader);
      this.dispositions.push(type);
    }
  }
}

export class ShowCellSpectatorMessage extends ShowCellMessage {
  public static id = 6320;

  public playerName: string | undefined;

  public constructor(
    cellId?: number | undefined,
    sourceId?: number | undefined,
    playerName?: string | undefined,
  ) {
    super(cellId, sourceId);
    this.playerName = playerName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.playerName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerName = reader.readUTF();
  }
}

export class GameFightPlacementSwapPositionsMessage extends DofusMessage {
  public static id: number = 995;

  public dispositions: IdentifiedEntityDispositionInformations[] | undefined;

  public constructor(
    dispositions?: IdentifiedEntityDispositionInformations[] | undefined,
  ) {
    super();
    this.dispositions = dispositions;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.dispositions!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dispositions = [];
    for (let i: number = 0; i < 2; i++) {
      const type: IdentifiedEntityDispositionInformations =
        new IdentifiedEntityDispositionInformations();
      type.deserialize(reader);
      this.dispositions.push(type);
    }
  }
}

export class GameEntityDispositionMessage extends DofusMessage {
  public static id: number = 8701;

  public disposition: IdentifiedEntityDispositionInformations | undefined;

  public constructor(
    disposition?: IdentifiedEntityDispositionInformations | undefined,
  ) {
    super();
    this.disposition = disposition;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.disposition!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.disposition = new IdentifiedEntityDispositionInformations();
    this.disposition!.deserialize(reader);
  }
}

export class GameFightHumanReadyStateMessage extends DofusMessage {
  public static id: number = 4318;

  public isReady: boolean | undefined = false;
  public characterId: number | undefined = 0;

  public constructor(
    isReady?: boolean | undefined,
    characterId?: number | undefined,
  ) {
    super();
    this.isReady = isReady;
    this.characterId = characterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.isReady!);
    writer.writeVarLong(this.characterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.isReady = reader.readBoolean();
    this.characterId = reader.readVarLong();
  }
}

export class PlayerStatusUpdateMessage extends DofusMessage {
  public static id: number = 120;

  public status: PlayerStatus | undefined;
  public playerId: number | undefined = 0;
  public accountId: number | undefined = 0;

  public constructor(
    status?: PlayerStatus | undefined,
    playerId?: number | undefined,
    accountId?: number | undefined,
  ) {
    super();
    this.status = status;
    this.playerId = playerId;
    this.accountId = accountId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.status!.id);
    this.status!.serialize(writer);
    writer.writeVarLong(this.playerId!);
    writer.writeInt(this.accountId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    const statusTypeId: number = reader.readShort();
    this.status = new types[statusTypeId]() as PlayerStatus;
    this.status!.deserialize(reader);
    this.playerId = reader.readVarLong();
    this.accountId = reader.readInt();
  }
}

export class GameFightEndMessage extends DofusMessage {
  public static id: number = 5098;

  public duration: number | undefined = 0;
  public namedPartyTeamsOutcomes: NamedPartyTeamWithOutcome[] | undefined;
  public results: FightResultListEntry[] | undefined;
  public rewardRate: number | undefined = 0;
  public lootShareLimitMalus: number | undefined = 0;

  public constructor(
    duration?: number | undefined,
    namedPartyTeamsOutcomes?: NamedPartyTeamWithOutcome[] | undefined,
    results?: FightResultListEntry[] | undefined,
    rewardRate?: number | undefined,
    lootShareLimitMalus?: number | undefined,
  ) {
    super();
    this.duration = duration;
    this.namedPartyTeamsOutcomes = namedPartyTeamsOutcomes;
    this.results = results;
    this.rewardRate = rewardRate;
    this.lootShareLimitMalus = lootShareLimitMalus;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.duration!);
    writer.writeShort(this.namedPartyTeamsOutcomes!.length);
    this.namedPartyTeamsOutcomes!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.results!.length);
    this.results!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarShort(this.rewardRate!);
    writer.writeShort(this.lootShareLimitMalus!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.duration = reader.readInt();
    this.namedPartyTeamsOutcomes = [];
    const countNamedPartyTeamsOutcomes = reader.readShort();
    for (let i: number = 0; i < countNamedPartyTeamsOutcomes; i++) {
      const type: NamedPartyTeamWithOutcome = new NamedPartyTeamWithOutcome();
      type.deserialize(reader);
      this.namedPartyTeamsOutcomes.push(type);
    }
    this.results = [];
    const countResults = reader.readShort();
    for (let i: number = 0; i < countResults; i++) {
      const resultsTypeId: number = reader.readShort();
      const type: FightResultListEntry = new types[
        resultsTypeId
      ]() as FightResultListEntry;
      type.deserialize(reader);
      this.results.push(type);
    }
    this.rewardRate = reader.readVarShort();
    this.lootShareLimitMalus = reader.readShort();
  }
}

export class BreachGameFightEndMessage extends GameFightEndMessage {
  public static id = 7323;

  public budget: number | undefined = 0;

  public constructor(
    duration?: number | undefined,
    namedPartyTeamsOutcomes?: NamedPartyTeamWithOutcome[] | undefined,
    results?: FightResultListEntry[] | undefined,
    rewardRate?: number | undefined,
    lootShareLimitMalus?: number | undefined,
    budget?: number | undefined,
  ) {
    super(
      duration,
      namedPartyTeamsOutcomes,
      results,
      rewardRate,
      lootShareLimitMalus,
    );
    this.budget = budget;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.budget!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.budget = reader.readInt();
  }
}

export class ChallengeTargetUpdateMessage extends DofusMessage {
  public static id: number = 1613;

  public targetId: number | undefined = 0;
  public challengeId: number | undefined = 0;

  public constructor(
    targetId?: number | undefined,
    challengeId?: number | undefined,
  ) {
    super();
    this.targetId = targetId;
    this.challengeId = challengeId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.targetId!);
    writer.writeVarShort(this.challengeId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetId = reader.readDouble();
    this.challengeId = reader.readVarShort();
  }
}

export class GameFightLeaveMessage extends DofusMessage {
  public static id: number = 4663;

  public charId: number | undefined = 0;

  public constructor(charId?: number | undefined) {
    super();
    this.charId = charId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.charId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.charId = reader.readDouble();
  }
}

export class GameFightSpectateMessage extends DofusMessage {
  public static id: number = 8991;

  public idols: Idol[] | undefined;
  public effects: FightDispellableEffectExtendedInformations[] | undefined;
  public fxTriggerCounts: GameFightEffectTriggerCount[] | undefined;
  public gameTurn: number | undefined = 0;
  public marks: GameActionMark[] | undefined;
  public fightStart: number | undefined = 0;

  public constructor(
    idols?: Idol[] | undefined,
    effects?: FightDispellableEffectExtendedInformations[] | undefined,
    fxTriggerCounts?: GameFightEffectTriggerCount[] | undefined,
    gameTurn?: number | undefined,
    marks?: GameActionMark[] | undefined,
    fightStart?: number | undefined,
  ) {
    super();
    this.idols = idols;
    this.effects = effects;
    this.fxTriggerCounts = fxTriggerCounts;
    this.gameTurn = gameTurn;
    this.marks = marks;
    this.fightStart = fightStart;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.idols!.length);
    this.idols!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.effects!.length);
    this.effects!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.fxTriggerCounts!.length);
    this.fxTriggerCounts!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.gameTurn!);
    writer.writeShort(this.marks!.length);
    this.marks!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeInt(this.fightStart!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.idols = [];
    const countIdols = reader.readShort();
    for (let i: number = 0; i < countIdols; i++) {
      const type: Idol = new Idol();
      type.deserialize(reader);
      this.idols.push(type);
    }
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i: number = 0; i < countEffects; i++) {
      const type: FightDispellableEffectExtendedInformations =
        new FightDispellableEffectExtendedInformations();
      type.deserialize(reader);
      this.effects.push(type);
    }
    this.fxTriggerCounts = [];
    const countFxTriggerCounts = reader.readShort();
    for (let i: number = 0; i < countFxTriggerCounts; i++) {
      const type: GameFightEffectTriggerCount =
        new GameFightEffectTriggerCount();
      type.deserialize(reader);
      this.fxTriggerCounts.push(type);
    }
    this.gameTurn = reader.readVarShort();
    this.marks = [];
    const countMarks = reader.readShort();
    for (let i: number = 0; i < countMarks; i++) {
      const type: GameActionMark = new GameActionMark();
      type.deserialize(reader);
      this.marks.push(type);
    }
    this.fightStart = reader.readInt();
  }
}

export class GameFightResumeMessage extends GameFightSpectateMessage {
  public static id = 4566;

  public bombCount: number | undefined = 0;
  public summonCount: number | undefined = 0;
  public spellCooldowns: GameFightSpellCooldown[] | undefined;

  public constructor(
    idols?: Idol[] | undefined,
    effects?: FightDispellableEffectExtendedInformations[] | undefined,
    fxTriggerCounts?: GameFightEffectTriggerCount[] | undefined,
    gameTurn?: number | undefined,
    marks?: GameActionMark[] | undefined,
    fightStart?: number | undefined,
    bombCount?: number | undefined,
    summonCount?: number | undefined,
    spellCooldowns?: GameFightSpellCooldown[] | undefined,
  ) {
    super(idols, effects, fxTriggerCounts, gameTurn, marks, fightStart);
    this.bombCount = bombCount;
    this.summonCount = summonCount;
    this.spellCooldowns = spellCooldowns;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.bombCount!);
    writer.writeByte(this.summonCount!);
    writer.writeShort(this.spellCooldowns!.length);
    this.spellCooldowns!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.bombCount = reader.readByte();
    this.summonCount = reader.readByte();
    this.spellCooldowns = [];
    const countSpellCooldowns = reader.readShort();
    for (let i: number = 0; i < countSpellCooldowns; i++) {
      const type: GameFightSpellCooldown = new GameFightSpellCooldown();
      type.deserialize(reader);
      this.spellCooldowns.push(type);
    }
  }
}

export class GameFightResumeWithSlavesMessage extends GameFightResumeMessage {
  public static id = 6205;

  public slavesInfo: GameFightResumeSlaveInfo[] | undefined;

  public constructor(
    idols?: Idol[] | undefined,
    effects?: FightDispellableEffectExtendedInformations[] | undefined,
    fxTriggerCounts?: GameFightEffectTriggerCount[] | undefined,
    gameTurn?: number | undefined,
    marks?: GameActionMark[] | undefined,
    fightStart?: number | undefined,
    bombCount?: number | undefined,
    summonCount?: number | undefined,
    spellCooldowns?: GameFightSpellCooldown[] | undefined,
    slavesInfo?: GameFightResumeSlaveInfo[] | undefined,
  ) {
    super(
      idols,
      effects,
      fxTriggerCounts,
      gameTurn,
      marks,
      fightStart,
      bombCount,
      summonCount,
      spellCooldowns,
    );
    this.slavesInfo = slavesInfo;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.slavesInfo!.length);
    this.slavesInfo!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.slavesInfo = [];
    const countSlavesInfo = reader.readShort();
    for (let i: number = 0; i < countSlavesInfo; i++) {
      const type: GameFightResumeSlaveInfo = new GameFightResumeSlaveInfo();
      type.deserialize(reader);
      this.slavesInfo.push(type);
    }
  }
}

export class CurrentMapMessage extends DofusMessage {
  public static id: number = 9325;

  public mapKey: string | undefined;
  public mapId: number | undefined = 0;

  public constructor(mapKey?: string | undefined, mapId?: number | undefined) {
    super();
    this.mapKey = mapKey;
    this.mapId = mapId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.mapKey!);
    writer.writeDouble(this.mapId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapKey = reader.readUTF();
    this.mapId = reader.readDouble();
  }
}

export class CurrentMapInstanceMessage extends CurrentMapMessage {
  public static id = 7422;

  public instantiatedMapId: number | undefined = 0;

  public constructor(
    mapKey?: string | undefined,
    mapId?: number | undefined,
    instantiatedMapId?: number | undefined,
  ) {
    super(mapKey, mapId);
    this.instantiatedMapId = instantiatedMapId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.instantiatedMapId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.instantiatedMapId = reader.readDouble();
  }
}

export class GameFightStartingMessage extends DofusMessage {
  public static id: number = 2951;

  public containsBoss: boolean | undefined = false;
  public fightType: number | undefined = 0;
  public fightId: number | undefined = 0;
  public attackerId: number | undefined = 0;
  public defenderId: number | undefined = 0;

  public constructor(
    containsBoss?: boolean | undefined,
    fightType?: number | undefined,
    fightId?: number | undefined,
    attackerId?: number | undefined,
    defenderId?: number | undefined,
  ) {
    super();
    this.containsBoss = containsBoss;
    this.fightType = fightType;
    this.fightId = fightId;
    this.attackerId = attackerId;
    this.defenderId = defenderId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.containsBoss!);
    writer.writeByte(this.fightType!);
    writer.writeVarShort(this.fightId!);
    writer.writeDouble(this.attackerId!);
    writer.writeDouble(this.defenderId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.containsBoss = reader.readBoolean();
    this.fightType = reader.readByte();
    this.fightId = reader.readVarShort();
    this.attackerId = reader.readDouble();
    this.defenderId = reader.readDouble();
  }
}

export class GameFightJoinMessage extends DofusMessage {
  public static id: number = 1185;

  public timeMaxBeforeFightStart: number | undefined = 0;
  public fightType: number | undefined = 0;
  public isTeamPhase: boolean | undefined = false;
  public canBeCancelled: boolean | undefined = false;
  public canSayReady: boolean | undefined = false;
  public isFightStarted: boolean | undefined = false;

  public constructor(
    timeMaxBeforeFightStart?: number | undefined,
    fightType?: number | undefined,
    isTeamPhase?: boolean | undefined,
    canBeCancelled?: boolean | undefined,
    canSayReady?: boolean | undefined,
    isFightStarted?: boolean | undefined,
  ) {
    super();
    this.timeMaxBeforeFightStart = timeMaxBeforeFightStart;
    this.fightType = fightType;
    this.isTeamPhase = isTeamPhase;
    this.canBeCancelled = canBeCancelled;
    this.canSayReady = canSayReady;
    this.isFightStarted = isFightStarted;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.timeMaxBeforeFightStart!);
    writer.writeByte(this.fightType!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.isTeamPhase!);
    box0 = setFlag(box0, 1, this.canBeCancelled!);
    box0 = setFlag(box0, 2, this.canSayReady!);
    box0 = setFlag(box0, 3, this.isFightStarted!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.timeMaxBeforeFightStart = reader.readShort();
    this.fightType = reader.readByte();
    const box0 = reader.readByte();
    this.isTeamPhase = getFlag(box0, 0);
    this.canBeCancelled = getFlag(box0, 1);
    this.canSayReady = getFlag(box0, 2);
    this.isFightStarted = getFlag(box0, 3);
  }
}

export class ArenaFighterIdleMessage extends DofusMessage {
  public static id: number = 1425;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ChallengeTargetsListRequestMessage extends DofusMessage {
  public static id: number = 8411;

  public challengeId: number | undefined = 0;

  public constructor(challengeId?: number | undefined) {
    super();
    this.challengeId = challengeId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.challengeId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.challengeId = reader.readVarShort();
  }
}

export class GameFightStartMessage extends DofusMessage {
  public static id: number = 5357;

  public idols: Idol[] | undefined;

  public constructor(idols?: Idol[] | undefined) {
    super();
    this.idols = idols;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.idols!.length);
    this.idols!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.idols = [];
    const countIdols = reader.readShort();
    for (let i: number = 0; i < countIdols; i++) {
      const type: Idol = new Idol();
      type.deserialize(reader);
      this.idols.push(type);
    }
  }
}

export class GameActionFightNoSpellCastMessage extends DofusMessage {
  public static id: number = 8111;

  public spellLevelId: number | undefined = 0;

  public constructor(spellLevelId?: number | undefined) {
    super();
    this.spellLevelId = spellLevelId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.spellLevelId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.spellLevelId = reader.readVarInt();
  }
}

export class GameContextDestroyMessage extends DofusMessage {
  public static id: number = 7855;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GameFightSpectatorJoinMessage extends GameFightJoinMessage {
  public static id = 6927;

  public namedPartyTeams: NamedPartyTeam[] | undefined;

  public constructor(
    timeMaxBeforeFightStart?: number | undefined,
    fightType?: number | undefined,
    isTeamPhase?: boolean | undefined,
    canBeCancelled?: boolean | undefined,
    canSayReady?: boolean | undefined,
    isFightStarted?: boolean | undefined,
    namedPartyTeams?: NamedPartyTeam[] | undefined,
  ) {
    super(
      timeMaxBeforeFightStart,
      fightType,
      isTeamPhase,
      canBeCancelled,
      canSayReady,
      isFightStarted,
    );
    this.namedPartyTeams = namedPartyTeams;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.namedPartyTeams!.length);
    this.namedPartyTeams!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.namedPartyTeams = [];
    const countNamedPartyTeams = reader.readShort();
    for (let i: number = 0; i < countNamedPartyTeams; i++) {
      const type: NamedPartyTeam = new NamedPartyTeam();
      type.deserialize(reader);
      this.namedPartyTeams.push(type);
    }
  }
}

export class ChallengeInfoMessage extends DofusMessage {
  public static id: number = 638;

  public dropBonus: number | undefined = 0;
  public xpBonus: number | undefined = 0;
  public targetId: number | undefined = 0;
  public challengeId: number | undefined = 0;

  public constructor(
    dropBonus?: number | undefined,
    xpBonus?: number | undefined,
    targetId?: number | undefined,
    challengeId?: number | undefined,
  ) {
    super();
    this.dropBonus = dropBonus;
    this.xpBonus = xpBonus;
    this.targetId = targetId;
    this.challengeId = challengeId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.dropBonus!);
    writer.writeVarInt(this.xpBonus!);
    writer.writeDouble(this.targetId!);
    writer.writeVarShort(this.challengeId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dropBonus = reader.readVarInt();
    this.xpBonus = reader.readVarInt();
    this.targetId = reader.readDouble();
    this.challengeId = reader.readVarShort();
  }
}

export class ChallengeTargetsListMessage extends DofusMessage {
  public static id: number = 7386;

  public targetCells: number[] | undefined;
  public targetIds: number[] | undefined;

  public constructor(
    targetCells?: number[] | undefined,
    targetIds?: number[] | undefined,
  ) {
    super();
    this.targetCells = targetCells;
    this.targetIds = targetIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.targetCells!.length);
    this.targetCells!.forEach((current: number) => writer.writeShort(current));
    writer.writeShort(this.targetIds!.length);
    this.targetIds!.forEach((current: number) => writer.writeDouble(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetCells = [];
    const countTargetCells = reader.readShort();
    for (let i: number = 0; i < countTargetCells; i++) {
      this.targetCells.push(reader.readShort());
    }
    this.targetIds = [];
    const countTargetIds = reader.readShort();
    for (let i: number = 0; i < countTargetIds; i++) {
      this.targetIds.push(reader.readDouble());
    }
  }
}

export class MapObstacleUpdateMessage extends DofusMessage {
  public static id: number = 9984;

  public obstacles: MapObstacle[] | undefined;

  public constructor(obstacles?: MapObstacle[] | undefined) {
    super();
    this.obstacles = obstacles;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.obstacles!.length);
    this.obstacles!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.obstacles = [];
    const countObstacles = reader.readShort();
    for (let i: number = 0; i < countObstacles; i++) {
      const type: MapObstacle = new MapObstacle();
      type.deserialize(reader);
      this.obstacles.push(type);
    }
  }
}

export class ArenaFighterLeaveMessage extends DofusMessage {
  public static id: number = 1880;

  public leaver: CharacterBasicMinimalInformations | undefined;

  public constructor(leaver?: CharacterBasicMinimalInformations | undefined) {
    super();
    this.leaver = leaver;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.leaver!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.leaver = new CharacterBasicMinimalInformations();
    this.leaver!.deserialize(reader);
  }
}

export class GameContextReadyMessage extends DofusMessage {
  public static id: number = 912;

  public mapId: number | undefined = 0;

  public constructor(mapId?: number | undefined) {
    super();
    this.mapId = mapId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.mapId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapId = reader.readDouble();
  }
}

export class ChallengeResultMessage extends DofusMessage {
  public static id: number = 7757;

  public success: boolean | undefined = false;
  public challengeId: number | undefined = 0;

  public constructor(
    success?: boolean | undefined,
    challengeId?: number | undefined,
  ) {
    super();
    this.success = success;
    this.challengeId = challengeId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.success!);
    writer.writeVarShort(this.challengeId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.success = reader.readBoolean();
    this.challengeId = reader.readVarShort();
  }
}

export class GameFightNewWaveMessage extends DofusMessage {
  public static id: number = 1312;

  public nbTurnBeforeNextWave: number | undefined = 0;
  public teamId: number | undefined = 2;
  public id_: number | undefined = 0;

  public constructor(
    nbTurnBeforeNextWave?: number | undefined,
    teamId?: number | undefined,
    id_?: number | undefined,
  ) {
    super();
    this.nbTurnBeforeNextWave = nbTurnBeforeNextWave;
    this.teamId = teamId;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.nbTurnBeforeNextWave!);
    writer.writeByte(this.teamId!);
    writer.writeByte(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.nbTurnBeforeNextWave = reader.readShort();
    this.teamId = reader.readByte();
    this.id_ = reader.readByte();
  }
}

export class GameFightPauseMessage extends DofusMessage {
  public static id: number = 8818;

  public isPaused: boolean | undefined = false;

  public constructor(isPaused?: boolean | undefined) {
    super();
    this.isPaused = isPaused;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.isPaused!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.isPaused = reader.readBoolean();
  }
}

export class UpdateSpellModifierMessage extends DofusMessage {
  public static id: number = 1672;

  public spellModifier: CharacterSpellModification | undefined;
  public actorId: number | undefined = 0;

  public constructor(
    spellModifier?: CharacterSpellModification | undefined,
    actorId?: number | undefined,
  ) {
    super();
    this.spellModifier = spellModifier;
    this.actorId = actorId;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.spellModifier!.serialize(writer);
    writer.writeDouble(this.actorId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.spellModifier = new CharacterSpellModification();
    this.spellModifier!.deserialize(reader);
    this.actorId = reader.readDouble();
  }
}

export class GameFightTurnStartMessage extends DofusMessage {
  public static id: number = 3772;

  public waitTime: number | undefined = 0;
  public id_: number | undefined = 0;

  public constructor(waitTime?: number | undefined, id_?: number | undefined) {
    super();
    this.waitTime = waitTime;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.waitTime!);
    writer.writeDouble(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.waitTime = reader.readVarInt();
    this.id_ = reader.readDouble();
  }
}

export class GameFightTurnReadyRequestMessage extends DofusMessage {
  public static id: number = 4389;

  public id_: number | undefined = 0;

  public constructor(id_?: number | undefined) {
    super();
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readDouble();
  }
}

export class GameFightTurnEndMessage extends DofusMessage {
  public static id: number = 4443;

  public id_: number | undefined = 0;

  public constructor(id_?: number | undefined) {
    super();
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readDouble();
  }
}

export class GameFightNewRoundMessage extends DofusMessage {
  public static id: number = 1656;

  public roundNumber: number | undefined = 0;

  public constructor(roundNumber?: number | undefined) {
    super();
    this.roundNumber = roundNumber;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.roundNumber!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.roundNumber = reader.readVarInt();
  }
}

export class SlaveSwitchContextMessage extends DofusMessage {
  public static id: number = 6013;

  public shortcuts: Shortcut[] | undefined;
  public slaveStats: CharacterCharacteristicsInformations | undefined;
  public masterId: number | undefined = 0;
  public slaveId: number | undefined = 0;
  public slaveTurn: number | undefined = 0;
  public slaveSpells: SpellItem[] | undefined;

  public constructor(
    shortcuts?: Shortcut[] | undefined,
    slaveStats?: CharacterCharacteristicsInformations | undefined,
    masterId?: number | undefined,
    slaveId?: number | undefined,
    slaveTurn?: number | undefined,
    slaveSpells?: SpellItem[] | undefined,
  ) {
    super();
    this.shortcuts = shortcuts;
    this.slaveStats = slaveStats;
    this.masterId = masterId;
    this.slaveId = slaveId;
    this.slaveTurn = slaveTurn;
    this.slaveSpells = slaveSpells;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.shortcuts!.length);
    this.shortcuts!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    this.slaveStats!.serialize(writer);
    writer.writeDouble(this.masterId!);
    writer.writeDouble(this.slaveId!);
    writer.writeVarShort(this.slaveTurn!);
    writer.writeShort(this.slaveSpells!.length);
    this.slaveSpells!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.shortcuts = [];
    const countShortcuts = reader.readShort();
    for (let i: number = 0; i < countShortcuts; i++) {
      const shortcutsTypeId: number = reader.readShort();
      const type: Shortcut = new types[shortcutsTypeId]() as Shortcut;
      type.deserialize(reader);
      this.shortcuts.push(type);
    }
    this.slaveStats = new CharacterCharacteristicsInformations();
    this.slaveStats!.deserialize(reader);
    this.masterId = reader.readDouble();
    this.slaveId = reader.readDouble();
    this.slaveTurn = reader.readVarShort();
    this.slaveSpells = [];
    const countSlaveSpells = reader.readShort();
    for (let i: number = 0; i < countSlaveSpells; i++) {
      const type: SpellItem = new SpellItem();
      type.deserialize(reader);
      this.slaveSpells.push(type);
    }
  }
}

export class GameFightTurnStartPlayingMessage extends DofusMessage {
  public static id: number = 3275;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class SlaveNoLongerControledMessage extends DofusMessage {
  public static id: number = 4540;

  public slaveId: number | undefined = 0;
  public masterId: number | undefined = 0;

  public constructor(
    slaveId?: number | undefined,
    masterId?: number | undefined,
  ) {
    super();
    this.slaveId = slaveId;
    this.masterId = masterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.slaveId!);
    writer.writeDouble(this.masterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.slaveId = reader.readDouble();
    this.masterId = reader.readDouble();
  }
}

export class CharacterStatsListMessage extends DofusMessage {
  public static id: number = 2227;

  public stats: CharacterCharacteristicsInformations | undefined;

  public constructor(stats?: CharacterCharacteristicsInformations | undefined) {
    super();
    this.stats = stats;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.stats!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.stats = new CharacterCharacteristicsInformations();
    this.stats!.deserialize(reader);
  }
}

export class GameActionAcknowledgementMessage extends DofusMessage {
  public static id: number = 3561;

  public actionId: number | undefined = 0;
  public valid: boolean | undefined = false;

  public constructor(
    actionId?: number | undefined,
    valid?: boolean | undefined,
  ) {
    super();
    this.actionId = actionId;
    this.valid = valid;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.actionId!);
    writer.writeBoolean(this.valid!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.actionId = reader.readByte();
    this.valid = reader.readBoolean();
  }
}

export class GameFightTurnResumeMessage extends GameFightTurnStartMessage {
  public static id = 9827;

  public remainingTime: number | undefined = 0;

  public constructor(
    waitTime?: number | undefined,
    id_?: number | undefined,
    remainingTime?: number | undefined,
  ) {
    super(waitTime, id_);
    this.remainingTime = remainingTime;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.remainingTime!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.remainingTime = reader.readVarInt();
  }
}

export class GameFightTurnReadyMessage extends DofusMessage {
  public static id: number = 4043;

  public isReady: boolean | undefined = false;

  public constructor(isReady?: boolean | undefined) {
    super();
    this.isReady = isReady;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.isReady!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.isReady = reader.readBoolean();
  }
}

export class GameActionUpdateEffectTriggerCountMessage extends DofusMessage {
  public static id: number = 6461;

  public targetIds: GameFightEffectTriggerCount[] | undefined;

  public constructor(targetIds?: GameFightEffectTriggerCount[] | undefined) {
    super();
    this.targetIds = targetIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.targetIds!.length);
    this.targetIds!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetIds = [];
    const countTargetIds = reader.readShort();
    for (let i: number = 0; i < countTargetIds; i++) {
      const type: GameFightEffectTriggerCount =
        new GameFightEffectTriggerCount();
      type.deserialize(reader);
      this.targetIds.push(type);
    }
  }
}

export class HaapiApiKeyRequestMessage extends DofusMessage {
  public static id: number = 6036;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class DebugClearHighlightCellsMessage extends DofusMessage {
  public static id: number = 1639;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class DebugHighlightCellsMessage extends DofusMessage {
  public static id: number = 307;

  public cells: number[] | undefined;
  public color: number | undefined = 0;

  public constructor(cells?: number[] | undefined, color?: number | undefined) {
    super();
    this.cells = cells;
    this.color = color;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.cells!.length);
    this.cells!.forEach((current: number) => writer.writeVarShort(current));
    writer.writeDouble(this.color!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cells = [];
    const countCells = reader.readShort();
    for (let i: number = 0; i < countCells; i++) {
      this.cells.push(reader.readVarShort());
    }
    this.color = reader.readDouble();
  }
}

export class DumpedEntityStatsMessage extends DofusMessage {
  public static id: number = 3665;

  public stats: CharacterCharacteristics | undefined;
  public actorId: number | undefined = 0;

  public constructor(
    stats?: CharacterCharacteristics | undefined,
    actorId?: number | undefined,
  ) {
    super();
    this.stats = stats;
    this.actorId = actorId;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.stats!.serialize(writer);
    writer.writeDouble(this.actorId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.stats = new CharacterCharacteristics();
    this.stats!.deserialize(reader);
    this.actorId = reader.readDouble();
  }
}

export class DebugInClientMessage extends DofusMessage {
  public static id: number = 6517;

  public message: string | undefined;
  public level: number | undefined = 0;

  public constructor(message?: string | undefined, level?: number | undefined) {
    super();
    this.message = message;
    this.level = level;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.message!);
    writer.writeByte(this.level!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.message = reader.readUTF();
    this.level = reader.readByte();
  }
}

export class IdentificationMessage extends DofusMessage {
  public static id: number = 4337;

  public sessionOptionalSalt: number | undefined = 0;
  public credentials: number[] | undefined;
  public lang: string | undefined;
  public serverId: number | undefined = 0;
  public version: Version | undefined;
  public failedAttempts: number[] | undefined;
  public autoconnect: boolean | undefined = false;
  public useCertificate: boolean | undefined = false;
  public useLoginToken: boolean | undefined = false;

  public constructor(
    sessionOptionalSalt?: number | undefined,
    credentials?: number[] | undefined,
    lang?: string | undefined,
    serverId?: number | undefined,
    version?: Version | undefined,
    failedAttempts?: number[] | undefined,
    autoconnect?: boolean | undefined,
    useCertificate?: boolean | undefined,
    useLoginToken?: boolean | undefined,
  ) {
    super();
    this.sessionOptionalSalt = sessionOptionalSalt;
    this.credentials = credentials;
    this.lang = lang;
    this.serverId = serverId;
    this.version = version;
    this.failedAttempts = failedAttempts;
    this.autoconnect = autoconnect;
    this.useCertificate = useCertificate;
    this.useLoginToken = useLoginToken;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.sessionOptionalSalt!);
    writer.writeVarInt(this.credentials!.length);
    this.credentials!.forEach((current: number) => writer.writeByte(current));
    writer.writeUTF(this.lang!);
    writer.writeShort(this.serverId!);
    this.version!.serialize(writer);
    writer.writeShort(this.failedAttempts!.length);
    this.failedAttempts!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.autoconnect!);
    box0 = setFlag(box0, 1, this.useCertificate!);
    box0 = setFlag(box0, 2, this.useLoginToken!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.sessionOptionalSalt = reader.readVarLong();
    this.credentials = [];
    const countCredentials = reader.readVarInt();
    for (let i: number = 0; i < countCredentials; i++) {
      this.credentials.push(reader.readByte());
    }
    this.lang = reader.readUTF();
    this.serverId = reader.readShort();
    this.version = new Version();
    this.version!.deserialize(reader);
    this.failedAttempts = [];
    const countFailedAttempts = reader.readShort();
    for (let i: number = 0; i < countFailedAttempts; i++) {
      this.failedAttempts.push(reader.readVarShort());
    }
    const box0 = reader.readByte();
    this.autoconnect = getFlag(box0, 0);
    this.useCertificate = getFlag(box0, 1);
    this.useLoginToken = getFlag(box0, 2);
  }
}

export class IdentificationAccountForceMessage extends IdentificationMessage {
  public static id = 2449;

  public forcedAccountLogin: string | undefined;

  public constructor(
    sessionOptionalSalt?: number | undefined,
    credentials?: number[] | undefined,
    lang?: string | undefined,
    serverId?: number | undefined,
    version?: Version | undefined,
    failedAttempts?: number[] | undefined,
    autoconnect?: boolean | undefined,
    useCertificate?: boolean | undefined,
    useLoginToken?: boolean | undefined,
    forcedAccountLogin?: string | undefined,
  ) {
    super(
      sessionOptionalSalt,
      credentials,
      lang,
      serverId,
      version,
      failedAttempts,
      autoconnect,
      useCertificate,
      useLoginToken,
    );
    this.forcedAccountLogin = forcedAccountLogin;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.forcedAccountLogin!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.forcedAccountLogin = reader.readUTF();
  }
}

export class BasicAckMessage extends DofusMessage {
  public static id: number = 45;

  public lastPacketId: number | undefined = 0;
  public seq: number | undefined = 0;

  public constructor(
    lastPacketId?: number | undefined,
    seq?: number | undefined,
  ) {
    super();
    this.lastPacketId = lastPacketId;
    this.seq = seq;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.lastPacketId!);
    writer.writeVarInt(this.seq!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.lastPacketId = reader.readVarShort();
    this.seq = reader.readVarInt();
  }
}

export class BasicNoOperationMessage extends DofusMessage {
  public static id: number = 2522;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class CredentialsAcknowledgementMessage extends DofusMessage {
  public static id: number = 4834;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class OnConnectionEventMessage extends DofusMessage {
  public static id: number = 4485;

  public eventType: number | undefined = 0;

  public constructor(eventType?: number | undefined) {
    super();
    this.eventType = eventType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.eventType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.eventType = reader.readByte();
  }
}

export class ObjectJobAddedMessage extends DofusMessage {
  public static id: number = 5325;

  public jobId: number | undefined = 0;

  public constructor(jobId?: number | undefined) {
    super();
    this.jobId = jobId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.jobId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.jobId = reader.readByte();
  }
}

export class LivingObjectMessageRequestMessage extends DofusMessage {
  public static id: number = 3223;

  public livingObject: number | undefined = 0;
  public parameters: string[] | undefined;
  public msgId: number | undefined = 0;

  public constructor(
    livingObject?: number | undefined,
    parameters?: string[] | undefined,
    msgId?: number | undefined,
  ) {
    super();
    this.livingObject = livingObject;
    this.parameters = parameters;
    this.msgId = msgId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.livingObject!);
    writer.writeShort(this.parameters!.length);
    this.parameters!.forEach((current: string) => writer.writeUTF(current));
    writer.writeVarShort(this.msgId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.livingObject = reader.readVarInt();
    this.parameters = [];
    const countParameters = reader.readShort();
    for (let i: number = 0; i < countParameters; i++) {
      this.parameters.push(reader.readUTF());
    }
    this.msgId = reader.readVarShort();
  }
}

export class IdentificationSuccessMessage extends DofusMessage {
  public static id: number = 331;

  public havenbagAvailableRoom: number | undefined = 0;
  public subscriptionElapsedDuration: number | undefined = 0;
  public communityId: number | undefined = 0;
  public accountTag: AccountTagInformation | undefined;
  public accountId: number | undefined = 0;
  public login: string | undefined;
  public secretQuestion: string | undefined;
  public subscriptionEndDate: number | undefined = 0;
  public accountCreation: number | undefined = 0;
  public hasRights: boolean | undefined = false;
  public hasConsoleRight: boolean | undefined = false;
  public wasAlreadyConnected: boolean | undefined = false;

  public constructor(
    havenbagAvailableRoom?: number | undefined,
    subscriptionElapsedDuration?: number | undefined,
    communityId?: number | undefined,
    accountTag?: AccountTagInformation | undefined,
    accountId?: number | undefined,
    login?: string | undefined,
    secretQuestion?: string | undefined,
    subscriptionEndDate?: number | undefined,
    accountCreation?: number | undefined,
    hasRights?: boolean | undefined,
    hasConsoleRight?: boolean | undefined,
    wasAlreadyConnected?: boolean | undefined,
  ) {
    super();
    this.havenbagAvailableRoom = havenbagAvailableRoom;
    this.subscriptionElapsedDuration = subscriptionElapsedDuration;
    this.communityId = communityId;
    this.accountTag = accountTag;
    this.accountId = accountId;
    this.login = login;
    this.secretQuestion = secretQuestion;
    this.subscriptionEndDate = subscriptionEndDate;
    this.accountCreation = accountCreation;
    this.hasRights = hasRights;
    this.hasConsoleRight = hasConsoleRight;
    this.wasAlreadyConnected = wasAlreadyConnected;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.havenbagAvailableRoom!);
    writer.writeDouble(this.subscriptionElapsedDuration!);
    writer.writeByte(this.communityId!);
    this.accountTag!.serialize(writer);
    writer.writeInt(this.accountId!);
    writer.writeUTF(this.login!);
    writer.writeUTF(this.secretQuestion!);
    writer.writeDouble(this.subscriptionEndDate!);
    writer.writeDouble(this.accountCreation!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.hasRights!);
    box0 = setFlag(box0, 1, this.hasConsoleRight!);
    box0 = setFlag(box0, 2, this.wasAlreadyConnected!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.havenbagAvailableRoom = reader.readByte();
    this.subscriptionElapsedDuration = reader.readDouble();
    this.communityId = reader.readByte();
    this.accountTag = new AccountTagInformation();
    this.accountTag!.deserialize(reader);
    this.accountId = reader.readInt();
    this.login = reader.readUTF();
    this.secretQuestion = reader.readUTF();
    this.subscriptionEndDate = reader.readDouble();
    this.accountCreation = reader.readDouble();
    const box0 = reader.readByte();
    this.hasRights = getFlag(box0, 0);
    this.hasConsoleRight = getFlag(box0, 1);
    this.wasAlreadyConnected = getFlag(box0, 2);
  }
}

export class RawDataMessage extends DofusMessage {
  public static id: number = 6253;

  public content: number | undefined;

  public constructor(content?: number | undefined) {
    super();
    this.content = content;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.content!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.content = reader.readByte();
  }
}

export class TrustStatusMessage extends DofusMessage {
  public static id: number = 8156;

  public trusted: boolean | undefined = false;
  public certified: boolean | undefined = false;

  public constructor(
    trusted?: boolean | undefined,
    certified?: boolean | undefined,
  ) {
    super();
    this.trusted = trusted;
    this.certified = certified;
  }

  public serialize(writer: BinaryDataWriter): void {
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.trusted!);
    box0 = setFlag(box0, 1, this.certified!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    const box0 = reader.readByte();
    this.trusted = getFlag(box0, 0);
    this.certified = getFlag(box0, 1);
  }
}

export class ServersListMessage extends DofusMessage {
  public static id: number = 786;

  public canCreateNewCharacter: boolean | undefined = false;
  public alreadyConnectedToServerId: number | undefined = 0;
  public servers: GameServerInformations[] | undefined;

  public constructor(
    canCreateNewCharacter?: boolean | undefined,
    alreadyConnectedToServerId?: number | undefined,
    servers?: GameServerInformations[] | undefined,
  ) {
    super();
    this.canCreateNewCharacter = canCreateNewCharacter;
    this.alreadyConnectedToServerId = alreadyConnectedToServerId;
    this.servers = servers;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.canCreateNewCharacter!);
    writer.writeVarShort(this.alreadyConnectedToServerId!);
    writer.writeShort(this.servers!.length);
    this.servers!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.canCreateNewCharacter = reader.readBoolean();
    this.alreadyConnectedToServerId = reader.readVarShort();
    this.servers = [];
    const countServers = reader.readShort();
    for (let i: number = 0; i < countServers; i++) {
      const type: GameServerInformations = new GameServerInformations();
      type.deserialize(reader);
      this.servers.push(type);
    }
  }
}

export class BasicPongMessage extends DofusMessage {
  public static id: number = 2330;

  public quiet: boolean | undefined = false;

  public constructor(quiet?: boolean | undefined) {
    super();
    this.quiet = quiet;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.quiet!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quiet = reader.readBoolean();
  }
}

export class BasicLatencyStatsRequestMessage extends DofusMessage {
  public static id: number = 1245;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class BasicLatencyStatsMessage extends DofusMessage {
  public static id: number = 3831;

  public sampleCount: number | undefined = 0;
  public max: number | undefined = 0;
  public latency: number | undefined = 0;

  public constructor(
    sampleCount?: number | undefined,
    max?: number | undefined,
    latency?: number | undefined,
  ) {
    super();
    this.sampleCount = sampleCount;
    this.max = max;
    this.latency = latency;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.sampleCount!);
    writer.writeVarShort(this.max!);
    writer.writeShort(this.latency!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.sampleCount = reader.readVarShort();
    this.max = reader.readVarShort();
    this.latency = reader.readShort();
  }
}

export class CheckIntegrityMessage extends DofusMessage {
  public static id: number = 1296;

  public data: number[] | undefined;

  public constructor(data?: number[] | undefined) {
    super();
    this.data = data;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.data!.length);
    this.data!.forEach((current: number) => writer.writeByte(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.data = [];
    const countData = reader.readVarInt();
    for (let i: number = 0; i < countData; i++) {
      this.data.push(reader.readByte());
    }
  }
}

export class AdminCommandMessage extends DofusMessage {
  public static id: number = 4583;

  public content: string | undefined;

  public constructor(content?: string | undefined) {
    super();
    this.content = content;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.content!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.content = reader.readUTF();
  }
}

export class ConsoleMessage extends DofusMessage {
  public static id: number = 3282;

  public content: string | undefined;
  public type: number | undefined = 0;

  public constructor(content?: string | undefined, type?: number | undefined) {
    super();
    this.content = content;
    this.type = type;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.content!);
    writer.writeByte(this.type!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.content = reader.readUTF();
    this.type = reader.readByte();
  }
}

export class QuestListMessage extends DofusMessage {
  public static id: number = 5774;

  public finishedQuestsIds: number[] | undefined;
  public finishedQuestsCounts: number[] | undefined;
  public activeQuests: QuestActiveInformations[] | undefined;
  public reinitDoneQuestsIds: number[] | undefined;

  public constructor(
    finishedQuestsIds?: number[] | undefined,
    finishedQuestsCounts?: number[] | undefined,
    activeQuests?: QuestActiveInformations[] | undefined,
    reinitDoneQuestsIds?: number[] | undefined,
  ) {
    super();
    this.finishedQuestsIds = finishedQuestsIds;
    this.finishedQuestsCounts = finishedQuestsCounts;
    this.activeQuests = activeQuests;
    this.reinitDoneQuestsIds = reinitDoneQuestsIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.finishedQuestsIds!.length);
    this.finishedQuestsIds!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
    writer.writeShort(this.finishedQuestsCounts!.length);
    this.finishedQuestsCounts!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
    writer.writeShort(this.activeQuests!.length);
    this.activeQuests!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.reinitDoneQuestsIds!.length);
    this.reinitDoneQuestsIds!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.finishedQuestsIds = [];
    const countFinishedQuestsIds = reader.readShort();
    for (let i: number = 0; i < countFinishedQuestsIds; i++) {
      this.finishedQuestsIds.push(reader.readVarShort());
    }
    this.finishedQuestsCounts = [];
    const countFinishedQuestsCounts = reader.readShort();
    for (let i: number = 0; i < countFinishedQuestsCounts; i++) {
      this.finishedQuestsCounts.push(reader.readVarShort());
    }
    this.activeQuests = [];
    const countActiveQuests = reader.readShort();
    for (let i: number = 0; i < countActiveQuests; i++) {
      const activeQuestsTypeId: number = reader.readShort();
      const type: QuestActiveInformations = new types[
        activeQuestsTypeId
      ]() as QuestActiveInformations;
      type.deserialize(reader);
      this.activeQuests.push(type);
    }
    this.reinitDoneQuestsIds = [];
    const countReinitDoneQuestsIds = reader.readShort();
    for (let i: number = 0; i < countReinitDoneQuestsIds; i++) {
      this.reinitDoneQuestsIds.push(reader.readVarShort());
    }
  }
}

export class QuestValidatedMessage extends DofusMessage {
  public static id: number = 1984;

  public questId: number | undefined = 0;

  public constructor(questId?: number | undefined) {
    super();
    this.questId = questId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.questId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.questId = reader.readVarShort();
  }
}

export class CharacterCreationResultMessage extends DofusMessage {
  public static id: number = 110;

  public result: number | undefined = 1;

  public constructor(result?: number | undefined) {
    super();
    this.result = result;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.result!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.result = reader.readByte();
  }
}

export class NicknameRefusedMessage extends DofusMessage {
  public static id: number = 2705;

  public reason: number | undefined = 99;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class NicknameAcceptedMessage extends DofusMessage {
  public static id: number = 9067;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class HelloGameMessage extends DofusMessage {
  public static id: number = 5237;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GuildFactsErrorMessage extends DofusMessage {
  public static id: number = 9196;

  public guildId: number | undefined = 0;

  public constructor(guildId?: number | undefined) {
    super();
    this.guildId = guildId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.guildId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildId = reader.readVarInt();
  }
}

export class AchievementDetailedListMessage extends DofusMessage {
  public static id: number = 9855;

  public finishedAchievements: Achievement[] | undefined;
  public startedAchievements: Achievement[] | undefined;

  public constructor(
    finishedAchievements?: Achievement[] | undefined,
    startedAchievements?: Achievement[] | undefined,
  ) {
    super();
    this.finishedAchievements = finishedAchievements;
    this.startedAchievements = startedAchievements;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.finishedAchievements!.length);
    this.finishedAchievements!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.startedAchievements!.length);
    this.startedAchievements!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.finishedAchievements = [];
    const countFinishedAchievements = reader.readShort();
    for (let i: number = 0; i < countFinishedAchievements; i++) {
      const type: Achievement = new Achievement();
      type.deserialize(reader);
      this.finishedAchievements.push(type);
    }
    this.startedAchievements = [];
    const countStartedAchievements = reader.readShort();
    for (let i: number = 0; i < countStartedAchievements; i++) {
      const type: Achievement = new Achievement();
      type.deserialize(reader);
      this.startedAchievements.push(type);
    }
  }
}

export class AuthenticationTicketAcceptedMessage extends DofusMessage {
  public static id: number = 6407;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GuildInvitationStateRecrutedMessage extends DofusMessage {
  public static id: number = 621;

  public invitationState: number | undefined = 0;

  public constructor(invitationState?: number | undefined) {
    super();
    this.invitationState = invitationState;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.invitationState!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.invitationState = reader.readByte();
  }
}

export class ChatAbstractServerMessage extends DofusMessage {
  public static id: number = 3393;

  public fingerprint: string | undefined;
  public timestamp: number | undefined = 0;
  public content: string | undefined;
  public channel: number | undefined = 0;

  public constructor(
    fingerprint?: string | undefined,
    timestamp?: number | undefined,
    content?: string | undefined,
    channel?: number | undefined,
  ) {
    super();
    this.fingerprint = fingerprint;
    this.timestamp = timestamp;
    this.content = content;
    this.channel = channel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.fingerprint!);
    writer.writeInt(this.timestamp!);
    writer.writeUTF(this.content!);
    writer.writeByte(this.channel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fingerprint = reader.readUTF();
    this.timestamp = reader.readInt();
    this.content = reader.readUTF();
    this.channel = reader.readByte();
  }
}

export class ChatServerMessage extends ChatAbstractServerMessage {
  public static id = 8853;

  public senderAccountId: number | undefined = 0;
  public prefix: string | undefined;
  public senderName: string | undefined;
  public senderId: number | undefined = 0;

  public constructor(
    fingerprint?: string | undefined,
    timestamp?: number | undefined,
    content?: string | undefined,
    channel?: number | undefined,
    senderAccountId?: number | undefined,
    prefix?: string | undefined,
    senderName?: string | undefined,
    senderId?: number | undefined,
  ) {
    super(fingerprint, timestamp, content, channel);
    this.senderAccountId = senderAccountId;
    this.prefix = prefix;
    this.senderName = senderName;
    this.senderId = senderId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.senderAccountId!);
    writer.writeUTF(this.prefix!);
    writer.writeUTF(this.senderName!);
    writer.writeDouble(this.senderId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.senderAccountId = reader.readInt();
    this.prefix = reader.readUTF();
    this.senderName = reader.readUTF();
    this.senderId = reader.readDouble();
  }
}

export class ChatKolizeumServerMessage extends ChatServerMessage {
  public static id = 4380;

  public originServerId: number | undefined = 0;

  public constructor(
    fingerprint?: string | undefined,
    timestamp?: number | undefined,
    content?: string | undefined,
    channel?: number | undefined,
    senderAccountId?: number | undefined,
    prefix?: string | undefined,
    senderName?: string | undefined,
    senderId?: number | undefined,
    originServerId?: number | undefined,
  ) {
    super(
      fingerprint,
      timestamp,
      content,
      channel,
      senderAccountId,
      prefix,
      senderName,
      senderId,
    );
    this.originServerId = originServerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.originServerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.originServerId = reader.readShort();
  }
}

export class KnownZaapListMessage extends DofusMessage {
  public static id: number = 4096;

  public destinations: number[] | undefined;

  public constructor(destinations?: number[] | undefined) {
    super();
    this.destinations = destinations;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.destinations!.length);
    this.destinations!.forEach((current: number) =>
      writer.writeDouble(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.destinations = [];
    const countDestinations = reader.readShort();
    for (let i: number = 0; i < countDestinations; i++) {
      this.destinations.push(reader.readDouble());
    }
  }
}

export class KamasUpdateMessage extends DofusMessage {
  public static id: number = 4370;

  public kamasTotal: number | undefined = 0;

  public constructor(kamasTotal?: number | undefined) {
    super();
    this.kamasTotal = kamasTotal;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.kamasTotal!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.kamasTotal = reader.readVarLong();
  }
}

export class StorageObjectsUpdateMessage extends DofusMessage {
  public static id: number = 7209;

  public objectList: ObjectItem[] | undefined;

  public constructor(objectList?: ObjectItem[] | undefined) {
    super();
    this.objectList = objectList;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objectList!.length);
    this.objectList!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectList = [];
    const countObjectList = reader.readShort();
    for (let i: number = 0; i < countObjectList; i++) {
      const type: ObjectItem = new ObjectItem();
      type.deserialize(reader);
      this.objectList.push(type);
    }
  }
}

export class GuildInvitedMessage extends DofusMessage {
  public static id: number = 7582;

  public guildInfo: BasicGuildInformations | undefined;
  public recruterName: string | undefined;
  public recruterId: number | undefined = 0;

  public constructor(
    guildInfo?: BasicGuildInformations | undefined,
    recruterName?: string | undefined,
    recruterId?: number | undefined,
  ) {
    super();
    this.guildInfo = guildInfo;
    this.recruterName = recruterName;
    this.recruterId = recruterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.guildInfo!.serialize(writer);
    writer.writeUTF(this.recruterName!);
    writer.writeVarLong(this.recruterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildInfo = new BasicGuildInformations();
    this.guildInfo!.deserialize(reader);
    this.recruterName = reader.readUTF();
    this.recruterId = reader.readVarLong();
  }
}

export class ActivitySuggestionsMessage extends DofusMessage {
  public static id: number = 5931;

  public unlockedActivitiesIds: number[] | undefined;
  public lockedActivitiesIds: number[] | undefined;

  public constructor(
    unlockedActivitiesIds?: number[] | undefined,
    lockedActivitiesIds?: number[] | undefined,
  ) {
    super();
    this.unlockedActivitiesIds = unlockedActivitiesIds;
    this.lockedActivitiesIds = lockedActivitiesIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.unlockedActivitiesIds!.length);
    this.unlockedActivitiesIds!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
    writer.writeShort(this.lockedActivitiesIds!.length);
    this.lockedActivitiesIds!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.unlockedActivitiesIds = [];
    const countUnlockedActivitiesIds = reader.readShort();
    for (let i: number = 0; i < countUnlockedActivitiesIds; i++) {
      this.unlockedActivitiesIds.push(reader.readVarShort());
    }
    this.lockedActivitiesIds = [];
    const countLockedActivitiesIds = reader.readShort();
    for (let i: number = 0; i < countLockedActivitiesIds; i++) {
      this.lockedActivitiesIds.push(reader.readVarShort());
    }
  }
}

export class ShortcutBarContentMessage extends DofusMessage {
  public static id: number = 7910;

  public shortcuts: Shortcut[] | undefined;
  public barType: number | undefined = 0;

  public constructor(
    shortcuts?: Shortcut[] | undefined,
    barType?: number | undefined,
  ) {
    super();
    this.shortcuts = shortcuts;
    this.barType = barType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.shortcuts!.length);
    this.shortcuts!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeByte(this.barType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.shortcuts = [];
    const countShortcuts = reader.readShort();
    for (let i: number = 0; i < countShortcuts; i++) {
      const shortcutsTypeId: number = reader.readShort();
      const type: Shortcut = new types[shortcutsTypeId]() as Shortcut;
      type.deserialize(reader);
      this.shortcuts.push(type);
    }
    this.barType = reader.readByte();
  }
}

export class ObjectsAddedMessage extends DofusMessage {
  public static id: number = 1568;

  public object_: ObjectItem[] | undefined;

  public constructor(object_?: ObjectItem[] | undefined) {
    super();
    this.object_ = object_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.object_!.length);
    this.object_!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.object_ = [];
    const countObject_ = reader.readShort();
    for (let i: number = 0; i < countObject_; i++) {
      const type: ObjectItem = new ObjectItem();
      type.deserialize(reader);
      this.object_.push(type);
    }
  }
}

export class CharacterSelectedSuccessMessage extends DofusMessage {
  public static id: number = 9833;

  public isCollectingStats: boolean | undefined = false;
  public infos: CharacterBaseInformations | undefined;

  public constructor(
    isCollectingStats?: boolean | undefined,
    infos?: CharacterBaseInformations | undefined,
  ) {
    super();
    this.isCollectingStats = isCollectingStats;
    this.infos = infos;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.isCollectingStats!);
    this.infos!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.isCollectingStats = reader.readBoolean();
    this.infos = new CharacterBaseInformations();
    this.infos!.deserialize(reader);
  }
}

export class ExchangeCraftResultMessage extends DofusMessage {
  public static id: number = 8524;

  public craftResult: number | undefined = 0;

  public constructor(craftResult?: number | undefined) {
    super();
    this.craftResult = craftResult;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.craftResult!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.craftResult = reader.readByte();
  }
}

export class ExchangeCraftResultWithObjectDescMessage extends ExchangeCraftResultMessage {
  public static id = 118;

  public objectInfo: ObjectItemNotInContainer | undefined;

  public constructor(
    craftResult?: number | undefined,
    objectInfo?: ObjectItemNotInContainer | undefined,
  ) {
    super(craftResult);
    this.objectInfo = objectInfo;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.objectInfo!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectInfo = new ObjectItemNotInContainer();
    this.objectInfo!.deserialize(reader);
  }
}

export class AbstractPartyMessage extends DofusMessage {
  public static id: number = 3299;

  public partyId: number | undefined = 0;

  public constructor(partyId?: number | undefined) {
    super();
    this.partyId = partyId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.partyId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.partyId = reader.readVarInt();
  }
}

export class AbstractPartyEventMessage extends AbstractPartyMessage {
  public static id = 2544;

  public constructor(partyId?: number | undefined) {
    super(partyId);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PartyMemberRemoveMessage extends AbstractPartyEventMessage {
  public static id = 9078;

  public leavingPlayerId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    leavingPlayerId?: number | undefined,
  ) {
    super(partyId);
    this.leavingPlayerId = leavingPlayerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.leavingPlayerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.leavingPlayerId = reader.readVarLong();
  }
}

export class GameRolePlayPlayerFightFriendlyAnsweredMessage extends DofusMessage {
  public static id: number = 5417;

  public sourceId: number | undefined = 0;
  public accept: boolean | undefined = false;
  public targetId: number | undefined = 0;
  public fightId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    accept?: boolean | undefined,
    targetId?: number | undefined,
    fightId?: number | undefined,
  ) {
    super();
    this.sourceId = sourceId;
    this.accept = accept;
    this.targetId = targetId;
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.sourceId!);
    writer.writeBoolean(this.accept!);
    writer.writeVarLong(this.targetId!);
    writer.writeVarShort(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.sourceId = reader.readVarLong();
    this.accept = reader.readBoolean();
    this.targetId = reader.readVarLong();
    this.fightId = reader.readVarShort();
  }
}

export class BasicWhoIsNoMatchMessage extends DofusMessage {
  public static id: number = 7631;

  public target: AbstractPlayerSearchInformation | undefined;

  public constructor(target?: AbstractPlayerSearchInformation | undefined) {
    super();
    this.target = target;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.target!.id);
    this.target!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const targetTypeId: number = reader.readShort();
    this.target = new types[targetTypeId]() as AbstractPlayerSearchInformation;
    this.target!.deserialize(reader);
  }
}

export class InteractiveUseErrorMessage extends DofusMessage {
  public static id: number = 778;

  public skillInstanceUid: number | undefined = 0;
  public elemId: number | undefined = 0;

  public constructor(
    skillInstanceUid?: number | undefined,
    elemId?: number | undefined,
  ) {
    super();
    this.skillInstanceUid = skillInstanceUid;
    this.elemId = elemId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.skillInstanceUid!);
    writer.writeVarInt(this.elemId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.skillInstanceUid = reader.readVarInt();
    this.elemId = reader.readVarInt();
  }
}

export class GameRolePlayGameOverMessage extends DofusMessage {
  public static id: number = 2042;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class NotificationByServerMessage extends DofusMessage {
  public static id: number = 2613;

  public forceOpen: boolean | undefined = false;
  public parameters: string[] | undefined;
  public id_: number | undefined = 0;

  public constructor(
    forceOpen?: boolean | undefined,
    parameters?: string[] | undefined,
    id_?: number | undefined,
  ) {
    super();
    this.forceOpen = forceOpen;
    this.parameters = parameters;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.forceOpen!);
    writer.writeShort(this.parameters!.length);
    this.parameters!.forEach((current: string) => writer.writeUTF(current));
    writer.writeVarShort(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.forceOpen = reader.readBoolean();
    this.parameters = [];
    const countParameters = reader.readShort();
    for (let i: number = 0; i < countParameters; i++) {
      this.parameters.push(reader.readUTF());
    }
    this.id_ = reader.readVarShort();
  }
}

export class GuildMemberOnlineStatusMessage extends DofusMessage {
  public static id: number = 4570;

  public online: boolean | undefined = false;
  public memberId: number | undefined = 0;

  public constructor(
    online?: boolean | undefined,
    memberId?: number | undefined,
  ) {
    super();
    this.online = online;
    this.memberId = memberId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.online!);
    writer.writeVarLong(this.memberId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.online = reader.readBoolean();
    this.memberId = reader.readVarLong();
  }
}

export class ExchangeMountsPaddockRemoveMessage extends DofusMessage {
  public static id: number = 2113;

  public mountsId: number[] | undefined;

  public constructor(mountsId?: number[] | undefined) {
    super();
    this.mountsId = mountsId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.mountsId!.length);
    this.mountsId!.forEach((current: number) => writer.writeVarInt(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mountsId = [];
    const countMountsId = reader.readShort();
    for (let i: number = 0; i < countMountsId; i++) {
      this.mountsId.push(reader.readVarInt());
    }
  }
}

export class SocialNoticeMessage extends DofusMessage {
  public static id: number = 8560;

  public memberName: string | undefined;
  public memberId: number | undefined = 0;
  public timestamp: number | undefined = 0;
  public content: string | undefined;

  public constructor(
    memberName?: string | undefined,
    memberId?: number | undefined,
    timestamp?: number | undefined,
    content?: string | undefined,
  ) {
    super();
    this.memberName = memberName;
    this.memberId = memberId;
    this.timestamp = timestamp;
    this.content = content;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.memberName!);
    writer.writeVarLong(this.memberId!);
    writer.writeInt(this.timestamp!);
    writer.writeUTF(this.content!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.memberName = reader.readUTF();
    this.memberId = reader.readVarLong();
    this.timestamp = reader.readInt();
    this.content = reader.readUTF();
  }
}

export class GameRolePlaySpellAnimMessage extends DofusMessage {
  public static id: number = 8430;

  public targetCellId: number | undefined = 0;
  public spellLevel: number | undefined = 0;
  public spellId: number | undefined = 0;
  public casterId: number | undefined = 0;

  public constructor(
    targetCellId?: number | undefined,
    spellLevel?: number | undefined,
    spellId?: number | undefined,
    casterId?: number | undefined,
  ) {
    super();
    this.targetCellId = targetCellId;
    this.spellLevel = spellLevel;
    this.spellId = spellId;
    this.casterId = casterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.targetCellId!);
    writer.writeShort(this.spellLevel!);
    writer.writeVarShort(this.spellId!);
    writer.writeVarLong(this.casterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetCellId = reader.readVarShort();
    this.spellLevel = reader.readShort();
    this.spellId = reader.readVarShort();
    this.casterId = reader.readVarLong();
  }
}

export class EmotePlayAbstractMessage extends DofusMessage {
  public static id: number = 4497;

  public emoteStartTime: number | undefined = 0;
  public emoteId: number | undefined = 0;

  public constructor(
    emoteStartTime?: number | undefined,
    emoteId?: number | undefined,
  ) {
    super();
    this.emoteStartTime = emoteStartTime;
    this.emoteId = emoteId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.emoteStartTime!);
    writer.writeShort(this.emoteId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.emoteStartTime = reader.readDouble();
    this.emoteId = reader.readShort();
  }
}

export class OrnamentGainedMessage extends DofusMessage {
  public static id: number = 3920;

  public ornamentId: number | undefined = 0;

  public constructor(ornamentId?: number | undefined) {
    super();
    this.ornamentId = ornamentId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.ornamentId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ornamentId = reader.readShort();
  }
}

export class ExchangeBidHouseUnsoldItemsMessage extends DofusMessage {
  public static id: number = 5576;

  public items: ObjectItemGenericQuantity[] | undefined;

  public constructor(items?: ObjectItemGenericQuantity[] | undefined) {
    super();
    this.items = items;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.items!.length);
    this.items!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.items = [];
    const countItems = reader.readShort();
    for (let i: number = 0; i < countItems; i++) {
      const type: ObjectItemGenericQuantity = new ObjectItemGenericQuantity();
      type.deserialize(reader);
      this.items.push(type);
    }
  }
}

export class ExchangeShopStockMovementRemovedMessage extends DofusMessage {
  public static id: number = 7025;

  public objectId: number | undefined = 0;

  public constructor(objectId?: number | undefined) {
    super();
    this.objectId = objectId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.objectId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectId = reader.readVarInt();
  }
}

export class IdolSelectErrorMessage extends DofusMessage {
  public static id: number = 4378;

  public idolId: number | undefined = 0;
  public reason: number | undefined = 0;
  public activate: boolean | undefined = false;
  public party: boolean | undefined = false;

  public constructor(
    idolId?: number | undefined,
    reason?: number | undefined,
    activate?: boolean | undefined,
    party?: boolean | undefined,
  ) {
    super();
    this.idolId = idolId;
    this.reason = reason;
    this.activate = activate;
    this.party = party;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.idolId!);
    writer.writeByte(this.reason!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.activate!);
    box0 = setFlag(box0, 1, this.party!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.idolId = reader.readVarShort();
    this.reason = reader.readByte();
    const box0 = reader.readByte();
    this.activate = getFlag(box0, 0);
    this.party = getFlag(box0, 1);
  }
}

export class SymbioticObjectAssociatedMessage extends DofusMessage {
  public static id: number = 4986;

  public hostUID: number | undefined = 0;

  public constructor(hostUID?: number | undefined) {
    super();
    this.hostUID = hostUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.hostUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.hostUID = reader.readVarInt();
  }
}

export class MimicryObjectAssociatedMessage extends SymbioticObjectAssociatedMessage {
  public static id = 8169;

  public constructor(hostUID?: number | undefined) {
    super(hostUID);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class BasicCharactersListMessage extends DofusMessage {
  public static id: number = 8228;

  public characters: CharacterBaseInformations[] | undefined;

  public constructor(characters?: CharacterBaseInformations[] | undefined) {
    super();
    this.characters = characters;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.characters!.length);
    this.characters!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.characters = [];
    const countCharacters = reader.readShort();
    for (let i: number = 0; i < countCharacters; i++) {
      const charactersTypeId: number = reader.readShort();
      const type: CharacterBaseInformations = new types[
        charactersTypeId
      ]() as CharacterBaseInformations;
      type.deserialize(reader);
      this.characters.push(type);
    }
  }
}

export class TreasureHuntAvailableRetryCountUpdateMessage extends DofusMessage {
  public static id: number = 3416;

  public availableRetryCount: number | undefined = 0;
  public questType: number | undefined = 0;

  public constructor(
    availableRetryCount?: number | undefined,
    questType?: number | undefined,
  ) {
    super();
    this.availableRetryCount = availableRetryCount;
    this.questType = questType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.availableRetryCount!);
    writer.writeByte(this.questType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.availableRetryCount = reader.readInt();
    this.questType = reader.readByte();
  }
}

export class LoginQueueStatusMessage extends DofusMessage {
  public static id: number = 2063;

  public total: number | undefined = 0;
  public position: number | undefined = 0;

  public constructor(
    total?: number | undefined,
    position?: number | undefined,
  ) {
    super();
    this.total = total;
    this.position = position;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.total!);
    writer.writeShort(this.position!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.total = reader.readShort();
    this.position = reader.readShort();
  }
}

export class PartyCancelInvitationNotificationMessage extends AbstractPartyEventMessage {
  public static id = 1489;

  public guestId: number | undefined = 0;
  public cancelerId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    guestId?: number | undefined,
    cancelerId?: number | undefined,
  ) {
    super(partyId);
    this.guestId = guestId;
    this.cancelerId = cancelerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.guestId!);
    writer.writeVarLong(this.cancelerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guestId = reader.readVarLong();
    this.cancelerId = reader.readVarLong();
  }
}

export class PaginationAnswerAbstractMessage extends DofusMessage {
  public static id: number = 2864;

  public count: number | undefined = 0;
  public total: number | undefined = 0;
  public offset: number | undefined = 0;

  public constructor(
    count?: number | undefined,
    total?: number | undefined,
    offset?: number | undefined,
  ) {
    super();
    this.count = count;
    this.total = total;
    this.offset = offset;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUInt(this.count!);
    writer.writeUInt(this.total!);
    writer.writeDouble(this.offset!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.count = reader.readUInt();
    this.total = reader.readUInt();
    this.offset = reader.readDouble();
  }
}

export class DungeonPartyFinderListenErrorMessage extends DofusMessage {
  public static id: number = 7331;

  public dungeonId: number | undefined = 0;

  public constructor(dungeonId?: number | undefined) {
    super();
    this.dungeonId = dungeonId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.dungeonId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dungeonId = reader.readVarShort();
  }
}

export class ExchangeObjectMessage extends DofusMessage {
  public static id: number = 1966;

  public remote: boolean | undefined = false;

  public constructor(remote?: boolean | undefined) {
    super();
    this.remote = remote;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.remote!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.remote = reader.readBoolean();
  }
}

export class ExchangeObjectsRemovedMessage extends ExchangeObjectMessage {
  public static id = 4841;

  public objectUID: number[] | undefined;

  public constructor(
    remote?: boolean | undefined,
    objectUID?: number[] | undefined,
  ) {
    super(remote);
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objectUID!.length);
    this.objectUID!.forEach((current: number) => writer.writeVarInt(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectUID = [];
    const countObjectUID = reader.readShort();
    for (let i: number = 0; i < countObjectUID; i++) {
      this.objectUID.push(reader.readVarInt());
    }
  }
}

export class TextInformationMessage extends DofusMessage {
  public static id: number = 3712;

  public parameters: string[] | undefined;
  public msgId: number | undefined = 0;
  public msgType: number | undefined = 0;

  public constructor(
    parameters?: string[] | undefined,
    msgId?: number | undefined,
    msgType?: number | undefined,
  ) {
    super();
    this.parameters = parameters;
    this.msgId = msgId;
    this.msgType = msgType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.parameters!.length);
    this.parameters!.forEach((current: string) => writer.writeUTF(current));
    writer.writeVarShort(this.msgId!);
    writer.writeByte(this.msgType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.parameters = [];
    const countParameters = reader.readShort();
    for (let i: number = 0; i < countParameters; i++) {
      this.parameters.push(reader.readUTF());
    }
    this.msgId = reader.readVarShort();
    this.msgType = reader.readByte();
  }
}

export class WarnOnPermaDeathStateMessage extends DofusMessage {
  public static id: number = 8629;

  public enable: boolean | undefined = false;

  public constructor(enable?: boolean | undefined) {
    super();
    this.enable = enable;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
  }
}

export class ExchangeOfflineSoldItemsMessage extends DofusMessage {
  public static id: number = 5671;

  public merchantItems: ObjectItemQuantityPriceDateEffects[] | undefined;
  public bidHouseItems: ObjectItemQuantityPriceDateEffects[] | undefined;

  public constructor(
    merchantItems?: ObjectItemQuantityPriceDateEffects[] | undefined,
    bidHouseItems?: ObjectItemQuantityPriceDateEffects[] | undefined,
  ) {
    super();
    this.merchantItems = merchantItems;
    this.bidHouseItems = bidHouseItems;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.merchantItems!.length);
    this.merchantItems!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.bidHouseItems!.length);
    this.bidHouseItems!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.merchantItems = [];
    const countMerchantItems = reader.readShort();
    for (let i: number = 0; i < countMerchantItems; i++) {
      const type: ObjectItemQuantityPriceDateEffects =
        new ObjectItemQuantityPriceDateEffects();
      type.deserialize(reader);
      this.merchantItems.push(type);
    }
    this.bidHouseItems = [];
    const countBidHouseItems = reader.readShort();
    for (let i: number = 0; i < countBidHouseItems; i++) {
      const type: ObjectItemQuantityPriceDateEffects =
        new ObjectItemQuantityPriceDateEffects();
      type.deserialize(reader);
      this.bidHouseItems.push(type);
    }
  }
}

export class PartyLeaveMessage extends AbstractPartyMessage {
  public static id = 4001;

  public constructor(partyId?: number | undefined) {
    super(partyId);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class QueueStatusMessage extends DofusMessage {
  public static id: number = 2197;

  public total: number | undefined = 0;
  public position: number | undefined = 0;

  public constructor(
    total?: number | undefined,
    position?: number | undefined,
  ) {
    super();
    this.total = total;
    this.position = position;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.total!);
    writer.writeShort(this.position!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.total = reader.readShort();
    this.position = reader.readShort();
  }
}

export class ExchangeObjectAddedMessage extends ExchangeObjectMessage {
  public static id = 2329;

  public object_: ObjectItem | undefined;

  public constructor(
    remote?: boolean | undefined,
    object_?: ObjectItem | undefined,
  ) {
    super(remote);
    this.object_ = object_;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.object_!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.object_ = new ObjectItem();
    this.object_!.deserialize(reader);
  }
}

export class ExchangeShopStockMovementUpdatedMessage extends DofusMessage {
  public static id: number = 9932;

  public objectInfo: ObjectItemToSell | undefined;

  public constructor(objectInfo?: ObjectItemToSell | undefined) {
    super();
    this.objectInfo = objectInfo;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.objectInfo!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectInfo = new ObjectItemToSell();
    this.objectInfo!.deserialize(reader);
  }
}

export class AbstractTaxCollectorListMessage extends DofusMessage {
  public static id: number = 6496;

  public informations: TaxCollectorInformations[] | undefined;

  public constructor(informations?: TaxCollectorInformations[] | undefined) {
    super();
    this.informations = informations;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.informations!.length);
    this.informations!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.informations = [];
    const countInformations = reader.readShort();
    for (let i: number = 0; i < countInformations; i++) {
      const informationsTypeId: number = reader.readShort();
      const type: TaxCollectorInformations = new types[
        informationsTypeId
      ]() as TaxCollectorInformations;
      type.deserialize(reader);
      this.informations.push(type);
    }
  }
}

export class TaxCollectorListMessage extends AbstractTaxCollectorListMessage {
  public static id = 4811;

  public fightersInformations: TaxCollectorFightersInformation[] | undefined;
  public infoType: number | undefined = 0;
  public nbcollectorMax: number | undefined = 0;

  public constructor(
    informations?: TaxCollectorInformations[] | undefined,
    fightersInformations?: TaxCollectorFightersInformation[] | undefined,
    infoType?: number | undefined,
    nbcollectorMax?: number | undefined,
  ) {
    super(informations);
    this.fightersInformations = fightersInformations;
    this.infoType = infoType;
    this.nbcollectorMax = nbcollectorMax;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.fightersInformations!.length);
    this.fightersInformations!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeByte(this.infoType!);
    writer.writeByte(this.nbcollectorMax!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fightersInformations = [];
    const countFightersInformations = reader.readShort();
    for (let i: number = 0; i < countFightersInformations; i++) {
      const type: TaxCollectorFightersInformation =
        new TaxCollectorFightersInformation();
      type.deserialize(reader);
      this.fightersInformations.push(type);
    }
    this.infoType = reader.readByte();
    this.nbcollectorMax = reader.readByte();
  }
}

export class GameRolePlayDelayedActionMessage extends DofusMessage {
  public static id: number = 1161;

  public delayTypeId: number | undefined = 0;
  public delayEndTime: number | undefined = 0;
  public delayedCharacterId: number | undefined = 0;

  public constructor(
    delayTypeId?: number | undefined,
    delayEndTime?: number | undefined,
    delayedCharacterId?: number | undefined,
  ) {
    super();
    this.delayTypeId = delayTypeId;
    this.delayEndTime = delayEndTime;
    this.delayedCharacterId = delayedCharacterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.delayTypeId!);
    writer.writeDouble(this.delayEndTime!);
    writer.writeDouble(this.delayedCharacterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.delayTypeId = reader.readByte();
    this.delayEndTime = reader.readDouble();
    this.delayedCharacterId = reader.readDouble();
  }
}

export class PauseDialogMessage extends DofusMessage {
  public static id: number = 8906;

  public dialogType: number | undefined = 0;

  public constructor(dialogType?: number | undefined) {
    super();
    this.dialogType = dialogType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.dialogType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dialogType = reader.readByte();
  }
}

export class TeleportDestinationsMessage extends DofusMessage {
  public static id: number = 5651;

  public destinations: TeleportDestination[] | undefined;
  public type: number | undefined = 0;

  public constructor(
    destinations?: TeleportDestination[] | undefined,
    type?: number | undefined,
  ) {
    super();
    this.destinations = destinations;
    this.type = type;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.destinations!.length);
    this.destinations!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeByte(this.type!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.destinations = [];
    const countDestinations = reader.readShort();
    for (let i: number = 0; i < countDestinations; i++) {
      const type: TeleportDestination = new TeleportDestination();
      type.deserialize(reader);
      this.destinations.push(type);
    }
    this.type = reader.readByte();
  }
}

export class LifePointsRegenBeginMessage extends DofusMessage {
  public static id: number = 9626;

  public regenRate: number | undefined = 0;

  public constructor(regenRate?: number | undefined) {
    super();
    this.regenRate = regenRate;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.regenRate!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.regenRate = reader.readByte();
  }
}

export class BreachBranchesMessage extends DofusMessage {
  public static id: number = 2907;

  public branches: ExtendedBreachBranch[] | undefined;

  public constructor(branches?: ExtendedBreachBranch[] | undefined) {
    super();
    this.branches = branches;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.branches!.length);
    this.branches!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.branches = [];
    const countBranches = reader.readShort();
    for (let i: number = 0; i < countBranches; i++) {
      const branchesTypeId: number = reader.readShort();
      const type: ExtendedBreachBranch = new types[
        branchesTypeId
      ]() as ExtendedBreachBranch;
      type.deserialize(reader);
      this.branches.push(type);
    }
  }
}

export class GuildApplicationDeletedMessage extends DofusMessage {
  public static id: number = 5546;

  public deleted: boolean | undefined = false;

  public constructor(deleted?: boolean | undefined) {
    super();
    this.deleted = deleted;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.deleted!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.deleted = reader.readBoolean();
  }
}

export class CheckFileRequestMessage extends DofusMessage {
  public static id: number = 7075;

  public type: number | undefined = 0;
  public filename: string | undefined;

  public constructor(type?: number | undefined, filename?: string | undefined) {
    super();
    this.type = type;
    this.filename = filename;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.type!);
    writer.writeUTF(this.filename!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.type = reader.readByte();
    this.filename = reader.readUTF();
  }
}

export class ForgettableSpellListUpdateMessage extends DofusMessage {
  public static id: number = 9946;

  public spells: ForgettableSpellItem[] | undefined;
  public action: number | undefined = 0;

  public constructor(
    spells?: ForgettableSpellItem[] | undefined,
    action?: number | undefined,
  ) {
    super();
    this.spells = spells;
    this.action = action;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.spells!.length);
    this.spells!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeByte(this.action!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.spells = [];
    const countSpells = reader.readShort();
    for (let i: number = 0; i < countSpells; i++) {
      const type: ForgettableSpellItem = new ForgettableSpellItem();
      type.deserialize(reader);
      this.spells.push(type);
    }
    this.action = reader.readByte();
  }
}

export class CharactersListMessage extends BasicCharactersListMessage {
  public static id = 269;

  public hasStartupActions: boolean | undefined = false;

  public constructor(
    characters?: CharacterBaseInformations[] | undefined,
    hasStartupActions?: boolean | undefined,
  ) {
    super(characters);
    this.hasStartupActions = hasStartupActions;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.hasStartupActions!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.hasStartupActions = reader.readBoolean();
  }
}

export class CharactersListWithRemodelingMessage extends CharactersListMessage {
  public static id = 3532;

  public charactersToRemodel: CharacterToRemodelInformations[] | undefined;

  public constructor(
    characters?: CharacterBaseInformations[] | undefined,
    hasStartupActions?: boolean | undefined,
    charactersToRemodel?: CharacterToRemodelInformations[] | undefined,
  ) {
    super(characters, hasStartupActions);
    this.charactersToRemodel = charactersToRemodel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.charactersToRemodel!.length);
    this.charactersToRemodel!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.charactersToRemodel = [];
    const countCharactersToRemodel = reader.readShort();
    for (let i: number = 0; i < countCharactersToRemodel; i++) {
      const type: CharacterToRemodelInformations =
        new CharacterToRemodelInformations();
      type.deserialize(reader);
      this.charactersToRemodel.push(type);
    }
  }
}

export class InteractiveElementUpdatedMessage extends DofusMessage {
  public static id: number = 7321;

  public interactiveElement: InteractiveElement | undefined;

  public constructor(interactiveElement?: InteractiveElement | undefined) {
    super();
    this.interactiveElement = interactiveElement;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.interactiveElement!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.interactiveElement = new InteractiveElement();
    this.interactiveElement!.deserialize(reader);
  }
}

export class GameRolePlayFightRequestCanceledMessage extends DofusMessage {
  public static id: number = 4478;

  public sourceId: number | undefined = 0;
  public targetId: number | undefined = 0;
  public fightId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    targetId?: number | undefined,
    fightId?: number | undefined,
  ) {
    super();
    this.sourceId = sourceId;
    this.targetId = targetId;
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.sourceId!);
    writer.writeDouble(this.targetId!);
    writer.writeVarShort(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.sourceId = reader.readDouble();
    this.targetId = reader.readDouble();
    this.fightId = reader.readVarShort();
  }
}

export class BreachSavedMessage extends DofusMessage {
  public static id: number = 4537;

  public saved: boolean | undefined = false;

  public constructor(saved?: boolean | undefined) {
    super();
    this.saved = saved;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.saved!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.saved = reader.readBoolean();
  }
}

export class GuildFightPlayersHelpersLeaveMessage extends DofusMessage {
  public static id: number = 5749;

  public playerId: number | undefined = 0;
  public fightId: number | undefined = 0;

  public constructor(
    playerId?: number | undefined,
    fightId?: number | undefined,
  ) {
    super();
    this.playerId = playerId;
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
    writer.writeDouble(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
    this.fightId = reader.readDouble();
  }
}

export class HaapiApiKeyMessage extends DofusMessage {
  public static id: number = 9970;

  public token: string | undefined;

  public constructor(token?: string | undefined) {
    super();
    this.token = token;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.token!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.token = reader.readUTF();
  }
}

export class TopTaxCollectorListMessage extends AbstractTaxCollectorListMessage {
  public static id = 3617;

  public isDungeon: boolean | undefined = false;

  public constructor(
    informations?: TaxCollectorInformations[] | undefined,
    isDungeon?: boolean | undefined,
  ) {
    super(informations);
    this.isDungeon = isDungeon;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.isDungeon!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.isDungeon = reader.readBoolean();
  }
}

export class GameRolePlayArenaFighterStatusMessage extends DofusMessage {
  public static id: number = 5125;

  public accepted: boolean | undefined = false;
  public playerId: number | undefined = 0;
  public fightId: number | undefined = 0;

  public constructor(
    accepted?: boolean | undefined,
    playerId?: number | undefined,
    fightId?: number | undefined,
  ) {
    super();
    this.accepted = accepted;
    this.playerId = playerId;
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.accepted!);
    writer.writeDouble(this.playerId!);
    writer.writeVarShort(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accepted = reader.readBoolean();
    this.playerId = reader.readDouble();
    this.fightId = reader.readVarShort();
  }
}

export class ChatServerCopyMessage extends ChatAbstractServerMessage {
  public static id = 5344;

  public receiverName: string | undefined;
  public receiverId: number | undefined = 0;

  public constructor(
    fingerprint?: string | undefined,
    timestamp?: number | undefined,
    content?: string | undefined,
    channel?: number | undefined,
    receiverName?: string | undefined,
    receiverId?: number | undefined,
  ) {
    super(fingerprint, timestamp, content, channel);
    this.receiverName = receiverName;
    this.receiverId = receiverId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.receiverName!);
    writer.writeVarLong(this.receiverId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.receiverName = reader.readUTF();
    this.receiverId = reader.readVarLong();
  }
}

export class ChatSmileyMessage extends DofusMessage {
  public static id: number = 5518;

  public accountId: number | undefined = 0;
  public smileyId: number | undefined = 0;
  public entityId: number | undefined = 0;

  public constructor(
    accountId?: number | undefined,
    smileyId?: number | undefined,
    entityId?: number | undefined,
  ) {
    super();
    this.accountId = accountId;
    this.smileyId = smileyId;
    this.entityId = entityId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.accountId!);
    writer.writeVarShort(this.smileyId!);
    writer.writeDouble(this.entityId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accountId = reader.readInt();
    this.smileyId = reader.readVarShort();
    this.entityId = reader.readDouble();
  }
}

export class LocalizedChatSmileyMessage extends ChatSmileyMessage {
  public static id = 5134;

  public cellId: number | undefined = 0;

  public constructor(
    accountId?: number | undefined,
    smileyId?: number | undefined,
    entityId?: number | undefined,
    cellId?: number | undefined,
  ) {
    super(accountId, smileyId, entityId);
    this.cellId = cellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.cellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readVarShort();
  }
}

export class GameRolePlayArenaSwitchToFightServerMessage extends DofusMessage {
  public static id: number = 3316;

  public address: string | undefined;
  public ports: number[] | undefined;
  public ticket: number[] | undefined;

  public constructor(
    address?: string | undefined,
    ports?: number[] | undefined,
    ticket?: number[] | undefined,
  ) {
    super();
    this.address = address;
    this.ports = ports;
    this.ticket = ticket;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.address!);
    writer.writeShort(this.ports!.length);
    this.ports!.forEach((current: number) => writer.writeVarShort(current));
    writer.writeVarInt(this.ticket!.length);
    this.ticket!.forEach((current: number) => writer.writeByte(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.address = reader.readUTF();
    this.ports = [];
    const countPorts = reader.readShort();
    for (let i: number = 0; i < countPorts; i++) {
      this.ports.push(reader.readVarShort());
    }
    this.ticket = [];
    const countTicket = reader.readVarInt();
    for (let i: number = 0; i < countTicket; i++) {
      this.ticket.push(reader.readByte());
    }
  }
}

export class ProtocolRequired extends DofusMessage {
  public static id: number = 5716;

  public version: string | undefined;

  public constructor(version?: string | undefined) {
    super();
    this.version = version;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.version!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.version = reader.readUTF();
  }
}

export class CompassUpdateMessage extends DofusMessage {
  public static id: number = 8716;

  public coords: MapCoordinates | undefined;
  public type: number | undefined = 0;

  public constructor(
    coords?: MapCoordinates | undefined,
    type?: number | undefined,
  ) {
    super();
    this.coords = coords;
    this.type = type;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.coords!.id);
    this.coords!.serialize(writer);
    writer.writeByte(this.type!);
  }

  public deserialize(reader: BinaryDataReader): void {
    const coordsTypeId: number = reader.readShort();
    this.coords = new types[coordsTypeId]() as MapCoordinates;
    this.coords!.deserialize(reader);
    this.type = reader.readByte();
  }
}

export class GameRefreshMonsterBoostsMessage extends DofusMessage {
  public static id: number = 2110;

  public familyBoosts: MonsterBoosts[] | undefined;
  public monsterBoosts: MonsterBoosts[] | undefined;

  public constructor(
    familyBoosts?: MonsterBoosts[] | undefined,
    monsterBoosts?: MonsterBoosts[] | undefined,
  ) {
    super();
    this.familyBoosts = familyBoosts;
    this.monsterBoosts = monsterBoosts;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.familyBoosts!.length);
    this.familyBoosts!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.monsterBoosts!.length);
    this.monsterBoosts!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.familyBoosts = [];
    const countFamilyBoosts = reader.readShort();
    for (let i: number = 0; i < countFamilyBoosts; i++) {
      const type: MonsterBoosts = new MonsterBoosts();
      type.deserialize(reader);
      this.familyBoosts.push(type);
    }
    this.monsterBoosts = [];
    const countMonsterBoosts = reader.readShort();
    for (let i: number = 0; i < countMonsterBoosts; i++) {
      const type: MonsterBoosts = new MonsterBoosts();
      type.deserialize(reader);
      this.monsterBoosts.push(type);
    }
  }
}

export class GuildPlayerApplicationAbstractMessage extends DofusMessage {
  public static id: number = 5896;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GuildPlayerApplicationInformationMessage extends GuildPlayerApplicationAbstractMessage {
  public static id = 9380;

  public apply: GuildApplicationInformation | undefined;
  public guildInformation: GuildInformations | undefined;

  public constructor(
    apply?: GuildApplicationInformation | undefined,
    guildInformation?: GuildInformations | undefined,
  ) {
    super();
    this.apply = apply;
    this.guildInformation = guildInformation;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.apply!.serialize(writer);
    this.guildInformation!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.apply = new GuildApplicationInformation();
    this.apply!.deserialize(reader);
    this.guildInformation = new GuildInformations();
    this.guildInformation!.deserialize(reader);
  }
}

export class DungeonPartyFinderRegisterSuccessMessage extends DofusMessage {
  public static id: number = 2385;

  public dungeonIds: number[] | undefined;

  public constructor(dungeonIds?: number[] | undefined) {
    super();
    this.dungeonIds = dungeonIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.dungeonIds!.length);
    this.dungeonIds!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dungeonIds = [];
    const countDungeonIds = reader.readShort();
    for (let i: number = 0; i < countDungeonIds; i++) {
      this.dungeonIds.push(reader.readVarShort());
    }
  }
}

export class SpellVariantActivationMessage extends DofusMessage {
  public static id: number = 8666;

  public result: boolean | undefined = false;
  public spellId: number | undefined = 0;

  public constructor(
    result?: boolean | undefined,
    spellId?: number | undefined,
  ) {
    super();
    this.result = result;
    this.spellId = spellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.result!);
    writer.writeVarShort(this.spellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.result = reader.readBoolean();
    this.spellId = reader.readVarShort();
  }
}

export class StorageObjectsRemoveMessage extends DofusMessage {
  public static id: number = 7044;

  public objectUIDList: number[] | undefined;

  public constructor(objectUIDList?: number[] | undefined) {
    super();
    this.objectUIDList = objectUIDList;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objectUIDList!.length);
    this.objectUIDList!.forEach((current: number) =>
      writer.writeVarInt(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectUIDList = [];
    const countObjectUIDList = reader.readShort();
    for (let i: number = 0; i < countObjectUIDList; i++) {
      this.objectUIDList.push(reader.readVarInt());
    }
  }
}

export class MountReleasedMessage extends DofusMessage {
  public static id: number = 843;

  public mountId: number | undefined = 0;

  public constructor(mountId?: number | undefined) {
    super();
    this.mountId = mountId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.mountId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mountId = reader.readVarInt();
  }
}

export class DecraftResultMessage extends DofusMessage {
  public static id: number = 7257;

  public results: DecraftedItemStackInfo[] | undefined;

  public constructor(results?: DecraftedItemStackInfo[] | undefined) {
    super();
    this.results = results;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.results!.length);
    this.results!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.results = [];
    const countResults = reader.readShort();
    for (let i: number = 0; i < countResults; i++) {
      const type: DecraftedItemStackInfo = new DecraftedItemStackInfo();
      type.deserialize(reader);
      this.results.push(type);
    }
  }
}

export class MapFightStartPositionsUpdateMessage extends DofusMessage {
  public static id: number = 5408;

  public fightStartPositions: FightStartingPositions | undefined;
  public mapId: number | undefined = 0;

  public constructor(
    fightStartPositions?: FightStartingPositions | undefined,
    mapId?: number | undefined,
  ) {
    super();
    this.fightStartPositions = fightStartPositions;
    this.mapId = mapId;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.fightStartPositions!.serialize(writer);
    writer.writeDouble(this.mapId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fightStartPositions = new FightStartingPositions();
    this.fightStartPositions!.deserialize(reader);
    this.mapId = reader.readDouble();
  }
}

export class OrnamentLostMessage extends DofusMessage {
  public static id: number = 94;

  public ornamentId: number | undefined = 0;

  public constructor(ornamentId?: number | undefined) {
    super();
    this.ornamentId = ornamentId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.ornamentId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ornamentId = reader.readShort();
  }
}

export class NetworkDataContainerMessage extends DofusMessage {
  public static id: number = 2;

  public constructor(
  ) {
    super();
  }

  public serialize(writer: BinaryDataWriter): void {}

  public deserialize(reader: BinaryDataReader): void {}
}

export class GuildPaddockBoughtMessage extends DofusMessage {
  public static id: number = 6217;

  public paddockInfo: PaddockContentInformations | undefined;

  public constructor(paddockInfo?: PaddockContentInformations | undefined) {
    super();
    this.paddockInfo = paddockInfo;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.paddockInfo!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.paddockInfo = new PaddockContentInformations();
    this.paddockInfo!.deserialize(reader);
  }
}

export class AbstractPartyMemberInFightMessage extends AbstractPartyMessage {
  public static id = 1888;

  public timeBeforeFightStart: number | undefined = 0;
  public reason: number | undefined = 0;
  public memberAccountId: number | undefined = 0;
  public fightId: number | undefined = 0;
  public memberId: number | undefined = 0;
  public memberName: string | undefined;

  public constructor(
    partyId?: number | undefined,
    timeBeforeFightStart?: number | undefined,
    reason?: number | undefined,
    memberAccountId?: number | undefined,
    fightId?: number | undefined,
    memberId?: number | undefined,
    memberName?: string | undefined,
  ) {
    super(partyId);
    this.timeBeforeFightStart = timeBeforeFightStart;
    this.reason = reason;
    this.memberAccountId = memberAccountId;
    this.fightId = fightId;
    this.memberId = memberId;
    this.memberName = memberName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.timeBeforeFightStart!);
    writer.writeByte(this.reason!);
    writer.writeInt(this.memberAccountId!);
    writer.writeVarShort(this.fightId!);
    writer.writeVarLong(this.memberId!);
    writer.writeUTF(this.memberName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.timeBeforeFightStart = reader.readVarShort();
    this.reason = reader.readByte();
    this.memberAccountId = reader.readInt();
    this.fightId = reader.readVarShort();
    this.memberId = reader.readVarLong();
    this.memberName = reader.readUTF();
  }
}

export class PartyMemberInStandardFightMessage extends AbstractPartyMemberInFightMessage {
  public static id = 6653;

  public fightMap: MapCoordinatesExtended | undefined;

  public constructor(
    partyId?: number | undefined,
    timeBeforeFightStart?: number | undefined,
    reason?: number | undefined,
    memberAccountId?: number | undefined,
    fightId?: number | undefined,
    memberId?: number | undefined,
    memberName?: string | undefined,
    fightMap?: MapCoordinatesExtended | undefined,
  ) {
    super(
      partyId,
      timeBeforeFightStart,
      reason,
      memberAccountId,
      fightId,
      memberId,
      memberName,
    );
    this.fightMap = fightMap;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.fightMap!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fightMap = new MapCoordinatesExtended();
    this.fightMap!.deserialize(reader);
  }
}

export class ExchangeStartedMessage extends DofusMessage {
  public static id: number = 8540;

  public exchangeType: number | undefined = 0;

  public constructor(exchangeType?: number | undefined) {
    super();
    this.exchangeType = exchangeType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.exchangeType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.exchangeType = reader.readByte();
  }
}

export class SpouseStatusMessage extends DofusMessage {
  public static id: number = 5406;

  public hasSpouse: boolean | undefined = false;

  public constructor(hasSpouse?: boolean | undefined) {
    super();
    this.hasSpouse = hasSpouse;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.hasSpouse!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.hasSpouse = reader.readBoolean();
  }
}

export class SubscriptionLimitationMessage extends DofusMessage {
  public static id: number = 969;

  public reason: number | undefined = 0;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class ExchangeBidPriceMessage extends DofusMessage {
  public static id: number = 8533;

  public averagePrice: number | undefined = 0;
  public genericId: number | undefined = 0;

  public constructor(
    averagePrice?: number | undefined,
    genericId?: number | undefined,
  ) {
    super();
    this.averagePrice = averagePrice;
    this.genericId = genericId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.averagePrice!);
    writer.writeVarShort(this.genericId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.averagePrice = reader.readVarLong();
    this.genericId = reader.readVarShort();
  }
}

export class ExchangeBidPriceForSellerMessage extends ExchangeBidPriceMessage {
  public static id = 8645;

  public minimalPrices: number[] | undefined;
  public allIdentical: boolean | undefined = false;

  public constructor(
    averagePrice?: number | undefined,
    genericId?: number | undefined,
    minimalPrices?: number[] | undefined,
    allIdentical?: boolean | undefined,
  ) {
    super(averagePrice, genericId);
    this.minimalPrices = minimalPrices;
    this.allIdentical = allIdentical;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.minimalPrices!.length);
    this.minimalPrices!.forEach((current: number) =>
      writer.writeVarLong(current),
    );
    writer.writeBoolean(this.allIdentical!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.minimalPrices = [];
    const countMinimalPrices = reader.readShort();
    for (let i: number = 0; i < countMinimalPrices; i++) {
      this.minimalPrices.push(reader.readVarLong());
    }
    this.allIdentical = reader.readBoolean();
  }
}

export class LockableShowCodeDialogMessage extends DofusMessage {
  public static id: number = 3045;

  public codeSize: number | undefined = 0;
  public changeOrUse: boolean | undefined = false;

  public constructor(
    codeSize?: number | undefined,
    changeOrUse?: boolean | undefined,
  ) {
    super();
    this.codeSize = codeSize;
    this.changeOrUse = changeOrUse;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.codeSize!);
    writer.writeBoolean(this.changeOrUse!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.codeSize = reader.readByte();
    this.changeOrUse = reader.readBoolean();
  }
}

export class GuildFightPlayersHelpersJoinMessage extends DofusMessage {
  public static id: number = 4751;

  public playerInfo: CharacterMinimalPlusLookInformations | undefined;
  public fightId: number | undefined = 0;

  public constructor(
    playerInfo?: CharacterMinimalPlusLookInformations | undefined,
    fightId?: number | undefined,
  ) {
    super();
    this.playerInfo = playerInfo;
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.playerInfo!.serialize(writer);
    writer.writeDouble(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerInfo = new CharacterMinimalPlusLookInformations();
    this.playerInfo!.deserialize(reader);
    this.fightId = reader.readDouble();
  }
}

export class TaxCollectorMovementsOfflineMessage extends DofusMessage {
  public static id: number = 3016;

  public movements: TaxCollectorMovement[] | undefined;

  public constructor(movements?: TaxCollectorMovement[] | undefined) {
    super();
    this.movements = movements;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.movements!.length);
    this.movements!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.movements = [];
    const countMovements = reader.readShort();
    for (let i: number = 0; i < countMovements; i++) {
      const type: TaxCollectorMovement = new TaxCollectorMovement();
      type.deserialize(reader);
      this.movements.push(type);
    }
  }
}

export class UpdateLifePointsMessage extends DofusMessage {
  public static id: number = 1857;

  public maxLifePoints: number | undefined = 0;
  public lifePoints: number | undefined = 0;

  public constructor(
    maxLifePoints?: number | undefined,
    lifePoints?: number | undefined,
  ) {
    super();
    this.maxLifePoints = maxLifePoints;
    this.lifePoints = lifePoints;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.maxLifePoints!);
    writer.writeVarInt(this.lifePoints!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.maxLifePoints = reader.readVarInt();
    this.lifePoints = reader.readVarInt();
  }
}

export class ReloginTokenStatusMessage extends DofusMessage {
  public static id: number = 3172;

  public ticket: number[] | undefined;
  public validToken: boolean | undefined = false;

  public constructor(
    ticket?: number[] | undefined,
    validToken?: boolean | undefined,
  ) {
    super();
    this.ticket = ticket;
    this.validToken = validToken;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.ticket!.length);
    this.ticket!.forEach((current: number) => writer.writeByte(current));
    writer.writeBoolean(this.validToken!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ticket = [];
    const countTicket = reader.readVarInt();
    for (let i: number = 0; i < countTicket; i++) {
      this.ticket.push(reader.readByte());
    }
    this.validToken = reader.readBoolean();
  }
}

export class TitleGainedMessage extends DofusMessage {
  public static id: number = 3386;

  public titleId: number | undefined = 0;

  public constructor(titleId?: number | undefined) {
    super();
    this.titleId = titleId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.titleId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.titleId = reader.readVarShort();
  }
}

export class InventoryContentMessage extends DofusMessage {
  public static id: number = 4197;

  public kamas: number | undefined = 0;
  public objects: ObjectItem[] | undefined;

  public constructor(
    kamas?: number | undefined,
    objects?: ObjectItem[] | undefined,
  ) {
    super();
    this.kamas = kamas;
    this.objects = objects;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.kamas!);
    writer.writeShort(this.objects!.length);
    this.objects!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.kamas = reader.readVarLong();
    this.objects = [];
    const countObjects = reader.readShort();
    for (let i: number = 0; i < countObjects; i++) {
      const type: ObjectItem = new ObjectItem();
      type.deserialize(reader);
      this.objects.push(type);
    }
  }
}

export class StorageInventoryContentMessage extends InventoryContentMessage {
  public static id = 561;

  public constructor(
    kamas?: number | undefined,
    objects?: ObjectItem[] | undefined,
  ) {
    super(kamas, objects);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ExchangeShopStockMultiMovementRemovedMessage extends DofusMessage {
  public static id: number = 3309;

  public objectIdList: number[] | undefined;

  public constructor(objectIdList?: number[] | undefined) {
    super();
    this.objectIdList = objectIdList;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objectIdList!.length);
    this.objectIdList!.forEach((current: number) =>
      writer.writeVarInt(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectIdList = [];
    const countObjectIdList = reader.readShort();
    for (let i: number = 0; i < countObjectIdList; i++) {
      this.objectIdList.push(reader.readVarInt());
    }
  }
}

export class TaxCollectorAttackedResultMessage extends DofusMessage {
  public static id: number = 7270;

  public deadOrAlive: boolean | undefined = false;
  public guild: BasicGuildInformations | undefined;
  public basicInfos: TaxCollectorBasicInformations | undefined;

  public constructor(
    deadOrAlive?: boolean | undefined,
    guild?: BasicGuildInformations | undefined,
    basicInfos?: TaxCollectorBasicInformations | undefined,
  ) {
    super();
    this.deadOrAlive = deadOrAlive;
    this.guild = guild;
    this.basicInfos = basicInfos;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.deadOrAlive!);
    this.guild!.serialize(writer);
    this.basicInfos!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.deadOrAlive = reader.readBoolean();
    this.guild = new BasicGuildInformations();
    this.guild!.deserialize(reader);
    this.basicInfos = new TaxCollectorBasicInformations();
    this.basicInfos!.deserialize(reader);
  }
}

export class ExchangeObjectRemovedMessage extends ExchangeObjectMessage {
  public static id = 7006;

  public objectUID: number | undefined = 0;

  public constructor(
    remote?: boolean | undefined,
    objectUID?: number | undefined,
  ) {
    super(remote);
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.objectUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectUID = reader.readVarInt();
  }
}

export class PrismFightAttackerAddMessage extends DofusMessage {
  public static id: number = 3086;

  public attacker: CharacterMinimalPlusLookInformations | undefined;
  public fightId: number | undefined = 0;
  public subAreaId: number | undefined = 0;

  public constructor(
    attacker?: CharacterMinimalPlusLookInformations | undefined,
    fightId?: number | undefined,
    subAreaId?: number | undefined,
  ) {
    super();
    this.attacker = attacker;
    this.fightId = fightId;
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.attacker!.id);
    this.attacker!.serialize(writer);
    writer.writeVarShort(this.fightId!);
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    const attackerTypeId: number = reader.readShort();
    this.attacker = new types[
      attackerTypeId
    ]() as CharacterMinimalPlusLookInformations;
    this.attacker!.deserialize(reader);
    this.fightId = reader.readVarShort();
    this.subAreaId = reader.readVarShort();
  }
}

export class LivingObjectMessageMessage extends DofusMessage {
  public static id: number = 2593;

  public objectGenericId: number | undefined = 0;
  public owner: string | undefined;
  public timeStamp: number | undefined = 0;
  public msgId: number | undefined = 0;

  public constructor(
    objectGenericId?: number | undefined,
    owner?: string | undefined,
    timeStamp?: number | undefined,
    msgId?: number | undefined,
  ) {
    super();
    this.objectGenericId = objectGenericId;
    this.owner = owner;
    this.timeStamp = timeStamp;
    this.msgId = msgId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.objectGenericId!);
    writer.writeUTF(this.owner!);
    writer.writeInt(this.timeStamp!);
    writer.writeVarShort(this.msgId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectGenericId = reader.readVarShort();
    this.owner = reader.readUTF();
    this.timeStamp = reader.readInt();
    this.msgId = reader.readVarShort();
  }
}

export class PartyInvitationMessage extends AbstractPartyMessage {
  public static id = 1660;

  public toId: number | undefined = 0;
  public fromName: string | undefined;
  public partyType: number | undefined = 0;
  public partyName: string | undefined;
  public maxParticipants: number | undefined = 0;
  public fromId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    toId?: number | undefined,
    fromName?: string | undefined,
    partyType?: number | undefined,
    partyName?: string | undefined,
    maxParticipants?: number | undefined,
    fromId?: number | undefined,
  ) {
    super(partyId);
    this.toId = toId;
    this.fromName = fromName;
    this.partyType = partyType;
    this.partyName = partyName;
    this.maxParticipants = maxParticipants;
    this.fromId = fromId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.toId!);
    writer.writeUTF(this.fromName!);
    writer.writeByte(this.partyType!);
    writer.writeUTF(this.partyName!);
    writer.writeByte(this.maxParticipants!);
    writer.writeVarLong(this.fromId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.toId = reader.readVarLong();
    this.fromName = reader.readUTF();
    this.partyType = reader.readByte();
    this.partyName = reader.readUTF();
    this.maxParticipants = reader.readByte();
    this.fromId = reader.readVarLong();
  }
}

export class TreasureHuntRequestAnswerMessage extends DofusMessage {
  public static id: number = 1019;

  public result: number | undefined = 0;
  public questType: number | undefined = 0;

  public constructor(
    result?: number | undefined,
    questType?: number | undefined,
  ) {
    super();
    this.result = result;
    this.questType = questType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.result!);
    writer.writeByte(this.questType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.result = reader.readByte();
    this.questType = reader.readByte();
  }
}

export class CharacterLoadingCompleteMessage extends DofusMessage {
  public static id: number = 9063;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GameRolePlayArenaPlayerBehavioursMessage extends DofusMessage {
  public static id: number = 92;

  public flags: string[] | undefined;
  public sanctions: string[] | undefined;
  public banDuration: number | undefined = 0;

  public constructor(
    flags?: string[] | undefined,
    sanctions?: string[] | undefined,
    banDuration?: number | undefined,
  ) {
    super();
    this.flags = flags;
    this.sanctions = sanctions;
    this.banDuration = banDuration;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.flags!.length);
    this.flags!.forEach((current: string) => writer.writeUTF(current));
    writer.writeShort(this.sanctions!.length);
    this.sanctions!.forEach((current: string) => writer.writeUTF(current));
    writer.writeInt(this.banDuration!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.flags = [];
    const countFlags = reader.readShort();
    for (let i: number = 0; i < countFlags; i++) {
      this.flags.push(reader.readUTF());
    }
    this.sanctions = [];
    const countSanctions = reader.readShort();
    for (let i: number = 0; i < countSanctions; i++) {
      this.sanctions.push(reader.readUTF());
    }
    this.banDuration = reader.readInt();
  }
}

export class TreasureHuntFlagRequestAnswerMessage extends DofusMessage {
  public static id: number = 8784;

  public index: number | undefined = 0;
  public result: number | undefined = 0;
  public questType: number | undefined = 0;

  public constructor(
    index?: number | undefined,
    result?: number | undefined,
    questType?: number | undefined,
  ) {
    super();
    this.index = index;
    this.result = result;
    this.questType = questType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.index!);
    writer.writeByte(this.result!);
    writer.writeByte(this.questType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.index = reader.readByte();
    this.result = reader.readByte();
    this.questType = reader.readByte();
  }
}

export class ExchangeIsReadyMessage extends DofusMessage {
  public static id: number = 6263;

  public ready: boolean | undefined = false;
  public id_: number | undefined = 0;

  public constructor(ready?: boolean | undefined, id_?: number | undefined) {
    super();
    this.ready = ready;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.ready!);
    writer.writeDouble(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ready = reader.readBoolean();
    this.id_ = reader.readDouble();
  }
}

export class AchievementAlmostFinishedDetailedListMessage extends DofusMessage {
  public static id: number = 6475;

  public almostFinishedAchievements: Achievement[] | undefined;

  public constructor(almostFinishedAchievements?: Achievement[] | undefined) {
    super();
    this.almostFinishedAchievements = almostFinishedAchievements;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.almostFinishedAchievements!.length);
    this.almostFinishedAchievements!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.almostFinishedAchievements = [];
    const countAlmostFinishedAchievements = reader.readShort();
    for (let i: number = 0; i < countAlmostFinishedAchievements; i++) {
      const type: Achievement = new Achievement();
      type.deserialize(reader);
      this.almostFinishedAchievements.push(type);
    }
  }
}

export class AllianceFactsErrorMessage extends DofusMessage {
  public static id: number = 8954;

  public allianceId: number | undefined = 0;

  public constructor(allianceId?: number | undefined) {
    super();
    this.allianceId = allianceId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.allianceId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceId = reader.readVarInt();
  }
}

export class InteractiveUseEndedMessage extends DofusMessage {
  public static id: number = 4234;

  public skillId: number | undefined = 0;
  public elemId: number | undefined = 0;

  public constructor(
    skillId?: number | undefined,
    elemId?: number | undefined,
  ) {
    super();
    this.skillId = skillId;
    this.elemId = elemId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.skillId!);
    writer.writeVarInt(this.elemId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.skillId = reader.readVarShort();
    this.elemId = reader.readVarInt();
  }
}

export class AllianceInvitedMessage extends DofusMessage {
  public static id: number = 6009;

  public recruterName: string | undefined;
  public allianceInfo: BasicNamedAllianceInformations | undefined;
  public recruterId: number | undefined = 0;

  public constructor(
    recruterName?: string | undefined,
    allianceInfo?: BasicNamedAllianceInformations | undefined,
    recruterId?: number | undefined,
  ) {
    super();
    this.recruterName = recruterName;
    this.allianceInfo = allianceInfo;
    this.recruterId = recruterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.recruterName!);
    this.allianceInfo!.serialize(writer);
    writer.writeVarLong(this.recruterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.recruterName = reader.readUTF();
    this.allianceInfo = new BasicNamedAllianceInformations();
    this.allianceInfo!.deserialize(reader);
    this.recruterId = reader.readVarLong();
  }
}

export class ExchangeStartOkCraftMessage extends DofusMessage {
  public static id: number = 3864;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PartyLocateMembersMessage extends AbstractPartyMessage {
  public static id = 3205;

  public geopositions: PartyMemberGeoPosition[] | undefined;

  public constructor(
    partyId?: number | undefined,
    geopositions?: PartyMemberGeoPosition[] | undefined,
  ) {
    super(partyId);
    this.geopositions = geopositions;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.geopositions!.length);
    this.geopositions!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.geopositions = [];
    const countGeopositions = reader.readShort();
    for (let i: number = 0; i < countGeopositions; i++) {
      const type: PartyMemberGeoPosition = new PartyMemberGeoPosition();
      type.deserialize(reader);
      this.geopositions.push(type);
    }
  }
}

export class ObjectsDeletedMessage extends DofusMessage {
  public static id: number = 9871;

  public objectUID: number[] | undefined;

  public constructor(objectUID?: number[] | undefined) {
    super();
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objectUID!.length);
    this.objectUID!.forEach((current: number) => writer.writeVarInt(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectUID = [];
    const countObjectUID = reader.readShort();
    for (let i: number = 0; i < countObjectUID; i++) {
      this.objectUID.push(reader.readVarInt());
    }
  }
}

export class PaddockPropertiesMessage extends DofusMessage {
  public static id: number = 3194;

  public properties: PaddockInstancesInformations | undefined;

  public constructor(properties?: PaddockInstancesInformations | undefined) {
    super();
    this.properties = properties;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.properties!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.properties = new PaddockInstancesInformations();
    this.properties!.deserialize(reader);
  }
}

export class GameContextRemoveMultipleElementsWithEventsMessage extends GameContextRemoveMultipleElementsMessage {
  public static id = 7428;

  public elementEventIds: number[] | undefined;

  public constructor(
    elementsIds?: number[] | undefined,
    elementEventIds?: number[] | undefined,
  ) {
    super(elementsIds);
    this.elementEventIds = elementEventIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.elementEventIds!.length);
    this.elementEventIds!.forEach((current: number) =>
      writer.writeByte(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.elementEventIds = [];
    const countElementEventIds = reader.readShort();
    for (let i: number = 0; i < countElementEventIds; i++) {
      this.elementEventIds.push(reader.readByte());
    }
  }
}

export class ExchangeStartOkMulticraftCustomerMessage extends DofusMessage {
  public static id: number = 3514;

  public crafterJobLevel: number | undefined = 0;
  public skillId: number | undefined = 0;

  public constructor(
    crafterJobLevel?: number | undefined,
    skillId?: number | undefined,
  ) {
    super();
    this.crafterJobLevel = crafterJobLevel;
    this.skillId = skillId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.crafterJobLevel!);
    writer.writeVarInt(this.skillId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.crafterJobLevel = reader.readByte();
    this.skillId = reader.readVarInt();
  }
}

export class SocialNoticeSetErrorMessage extends DofusMessage {
  public static id: number = 3378;

  public reason: number | undefined = 0;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class GuildBulletinSetErrorMessage extends SocialNoticeSetErrorMessage {
  public static id = 1255;

  public constructor(reason?: number | undefined) {
    super(reason);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class AccessoryPreviewMessage extends DofusMessage {
  public static id: number = 5355;

  public look: EntityLook | undefined;

  public constructor(look?: EntityLook | undefined) {
    super();
    this.look = look;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.look!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.look = new EntityLook();
    this.look!.deserialize(reader);
  }
}

export class ExchangeStartOkNpcShopMessage extends DofusMessage {
  public static id: number = 8584;

  public objectsInfos: ObjectItemToSellInNpcShop[] | undefined;
  public tokenId: number | undefined = 0;
  public npcSellerId: number | undefined = 0;

  public constructor(
    objectsInfos?: ObjectItemToSellInNpcShop[] | undefined,
    tokenId?: number | undefined,
    npcSellerId?: number | undefined,
  ) {
    super();
    this.objectsInfos = objectsInfos;
    this.tokenId = tokenId;
    this.npcSellerId = npcSellerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objectsInfos!.length);
    this.objectsInfos!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.tokenId!);
    writer.writeDouble(this.npcSellerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectsInfos = [];
    const countObjectsInfos = reader.readShort();
    for (let i: number = 0; i < countObjectsInfos; i++) {
      const type: ObjectItemToSellInNpcShop = new ObjectItemToSellInNpcShop();
      type.deserialize(reader);
      this.objectsInfos.push(type);
    }
    this.tokenId = reader.readVarShort();
    this.npcSellerId = reader.readDouble();
  }
}

export class PartyUpdateMessage extends AbstractPartyEventMessage {
  public static id = 1769;

  public memberInformations: PartyMemberInformations | undefined;

  public constructor(
    partyId?: number | undefined,
    memberInformations?: PartyMemberInformations | undefined,
  ) {
    super(partyId);
    this.memberInformations = memberInformations;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.memberInformations!.id);
    this.memberInformations!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const memberInformationsTypeId: number = reader.readShort();
    this.memberInformations = new types[
      memberInformationsTypeId
    ]() as PartyMemberInformations;
    this.memberInformations!.deserialize(reader);
  }
}

export class PartyNewMemberMessage extends PartyUpdateMessage {
  public static id = 7610;

  public constructor(
    partyId?: number | undefined,
    memberInformations?: PartyMemberInformations | undefined,
  ) {
    super(partyId, memberInformations);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class InviteInHavenBagMessage extends DofusMessage {
  public static id: number = 2929;

  public accept: boolean | undefined = false;
  public guestInformations: CharacterMinimalInformations | undefined;

  public constructor(
    accept?: boolean | undefined,
    guestInformations?: CharacterMinimalInformations | undefined,
  ) {
    super();
    this.accept = accept;
    this.guestInformations = guestInformations;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.accept!);
    this.guestInformations!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accept = reader.readBoolean();
    this.guestInformations = new CharacterMinimalInformations();
    this.guestInformations!.deserialize(reader);
  }
}

export class AllianceInvitationStateRecruterMessage extends DofusMessage {
  public static id: number = 2498;

  public invitationState: number | undefined = 0;
  public recrutedName: string | undefined;

  public constructor(
    invitationState?: number | undefined,
    recrutedName?: string | undefined,
  ) {
    super();
    this.invitationState = invitationState;
    this.recrutedName = recrutedName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.invitationState!);
    writer.writeUTF(this.recrutedName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.invitationState = reader.readByte();
    this.recrutedName = reader.readUTF();
  }
}

export class ExchangeCrafterJobLevelupMessage extends DofusMessage {
  public static id: number = 6591;

  public crafterJobLevel: number | undefined = 0;

  public constructor(crafterJobLevel?: number | undefined) {
    super();
    this.crafterJobLevel = crafterJobLevel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.crafterJobLevel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.crafterJobLevel = reader.readByte();
  }
}

export class IgnoredAddFailureMessage extends DofusMessage {
  public static id: number = 4052;

  public reason: number | undefined = 0;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class ExchangeStartedBidSellerMessage extends DofusMessage {
  public static id: number = 7532;

  public objectsInfos: ObjectItemToSellInBid[] | undefined;
  public sellerDescriptor: SellerBuyerDescriptor | undefined;

  public constructor(
    objectsInfos?: ObjectItemToSellInBid[] | undefined,
    sellerDescriptor?: SellerBuyerDescriptor | undefined,
  ) {
    super();
    this.objectsInfos = objectsInfos;
    this.sellerDescriptor = sellerDescriptor;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objectsInfos!.length);
    this.objectsInfos!.forEach((current) => {
      current.serialize(writer);
    });
    this.sellerDescriptor!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectsInfos = [];
    const countObjectsInfos = reader.readShort();
    for (let i: number = 0; i < countObjectsInfos; i++) {
      const type: ObjectItemToSellInBid = new ObjectItemToSellInBid();
      type.deserialize(reader);
      this.objectsInfos.push(type);
    }
    this.sellerDescriptor = new SellerBuyerDescriptor();
    this.sellerDescriptor!.deserialize(reader);
  }
}

export class EmotePlayMassiveMessage extends EmotePlayAbstractMessage {
  public static id = 7780;

  public actorIds: number[] | undefined;

  public constructor(
    emoteStartTime?: number | undefined,
    emoteId?: number | undefined,
    actorIds?: number[] | undefined,
  ) {
    super(emoteStartTime, emoteId);
    this.actorIds = actorIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.actorIds!.length);
    this.actorIds!.forEach((current: number) => writer.writeDouble(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.actorIds = [];
    const countActorIds = reader.readShort();
    for (let i: number = 0; i < countActorIds; i++) {
      this.actorIds.push(reader.readDouble());
    }
  }
}

export class HaapiValidationMessage extends DofusMessage {
  public static id: number = 8710;

  public code: number | undefined = 0;
  public action: number | undefined = 0;

  public constructor(code?: number | undefined, action?: number | undefined) {
    super();
    this.code = code;
    this.action = action;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.code!);
    writer.writeByte(this.action!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.code = reader.readByte();
    this.action = reader.readByte();
  }
}

export class IgnoredDeleteResultMessage extends DofusMessage {
  public static id: number = 9652;

  public tag: AccountTagInformation | undefined;
  public success: boolean | undefined = false;
  public session: boolean | undefined = false;

  public constructor(
    tag?: AccountTagInformation | undefined,
    success?: boolean | undefined,
    session?: boolean | undefined,
  ) {
    super();
    this.tag = tag;
    this.success = success;
    this.session = session;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.tag!.serialize(writer);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.success!);
    box0 = setFlag(box0, 1, this.session!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.tag = new AccountTagInformation();
    this.tag!.deserialize(reader);
    const box0 = reader.readByte();
    this.success = getFlag(box0, 0);
    this.session = getFlag(box0, 1);
  }
}

export class CompassUpdatePartyMemberMessage extends CompassUpdateMessage {
  public static id = 9272;

  public active: boolean | undefined = false;
  public memberId: number | undefined = 0;

  public constructor(
    coords?: MapCoordinates | undefined,
    type?: number | undefined,
    active?: boolean | undefined,
    memberId?: number | undefined,
  ) {
    super(coords, type);
    this.active = active;
    this.memberId = memberId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.active!);
    writer.writeVarLong(this.memberId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.active = reader.readBoolean();
    this.memberId = reader.readVarLong();
  }
}

export class ExchangeObjectPutInBagMessage extends ExchangeObjectMessage {
  public static id = 9901;

  public object_: ObjectItem | undefined;

  public constructor(
    remote?: boolean | undefined,
    object_?: ObjectItem | undefined,
  ) {
    super(remote);
    this.object_ = object_;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.object_!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.object_ = new ObjectItem();
    this.object_!.deserialize(reader);
  }
}

export class GuildFightPlayersEnemiesListMessage extends DofusMessage {
  public static id: number = 9360;

  public playerInfo: CharacterMinimalPlusLookInformations[] | undefined;
  public fightId: number | undefined = 0;

  public constructor(
    playerInfo?: CharacterMinimalPlusLookInformations[] | undefined,
    fightId?: number | undefined,
  ) {
    super();
    this.playerInfo = playerInfo;
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.playerInfo!.length);
    this.playerInfo!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeDouble(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerInfo = [];
    const countPlayerInfo = reader.readShort();
    for (let i: number = 0; i < countPlayerInfo; i++) {
      const type: CharacterMinimalPlusLookInformations =
        new CharacterMinimalPlusLookInformations();
      type.deserialize(reader);
      this.playerInfo.push(type);
    }
    this.fightId = reader.readDouble();
  }
}

export class GameCautiousMapMovementMessage extends GameMapMovementMessage {
  public static id = 431;

  public constructor(
    forcedDirection?: number | undefined,
    actorId?: number | undefined,
    keyMovements?: number[] | undefined,
  ) {
    super(forcedDirection, actorId, keyMovements);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class AchievementFinishedMessage extends DofusMessage {
  public static id: number = 8970;

  public achievement: AchievementAchievedRewardable | undefined;

  public constructor(achievement?: AchievementAchievedRewardable | undefined) {
    super();
    this.achievement = achievement;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.achievement!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.achievement = new AchievementAchievedRewardable();
    this.achievement!.deserialize(reader);
  }
}

export class AchievementFinishedInformationMessage extends AchievementFinishedMessage {
  public static id = 9768;

  public playerId: number | undefined = 0;
  public name: string | undefined;

  public constructor(
    achievement?: AchievementAchievedRewardable | undefined,
    playerId?: number | undefined,
    name?: string | undefined,
  ) {
    super(achievement);
    this.playerId = playerId;
    this.name = name;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
    writer.writeUTF(this.name!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
    this.name = reader.readUTF();
  }
}

export class EntityTalkMessage extends DofusMessage {
  public static id: number = 4321;

  public parameters: string[] | undefined;
  public textId: number | undefined = 0;
  public entityId: number | undefined = 0;

  public constructor(
    parameters?: string[] | undefined,
    textId?: number | undefined,
    entityId?: number | undefined,
  ) {
    super();
    this.parameters = parameters;
    this.textId = textId;
    this.entityId = entityId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.parameters!.length);
    this.parameters!.forEach((current: string) => writer.writeUTF(current));
    writer.writeVarShort(this.textId!);
    writer.writeDouble(this.entityId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.parameters = [];
    const countParameters = reader.readShort();
    for (let i: number = 0; i < countParameters; i++) {
      this.parameters.push(reader.readUTF());
    }
    this.textId = reader.readVarShort();
    this.entityId = reader.readDouble();
  }
}

export class LockableStateUpdateAbstractMessage extends DofusMessage {
  public static id: number = 5676;

  public locked: boolean | undefined = false;

  public constructor(locked?: boolean | undefined) {
    super();
    this.locked = locked;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.locked!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.locked = reader.readBoolean();
  }
}

export class LockableStateUpdateStorageMessage extends LockableStateUpdateAbstractMessage {
  public static id = 5127;

  public elementId: number | undefined = 0;
  public mapId: number | undefined = 0;

  public constructor(
    locked?: boolean | undefined,
    elementId?: number | undefined,
    mapId?: number | undefined,
  ) {
    super(locked);
    this.elementId = elementId;
    this.mapId = mapId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.elementId!);
    writer.writeDouble(this.mapId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.elementId = reader.readVarInt();
    this.mapId = reader.readDouble();
  }
}

export class ExchangeStartedBidBuyerMessage extends DofusMessage {
  public static id: number = 9037;

  public buyerDescriptor: SellerBuyerDescriptor | undefined;

  public constructor(buyerDescriptor?: SellerBuyerDescriptor | undefined) {
    super();
    this.buyerDescriptor = buyerDescriptor;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.buyerDescriptor!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.buyerDescriptor = new SellerBuyerDescriptor();
    this.buyerDescriptor!.deserialize(reader);
  }
}

export class AllianceListMessage extends DofusMessage {
  public static id: number = 3861;

  public alliances: AllianceFactSheetInformations[] | undefined;

  public constructor(alliances?: AllianceFactSheetInformations[] | undefined) {
    super();
    this.alliances = alliances;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.alliances!.length);
    this.alliances!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.alliances = [];
    const countAlliances = reader.readShort();
    for (let i: number = 0; i < countAlliances; i++) {
      const type: AllianceFactSheetInformations =
        new AllianceFactSheetInformations();
      type.deserialize(reader);
      this.alliances.push(type);
    }
  }
}

export class JobCrafterDirectoryEntryMessage extends DofusMessage {
  public static id: number = 3827;

  public playerInfo: JobCrafterDirectoryEntryPlayerInfo | undefined;
  public playerLook: EntityLook | undefined;
  public jobInfoList: JobCrafterDirectoryEntryJobInfo[] | undefined;

  public constructor(
    playerInfo?: JobCrafterDirectoryEntryPlayerInfo | undefined,
    playerLook?: EntityLook | undefined,
    jobInfoList?: JobCrafterDirectoryEntryJobInfo[] | undefined,
  ) {
    super();
    this.playerInfo = playerInfo;
    this.playerLook = playerLook;
    this.jobInfoList = jobInfoList;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.playerInfo!.serialize(writer);
    this.playerLook!.serialize(writer);
    writer.writeShort(this.jobInfoList!.length);
    this.jobInfoList!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
    this.playerInfo!.deserialize(reader);
    this.playerLook = new EntityLook();
    this.playerLook!.deserialize(reader);
    this.jobInfoList = [];
    const countJobInfoList = reader.readShort();
    for (let i: number = 0; i < countJobInfoList; i++) {
      const type: JobCrafterDirectoryEntryJobInfo =
        new JobCrafterDirectoryEntryJobInfo();
      type.deserialize(reader);
      this.jobInfoList.push(type);
    }
  }
}

export class ObtainedItemMessage extends DofusMessage {
  public static id: number = 4201;

  public baseQuantity: number | undefined = 0;
  public genericId: number | undefined = 0;

  public constructor(
    baseQuantity?: number | undefined,
    genericId?: number | undefined,
  ) {
    super();
    this.baseQuantity = baseQuantity;
    this.genericId = genericId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.baseQuantity!);
    writer.writeVarShort(this.genericId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.baseQuantity = reader.readVarInt();
    this.genericId = reader.readVarShort();
  }
}

export class ObtainedItemWithBonusMessage extends ObtainedItemMessage {
  public static id = 7390;

  public bonusQuantity: number | undefined = 0;

  public constructor(
    baseQuantity?: number | undefined,
    genericId?: number | undefined,
    bonusQuantity?: number | undefined,
  ) {
    super(baseQuantity, genericId);
    this.bonusQuantity = bonusQuantity;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.bonusQuantity!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.bonusQuantity = reader.readVarInt();
  }
}

export class SpellListMessage extends DofusMessage {
  public static id: number = 4091;

  public spells: SpellItem[] | undefined;
  public spellPrevisualization: boolean | undefined = false;

  public constructor(
    spells?: SpellItem[] | undefined,
    spellPrevisualization?: boolean | undefined,
  ) {
    super();
    this.spells = spells;
    this.spellPrevisualization = spellPrevisualization;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.spells!.length);
    this.spells!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeBoolean(this.spellPrevisualization!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.spells = [];
    const countSpells = reader.readShort();
    for (let i: number = 0; i < countSpells; i++) {
      const type: SpellItem = new SpellItem();
      type.deserialize(reader);
      this.spells.push(type);
    }
    this.spellPrevisualization = reader.readBoolean();
  }
}

export class GuildPaddockRemovedMessage extends DofusMessage {
  public static id: number = 9960;

  public paddockId: number | undefined = 0;

  public constructor(paddockId?: number | undefined) {
    super();
    this.paddockId = paddockId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.paddockId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.paddockId = reader.readDouble();
  }
}

export class BreachInvitationResponseMessage extends DofusMessage {
  public static id: number = 6585;

  public accept: boolean | undefined = false;
  public guest: CharacterMinimalInformations | undefined;

  public constructor(
    accept?: boolean | undefined,
    guest?: CharacterMinimalInformations | undefined,
  ) {
    super();
    this.accept = accept;
    this.guest = guest;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.accept!);
    this.guest!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accept = reader.readBoolean();
    this.guest = new CharacterMinimalInformations();
    this.guest!.deserialize(reader);
  }
}

export class GuildLeftMessage extends DofusMessage {
  public static id: number = 2770;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class EditHavenBagStartMessage extends DofusMessage {
  public static id: number = 7113;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PartyRefuseInvitationNotificationMessage extends AbstractPartyEventMessage {
  public static id = 349;

  public guestId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    guestId?: number | undefined,
  ) {
    super(partyId);
    this.guestId = guestId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.guestId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guestId = reader.readVarLong();
  }
}

export class CharacterNameSuggestionFailureMessage extends DofusMessage {
  public static id: number = 3074;

  public reason: number | undefined = 1;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class SelectedServerRefusedMessage extends DofusMessage {
  public static id: number = 8116;

  public serverStatus: number | undefined = 1;
  public error: number | undefined = 1;
  public serverId: number | undefined = 0;

  public constructor(
    serverStatus?: number | undefined,
    error?: number | undefined,
    serverId?: number | undefined,
  ) {
    super();
    this.serverStatus = serverStatus;
    this.error = error;
    this.serverId = serverId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.serverStatus!);
    writer.writeByte(this.error!);
    writer.writeVarShort(this.serverId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.serverStatus = reader.readByte();
    this.error = reader.readByte();
    this.serverId = reader.readVarShort();
  }
}

export class PrismInfoInValidMessage extends DofusMessage {
  public static id: number = 7307;

  public reason: number | undefined = 0;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class ExchangeBidHouseBuyResultMessage extends DofusMessage {
  public static id: number = 3743;

  public bought: boolean | undefined = false;
  public uid: number | undefined = 0;

  public constructor(bought?: boolean | undefined, uid?: number | undefined) {
    super();
    this.bought = bought;
    this.uid = uid;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.bought!);
    writer.writeVarInt(this.uid!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.bought = reader.readBoolean();
    this.uid = reader.readVarInt();
  }
}

export class ChatCommunityChannelCommunityMessage extends DofusMessage {
  public static id: number = 9671;

  public communityId: number | undefined = 0;

  public constructor(communityId?: number | undefined) {
    super();
    this.communityId = communityId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.communityId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.communityId = reader.readShort();
  }
}

export class IdolPartyLostMessage extends DofusMessage {
  public static id: number = 7502;

  public idolId: number | undefined = 0;

  public constructor(idolId?: number | undefined) {
    super();
    this.idolId = idolId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.idolId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.idolId = reader.readVarShort();
  }
}

export class ExchangePodsModifiedMessage extends ExchangeObjectMessage {
  public static id = 7130;

  public maxWeight: number | undefined = 0;
  public currentWeight: number | undefined = 0;

  public constructor(
    remote?: boolean | undefined,
    maxWeight?: number | undefined,
    currentWeight?: number | undefined,
  ) {
    super(remote);
    this.maxWeight = maxWeight;
    this.currentWeight = currentWeight;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.maxWeight!);
    writer.writeVarInt(this.currentWeight!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.maxWeight = reader.readVarInt();
    this.currentWeight = reader.readVarInt();
  }
}

export class TaxCollectorDialogQuestionBasicMessage extends DofusMessage {
  public static id: number = 1694;

  public guildInfo: BasicGuildInformations | undefined;

  public constructor(guildInfo?: BasicGuildInformations | undefined) {
    super();
    this.guildInfo = guildInfo;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.guildInfo!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildInfo = new BasicGuildInformations();
    this.guildInfo!.deserialize(reader);
  }
}

export class TaxCollectorDialogQuestionExtendedMessage extends TaxCollectorDialogQuestionBasicMessage {
  public static id = 625;

  public pods: number | undefined = 0;
  public experience: number | undefined = 0;
  public kamas: number | undefined = 0;
  public maxPods: number | undefined = 0;
  public taxCollectorAttack: number | undefined = 0;
  public wisdom: number | undefined = 0;
  public itemsValue: number | undefined = 0;
  public prospecting: number | undefined = 0;
  public taxCollectorsCount: number | undefined = 0;

  public constructor(
    guildInfo?: BasicGuildInformations | undefined,
    pods?: number | undefined,
    experience?: number | undefined,
    kamas?: number | undefined,
    maxPods?: number | undefined,
    taxCollectorAttack?: number | undefined,
    wisdom?: number | undefined,
    itemsValue?: number | undefined,
    prospecting?: number | undefined,
    taxCollectorsCount?: number | undefined,
  ) {
    super(guildInfo);
    this.pods = pods;
    this.experience = experience;
    this.kamas = kamas;
    this.maxPods = maxPods;
    this.taxCollectorAttack = taxCollectorAttack;
    this.wisdom = wisdom;
    this.itemsValue = itemsValue;
    this.prospecting = prospecting;
    this.taxCollectorsCount = taxCollectorsCount;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.pods!);
    writer.writeVarLong(this.experience!);
    writer.writeVarLong(this.kamas!);
    writer.writeVarShort(this.maxPods!);
    writer.writeInt(this.taxCollectorAttack!);
    writer.writeVarShort(this.wisdom!);
    writer.writeVarLong(this.itemsValue!);
    writer.writeVarShort(this.prospecting!);
    writer.writeByte(this.taxCollectorsCount!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.pods = reader.readVarInt();
    this.experience = reader.readVarLong();
    this.kamas = reader.readVarLong();
    this.maxPods = reader.readVarShort();
    this.taxCollectorAttack = reader.readInt();
    this.wisdom = reader.readVarShort();
    this.itemsValue = reader.readVarLong();
    this.prospecting = reader.readVarShort();
    this.taxCollectorsCount = reader.readByte();
  }
}

export class AllianceTaxCollectorDialogQuestionExtendedMessage extends TaxCollectorDialogQuestionExtendedMessage {
  public static id = 7917;

  public alliance: BasicNamedAllianceInformations | undefined;

  public constructor(
    guildInfo?: BasicGuildInformations | undefined,
    pods?: number | undefined,
    experience?: number | undefined,
    kamas?: number | undefined,
    maxPods?: number | undefined,
    taxCollectorAttack?: number | undefined,
    wisdom?: number | undefined,
    itemsValue?: number | undefined,
    prospecting?: number | undefined,
    taxCollectorsCount?: number | undefined,
    alliance?: BasicNamedAllianceInformations | undefined,
  ) {
    super(
      guildInfo,
      pods,
      experience,
      kamas,
      maxPods,
      taxCollectorAttack,
      wisdom,
      itemsValue,
      prospecting,
      taxCollectorsCount,
    );
    this.alliance = alliance;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.alliance!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.alliance = new BasicNamedAllianceInformations();
    this.alliance!.deserialize(reader);
  }
}

export class TaxCollectorStateUpdateMessage extends DofusMessage {
  public static id: number = 7095;

  public state: number | undefined = 0;
  public uniqueId: number | undefined = 0;

  public constructor(
    state?: number | undefined,
    uniqueId?: number | undefined,
  ) {
    super();
    this.state = state;
    this.uniqueId = uniqueId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.state!);
    writer.writeDouble(this.uniqueId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.state = reader.readByte();
    this.uniqueId = reader.readDouble();
  }
}

export class ExchangeBidHouseGenericItemRemovedMessage extends DofusMessage {
  public static id: number = 9780;

  public objGenericId: number | undefined = 0;

  public constructor(objGenericId?: number | undefined) {
    super();
    this.objGenericId = objGenericId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.objGenericId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objGenericId = reader.readVarShort();
  }
}

export class QuestStepInfoMessage extends DofusMessage {
  public static id: number = 7690;

  public infos: QuestActiveInformations | undefined;

  public constructor(infos?: QuestActiveInformations | undefined) {
    super();
    this.infos = infos;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.infos!.id);
    this.infos!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const infosTypeId: number = reader.readShort();
    this.infos = new types[infosTypeId]() as QuestActiveInformations;
    this.infos!.deserialize(reader);
  }
}

export class ServerOptionalFeaturesMessage extends DofusMessage {
  public static id: number = 189;

  public features: number[] | undefined;

  public constructor(features?: number[] | undefined) {
    super();
    this.features = features;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.features!.length);
    this.features!.forEach((current: number) => writer.writeByte(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.features = [];
    const countFeatures = reader.readShort();
    for (let i: number = 0; i < countFeatures; i++) {
      this.features.push(reader.readByte());
    }
  }
}

export class BreachRoomUnlockResultMessage extends DofusMessage {
  public static id: number = 3212;

  public result: number | undefined = 0;
  public roomId: number | undefined = 0;

  public constructor(result?: number | undefined, roomId?: number | undefined) {
    super();
    this.result = result;
    this.roomId = roomId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.result!);
    writer.writeByte(this.roomId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.result = reader.readByte();
    this.roomId = reader.readByte();
  }
}

export class DungeonPartyFinderRoomContentUpdateMessage extends DofusMessage {
  public static id: number = 6719;

  public addedPlayers: DungeonPartyFinderPlayer[] | undefined;
  public dungeonId: number | undefined = 0;
  public removedPlayersIds: number[] | undefined;

  public constructor(
    addedPlayers?: DungeonPartyFinderPlayer[] | undefined,
    dungeonId?: number | undefined,
    removedPlayersIds?: number[] | undefined,
  ) {
    super();
    this.addedPlayers = addedPlayers;
    this.dungeonId = dungeonId;
    this.removedPlayersIds = removedPlayersIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.addedPlayers!.length);
    this.addedPlayers!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.dungeonId!);
    writer.writeShort(this.removedPlayersIds!.length);
    this.removedPlayersIds!.forEach((current: number) =>
      writer.writeVarLong(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.addedPlayers = [];
    const countAddedPlayers = reader.readShort();
    for (let i: number = 0; i < countAddedPlayers; i++) {
      const type: DungeonPartyFinderPlayer = new DungeonPartyFinderPlayer();
      type.deserialize(reader);
      this.addedPlayers.push(type);
    }
    this.dungeonId = reader.readVarShort();
    this.removedPlayersIds = [];
    const countRemovedPlayersIds = reader.readShort();
    for (let i: number = 0; i < countRemovedPlayersIds; i++) {
      this.removedPlayersIds.push(reader.readVarLong());
    }
  }
}

export class QuestStepValidatedMessage extends DofusMessage {
  public static id: number = 6173;

  public stepId: number | undefined = 0;
  public questId: number | undefined = 0;

  public constructor(
    stepId?: number | undefined,
    questId?: number | undefined,
  ) {
    super();
    this.stepId = stepId;
    this.questId = questId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.stepId!);
    writer.writeVarShort(this.questId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.stepId = reader.readVarShort();
    this.questId = reader.readVarShort();
  }
}

export class CompassUpdatePvpSeekMessage extends CompassUpdateMessage {
  public static id = 5714;

  public memberName: string | undefined;
  public memberId: number | undefined = 0;

  public constructor(
    coords?: MapCoordinates | undefined,
    type?: number | undefined,
    memberName?: string | undefined,
    memberId?: number | undefined,
  ) {
    super(coords, type);
    this.memberName = memberName;
    this.memberId = memberId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.memberName!);
    writer.writeVarLong(this.memberId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.memberName = reader.readUTF();
    this.memberId = reader.readVarLong();
  }
}

export class AllianceFactsMessage extends DofusMessage {
  public static id: number = 6820;

  public leaderCharacterName: string | undefined;
  public infos: AllianceFactSheetInformations | undefined;
  public guilds: GuildInAllianceInformations[] | undefined;
  public controlledSubareaIds: number[] | undefined;
  public leaderCharacterId: number | undefined = 0;

  public constructor(
    leaderCharacterName?: string | undefined,
    infos?: AllianceFactSheetInformations | undefined,
    guilds?: GuildInAllianceInformations[] | undefined,
    controlledSubareaIds?: number[] | undefined,
    leaderCharacterId?: number | undefined,
  ) {
    super();
    this.leaderCharacterName = leaderCharacterName;
    this.infos = infos;
    this.guilds = guilds;
    this.controlledSubareaIds = controlledSubareaIds;
    this.leaderCharacterId = leaderCharacterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.leaderCharacterName!);
    writer.writeShort(this.infos!.id);
    this.infos!.serialize(writer);
    writer.writeShort(this.guilds!.length);
    this.guilds!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.controlledSubareaIds!.length);
    this.controlledSubareaIds!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
    writer.writeVarLong(this.leaderCharacterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.leaderCharacterName = reader.readUTF();
    const infosTypeId: number = reader.readShort();
    this.infos = new types[infosTypeId]() as AllianceFactSheetInformations;
    this.infos!.deserialize(reader);
    this.guilds = [];
    const countGuilds = reader.readShort();
    for (let i: number = 0; i < countGuilds; i++) {
      const type: GuildInAllianceInformations =
        new GuildInAllianceInformations();
      type.deserialize(reader);
      this.guilds.push(type);
    }
    this.controlledSubareaIds = [];
    const countControlledSubareaIds = reader.readShort();
    for (let i: number = 0; i < countControlledSubareaIds; i++) {
      this.controlledSubareaIds.push(reader.readVarShort());
    }
    this.leaderCharacterId = reader.readVarLong();
  }
}

export class PrismFightDefenderAddMessage extends DofusMessage {
  public static id: number = 58;

  public fightId: number | undefined = 0;
  public defender: CharacterMinimalPlusLookInformations | undefined;
  public subAreaId: number | undefined = 0;

  public constructor(
    fightId?: number | undefined,
    defender?: CharacterMinimalPlusLookInformations | undefined,
    subAreaId?: number | undefined,
  ) {
    super();
    this.fightId = fightId;
    this.defender = defender;
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.fightId!);
    writer.writeShort(this.defender!.id);
    this.defender!.serialize(writer);
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fightId = reader.readVarShort();
    const defenderTypeId: number = reader.readShort();
    this.defender = new types[
      defenderTypeId
    ]() as CharacterMinimalPlusLookInformations;
    this.defender!.deserialize(reader);
    this.subAreaId = reader.readVarShort();
  }
}

export class JobCrafterDirectoryAddMessage extends DofusMessage {
  public static id: number = 1829;

  public listEntry: JobCrafterDirectoryListEntry | undefined;

  public constructor(listEntry?: JobCrafterDirectoryListEntry | undefined) {
    super();
    this.listEntry = listEntry;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.listEntry!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.listEntry = new JobCrafterDirectoryListEntry();
    this.listEntry!.deserialize(reader);
  }
}

export class ShortcutBarSwapErrorMessage extends DofusMessage {
  public static id: number = 3330;

  public error: number | undefined = 0;

  public constructor(error?: number | undefined) {
    super();
    this.error = error;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.error!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.error = reader.readByte();
  }
}

export class PartyInvitationDungeonMessage extends PartyInvitationMessage {
  public static id = 9837;

  public dungeonId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    toId?: number | undefined,
    fromName?: string | undefined,
    partyType?: number | undefined,
    partyName?: string | undefined,
    maxParticipants?: number | undefined,
    fromId?: number | undefined,
    dungeonId?: number | undefined,
  ) {
    super(
      partyId,
      toId,
      fromName,
      partyType,
      partyName,
      maxParticipants,
      fromId,
    );
    this.dungeonId = dungeonId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.dungeonId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dungeonId = reader.readVarShort();
  }
}

export class BreachBudgetMessage extends DofusMessage {
  public static id: number = 1903;

  public bugdet: number | undefined = 0;

  public constructor(bugdet?: number | undefined) {
    super();
    this.bugdet = bugdet;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.bugdet!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.bugdet = reader.readVarInt();
  }
}

export class JobAllowMultiCraftRequestMessage extends DofusMessage {
  public static id: number = 5111;

  public enabled: boolean | undefined = false;

  public constructor(enabled?: boolean | undefined) {
    super();
    this.enabled = enabled;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enabled!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enabled = reader.readBoolean();
  }
}

export class JobMultiCraftAvailableSkillsMessage extends JobAllowMultiCraftRequestMessage {
  public static id = 1246;

  public skills: number[] | undefined;
  public playerId: number | undefined = 0;

  public constructor(
    enabled?: boolean | undefined,
    skills?: number[] | undefined,
    playerId?: number | undefined,
  ) {
    super(enabled);
    this.skills = skills;
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.skills!.length);
    this.skills!.forEach((current: number) => writer.writeVarShort(current));
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.skills = [];
    const countSkills = reader.readShort();
    for (let i: number = 0; i < countSkills; i++) {
      this.skills.push(reader.readVarShort());
    }
    this.playerId = reader.readVarLong();
  }
}

export class ExchangeMountsStableAddMessage extends DofusMessage {
  public static id: number = 8697;

  public mountDescription: MountClientData[] | undefined;

  public constructor(mountDescription?: MountClientData[] | undefined) {
    super();
    this.mountDescription = mountDescription;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.mountDescription!.length);
    this.mountDescription!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mountDescription = [];
    const countMountDescription = reader.readShort();
    for (let i: number = 0; i < countMountDescription; i++) {
      const type: MountClientData = new MountClientData();
      type.deserialize(reader);
      this.mountDescription.push(type);
    }
  }
}

export class FriendAddedMessage extends DofusMessage {
  public static id: number = 9476;

  public friendAdded: FriendInformations | undefined;

  public constructor(friendAdded?: FriendInformations | undefined) {
    super();
    this.friendAdded = friendAdded;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.friendAdded!.id);
    this.friendAdded!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const friendAddedTypeId: number = reader.readShort();
    this.friendAdded = new types[friendAddedTypeId]() as FriendInformations;
    this.friendAdded!.deserialize(reader);
  }
}

export class CharacterCanBeCreatedResultMessage extends DofusMessage {
  public static id: number = 9527;

  public yesYouCan: boolean | undefined = false;

  public constructor(yesYouCan?: boolean | undefined) {
    super();
    this.yesYouCan = yesYouCan;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.yesYouCan!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.yesYouCan = reader.readBoolean();
  }
}

export class NpcGenericActionFailureMessage extends DofusMessage {
  public static id: number = 1901;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class AccountHouseMessage extends DofusMessage {
  public static id: number = 7236;

  public houses: AccountHouseInformations[] | undefined;

  public constructor(houses?: AccountHouseInformations[] | undefined) {
    super();
    this.houses = houses;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.houses!.length);
    this.houses!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.houses = [];
    const countHouses = reader.readShort();
    for (let i: number = 0; i < countHouses; i++) {
      const type: AccountHouseInformations = new AccountHouseInformations();
      type.deserialize(reader);
      this.houses.push(type);
    }
  }
}

export class AcquaintanceSearchErrorMessage extends DofusMessage {
  public static id: number = 6994;

  public reason: number | undefined = 0;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class ExchangeStartOkRecycleTradeMessage extends DofusMessage {
  public static id: number = 9169;

  public percentToPlayer: number | undefined = 0;
  public percentToPrism: number | undefined = 0;

  public constructor(
    percentToPlayer?: number | undefined,
    percentToPrism?: number | undefined,
  ) {
    super();
    this.percentToPlayer = percentToPlayer;
    this.percentToPrism = percentToPrism;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.percentToPlayer!);
    writer.writeShort(this.percentToPrism!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.percentToPlayer = reader.readShort();
    this.percentToPrism = reader.readShort();
  }
}

export class StatsUpgradeResultMessage extends DofusMessage {
  public static id: number = 4083;

  public nbCharacBoost: number | undefined = 0;
  public result: number | undefined = 0;

  public constructor(
    nbCharacBoost?: number | undefined,
    result?: number | undefined,
  ) {
    super();
    this.nbCharacBoost = nbCharacBoost;
    this.result = result;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.nbCharacBoost!);
    writer.writeByte(this.result!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.nbCharacBoost = reader.readVarShort();
    this.result = reader.readByte();
  }
}

export class MapRunningFightListMessage extends DofusMessage {
  public static id: number = 1018;

  public fights: FightExternalInformations[] | undefined;

  public constructor(fights?: FightExternalInformations[] | undefined) {
    super();
    this.fights = fights;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.fights!.length);
    this.fights!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fights = [];
    const countFights = reader.readShort();
    for (let i: number = 0; i < countFights; i++) {
      const type: FightExternalInformations = new FightExternalInformations();
      type.deserialize(reader);
      this.fights.push(type);
    }
  }
}

export class SequenceNumberRequestMessage extends DofusMessage {
  public static id: number = 8200;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PartyInvitationDetailsMessage extends AbstractPartyMessage {
  public static id = 3615;

  public guests: PartyGuestInformations[] | undefined;
  public partyType: number | undefined = 0;
  public leaderId: number | undefined = 0;
  public members: PartyInvitationMemberInformations[] | undefined;
  public partyName: string | undefined;
  public fromId: number | undefined = 0;
  public fromName: string | undefined;

  public constructor(
    partyId?: number | undefined,
    guests?: PartyGuestInformations[] | undefined,
    partyType?: number | undefined,
    leaderId?: number | undefined,
    members?: PartyInvitationMemberInformations[] | undefined,
    partyName?: string | undefined,
    fromId?: number | undefined,
    fromName?: string | undefined,
  ) {
    super(partyId);
    this.guests = guests;
    this.partyType = partyType;
    this.leaderId = leaderId;
    this.members = members;
    this.partyName = partyName;
    this.fromId = fromId;
    this.fromName = fromName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.guests!.length);
    this.guests!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeByte(this.partyType!);
    writer.writeVarLong(this.leaderId!);
    writer.writeShort(this.members!.length);
    this.members!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeUTF(this.partyName!);
    writer.writeVarLong(this.fromId!);
    writer.writeUTF(this.fromName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guests = [];
    const countGuests = reader.readShort();
    for (let i: number = 0; i < countGuests; i++) {
      const type: PartyGuestInformations = new PartyGuestInformations();
      type.deserialize(reader);
      this.guests.push(type);
    }
    this.partyType = reader.readByte();
    this.leaderId = reader.readVarLong();
    this.members = [];
    const countMembers = reader.readShort();
    for (let i: number = 0; i < countMembers; i++) {
      const membersTypeId: number = reader.readShort();
      const type: PartyInvitationMemberInformations = new types[
        membersTypeId
      ]() as PartyInvitationMemberInformations;
      type.deserialize(reader);
      this.members.push(type);
    }
    this.partyName = reader.readUTF();
    this.fromId = reader.readVarLong();
    this.fromName = reader.readUTF();
  }
}

export class PartyInvitationDungeonDetailsMessage extends PartyInvitationDetailsMessage {
  public static id = 7340;

  public playersDungeonReady: boolean[] | undefined;
  public dungeonId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    guests?: PartyGuestInformations[] | undefined,
    partyType?: number | undefined,
    leaderId?: number | undefined,
    members?: PartyInvitationMemberInformations[] | undefined,
    partyName?: string | undefined,
    fromId?: number | undefined,
    fromName?: string | undefined,
    playersDungeonReady?: boolean[] | undefined,
    dungeonId?: number | undefined,
  ) {
    super(
      partyId,
      guests,
      partyType,
      leaderId,
      members,
      partyName,
      fromId,
      fromName,
    );
    this.playersDungeonReady = playersDungeonReady;
    this.dungeonId = dungeonId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.playersDungeonReady!.length);
    this.playersDungeonReady!.forEach((current: boolean) =>
      writer.writeBoolean(current),
    );
    writer.writeVarShort(this.dungeonId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playersDungeonReady = [];
    const countPlayersDungeonReady = reader.readShort();
    for (let i: number = 0; i < countPlayersDungeonReady; i++) {
      this.playersDungeonReady.push(reader.readBoolean());
    }
    this.dungeonId = reader.readVarShort();
  }
}

export class ExchangeTypesExchangerDescriptionForUserMessage extends DofusMessage {
  public static id: number = 8522;

  public typeDescription: number[] | undefined;
  public objectType: number | undefined = 0;

  public constructor(
    typeDescription?: number[] | undefined,
    objectType?: number | undefined,
  ) {
    super();
    this.typeDescription = typeDescription;
    this.objectType = objectType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.typeDescription!.length);
    this.typeDescription!.forEach((current: number) =>
      writer.writeVarInt(current),
    );
    writer.writeInt(this.objectType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.typeDescription = [];
    const countTypeDescription = reader.readShort();
    for (let i: number = 0; i < countTypeDescription; i++) {
      this.typeDescription.push(reader.readVarInt());
    }
    this.objectType = reader.readInt();
  }
}

export class JobCrafterDirectorySettingsMessage extends DofusMessage {
  public static id: number = 8518;

  public craftersSettings: JobCrafterDirectorySettings[] | undefined;

  public constructor(
    craftersSettings?: JobCrafterDirectorySettings[] | undefined,
  ) {
    super();
    this.craftersSettings = craftersSettings;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.craftersSettings!.length);
    this.craftersSettings!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.craftersSettings = [];
    const countCraftersSettings = reader.readShort();
    for (let i: number = 0; i < countCraftersSettings; i++) {
      const type: JobCrafterDirectorySettings =
        new JobCrafterDirectorySettings();
      type.deserialize(reader);
      this.craftersSettings.push(type);
    }
  }
}

export class MoodSmileyUpdateMessage extends DofusMessage {
  public static id: number = 8249;

  public smileyId: number | undefined = 0;
  public playerId: number | undefined = 0;
  public accountId: number | undefined = 0;

  public constructor(
    smileyId?: number | undefined,
    playerId?: number | undefined,
    accountId?: number | undefined,
  ) {
    super();
    this.smileyId = smileyId;
    this.playerId = playerId;
    this.accountId = accountId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.smileyId!);
    writer.writeVarLong(this.playerId!);
    writer.writeInt(this.accountId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.smileyId = reader.readVarShort();
    this.playerId = reader.readVarLong();
    this.accountId = reader.readInt();
  }
}

export class GameRolePlayArenaInvitationCandidatesAnswerMessage extends DofusMessage {
  public static id: number = 4913;

  public candidates: LeagueFriendInformations[] | undefined;

  public constructor(candidates?: LeagueFriendInformations[] | undefined) {
    super();
    this.candidates = candidates;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.candidates!.length);
    this.candidates!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.candidates = [];
    const countCandidates = reader.readShort();
    for (let i: number = 0; i < countCandidates; i++) {
      const type: LeagueFriendInformations = new LeagueFriendInformations();
      type.deserialize(reader);
      this.candidates.push(type);
    }
  }
}

export class EmotePlayMessage extends EmotePlayAbstractMessage {
  public static id = 9462;

  public accountId: number | undefined = 0;
  public actorId: number | undefined = 0;

  public constructor(
    emoteStartTime?: number | undefined,
    emoteId?: number | undefined,
    accountId?: number | undefined,
    actorId?: number | undefined,
  ) {
    super(emoteStartTime, emoteId);
    this.accountId = accountId;
    this.actorId = actorId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.accountId!);
    writer.writeDouble(this.actorId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accountId = reader.readInt();
    this.actorId = reader.readDouble();
  }
}

export class SelectedServerDataMessage extends DofusMessage {
  public static id: number = 3966;

  public serverId: number | undefined = 0;
  public address: string | undefined;
  public ports: number[] | undefined;
  public ticket: number[] | undefined;
  public canCreateNewCharacter: boolean | undefined = false;

  public constructor(
    serverId?: number | undefined,
    address?: string | undefined,
    ports?: number[] | undefined,
    ticket?: number[] | undefined,
    canCreateNewCharacter?: boolean | undefined,
  ) {
    super();
    this.serverId = serverId;
    this.address = address;
    this.ports = ports;
    this.ticket = ticket;
    this.canCreateNewCharacter = canCreateNewCharacter;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.serverId!);
    writer.writeUTF(this.address!);
    writer.writeShort(this.ports!.length);
    this.ports!.forEach((current: number) => writer.writeVarShort(current));
    writer.writeVarInt(this.ticket!.length);
    this.ticket!.forEach((current: number) => writer.writeByte(current));
    writer.writeBoolean(this.canCreateNewCharacter!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.serverId = reader.readVarShort();
    this.address = reader.readUTF();
    this.ports = [];
    const countPorts = reader.readShort();
    for (let i: number = 0; i < countPorts; i++) {
      this.ports.push(reader.readVarShort());
    }
    this.ticket = [];
    const countTicket = reader.readVarInt();
    for (let i: number = 0; i < countTicket; i++) {
      this.ticket.push(reader.readByte());
    }
    this.canCreateNewCharacter = reader.readBoolean();
  }
}

export class SelectedServerDataExtendedMessage extends SelectedServerDataMessage {
  public static id = 2850;

  public servers: GameServerInformations[] | undefined;

  public constructor(
    serverId?: number | undefined,
    address?: string | undefined,
    ports?: number[] | undefined,
    ticket?: number[] | undefined,
    canCreateNewCharacter?: boolean | undefined,
    servers?: GameServerInformations[] | undefined,
  ) {
    super(serverId, address, ports, ticket, canCreateNewCharacter);
    this.servers = servers;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.servers!.length);
    this.servers!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.servers = [];
    const countServers = reader.readShort();
    for (let i: number = 0; i < countServers; i++) {
      const type: GameServerInformations = new GameServerInformations();
      type.deserialize(reader);
      this.servers.push(type);
    }
  }
}

export class FriendWarnOnConnectionStateMessage extends DofusMessage {
  public static id: number = 6412;

  public enable: boolean | undefined = false;

  public constructor(enable?: boolean | undefined) {
    super();
    this.enable = enable;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
  }
}

export class DungeonPartyFinderRoomContentMessage extends DofusMessage {
  public static id: number = 5100;

  public players: DungeonPartyFinderPlayer[] | undefined;
  public dungeonId: number | undefined = 0;

  public constructor(
    players?: DungeonPartyFinderPlayer[] | undefined,
    dungeonId?: number | undefined,
  ) {
    super();
    this.players = players;
    this.dungeonId = dungeonId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.players!.length);
    this.players!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.dungeonId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.players = [];
    const countPlayers = reader.readShort();
    for (let i: number = 0; i < countPlayers; i++) {
      const type: DungeonPartyFinderPlayer = new DungeonPartyFinderPlayer();
      type.deserialize(reader);
      this.players.push(type);
    }
    this.dungeonId = reader.readVarShort();
  }
}

export class BasicDateMessage extends DofusMessage {
  public static id: number = 4911;

  public year: number | undefined = 0;
  public month: number | undefined = 0;
  public day: number | undefined = 0;

  public constructor(
    year?: number | undefined,
    month?: number | undefined,
    day?: number | undefined,
  ) {
    super();
    this.year = year;
    this.month = month;
    this.day = day;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.year!);
    writer.writeByte(this.month!);
    writer.writeByte(this.day!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.year = reader.readShort();
    this.month = reader.readByte();
    this.day = reader.readByte();
  }
}

export class GuildApplicationReceivedMessage extends DofusMessage {
  public static id: number = 3891;

  public playerId: number | undefined = 0;
  public playerName: string | undefined;

  public constructor(
    playerId?: number | undefined,
    playerName?: string | undefined,
  ) {
    super();
    this.playerId = playerId;
    this.playerName = playerName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
    writer.writeUTF(this.playerName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
    this.playerName = reader.readUTF();
  }
}

export class ExchangeMountsStableBornAddMessage extends ExchangeMountsStableAddMessage {
  public static id = 1340;

  public constructor(mountDescription?: MountClientData[] | undefined) {
    super(mountDescription);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class JobDescriptionMessage extends DofusMessage {
  public static id: number = 8838;

  public jobsDescription: JobDescription[] | undefined;

  public constructor(jobsDescription?: JobDescription[] | undefined) {
    super();
    this.jobsDescription = jobsDescription;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.jobsDescription!.length);
    this.jobsDescription!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.jobsDescription = [];
    const countJobsDescription = reader.readShort();
    for (let i: number = 0; i < countJobsDescription; i++) {
      const type: JobDescription = new JobDescription();
      type.deserialize(reader);
      this.jobsDescription.push(type);
    }
  }
}

export class AccountLoggingKickedMessage extends DofusMessage {
  public static id: number = 7661;

  public minutes: number | undefined = 0;
  public hours: number | undefined = 0;
  public days: number | undefined = 0;

  public constructor(
    minutes?: number | undefined,
    hours?: number | undefined,
    days?: number | undefined,
  ) {
    super();
    this.minutes = minutes;
    this.hours = hours;
    this.days = days;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.minutes!);
    writer.writeByte(this.hours!);
    writer.writeVarShort(this.days!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.minutes = reader.readByte();
    this.hours = reader.readByte();
    this.days = reader.readVarShort();
  }
}

export class ExchangeObjectModifiedInBagMessage extends ExchangeObjectMessage {
  public static id = 1456;

  public object_: ObjectItem | undefined;

  public constructor(
    remote?: boolean | undefined,
    object_?: ObjectItem | undefined,
  ) {
    super(remote);
    this.object_ = object_;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.object_!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.object_ = new ObjectItem();
    this.object_!.deserialize(reader);
  }
}

export class DebtsUpdateMessage extends DofusMessage {
  public static id: number = 2524;

  public debts: DebtInformation[] | undefined;
  public action: number | undefined = 0;

  public constructor(
    debts?: DebtInformation[] | undefined,
    action?: number | undefined,
  ) {
    super();
    this.debts = debts;
    this.action = action;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.debts!.length);
    this.debts!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeByte(this.action!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.debts = [];
    const countDebts = reader.readShort();
    for (let i: number = 0; i < countDebts; i++) {
      const debtsTypeId: number = reader.readShort();
      const type: DebtInformation = new types[debtsTypeId]() as DebtInformation;
      type.deserialize(reader);
      this.debts.push(type);
    }
    this.action = reader.readByte();
  }
}

export class GameRolePlayArenaUpdatePlayerInfosMessage extends DofusMessage {
  public static id: number = 8202;

  public solo: ArenaRankInfos | undefined;

  public constructor(solo?: ArenaRankInfos | undefined) {
    super();
    this.solo = solo;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.solo!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.solo = new ArenaRankInfos();
    this.solo!.deserialize(reader);
  }
}

export class GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage extends GameRolePlayArenaUpdatePlayerInfosMessage {
  public static id = 6540;

  public duel: ArenaRankInfos | undefined;
  public team: ArenaRankInfos | undefined;

  public constructor(
    solo?: ArenaRankInfos | undefined,
    duel?: ArenaRankInfos | undefined,
    team?: ArenaRankInfos | undefined,
  ) {
    super(solo);
    this.duel = duel;
    this.team = team;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.duel!.serialize(writer);
    this.team!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.duel = new ArenaRankInfos();
    this.duel!.deserialize(reader);
    this.team = new ArenaRankInfos();
    this.team!.deserialize(reader);
  }
}

export class GuildCreationResultMessage extends DofusMessage {
  public static id: number = 42;

  public result: number | undefined = 0;

  public constructor(result?: number | undefined) {
    super();
    this.result = result;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.result!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.result = reader.readByte();
  }
}

export class ExchangeStoppedMessage extends DofusMessage {
  public static id: number = 8743;

  public id_: number | undefined = 0;

  public constructor(id_?: number | undefined) {
    super();
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readVarLong();
  }
}

export class ExchangeShopStockMultiMovementUpdatedMessage extends DofusMessage {
  public static id: number = 8646;

  public objectInfoList: ObjectItemToSell[] | undefined;

  public constructor(objectInfoList?: ObjectItemToSell[] | undefined) {
    super();
    this.objectInfoList = objectInfoList;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objectInfoList!.length);
    this.objectInfoList!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectInfoList = [];
    const countObjectInfoList = reader.readShort();
    for (let i: number = 0; i < countObjectInfoList; i++) {
      const type: ObjectItemToSell = new ObjectItemToSell();
      type.deserialize(reader);
      this.objectInfoList.push(type);
    }
  }
}

export class AccountInformationsUpdateMessage extends DofusMessage {
  public static id: number = 3664;

  public subscriptionEndDate: number | undefined = 0;

  public constructor(subscriptionEndDate?: number | undefined) {
    super();
    this.subscriptionEndDate = subscriptionEndDate;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.subscriptionEndDate!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.subscriptionEndDate = reader.readDouble();
  }
}

export class TitleSelectErrorMessage extends DofusMessage {
  public static id: number = 2014;

  public reason: number | undefined = 0;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class AccountCapabilitiesMessage extends DofusMessage {
  public static id: number = 8644;

  public status: number | undefined = -1;
  public breedsVisible: number | undefined = 0;
  public accountId: number | undefined = 0;
  public breedsAvailable: number | undefined = 0;
  public tutorialAvailable: boolean | undefined = false;
  public canCreateNewCharacter: boolean | undefined = false;

  public constructor(
    status?: number | undefined,
    breedsVisible?: number | undefined,
    accountId?: number | undefined,
    breedsAvailable?: number | undefined,
    tutorialAvailable?: boolean | undefined,
    canCreateNewCharacter?: boolean | undefined,
  ) {
    super();
    this.status = status;
    this.breedsVisible = breedsVisible;
    this.accountId = accountId;
    this.breedsAvailable = breedsAvailable;
    this.tutorialAvailable = tutorialAvailable;
    this.canCreateNewCharacter = canCreateNewCharacter;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.status!);
    writer.writeVarInt(this.breedsVisible!);
    writer.writeInt(this.accountId!);
    writer.writeVarInt(this.breedsAvailable!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.tutorialAvailable!);
    box0 = setFlag(box0, 1, this.canCreateNewCharacter!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.status = reader.readByte();
    this.breedsVisible = reader.readVarInt();
    this.accountId = reader.readInt();
    this.breedsAvailable = reader.readVarInt();
    const box0 = reader.readByte();
    this.tutorialAvailable = getFlag(box0, 0);
    this.canCreateNewCharacter = getFlag(box0, 1);
  }
}

export class TreasureHuntDigRequestAnswerMessage extends DofusMessage {
  public static id: number = 8845;

  public result: number | undefined = 0;
  public questType: number | undefined = 0;

  public constructor(
    result?: number | undefined,
    questType?: number | undefined,
  ) {
    super();
    this.result = result;
    this.questType = questType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.result!);
    writer.writeByte(this.questType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.result = reader.readByte();
    this.questType = reader.readByte();
  }
}

export class TreasureHuntDigRequestAnswerFailedMessage extends TreasureHuntDigRequestAnswerMessage {
  public static id = 862;

  public wrongFlagCount: number | undefined = 0;

  public constructor(
    result?: number | undefined,
    questType?: number | undefined,
    wrongFlagCount?: number | undefined,
  ) {
    super(result, questType);
    this.wrongFlagCount = wrongFlagCount;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.wrongFlagCount!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.wrongFlagCount = reader.readByte();
  }
}

export class GameEntityDispositionErrorMessage extends DofusMessage {
  public static id: number = 209;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class EmoteAddMessage extends DofusMessage {
  public static id: number = 8736;

  public emoteId: number | undefined = 0;

  public constructor(emoteId?: number | undefined) {
    super();
    this.emoteId = emoteId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.emoteId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.emoteId = reader.readShort();
  }
}

export class GuildMotdMessage extends SocialNoticeMessage {
  public static id = 4202;

  public constructor(
    memberName?: string | undefined,
    memberId?: number | undefined,
    timestamp?: number | undefined,
    content?: string | undefined,
  ) {
    super(memberName, memberId, timestamp, content);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PartyLeaderUpdateMessage extends AbstractPartyEventMessage {
  public static id = 4003;

  public partyLeaderId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    partyLeaderId?: number | undefined,
  ) {
    super(partyId);
    this.partyLeaderId = partyLeaderId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.partyLeaderId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.partyLeaderId = reader.readVarLong();
  }
}

export class ChatAdminServerMessage extends ChatServerMessage {
  public static id = 6581;

  public constructor(
    fingerprint?: string | undefined,
    timestamp?: number | undefined,
    content?: string | undefined,
    channel?: number | undefined,
    senderAccountId?: number | undefined,
    prefix?: string | undefined,
    senderName?: string | undefined,
    senderId?: number | undefined,
  ) {
    super(
      fingerprint,
      timestamp,
      content,
      channel,
      senderAccountId,
      prefix,
      senderName,
      senderId,
    );
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class MountSterilizedMessage extends DofusMessage {
  public static id: number = 3777;

  public mountId: number | undefined = 0;

  public constructor(mountId?: number | undefined) {
    super();
    this.mountId = mountId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.mountId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mountId = reader.readVarInt();
  }
}

export class BasicWhoIsMessage extends DofusMessage {
  public static id: number = 7169;

  public playerState: number | undefined = 99;
  public accountId: number | undefined = 0;
  public playerName: string | undefined;
  public position: number | undefined = -1;
  public socialGroups: AbstractSocialGroupInfos[] | undefined;
  public accountTag: AccountTagInformation | undefined;
  public areaId: number | undefined = 0;
  public serverId: number | undefined = 0;
  public playerId: number | undefined = 0;
  public originServerId: number | undefined = 0;
  public self: boolean | undefined = false;
  public verbose: boolean | undefined = false;

  public constructor(
    playerState?: number | undefined,
    accountId?: number | undefined,
    playerName?: string | undefined,
    position?: number | undefined,
    socialGroups?: AbstractSocialGroupInfos[] | undefined,
    accountTag?: AccountTagInformation | undefined,
    areaId?: number | undefined,
    serverId?: number | undefined,
    playerId?: number | undefined,
    originServerId?: number | undefined,
    self?: boolean | undefined,
    verbose?: boolean | undefined,
  ) {
    super();
    this.playerState = playerState;
    this.accountId = accountId;
    this.playerName = playerName;
    this.position = position;
    this.socialGroups = socialGroups;
    this.accountTag = accountTag;
    this.areaId = areaId;
    this.serverId = serverId;
    this.playerId = playerId;
    this.originServerId = originServerId;
    this.self = self;
    this.verbose = verbose;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.playerState!);
    writer.writeInt(this.accountId!);
    writer.writeUTF(this.playerName!);
    writer.writeByte(this.position!);
    writer.writeShort(this.socialGroups!.length);
    this.socialGroups!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    this.accountTag!.serialize(writer);
    writer.writeShort(this.areaId!);
    writer.writeShort(this.serverId!);
    writer.writeVarLong(this.playerId!);
    writer.writeShort(this.originServerId!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.self!);
    box0 = setFlag(box0, 1, this.verbose!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerState = reader.readByte();
    this.accountId = reader.readInt();
    this.playerName = reader.readUTF();
    this.position = reader.readByte();
    this.socialGroups = [];
    const countSocialGroups = reader.readShort();
    for (let i: number = 0; i < countSocialGroups; i++) {
      const socialGroupsTypeId: number = reader.readShort();
      const type: AbstractSocialGroupInfos = new types[
        socialGroupsTypeId
      ]() as AbstractSocialGroupInfos;
      type.deserialize(reader);
      this.socialGroups.push(type);
    }
    this.accountTag = new AccountTagInformation();
    this.accountTag!.deserialize(reader);
    this.areaId = reader.readShort();
    this.serverId = reader.readShort();
    this.playerId = reader.readVarLong();
    this.originServerId = reader.readShort();
    const box0 = reader.readByte();
    this.self = getFlag(box0, 0);
    this.verbose = getFlag(box0, 1);
  }
}

export class ObjectAddedMessage extends DofusMessage {
  public static id: number = 9659;

  public origin: number | undefined = 0;
  public object_: ObjectItem | undefined;

  public constructor(
    origin?: number | undefined,
    object_?: ObjectItem | undefined,
  ) {
    super();
    this.origin = origin;
    this.object_ = object_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.origin!);
    this.object_!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.origin = reader.readByte();
    this.object_ = new ObjectItem();
    this.object_!.deserialize(reader);
  }
}

export class GameActionNoopMessage extends DofusMessage {
  public static id: number = 8877;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PopupWarningMessage extends DofusMessage {
  public static id: number = 941;

  public content: string | undefined;
  public author: string | undefined;
  public lockDuration: number | undefined = 0;

  public constructor(
    content?: string | undefined,
    author?: string | undefined,
    lockDuration?: number | undefined,
  ) {
    super();
    this.content = content;
    this.author = author;
    this.lockDuration = lockDuration;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.content!);
    writer.writeUTF(this.author!);
    writer.writeByte(this.lockDuration!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.content = reader.readUTF();
    this.author = reader.readUTF();
    this.lockDuration = reader.readByte();
  }
}

export class JobExperienceUpdateMessage extends DofusMessage {
  public static id: number = 3940;

  public experiencesUpdate: JobExperience | undefined;

  public constructor(experiencesUpdate?: JobExperience | undefined) {
    super();
    this.experiencesUpdate = experiencesUpdate;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.experiencesUpdate!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.experiencesUpdate = new JobExperience();
    this.experiencesUpdate!.deserialize(reader);
  }
}

export class GuildInformationsPaddocksMessage extends DofusMessage {
  public static id: number = 178;

  public paddocksInformations: PaddockContentInformations[] | undefined;
  public nbPaddockMax: number | undefined = 0;

  public constructor(
    paddocksInformations?: PaddockContentInformations[] | undefined,
    nbPaddockMax?: number | undefined,
  ) {
    super();
    this.paddocksInformations = paddocksInformations;
    this.nbPaddockMax = nbPaddockMax;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.paddocksInformations!.length);
    this.paddocksInformations!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeByte(this.nbPaddockMax!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.paddocksInformations = [];
    const countPaddocksInformations = reader.readShort();
    for (let i: number = 0; i < countPaddocksInformations; i++) {
      const type: PaddockContentInformations = new PaddockContentInformations();
      type.deserialize(reader);
      this.paddocksInformations.push(type);
    }
    this.nbPaddockMax = reader.readByte();
  }
}

export class GuildVersatileInfoListMessage extends DofusMessage {
  public static id: number = 211;

  public guilds: GuildVersatileInformations[] | undefined;

  public constructor(guilds?: GuildVersatileInformations[] | undefined) {
    super();
    this.guilds = guilds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.guilds!.length);
    this.guilds!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guilds = [];
    const countGuilds = reader.readShort();
    for (let i: number = 0; i < countGuilds; i++) {
      const guildsTypeId: number = reader.readShort();
      const type: GuildVersatileInformations = new types[
        guildsTypeId
      ]() as GuildVersatileInformations;
      type.deserialize(reader);
      this.guilds.push(type);
    }
  }
}

export class IdentificationFailedMessage extends DofusMessage {
  public static id: number = 7135;

  public reason: number | undefined = 99;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class IdentificationFailedForBadVersionMessage extends IdentificationFailedMessage {
  public static id = 7294;

  public requiredVersion: Version | undefined;

  public constructor(
    reason?: number | undefined,
    requiredVersion?: Version | undefined,
  ) {
    super(reason);
    this.requiredVersion = requiredVersion;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.requiredVersion!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.requiredVersion = new Version();
    this.requiredVersion!.deserialize(reader);
  }
}

export class JobLevelUpMessage extends DofusMessage {
  public static id: number = 8401;

  public jobsDescription: JobDescription | undefined;
  public newLevel: number | undefined = 0;

  public constructor(
    jobsDescription?: JobDescription | undefined,
    newLevel?: number | undefined,
  ) {
    super();
    this.jobsDescription = jobsDescription;
    this.newLevel = newLevel;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.jobsDescription!.serialize(writer);
    writer.writeByte(this.newLevel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.jobsDescription = new JobDescription();
    this.jobsDescription!.deserialize(reader);
    this.newLevel = reader.readByte();
  }
}

export class ExchangeBidHouseInListAddedMessage extends DofusMessage {
  public static id: number = 213;

  public prices: number[] | undefined;
  public objectGID: number | undefined = 0;
  public objectType: number | undefined = 0;
  public itemUID: number | undefined = 0;
  public effects: ObjectEffect[] | undefined;

  public constructor(
    prices?: number[] | undefined,
    objectGID?: number | undefined,
    objectType?: number | undefined,
    itemUID?: number | undefined,
    effects?: ObjectEffect[] | undefined,
  ) {
    super();
    this.prices = prices;
    this.objectGID = objectGID;
    this.objectType = objectType;
    this.itemUID = itemUID;
    this.effects = effects;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.prices!.length);
    this.prices!.forEach((current: number) => writer.writeVarLong(current));
    writer.writeVarShort(this.objectGID!);
    writer.writeInt(this.objectType!);
    writer.writeInt(this.itemUID!);
    writer.writeShort(this.effects!.length);
    this.effects!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.prices = [];
    const countPrices = reader.readShort();
    for (let i: number = 0; i < countPrices; i++) {
      this.prices.push(reader.readVarLong());
    }
    this.objectGID = reader.readVarShort();
    this.objectType = reader.readInt();
    this.itemUID = reader.readInt();
    this.effects = [];
    const countEffects = reader.readShort();
    for (let i: number = 0; i < countEffects; i++) {
      const effectsTypeId: number = reader.readShort();
      const type: ObjectEffect = new types[effectsTypeId]() as ObjectEffect;
      type.deserialize(reader);
      this.effects.push(type);
    }
  }
}

export class ExchangeStartedMountStockMessage extends DofusMessage {
  public static id: number = 5729;

  public objectsInfos: ObjectItem[] | undefined;

  public constructor(objectsInfos?: ObjectItem[] | undefined) {
    super();
    this.objectsInfos = objectsInfos;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objectsInfos!.length);
    this.objectsInfos!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectsInfos = [];
    const countObjectsInfos = reader.readShort();
    for (let i: number = 0; i < countObjectsInfos; i++) {
      const type: ObjectItem = new ObjectItem();
      type.deserialize(reader);
      this.objectsInfos.push(type);
    }
  }
}

export class BreachCharactersMessage extends DofusMessage {
  public static id: number = 6300;

  public characters: number[] | undefined;

  public constructor(characters?: number[] | undefined) {
    super();
    this.characters = characters;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.characters!.length);
    this.characters!.forEach((current: number) => writer.writeVarLong(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.characters = [];
    const countCharacters = reader.readShort();
    for (let i: number = 0; i < countCharacters; i++) {
      this.characters.push(reader.readVarLong());
    }
  }
}

export class AllianceVersatileInfoListMessage extends DofusMessage {
  public static id: number = 9853;

  public alliances: AllianceVersatileInformations[] | undefined;

  public constructor(alliances?: AllianceVersatileInformations[] | undefined) {
    super();
    this.alliances = alliances;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.alliances!.length);
    this.alliances!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.alliances = [];
    const countAlliances = reader.readShort();
    for (let i: number = 0; i < countAlliances; i++) {
      const type: AllianceVersatileInformations =
        new AllianceVersatileInformations();
      type.deserialize(reader);
      this.alliances.push(type);
    }
  }
}

export class HaapiShopApiKeyMessage extends DofusMessage {
  public static id: number = 6787;

  public token: string | undefined;

  public constructor(token?: string | undefined) {
    super();
    this.token = token;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.token!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.token = reader.readUTF();
  }
}

export class ObjectErrorMessage extends DofusMessage {
  public static id: number = 9603;

  public reason: number | undefined = 0;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class SymbioticObjectErrorMessage extends ObjectErrorMessage {
  public static id = 8441;

  public errorCode: number | undefined = 0;

  public constructor(
    reason?: number | undefined,
    errorCode?: number | undefined,
  ) {
    super(reason);
    this.errorCode = errorCode;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.errorCode!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.errorCode = reader.readByte();
  }
}

export class MimicryObjectErrorMessage extends SymbioticObjectErrorMessage {
  public static id = 5767;

  public preview: boolean | undefined = false;

  public constructor(
    reason?: number | undefined,
    errorCode?: number | undefined,
    preview?: boolean | undefined,
  ) {
    super(reason, errorCode);
    this.preview = preview;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.preview!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.preview = reader.readBoolean();
  }
}

export class KohUpdateMessage extends DofusMessage {
  public static id: number = 6530;

  public allianceMatchScore: number[] | undefined;
  public allianceNbMembers: number[] | undefined;
  public allianceMapMyAllianceScore: number | undefined = 0;
  public alliances: AllianceInformations[] | undefined;
  public allianceMapWinners: BasicAllianceInformations[] | undefined;
  public allianceMapWinnerScore: number | undefined = 0;
  public allianceRoundWeigth: number[] | undefined;
  public nextTickTime: number | undefined = 0;

  public constructor(
    allianceMatchScore?: number[] | undefined,
    allianceNbMembers?: number[] | undefined,
    allianceMapMyAllianceScore?: number | undefined,
    alliances?: AllianceInformations[] | undefined,
    allianceMapWinners?: BasicAllianceInformations[] | undefined,
    allianceMapWinnerScore?: number | undefined,
    allianceRoundWeigth?: number[] | undefined,
    nextTickTime?: number | undefined,
  ) {
    super();
    this.allianceMatchScore = allianceMatchScore;
    this.allianceNbMembers = allianceNbMembers;
    this.allianceMapMyAllianceScore = allianceMapMyAllianceScore;
    this.alliances = alliances;
    this.allianceMapWinners = allianceMapWinners;
    this.allianceMapWinnerScore = allianceMapWinnerScore;
    this.allianceRoundWeigth = allianceRoundWeigth;
    this.nextTickTime = nextTickTime;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.allianceMatchScore!.length);
    this.allianceMatchScore!.forEach((current: number) =>
      writer.writeByte(current),
    );
    writer.writeShort(this.allianceNbMembers!.length);
    this.allianceNbMembers!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
    writer.writeVarInt(this.allianceMapMyAllianceScore!);
    writer.writeShort(this.alliances!.length);
    this.alliances!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.allianceMapWinners!.length);
    this.allianceMapWinners!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarInt(this.allianceMapWinnerScore!);
    writer.writeShort(this.allianceRoundWeigth!.length);
    this.allianceRoundWeigth!.forEach((current: number) =>
      writer.writeVarInt(current),
    );
    writer.writeDouble(this.nextTickTime!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceMatchScore = [];
    const countAllianceMatchScore = reader.readShort();
    for (let i: number = 0; i < countAllianceMatchScore; i++) {
      this.allianceMatchScore.push(reader.readByte());
    }
    this.allianceNbMembers = [];
    const countAllianceNbMembers = reader.readShort();
    for (let i: number = 0; i < countAllianceNbMembers; i++) {
      this.allianceNbMembers.push(reader.readVarShort());
    }
    this.allianceMapMyAllianceScore = reader.readVarInt();
    this.alliances = [];
    const countAlliances = reader.readShort();
    for (let i: number = 0; i < countAlliances; i++) {
      const type: AllianceInformations = new AllianceInformations();
      type.deserialize(reader);
      this.alliances.push(type);
    }
    this.allianceMapWinners = [];
    const countAllianceMapWinners = reader.readShort();
    for (let i: number = 0; i < countAllianceMapWinners; i++) {
      const type: BasicAllianceInformations = new BasicAllianceInformations();
      type.deserialize(reader);
      this.allianceMapWinners.push(type);
    }
    this.allianceMapWinnerScore = reader.readVarInt();
    this.allianceRoundWeigth = [];
    const countAllianceRoundWeigth = reader.readShort();
    for (let i: number = 0; i < countAllianceRoundWeigth; i++) {
      this.allianceRoundWeigth.push(reader.readVarInt());
    }
    this.nextTickTime = reader.readDouble();
  }
}

export class ClientUIOpenedMessage extends DofusMessage {
  public static id: number = 7354;

  public type: number | undefined = 0;

  public constructor(type?: number | undefined) {
    super();
    this.type = type;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.type!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.type = reader.readByte();
  }
}

export class ClientUIOpenedByObjectMessage extends ClientUIOpenedMessage {
  public static id = 8823;

  public uid: number | undefined = 0;

  public constructor(type?: number | undefined, uid?: number | undefined) {
    super(type);
    this.uid = uid;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.uid!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.uid = reader.readVarInt();
  }
}

export class TeleportBuddiesRequestedMessage extends DofusMessage {
  public static id: number = 9435;

  public invalidBuddiesIds: number[] | undefined;
  public inviterId: number | undefined = 0;
  public dungeonId: number | undefined = 0;

  public constructor(
    invalidBuddiesIds?: number[] | undefined,
    inviterId?: number | undefined,
    dungeonId?: number | undefined,
  ) {
    super();
    this.invalidBuddiesIds = invalidBuddiesIds;
    this.inviterId = inviterId;
    this.dungeonId = dungeonId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.invalidBuddiesIds!.length);
    this.invalidBuddiesIds!.forEach((current: number) =>
      writer.writeVarLong(current),
    );
    writer.writeVarLong(this.inviterId!);
    writer.writeVarShort(this.dungeonId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.invalidBuddiesIds = [];
    const countInvalidBuddiesIds = reader.readShort();
    for (let i: number = 0; i < countInvalidBuddiesIds; i++) {
      this.invalidBuddiesIds.push(reader.readVarLong());
    }
    this.inviterId = reader.readVarLong();
    this.dungeonId = reader.readVarShort();
  }
}

export class ExchangeStartOkEvolutiveObjectRecycleTradeMessage extends DofusMessage {
  public static id: number = 7744;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ExchangeCraftPaymentModifiedMessage extends DofusMessage {
  public static id: number = 8641;

  public goldSum: number | undefined = 0;

  public constructor(goldSum?: number | undefined) {
    super();
    this.goldSum = goldSum;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.goldSum!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.goldSum = reader.readVarLong();
  }
}

export class AllianceMotdSetErrorMessage extends SocialNoticeSetErrorMessage {
  public static id = 9723;

  public constructor(reason?: number | undefined) {
    super(reason);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class LeaveDialogMessage extends DofusMessage {
  public static id: number = 2209;

  public dialogType: number | undefined = 0;

  public constructor(dialogType?: number | undefined) {
    super();
    this.dialogType = dialogType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.dialogType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dialogType = reader.readByte();
  }
}

export class ExchangeLeaveMessage extends LeaveDialogMessage {
  public static id = 8813;

  public success: boolean | undefined = false;

  public constructor(
    dialogType?: number | undefined,
    success?: boolean | undefined,
  ) {
    super(dialogType);
    this.success = success;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.success!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.success = reader.readBoolean();
  }
}

export class TaxCollectorErrorMessage extends DofusMessage {
  public static id: number = 4836;

  public reason: number | undefined = 0;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class BreachRoomLockedMessage extends DofusMessage {
  public static id: number = 7221;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class IdolListMessage extends DofusMessage {
  public static id: number = 9410;

  public chosenIdols: number[] | undefined;
  public partyChosenIdols: number[] | undefined;
  public partyIdols: PartyIdol[] | undefined;

  public constructor(
    chosenIdols?: number[] | undefined,
    partyChosenIdols?: number[] | undefined,
    partyIdols?: PartyIdol[] | undefined,
  ) {
    super();
    this.chosenIdols = chosenIdols;
    this.partyChosenIdols = partyChosenIdols;
    this.partyIdols = partyIdols;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.chosenIdols!.length);
    this.chosenIdols!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
    writer.writeShort(this.partyChosenIdols!.length);
    this.partyChosenIdols!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
    writer.writeShort(this.partyIdols!.length);
    this.partyIdols!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.chosenIdols = [];
    const countChosenIdols = reader.readShort();
    for (let i: number = 0; i < countChosenIdols; i++) {
      this.chosenIdols.push(reader.readVarShort());
    }
    this.partyChosenIdols = [];
    const countPartyChosenIdols = reader.readShort();
    for (let i: number = 0; i < countPartyChosenIdols; i++) {
      this.partyChosenIdols.push(reader.readVarShort());
    }
    this.partyIdols = [];
    const countPartyIdols = reader.readShort();
    for (let i: number = 0; i < countPartyIdols; i++) {
      const partyIdolsTypeId: number = reader.readShort();
      const type: PartyIdol = new types[partyIdolsTypeId]() as PartyIdol;
      type.deserialize(reader);
      this.partyIdols.push(type);
    }
  }
}

export class EmoteRemoveMessage extends DofusMessage {
  public static id: number = 8124;

  public emoteId: number | undefined = 0;

  public constructor(emoteId?: number | undefined) {
    super();
    this.emoteId = emoteId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.emoteId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.emoteId = reader.readShort();
  }
}

export class ExchangeGuildTaxCollectorGetMessage extends DofusMessage {
  public static id: number = 962;

  public mapId: number | undefined = 0;
  public worldY: number | undefined = 0;
  public worldX: number | undefined = 0;
  public collectorName: string | undefined;
  public callerId: number | undefined = 0;
  public userName: string | undefined;
  public objectsInfos: ObjectItemGenericQuantity[] | undefined;
  public experience: number | undefined = 0;
  public subAreaId: number | undefined = 0;
  public callerName: string | undefined;
  public pods: number | undefined = 0;

  public constructor(
    mapId?: number | undefined,
    worldY?: number | undefined,
    worldX?: number | undefined,
    collectorName?: string | undefined,
    callerId?: number | undefined,
    userName?: string | undefined,
    objectsInfos?: ObjectItemGenericQuantity[] | undefined,
    experience?: number | undefined,
    subAreaId?: number | undefined,
    callerName?: string | undefined,
    pods?: number | undefined,
  ) {
    super();
    this.mapId = mapId;
    this.worldY = worldY;
    this.worldX = worldX;
    this.collectorName = collectorName;
    this.callerId = callerId;
    this.userName = userName;
    this.objectsInfos = objectsInfos;
    this.experience = experience;
    this.subAreaId = subAreaId;
    this.callerName = callerName;
    this.pods = pods;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.mapId!);
    writer.writeShort(this.worldY!);
    writer.writeShort(this.worldX!);
    writer.writeUTF(this.collectorName!);
    writer.writeVarLong(this.callerId!);
    writer.writeUTF(this.userName!);
    writer.writeShort(this.objectsInfos!.length);
    this.objectsInfos!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeDouble(this.experience!);
    writer.writeVarShort(this.subAreaId!);
    writer.writeUTF(this.callerName!);
    writer.writeVarShort(this.pods!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapId = reader.readDouble();
    this.worldY = reader.readShort();
    this.worldX = reader.readShort();
    this.collectorName = reader.readUTF();
    this.callerId = reader.readVarLong();
    this.userName = reader.readUTF();
    this.objectsInfos = [];
    const countObjectsInfos = reader.readShort();
    for (let i: number = 0; i < countObjectsInfos; i++) {
      const type: ObjectItemGenericQuantity = new ObjectItemGenericQuantity();
      type.deserialize(reader);
      this.objectsInfos.push(type);
    }
    this.experience = reader.readDouble();
    this.subAreaId = reader.readVarShort();
    this.callerName = reader.readUTF();
    this.pods = reader.readVarShort();
  }
}

export class GuildMotdSetErrorMessage extends SocialNoticeSetErrorMessage {
  public static id = 1049;

  public constructor(reason?: number | undefined) {
    super(reason);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GameRolePlayArenaSwitchToGameServerMessage extends DofusMessage {
  public static id: number = 651;

  public ticket: number[] | undefined;
  public homeServerId: number | undefined = 0;
  public validToken: boolean | undefined = false;

  public constructor(
    ticket?: number[] | undefined,
    homeServerId?: number | undefined,
    validToken?: boolean | undefined,
  ) {
    super();
    this.ticket = ticket;
    this.homeServerId = homeServerId;
    this.validToken = validToken;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.ticket!.length);
    this.ticket!.forEach((current: number) => writer.writeByte(current));
    writer.writeShort(this.homeServerId!);
    writer.writeBoolean(this.validToken!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ticket = [];
    const countTicket = reader.readVarInt();
    for (let i: number = 0; i < countTicket; i++) {
      this.ticket.push(reader.readByte());
    }
    this.homeServerId = reader.readShort();
    this.validToken = reader.readBoolean();
  }
}

export class ContactLookMessage extends DofusMessage {
  public static id: number = 6590;

  public requestId: number | undefined = 0;
  public playerName: string | undefined;
  public look: EntityLook | undefined;
  public playerId: number | undefined = 0;

  public constructor(
    requestId?: number | undefined,
    playerName?: string | undefined,
    look?: EntityLook | undefined,
    playerId?: number | undefined,
  ) {
    super();
    this.requestId = requestId;
    this.playerName = playerName;
    this.look = look;
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.requestId!);
    writer.writeUTF(this.playerName!);
    this.look!.serialize(writer);
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.requestId = reader.readVarInt();
    this.playerName = reader.readUTF();
    this.look = new EntityLook();
    this.look!.deserialize(reader);
    this.playerId = reader.readVarLong();
  }
}

export class AlliancePartialListMessage extends AllianceListMessage {
  public static id = 2592;

  public constructor(alliances?: AllianceFactSheetInformations[] | undefined) {
    super(alliances);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class MapRunningFightDetailsMessage extends DofusMessage {
  public static id: number = 3380;

  public defenders: GameFightFighterLightInformations[] | undefined;
  public fightId: number | undefined = 0;
  public attackers: GameFightFighterLightInformations[] | undefined;

  public constructor(
    defenders?: GameFightFighterLightInformations[] | undefined,
    fightId?: number | undefined,
    attackers?: GameFightFighterLightInformations[] | undefined,
  ) {
    super();
    this.defenders = defenders;
    this.fightId = fightId;
    this.attackers = attackers;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.defenders!.length);
    this.defenders!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarShort(this.fightId!);
    writer.writeShort(this.attackers!.length);
    this.attackers!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.defenders = [];
    const countDefenders = reader.readShort();
    for (let i: number = 0; i < countDefenders; i++) {
      const defendersTypeId: number = reader.readShort();
      const type: GameFightFighterLightInformations = new types[
        defendersTypeId
      ]() as GameFightFighterLightInformations;
      type.deserialize(reader);
      this.defenders.push(type);
    }
    this.fightId = reader.readVarShort();
    this.attackers = [];
    const countAttackers = reader.readShort();
    for (let i: number = 0; i < countAttackers; i++) {
      const attackersTypeId: number = reader.readShort();
      const type: GameFightFighterLightInformations = new types[
        attackersTypeId
      ]() as GameFightFighterLightInformations;
      type.deserialize(reader);
      this.attackers.push(type);
    }
  }
}

export class MapRunningFightDetailsExtendedMessage extends MapRunningFightDetailsMessage {
  public static id = 9456;

  public namedPartyTeams: NamedPartyTeam[] | undefined;

  public constructor(
    defenders?: GameFightFighterLightInformations[] | undefined,
    fightId?: number | undefined,
    attackers?: GameFightFighterLightInformations[] | undefined,
    namedPartyTeams?: NamedPartyTeam[] | undefined,
  ) {
    super(defenders, fightId, attackers);
    this.namedPartyTeams = namedPartyTeams;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.namedPartyTeams!.length);
    this.namedPartyTeams!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.namedPartyTeams = [];
    const countNamedPartyTeams = reader.readShort();
    for (let i: number = 0; i < countNamedPartyTeams; i++) {
      const type: NamedPartyTeam = new NamedPartyTeam();
      type.deserialize(reader);
      this.namedPartyTeams.push(type);
    }
  }
}

export class AcquaintanceServerListMessage extends DofusMessage {
  public static id: number = 8752;

  public servers: number[] | undefined;

  public constructor(servers?: number[] | undefined) {
    super();
    this.servers = servers;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.servers!.length);
    this.servers!.forEach((current: number) => writer.writeVarShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.servers = [];
    const countServers = reader.readShort();
    for (let i: number = 0; i < countServers; i++) {
      this.servers.push(reader.readVarShort());
    }
  }
}

export class DungeonPartyFinderRegisterErrorMessage extends DofusMessage {
  public static id: number = 5482;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class EmoteListMessage extends DofusMessage {
  public static id: number = 9032;

  public emoteIds: number[] | undefined;

  public constructor(emoteIds?: number[] | undefined) {
    super();
    this.emoteIds = emoteIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.emoteIds!.length);
    this.emoteIds!.forEach((current: number) => writer.writeShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.emoteIds = [];
    const countEmoteIds = reader.readShort();
    for (let i: number = 0; i < countEmoteIds; i++) {
      this.emoteIds.push(reader.readShort());
    }
  }
}

export class TitlesAndOrnamentsListMessage extends DofusMessage {
  public static id: number = 6204;

  public ornaments: number[] | undefined;
  public titles: number[] | undefined;
  public activeTitle: number | undefined = 0;
  public activeOrnament: number | undefined = 0;

  public constructor(
    ornaments?: number[] | undefined,
    titles?: number[] | undefined,
    activeTitle?: number | undefined,
    activeOrnament?: number | undefined,
  ) {
    super();
    this.ornaments = ornaments;
    this.titles = titles;
    this.activeTitle = activeTitle;
    this.activeOrnament = activeOrnament;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.ornaments!.length);
    this.ornaments!.forEach((current: number) => writer.writeVarShort(current));
    writer.writeShort(this.titles!.length);
    this.titles!.forEach((current: number) => writer.writeVarShort(current));
    writer.writeVarShort(this.activeTitle!);
    writer.writeVarShort(this.activeOrnament!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ornaments = [];
    const countOrnaments = reader.readShort();
    for (let i: number = 0; i < countOrnaments; i++) {
      this.ornaments.push(reader.readVarShort());
    }
    this.titles = [];
    const countTitles = reader.readShort();
    for (let i: number = 0; i < countTitles; i++) {
      this.titles.push(reader.readVarShort());
    }
    this.activeTitle = reader.readVarShort();
    this.activeOrnament = reader.readVarShort();
  }
}

export class HaapiConfirmationMessage extends DofusMessage {
  public static id: number = 5733;

  public kamas: number | undefined = 0;
  public transaction: string | undefined;
  public amount: number | undefined = 0;
  public action: number | undefined = 0;
  public rate: number | undefined = 0;

  public constructor(
    kamas?: number | undefined,
    transaction?: string | undefined,
    amount?: number | undefined,
    action?: number | undefined,
    rate?: number | undefined,
  ) {
    super();
    this.kamas = kamas;
    this.transaction = transaction;
    this.amount = amount;
    this.action = action;
    this.rate = rate;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.kamas!);
    writer.writeUTF(this.transaction!);
    writer.writeVarLong(this.amount!);
    writer.writeByte(this.action!);
    writer.writeVarShort(this.rate!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.kamas = reader.readVarLong();
    this.transaction = reader.readUTF();
    this.amount = reader.readVarLong();
    this.action = reader.readByte();
    this.rate = reader.readVarShort();
  }
}

export class PrismsInfoValidMessage extends DofusMessage {
  public static id: number = 9294;

  public fights: PrismFightersInformation[] | undefined;

  public constructor(fights?: PrismFightersInformation[] | undefined) {
    super();
    this.fights = fights;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.fights!.length);
    this.fights!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fights = [];
    const countFights = reader.readShort();
    for (let i: number = 0; i < countFights; i++) {
      const type: PrismFightersInformation = new PrismFightersInformation();
      type.deserialize(reader);
      this.fights.push(type);
    }
  }
}

export class InviteInHavenBagOfferMessage extends DofusMessage {
  public static id: number = 2440;

  public timeLeftBeforeCancel: number | undefined = 0;
  public hostInformations: CharacterMinimalInformations | undefined;

  public constructor(
    timeLeftBeforeCancel?: number | undefined,
    hostInformations?: CharacterMinimalInformations | undefined,
  ) {
    super();
    this.timeLeftBeforeCancel = timeLeftBeforeCancel;
    this.hostInformations = hostInformations;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.timeLeftBeforeCancel!);
    this.hostInformations!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.timeLeftBeforeCancel = reader.readVarInt();
    this.hostInformations = new CharacterMinimalInformations();
    this.hostInformations!.deserialize(reader);
  }
}

export class HavenBagPackListMessage extends DofusMessage {
  public static id: number = 268;

  public packIds: number[] | undefined;

  public constructor(packIds?: number[] | undefined) {
    super();
    this.packIds = packIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.packIds!.length);
    this.packIds!.forEach((current: number) => writer.writeByte(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.packIds = [];
    const countPackIds = reader.readShort();
    for (let i: number = 0; i < countPackIds; i++) {
      this.packIds.push(reader.readByte());
    }
  }
}

export class CharacterDeletionErrorMessage extends DofusMessage {
  public static id: number = 4473;

  public reason: number | undefined = 1;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class HavenBagFurnituresMessage extends DofusMessage {
  public static id: number = 6373;

  public furnituresInfos: HavenBagFurnitureInformation[] | undefined;

  public constructor(
    furnituresInfos?: HavenBagFurnitureInformation[] | undefined,
  ) {
    super();
    this.furnituresInfos = furnituresInfos;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.furnituresInfos!.length);
    this.furnituresInfos!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.furnituresInfos = [];
    const countFurnituresInfos = reader.readShort();
    for (let i: number = 0; i < countFurnituresInfos; i++) {
      const type: HavenBagFurnitureInformation =
        new HavenBagFurnitureInformation();
      type.deserialize(reader);
      this.furnituresInfos.push(type);
    }
  }
}

export class AcquaintancesListMessage extends DofusMessage {
  public static id: number = 2842;

  public acquaintanceList: AcquaintanceInformation[] | undefined;

  public constructor(acquaintanceList?: AcquaintanceInformation[] | undefined) {
    super();
    this.acquaintanceList = acquaintanceList;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.acquaintanceList!.length);
    this.acquaintanceList!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.acquaintanceList = [];
    const countAcquaintanceList = reader.readShort();
    for (let i: number = 0; i < countAcquaintanceList; i++) {
      const acquaintanceListTypeId: number = reader.readShort();
      const type: AcquaintanceInformation = new types[
        acquaintanceListTypeId
      ]() as AcquaintanceInformation;
      type.deserialize(reader);
      this.acquaintanceList.push(type);
    }
  }
}

export class ExchangeStartedTaxCollectorShopMessage extends DofusMessage {
  public static id: number = 2236;

  public kamas: number | undefined = 0;
  public objects: ObjectItem[] | undefined;

  public constructor(
    kamas?: number | undefined,
    objects?: ObjectItem[] | undefined,
  ) {
    super();
    this.kamas = kamas;
    this.objects = objects;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.kamas!);
    writer.writeShort(this.objects!.length);
    this.objects!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.kamas = reader.readVarLong();
    this.objects = [];
    const countObjects = reader.readShort();
    for (let i: number = 0; i < countObjects; i++) {
      const type: ObjectItem = new ObjectItem();
      type.deserialize(reader);
      this.objects.push(type);
    }
  }
}

export class GuildHouseRemoveMessage extends DofusMessage {
  public static id: number = 1802;

  public instanceId: number | undefined = 0;
  public secondHand: boolean | undefined = false;
  public houseId: number | undefined = 0;

  public constructor(
    instanceId?: number | undefined,
    secondHand?: boolean | undefined,
    houseId?: number | undefined,
  ) {
    super();
    this.instanceId = instanceId;
    this.secondHand = secondHand;
    this.houseId = houseId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.instanceId!);
    writer.writeBoolean(this.secondHand!);
    writer.writeVarInt(this.houseId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.instanceId = reader.readInt();
    this.secondHand = reader.readBoolean();
    this.houseId = reader.readVarInt();
  }
}

export class TreasureHuntFinishedMessage extends DofusMessage {
  public static id: number = 5016;

  public questType: number | undefined = 0;

  public constructor(questType?: number | undefined) {
    super();
    this.questType = questType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.questType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.questType = reader.readByte();
  }
}

export class HaapiBufferListMessage extends DofusMessage {
  public static id: number = 518;

  public buffers: BufferInformation[] | undefined;

  public constructor(buffers?: BufferInformation[] | undefined) {
    super();
    this.buffers = buffers;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.buffers!.length);
    this.buffers!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.buffers = [];
    const countBuffers = reader.readShort();
    for (let i: number = 0; i < countBuffers; i++) {
      const type: BufferInformation = new BufferInformation();
      type.deserialize(reader);
      this.buffers.push(type);
    }
  }
}

export class WrapperObjectAssociatedMessage extends SymbioticObjectAssociatedMessage {
  public static id = 3987;

  public constructor(hostUID?: number | undefined) {
    super(hostUID);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ObjectDeletedMessage extends DofusMessage {
  public static id: number = 7574;

  public objectUID: number | undefined = 0;

  public constructor(objectUID?: number | undefined) {
    super();
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.objectUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectUID = reader.readVarInt();
  }
}

export class PartyMemberEjectedMessage extends PartyMemberRemoveMessage {
  public static id = 7777;

  public kickerId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    leavingPlayerId?: number | undefined,
    kickerId?: number | undefined,
  ) {
    super(partyId, leavingPlayerId);
    this.kickerId = kickerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.kickerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.kickerId = reader.readVarLong();
  }
}

export class ExchangeMountsStableRemoveMessage extends DofusMessage {
  public static id: number = 9668;

  public mountsId: number[] | undefined;

  public constructor(mountsId?: number[] | undefined) {
    super();
    this.mountsId = mountsId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.mountsId!.length);
    this.mountsId!.forEach((current: number) => writer.writeVarInt(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mountsId = [];
    const countMountsId = reader.readShort();
    for (let i: number = 0; i < countMountsId; i++) {
      this.mountsId.push(reader.readVarInt());
    }
  }
}

export class AllianceCreationStartedMessage extends DofusMessage {
  public static id: number = 389;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class InventoryWeightMessage extends DofusMessage {
  public static id: number = 3751;

  public weightMax: number | undefined = 0;
  public shopWeight: number | undefined = 0;
  public inventoryWeight: number | undefined = 0;

  public constructor(
    weightMax?: number | undefined,
    shopWeight?: number | undefined,
    inventoryWeight?: number | undefined,
  ) {
    super();
    this.weightMax = weightMax;
    this.shopWeight = shopWeight;
    this.inventoryWeight = inventoryWeight;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.weightMax!);
    writer.writeVarInt(this.shopWeight!);
    writer.writeVarInt(this.inventoryWeight!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.weightMax = reader.readVarInt();
    this.shopWeight = reader.readVarInt();
    this.inventoryWeight = reader.readVarInt();
  }
}

export class MountDataErrorMessage extends DofusMessage {
  public static id: number = 24;

  public reason: number | undefined = 0;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class ExchangeMoneyMovementInformationMessage extends DofusMessage {
  public static id: number = 6336;

  public limit: number | undefined = 0;

  public constructor(limit?: number | undefined) {
    super();
    this.limit = limit;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.limit!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.limit = reader.readVarLong();
  }
}

export class ZaapRespawnUpdatedMessage extends DofusMessage {
  public static id: number = 2988;

  public mapId: number | undefined = 0;

  public constructor(mapId?: number | undefined) {
    super();
    this.mapId = mapId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.mapId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapId = reader.readDouble();
  }
}

export class ExchangeMultiCraftCrafterCanUseHisRessourcesMessage extends DofusMessage {
  public static id: number = 264;

  public allowed: boolean | undefined = false;

  public constructor(allowed?: boolean | undefined) {
    super();
    this.allowed = allowed;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.allowed!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allowed = reader.readBoolean();
  }
}

export class InvalidPresetsMessage extends DofusMessage {
  public static id: number = 5030;

  public presetIds: number[] | undefined;

  public constructor(presetIds?: number[] | undefined) {
    super();
    this.presetIds = presetIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.presetIds!.length);
    this.presetIds!.forEach((current: number) => writer.writeShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.presetIds = [];
    const countPresetIds = reader.readShort();
    for (let i: number = 0; i < countPresetIds; i++) {
      this.presetIds.push(reader.readShort());
    }
  }
}

export class PresetSaveErrorMessage extends DofusMessage {
  public static id: number = 2325;

  public code: number | undefined = 2;
  public presetId: number | undefined = 0;

  public constructor(code?: number | undefined, presetId?: number | undefined) {
    super();
    this.code = code;
    this.presetId = presetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.code!);
    writer.writeShort(this.presetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.code = reader.readByte();
    this.presetId = reader.readShort();
  }
}

export class GuildInformationsMemberUpdateMessage extends DofusMessage {
  public static id: number = 6301;

  public member: GuildMember | undefined;

  public constructor(member?: GuildMember | undefined) {
    super();
    this.member = member;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.member!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.member = new GuildMember();
    this.member!.deserialize(reader);
  }
}

export class ExchangeStartedWithStorageMessage extends ExchangeStartedMessage {
  public static id = 7302;

  public storageMaxSlot: number | undefined = 0;

  public constructor(
    exchangeType?: number | undefined,
    storageMaxSlot?: number | undefined,
  ) {
    super(exchangeType);
    this.storageMaxSlot = storageMaxSlot;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.storageMaxSlot!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.storageMaxSlot = reader.readVarInt();
  }
}

export class TeleportToBuddyOfferMessage extends DofusMessage {
  public static id: number = 4009;

  public timeLeft: number | undefined = 0;
  public buddyId: number | undefined = 0;
  public dungeonId: number | undefined = 0;

  public constructor(
    timeLeft?: number | undefined,
    buddyId?: number | undefined,
    dungeonId?: number | undefined,
  ) {
    super();
    this.timeLeft = timeLeft;
    this.buddyId = buddyId;
    this.dungeonId = dungeonId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.timeLeft!);
    writer.writeVarLong(this.buddyId!);
    writer.writeVarShort(this.dungeonId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.timeLeft = reader.readVarInt();
    this.buddyId = reader.readVarLong();
    this.dungeonId = reader.readVarShort();
  }
}

export class PartyLoyaltyStatusMessage extends AbstractPartyMessage {
  public static id = 5410;

  public loyal: boolean | undefined = false;

  public constructor(
    partyId?: number | undefined,
    loyal?: boolean | undefined,
  ) {
    super(partyId);
    this.loyal = loyal;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.loyal!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.loyal = reader.readBoolean();
  }
}

export class PopupWarningClosedMessage extends DofusMessage {
  public static id: number = 863;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class JobCrafterDirectoryRemoveMessage extends DofusMessage {
  public static id: number = 890;

  public playerId: number | undefined = 0;
  public jobId: number | undefined = 0;

  public constructor(
    playerId?: number | undefined,
    jobId?: number | undefined,
  ) {
    super();
    this.playerId = playerId;
    this.jobId = jobId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
    writer.writeByte(this.jobId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
    this.jobId = reader.readByte();
  }
}

export class ExchangeObjectModifiedMessage extends ExchangeObjectMessage {
  public static id = 3598;

  public object_: ObjectItem | undefined;

  public constructor(
    remote?: boolean | undefined,
    object_?: ObjectItem | undefined,
  ) {
    super(remote);
    this.object_ = object_;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.object_!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.object_ = new ObjectItem();
    this.object_!.deserialize(reader);
  }
}

export class AnomalySubareaInformationResponseMessage extends DofusMessage {
  public static id: number = 6030;

  public subareas: AnomalySubareaInformation[] | undefined;

  public constructor(subareas?: AnomalySubareaInformation[] | undefined) {
    super();
    this.subareas = subareas;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.subareas!.length);
    this.subareas!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.subareas = [];
    const countSubareas = reader.readShort();
    for (let i: number = 0; i < countSubareas; i++) {
      const type: AnomalySubareaInformation = new AnomalySubareaInformation();
      type.deserialize(reader);
      this.subareas.push(type);
    }
  }
}

export class FriendAddFailureMessage extends DofusMessage {
  public static id: number = 4074;

  public reason: number | undefined = 0;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class GuildListApplicationModifiedMessage extends DofusMessage {
  public static id: number = 8105;

  public state: number | undefined = 0;
  public playerId: number | undefined = 0;
  public apply: GuildApplicationInformation | undefined;

  public constructor(
    state?: number | undefined,
    playerId?: number | undefined,
    apply?: GuildApplicationInformation | undefined,
  ) {
    super();
    this.state = state;
    this.playerId = playerId;
    this.apply = apply;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.state!);
    writer.writeVarLong(this.playerId!);
    this.apply!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.state = reader.readByte();
    this.playerId = reader.readVarLong();
    this.apply = new GuildApplicationInformation();
    this.apply!.deserialize(reader);
  }
}

export class HavenBagRoomUpdateMessage extends DofusMessage {
  public static id: number = 1606;

  public roomsPreview: HavenBagRoomPreviewInformation[] | undefined;
  public action: number | undefined = 0;

  public constructor(
    roomsPreview?: HavenBagRoomPreviewInformation[] | undefined,
    action?: number | undefined,
  ) {
    super();
    this.roomsPreview = roomsPreview;
    this.action = action;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.roomsPreview!.length);
    this.roomsPreview!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeByte(this.action!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.roomsPreview = [];
    const countRoomsPreview = reader.readShort();
    for (let i: number = 0; i < countRoomsPreview; i++) {
      const type: HavenBagRoomPreviewInformation =
        new HavenBagRoomPreviewInformation();
      type.deserialize(reader);
      this.roomsPreview.push(type);
    }
    this.action = reader.readByte();
  }
}

export class BulletinMessage extends SocialNoticeMessage {
  public static id = 9541;

  public lastNotifiedTimestamp: number | undefined = 0;

  public constructor(
    memberName?: string | undefined,
    memberId?: number | undefined,
    timestamp?: number | undefined,
    content?: string | undefined,
    lastNotifiedTimestamp?: number | undefined,
  ) {
    super(memberName, memberId, timestamp, content);
    this.lastNotifiedTimestamp = lastNotifiedTimestamp;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.lastNotifiedTimestamp!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.lastNotifiedTimestamp = reader.readInt();
  }
}

export class GuildBulletinMessage extends BulletinMessage {
  public static id = 981;

  public constructor(
    memberName?: string | undefined,
    memberId?: number | undefined,
    timestamp?: number | undefined,
    content?: string | undefined,
    lastNotifiedTimestamp?: number | undefined,
  ) {
    super(memberName, memberId, timestamp, content, lastNotifiedTimestamp);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PartyUpdateLightMessage extends AbstractPartyEventMessage {
  public static id = 585;

  public id_: number | undefined = 0;
  public regenRate: number | undefined = 0;
  public maxLifePoints: number | undefined = 0;
  public lifePoints: number | undefined = 0;
  public prospecting: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    id_?: number | undefined,
    regenRate?: number | undefined,
    maxLifePoints?: number | undefined,
    lifePoints?: number | undefined,
    prospecting?: number | undefined,
  ) {
    super(partyId);
    this.id_ = id_;
    this.regenRate = regenRate;
    this.maxLifePoints = maxLifePoints;
    this.lifePoints = lifePoints;
    this.prospecting = prospecting;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.id_!);
    writer.writeByte(this.regenRate!);
    writer.writeVarInt(this.maxLifePoints!);
    writer.writeVarInt(this.lifePoints!);
    writer.writeVarShort(this.prospecting!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readVarLong();
    this.regenRate = reader.readByte();
    this.maxLifePoints = reader.readVarInt();
    this.lifePoints = reader.readVarInt();
    this.prospecting = reader.readVarShort();
  }
}

export class BreachInvitationOfferMessage extends DofusMessage {
  public static id: number = 6717;

  public timeLeftBeforeCancel: number | undefined = 0;
  public host: CharacterMinimalInformations | undefined;

  public constructor(
    timeLeftBeforeCancel?: number | undefined,
    host?: CharacterMinimalInformations | undefined,
  ) {
    super();
    this.timeLeftBeforeCancel = timeLeftBeforeCancel;
    this.host = host;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.timeLeftBeforeCancel!);
    this.host!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.timeLeftBeforeCancel = reader.readVarInt();
    this.host = new CharacterMinimalInformations();
    this.host!.deserialize(reader);
  }
}

export class GuildJoinedMessage extends DofusMessage {
  public static id: number = 1218;

  public memberRights: number | undefined = 0;
  public guildInfo: GuildInformations | undefined;

  public constructor(
    memberRights?: number | undefined,
    guildInfo?: GuildInformations | undefined,
  ) {
    super();
    this.memberRights = memberRights;
    this.guildInfo = guildInfo;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.memberRights!);
    this.guildInfo!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.memberRights = reader.readVarInt();
    this.guildInfo = new GuildInformations();
    this.guildInfo!.deserialize(reader);
  }
}

export class GuildMembershipMessage extends GuildJoinedMessage {
  public static id = 6499;

  public constructor(
    memberRights?: number | undefined,
    guildInfo?: GuildInformations | undefined,
  ) {
    super(memberRights, guildInfo);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class SubscriptionZoneMessage extends DofusMessage {
  public static id: number = 3082;

  public active: boolean | undefined = false;

  public constructor(active?: boolean | undefined) {
    super();
    this.active = active;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.active!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.active = reader.readBoolean();
  }
}

export class GameFightPlacementSwapPositionsErrorMessage extends DofusMessage {
  public static id: number = 3778;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ExchangeReplyTaxVendorMessage extends DofusMessage {
  public static id: number = 7870;

  public totalTaxValue: number | undefined = 0;
  public objectValue: number | undefined = 0;

  public constructor(
    totalTaxValue?: number | undefined,
    objectValue?: number | undefined,
  ) {
    super();
    this.totalTaxValue = totalTaxValue;
    this.objectValue = objectValue;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.totalTaxValue!);
    writer.writeVarLong(this.objectValue!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.totalTaxValue = reader.readVarLong();
    this.objectValue = reader.readVarLong();
  }
}

export class PresetUseResultMessage extends DofusMessage {
  public static id: number = 8808;

  public code: number | undefined = 3;
  public presetId: number | undefined = 0;

  public constructor(code?: number | undefined, presetId?: number | undefined) {
    super();
    this.code = code;
    this.presetId = presetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.code!);
    writer.writeShort(this.presetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.code = reader.readByte();
    this.presetId = reader.readShort();
  }
}

export class IdentificationFailedBannedMessage extends IdentificationFailedMessage {
  public static id = 4124;

  public banEndDate: number | undefined = 0;

  public constructor(
    reason?: number | undefined,
    banEndDate?: number | undefined,
  ) {
    super(reason);
    this.banEndDate = banEndDate;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.banEndDate!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.banEndDate = reader.readDouble();
  }
}

export class BreachRewardsMessage extends DofusMessage {
  public static id: number = 3565;

  public rewards: BreachReward[] | undefined;

  public constructor(rewards?: BreachReward[] | undefined) {
    super();
    this.rewards = rewards;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.rewards!.length);
    this.rewards!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.rewards = [];
    const countRewards = reader.readShort();
    for (let i: number = 0; i < countRewards; i++) {
      const type: BreachReward = new BreachReward();
      type.deserialize(reader);
      this.rewards.push(type);
    }
  }
}

export class ObjectAveragePricesMessage extends DofusMessage {
  public static id: number = 5921;

  public avgPrices: number[] | undefined;
  public ids: number[] | undefined;

  public constructor(
    avgPrices?: number[] | undefined,
    ids?: number[] | undefined,
  ) {
    super();
    this.avgPrices = avgPrices;
    this.ids = ids;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.avgPrices!.length);
    this.avgPrices!.forEach((current: number) => writer.writeVarLong(current));
    writer.writeShort(this.ids!.length);
    this.ids!.forEach((current: number) => writer.writeVarShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.avgPrices = [];
    const countAvgPrices = reader.readShort();
    for (let i: number = 0; i < countAvgPrices; i++) {
      this.avgPrices.push(reader.readVarLong());
    }
    this.ids = [];
    const countIds = reader.readShort();
    for (let i: number = 0; i < countIds; i++) {
      this.ids.push(reader.readVarShort());
    }
  }
}

export class GuildHousesInformationMessage extends DofusMessage {
  public static id: number = 9308;

  public housesInformations: HouseInformationsForGuild[] | undefined;

  public constructor(
    housesInformations?: HouseInformationsForGuild[] | undefined,
  ) {
    super();
    this.housesInformations = housesInformations;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.housesInformations!.length);
    this.housesInformations!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.housesInformations = [];
    const countHousesInformations = reader.readShort();
    for (let i: number = 0; i < countHousesInformations; i++) {
      const type: HouseInformationsForGuild = new HouseInformationsForGuild();
      type.deserialize(reader);
      this.housesInformations.push(type);
    }
  }
}

export class DisplayNumericalValuePaddockMessage extends DofusMessage {
  public static id: number = 5348;

  public type: number | undefined = 0;
  public value: number | undefined = 0;
  public rideId: number | undefined = 0;

  public constructor(
    type?: number | undefined,
    value?: number | undefined,
    rideId?: number | undefined,
  ) {
    super();
    this.type = type;
    this.value = value;
    this.rideId = rideId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.type!);
    writer.writeInt(this.value!);
    writer.writeInt(this.rideId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.type = reader.readByte();
    this.value = reader.readInt();
    this.rideId = reader.readInt();
  }
}

export class MountEquipedErrorMessage extends DofusMessage {
  public static id: number = 1774;

  public errorType: number | undefined = 0;

  public constructor(errorType?: number | undefined) {
    super();
    this.errorType = errorType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.errorType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.errorType = reader.readByte();
  }
}

export class AchievementRewardErrorMessage extends DofusMessage {
  public static id: number = 8883;

  public achievementId: number | undefined = 0;

  public constructor(achievementId?: number | undefined) {
    super();
    this.achievementId = achievementId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.achievementId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.achievementId = reader.readShort();
  }
}

export class ChallengeFightJoinRefusedMessage extends DofusMessage {
  public static id: number = 2066;

  public reason: number | undefined = 0;
  public playerId: number | undefined = 0;

  public constructor(
    reason?: number | undefined,
    playerId?: number | undefined,
  ) {
    super();
    this.reason = reason;
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
    this.playerId = reader.readVarLong();
  }
}

export class GuildMemberLeavingMessage extends DofusMessage {
  public static id: number = 419;

  public memberId: number | undefined = 0;
  public kicked: boolean | undefined = false;

  public constructor(
    memberId?: number | undefined,
    kicked?: boolean | undefined,
  ) {
    super();
    this.memberId = memberId;
    this.kicked = kicked;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.memberId!);
    writer.writeBoolean(this.kicked!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.memberId = reader.readVarLong();
    this.kicked = reader.readBoolean();
  }
}

export class ForgettableSpellEquipmentSlotsMessage extends DofusMessage {
  public static id: number = 7772;

  public quantity: number | undefined = 0;

  public constructor(quantity?: number | undefined) {
    super();
    this.quantity = quantity;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.quantity!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarShort();
  }
}

export class GameActionSpamMessage extends DofusMessage {
  public static id: number = 6276;

  public cells: number[] | undefined;

  public constructor(cells?: number[] | undefined) {
    super();
    this.cells = cells;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.cells!.length);
    this.cells!.forEach((current: number) => writer.writeShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cells = [];
    const countCells = reader.readShort();
    for (let i: number = 0; i < countCells; i++) {
      this.cells.push(reader.readShort());
    }
  }
}

export class GuildLevelUpMessage extends DofusMessage {
  public static id: number = 7669;

  public newLevel: number | undefined = 0;

  public constructor(newLevel?: number | undefined) {
    super();
    this.newLevel = newLevel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.newLevel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.newLevel = reader.readByte();
  }
}

export class AllianceJoinedMessage extends DofusMessage {
  public static id: number = 1981;

  public enabled: boolean | undefined = false;
  public leadingGuildId: number | undefined = 0;
  public allianceInfo: AllianceInformations | undefined;

  public constructor(
    enabled?: boolean | undefined,
    leadingGuildId?: number | undefined,
    allianceInfo?: AllianceInformations | undefined,
  ) {
    super();
    this.enabled = enabled;
    this.leadingGuildId = leadingGuildId;
    this.allianceInfo = allianceInfo;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enabled!);
    writer.writeVarInt(this.leadingGuildId!);
    this.allianceInfo!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enabled = reader.readBoolean();
    this.leadingGuildId = reader.readVarInt();
    this.allianceInfo = new AllianceInformations();
    this.allianceInfo!.deserialize(reader);
  }
}

export class NumericWhoIsMessage extends DofusMessage {
  public static id: number = 7592;

  public accountId: number | undefined = 0;
  public playerId: number | undefined = 0;

  public constructor(
    accountId?: number | undefined,
    playerId?: number | undefined,
  ) {
    super();
    this.accountId = accountId;
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.accountId!);
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accountId = reader.readInt();
    this.playerId = reader.readVarLong();
  }
}

export class ExchangeBidSearchOkMessage extends DofusMessage {
  public static id: number = 2955;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PaddockToSellListMessage extends DofusMessage {
  public static id: number = 3451;

  public totalPage: number | undefined = 0;
  public paddockList: PaddockInformationsForSell[] | undefined;
  public pageIndex: number | undefined = 0;

  public constructor(
    totalPage?: number | undefined,
    paddockList?: PaddockInformationsForSell[] | undefined,
    pageIndex?: number | undefined,
  ) {
    super();
    this.totalPage = totalPage;
    this.paddockList = paddockList;
    this.pageIndex = pageIndex;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.totalPage!);
    writer.writeShort(this.paddockList!.length);
    this.paddockList!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.pageIndex!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.totalPage = reader.readVarShort();
    this.paddockList = [];
    const countPaddockList = reader.readShort();
    for (let i: number = 0; i < countPaddockList; i++) {
      const type: PaddockInformationsForSell = new PaddockInformationsForSell();
      type.deserialize(reader);
      this.paddockList.push(type);
    }
    this.pageIndex = reader.readVarShort();
  }
}

export class HavenBagDailyLoteryMessage extends DofusMessage {
  public static id: number = 2198;

  public gameActionId: string | undefined;
  public returnType: number | undefined = 0;

  public constructor(
    gameActionId?: string | undefined,
    returnType?: number | undefined,
  ) {
    super();
    this.gameActionId = gameActionId;
    this.returnType = returnType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.gameActionId!);
    writer.writeByte(this.returnType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.gameActionId = reader.readUTF();
    this.returnType = reader.readByte();
  }
}

export class GuildRecruitmentInvalidateMessage extends DofusMessage {
  public static id: number = 5759;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PurchasableDialogMessage extends DofusMessage {
  public static id: number = 582;

  public price: number | undefined = 0;
  public purchasableId: number | undefined = 0;
  public purchasableInstanceId: number | undefined = 0;
  public buyOrSell: boolean | undefined = false;
  public secondHand: boolean | undefined = false;

  public constructor(
    price?: number | undefined,
    purchasableId?: number | undefined,
    purchasableInstanceId?: number | undefined,
    buyOrSell?: boolean | undefined,
    secondHand?: boolean | undefined,
  ) {
    super();
    this.price = price;
    this.purchasableId = purchasableId;
    this.purchasableInstanceId = purchasableInstanceId;
    this.buyOrSell = buyOrSell;
    this.secondHand = secondHand;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.price!);
    writer.writeDouble(this.purchasableId!);
    writer.writeInt(this.purchasableInstanceId!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.buyOrSell!);
    box0 = setFlag(box0, 1, this.secondHand!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.price = reader.readVarLong();
    this.purchasableId = reader.readDouble();
    this.purchasableInstanceId = reader.readInt();
    const box0 = reader.readByte();
    this.buyOrSell = getFlag(box0, 0);
    this.secondHand = getFlag(box0, 1);
  }
}

export class AlignmentWarEffortDonationResultMessage extends DofusMessage {
  public static id: number = 6010;

  public result: number | undefined = 4;

  public constructor(result?: number | undefined) {
    super();
    this.result = result;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.result!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.result = reader.readByte();
  }
}

export class AllianceMotdMessage extends SocialNoticeMessage {
  public static id = 4427;

  public constructor(
    memberName?: string | undefined,
    memberId?: number | undefined,
    timestamp?: number | undefined,
    content?: string | undefined,
  ) {
    super(memberName, memberId, timestamp, content);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GameRolePlayArenaLeagueRewardsMessage extends DofusMessage {
  public static id: number = 2090;

  public endSeasonReward: boolean | undefined = false;
  public leagueId: number | undefined = 0;
  public ladderPosition: number | undefined = 0;
  public seasonId: number | undefined = 0;

  public constructor(
    endSeasonReward?: boolean | undefined,
    leagueId?: number | undefined,
    ladderPosition?: number | undefined,
    seasonId?: number | undefined,
  ) {
    super();
    this.endSeasonReward = endSeasonReward;
    this.leagueId = leagueId;
    this.ladderPosition = ladderPosition;
    this.seasonId = seasonId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.endSeasonReward!);
    writer.writeVarShort(this.leagueId!);
    writer.writeInt(this.ladderPosition!);
    writer.writeVarShort(this.seasonId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.endSeasonReward = reader.readBoolean();
    this.leagueId = reader.readVarShort();
    this.ladderPosition = reader.readInt();
    this.seasonId = reader.readVarShort();
  }
}

export class GameRolePlayShowActorWithEventMessage extends GameRolePlayShowActorMessage {
  public static id = 2684;

  public actorEventId: number | undefined = 0;

  public constructor(
    informations?: GameRolePlayActorInformations | undefined,
    actorEventId?: number | undefined,
  ) {
    super(informations);
    this.actorEventId = actorEventId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.actorEventId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.actorEventId = reader.readByte();
  }
}

export class HaapiAuthErrorMessage extends DofusMessage {
  public static id: number = 5003;

  public type: number | undefined = 0;

  public constructor(type?: number | undefined) {
    super();
    this.type = type;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.type!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.type = reader.readByte();
  }
}

export class PartyDeletedMessage extends AbstractPartyMessage {
  public static id = 1436;

  public constructor(partyId?: number | undefined) {
    super(partyId);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GuildFactsMessage extends DofusMessage {
  public static id: number = 2464;

  public infos: GuildFactSheetInformations | undefined;
  public nbTaxCollectors: number | undefined = 0;
  public creationDate: number | undefined = 0;
  public members: CharacterMinimalGuildPublicInformations[] | undefined;

  public constructor(
    infos?: GuildFactSheetInformations | undefined,
    nbTaxCollectors?: number | undefined,
    creationDate?: number | undefined,
    members?: CharacterMinimalGuildPublicInformations[] | undefined,
  ) {
    super();
    this.infos = infos;
    this.nbTaxCollectors = nbTaxCollectors;
    this.creationDate = creationDate;
    this.members = members;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.infos!.id);
    this.infos!.serialize(writer);
    writer.writeVarShort(this.nbTaxCollectors!);
    writer.writeInt(this.creationDate!);
    writer.writeShort(this.members!.length);
    this.members!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    const infosTypeId: number = reader.readShort();
    this.infos = new types[infosTypeId]() as GuildFactSheetInformations;
    this.infos!.deserialize(reader);
    this.nbTaxCollectors = reader.readVarShort();
    this.creationDate = reader.readInt();
    this.members = [];
    const countMembers = reader.readShort();
    for (let i: number = 0; i < countMembers; i++) {
      const type: CharacterMinimalGuildPublicInformations =
        new CharacterMinimalGuildPublicInformations();
      type.deserialize(reader);
      this.members.push(type);
    }
  }
}

export class GuildInAllianceFactsMessage extends GuildFactsMessage {
  public static id = 6925;

  public allianceInfos: BasicNamedAllianceInformations | undefined;

  public constructor(
    infos?: GuildFactSheetInformations | undefined,
    nbTaxCollectors?: number | undefined,
    creationDate?: number | undefined,
    members?: CharacterMinimalGuildPublicInformations[] | undefined,
    allianceInfos?: BasicNamedAllianceInformations | undefined,
  ) {
    super(infos, nbTaxCollectors, creationDate, members);
    this.allianceInfos = allianceInfos;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.allianceInfos!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceInfos = new BasicNamedAllianceInformations();
    this.allianceInfos!.deserialize(reader);
  }
}

export class HouseBuyResultMessage extends DofusMessage {
  public static id: number = 9533;

  public houseId: number | undefined = 0;
  public realPrice: number | undefined = 0;
  public instanceId: number | undefined = 0;
  public secondHand: boolean | undefined = false;
  public bought: boolean | undefined = false;

  public constructor(
    houseId?: number | undefined,
    realPrice?: number | undefined,
    instanceId?: number | undefined,
    secondHand?: boolean | undefined,
    bought?: boolean | undefined,
  ) {
    super();
    this.houseId = houseId;
    this.realPrice = realPrice;
    this.instanceId = instanceId;
    this.secondHand = secondHand;
    this.bought = bought;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.houseId!);
    writer.writeVarLong(this.realPrice!);
    writer.writeInt(this.instanceId!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.secondHand!);
    box0 = setFlag(box0, 1, this.bought!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.houseId = reader.readVarInt();
    this.realPrice = reader.readVarLong();
    this.instanceId = reader.readInt();
    const box0 = reader.readByte();
    this.secondHand = getFlag(box0, 0);
    this.bought = getFlag(box0, 1);
  }
}

export class SystemMessageDisplayMessage extends DofusMessage {
  public static id: number = 4698;

  public parameters: string[] | undefined;
  public msgId: number | undefined = 0;
  public hangUp: boolean | undefined = false;

  public constructor(
    parameters?: string[] | undefined,
    msgId?: number | undefined,
    hangUp?: boolean | undefined,
  ) {
    super();
    this.parameters = parameters;
    this.msgId = msgId;
    this.hangUp = hangUp;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.parameters!.length);
    this.parameters!.forEach((current: string) => writer.writeUTF(current));
    writer.writeVarShort(this.msgId!);
    writer.writeBoolean(this.hangUp!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.parameters = [];
    const countParameters = reader.readShort();
    for (let i: number = 0; i < countParameters; i++) {
      this.parameters.push(reader.readUTF());
    }
    this.msgId = reader.readVarShort();
    this.hangUp = reader.readBoolean();
  }
}

export class GameMapSpeedMovementMessage extends DofusMessage {
  public static id: number = 8414;

  public speedMultiplier: number | undefined = 0;

  public constructor(speedMultiplier?: number | undefined) {
    super();
    this.speedMultiplier = speedMultiplier;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.speedMultiplier!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.speedMultiplier = reader.readInt();
  }
}

export class ExchangeBidHouseInListUpdatedMessage extends ExchangeBidHouseInListAddedMessage {
  public static id = 5031;

  public constructor(
    prices?: number[] | undefined,
    objectGID?: number | undefined,
    objectType?: number | undefined,
    itemUID?: number | undefined,
    effects?: ObjectEffect[] | undefined,
  ) {
    super(prices, objectGID, objectType, itemUID, effects);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class AllianceModificationStartedMessage extends DofusMessage {
  public static id: number = 6240;

  public canChangeName: boolean | undefined = false;
  public canChangeTag: boolean | undefined = false;
  public canChangeEmblem: boolean | undefined = false;

  public constructor(
    canChangeName?: boolean | undefined,
    canChangeTag?: boolean | undefined,
    canChangeEmblem?: boolean | undefined,
  ) {
    super();
    this.canChangeName = canChangeName;
    this.canChangeTag = canChangeTag;
    this.canChangeEmblem = canChangeEmblem;
  }

  public serialize(writer: BinaryDataWriter): void {
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.canChangeName!);
    box0 = setFlag(box0, 1, this.canChangeTag!);
    box0 = setFlag(box0, 2, this.canChangeEmblem!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    const box0 = reader.readByte();
    this.canChangeName = getFlag(box0, 0);
    this.canChangeTag = getFlag(box0, 1);
    this.canChangeEmblem = getFlag(box0, 2);
  }
}

export class GameRolePlayArenaRegistrationWarningMessage extends DofusMessage {
  public static id: number = 1528;

  public battleMode: number | undefined = 3;

  public constructor(battleMode?: number | undefined) {
    super();
    this.battleMode = battleMode;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.battleMode!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.battleMode = reader.readInt();
  }
}

export class ExchangeMountsTakenFromPaddockMessage extends DofusMessage {
  public static id: number = 2526;

  public worldY: number | undefined = 0;
  public ownername: string | undefined;
  public worldX: number | undefined = 0;
  public name: string | undefined;

  public constructor(
    worldY?: number | undefined,
    ownername?: string | undefined,
    worldX?: number | undefined,
    name?: string | undefined,
  ) {
    super();
    this.worldY = worldY;
    this.ownername = ownername;
    this.worldX = worldX;
    this.name = name;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.worldY!);
    writer.writeUTF(this.ownername!);
    writer.writeShort(this.worldX!);
    writer.writeUTF(this.name!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.worldY = reader.readShort();
    this.ownername = reader.readUTF();
    this.worldX = reader.readShort();
    this.name = reader.readUTF();
  }
}

export class RecycleResultMessage extends DofusMessage {
  public static id: number = 2853;

  public nuggetsForPlayer: number | undefined = 0;
  public nuggetsForPrism: number | undefined = 0;

  public constructor(
    nuggetsForPlayer?: number | undefined,
    nuggetsForPrism?: number | undefined,
  ) {
    super();
    this.nuggetsForPlayer = nuggetsForPlayer;
    this.nuggetsForPrism = nuggetsForPrism;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.nuggetsForPlayer!);
    writer.writeVarInt(this.nuggetsForPrism!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.nuggetsForPlayer = reader.readVarInt();
    this.nuggetsForPrism = reader.readVarInt();
  }
}

export class HaapiTokenMessage extends DofusMessage {
  public static id: number = 8938;

  public token: string | undefined;

  public constructor(token?: string | undefined) {
    super();
    this.token = token;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.token!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.token = reader.readUTF();
  }
}

export class CurrentServerStatusUpdateMessage extends DofusMessage {
  public static id: number = 547;

  public status: number | undefined = 1;

  public constructor(status?: number | undefined) {
    super();
    this.status = status;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.status!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.status = reader.readByte();
  }
}

export class PartyCannotJoinErrorMessage extends AbstractPartyMessage {
  public static id = 8807;

  public reason: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    reason?: number | undefined,
  ) {
    super(partyId);
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class AllianceGuildLeavingMessage extends DofusMessage {
  public static id: number = 129;

  public guildId: number | undefined = 0;
  public kicked: boolean | undefined = false;

  public constructor(
    guildId?: number | undefined,
    kicked?: boolean | undefined,
  ) {
    super();
    this.guildId = guildId;
    this.kicked = kicked;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.guildId!);
    writer.writeBoolean(this.kicked!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildId = reader.readVarInt();
    this.kicked = reader.readBoolean();
  }
}

export class GuildInvitationStateRecruterMessage extends DofusMessage {
  public static id: number = 5086;

  public invitationState: number | undefined = 0;
  public recrutedName: string | undefined;

  public constructor(
    invitationState?: number | undefined,
    recrutedName?: string | undefined,
  ) {
    super();
    this.invitationState = invitationState;
    this.recrutedName = recrutedName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.invitationState!);
    writer.writeUTF(this.recrutedName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.invitationState = reader.readByte();
    this.recrutedName = reader.readUTF();
  }
}

export class IgnoredListMessage extends DofusMessage {
  public static id: number = 1938;

  public ignoredList: IgnoredInformations[] | undefined;

  public constructor(ignoredList?: IgnoredInformations[] | undefined) {
    super();
    this.ignoredList = ignoredList;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.ignoredList!.length);
    this.ignoredList!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ignoredList = [];
    const countIgnoredList = reader.readShort();
    for (let i: number = 0; i < countIgnoredList; i++) {
      const ignoredListTypeId: number = reader.readShort();
      const type: IgnoredInformations = new types[
        ignoredListTypeId
      ]() as IgnoredInformations;
      type.deserialize(reader);
      this.ignoredList.push(type);
    }
  }
}

export class IgnoredAddedMessage extends DofusMessage {
  public static id: number = 6480;

  public session: boolean | undefined = false;
  public ignoreAdded: IgnoredInformations | undefined;

  public constructor(
    session?: boolean | undefined,
    ignoreAdded?: IgnoredInformations | undefined,
  ) {
    super();
    this.session = session;
    this.ignoreAdded = ignoreAdded;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.session!);
    writer.writeShort(this.ignoreAdded!.id);
    this.ignoreAdded!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.session = reader.readBoolean();
    const ignoreAddedTypeId: number = reader.readShort();
    this.ignoreAdded = new types[ignoreAddedTypeId]() as IgnoredInformations;
    this.ignoreAdded!.deserialize(reader);
  }
}

export class EntityInformationMessage extends DofusMessage {
  public static id: number = 7474;

  public entity: EntityInformation | undefined;

  public constructor(entity?: EntityInformation | undefined) {
    super();
    this.entity = entity;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.entity!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.entity = new EntityInformation();
    this.entity!.deserialize(reader);
  }
}

export class AchievementListMessage extends DofusMessage {
  public static id: number = 4607;

  public finishedAchievements: AchievementAchieved[] | undefined;

  public constructor(finishedAchievements?: AchievementAchieved[] | undefined) {
    super();
    this.finishedAchievements = finishedAchievements;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.finishedAchievements!.length);
    this.finishedAchievements!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.finishedAchievements = [];
    const countFinishedAchievements = reader.readShort();
    for (let i: number = 0; i < countFinishedAchievements; i++) {
      const finishedAchievementsTypeId: number = reader.readShort();
      const type: AchievementAchieved = new types[
        finishedAchievementsTypeId
      ]() as AchievementAchieved;
      type.deserialize(reader);
      this.finishedAchievements.push(type);
    }
  }
}

export class AlignmentWarEffortProgressionMessage extends DofusMessage {
  public static id: number = 2084;

  public effortProgressions: AlignmentWarEffortInformation[] | undefined;

  public constructor(
    effortProgressions?: AlignmentWarEffortInformation[] | undefined,
  ) {
    super();
    this.effortProgressions = effortProgressions;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.effortProgressions!.length);
    this.effortProgressions!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.effortProgressions = [];
    const countEffortProgressions = reader.readShort();
    for (let i: number = 0; i < countEffortProgressions; i++) {
      const type: AlignmentWarEffortInformation =
        new AlignmentWarEffortInformation();
      type.deserialize(reader);
      this.effortProgressions.push(type);
    }
  }
}

export class GuildHouseUpdateInformationMessage extends DofusMessage {
  public static id: number = 6703;

  public housesInformations: HouseInformationsForGuild | undefined;

  public constructor(
    housesInformations?: HouseInformationsForGuild | undefined,
  ) {
    super();
    this.housesInformations = housesInformations;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.housesInformations!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.housesInformations = new HouseInformationsForGuild();
    this.housesInformations!.deserialize(reader);
  }
}

export class MountDataMessage extends DofusMessage {
  public static id: number = 5244;

  public mountData: MountClientData | undefined;

  public constructor(mountData?: MountClientData | undefined) {
    super();
    this.mountData = mountData;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.mountData!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mountData = new MountClientData();
    this.mountData!.deserialize(reader);
  }
}

export class NpcDialogCreationMessage extends DofusMessage {
  public static id: number = 5848;

  public npcId: number | undefined = 0;
  public mapId: number | undefined = 0;

  public constructor(npcId?: number | undefined, mapId?: number | undefined) {
    super();
    this.npcId = npcId;
    this.mapId = mapId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.npcId!);
    writer.writeDouble(this.mapId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.npcId = reader.readInt();
    this.mapId = reader.readDouble();
  }
}

export class PortalDialogCreationMessage extends NpcDialogCreationMessage {
  public static id = 2919;

  public type: number | undefined = 0;

  public constructor(
    npcId?: number | undefined,
    mapId?: number | undefined,
    type?: number | undefined,
  ) {
    super(npcId, mapId);
    this.type = type;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.type!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.type = reader.readInt();
  }
}

export class PrismSetSabotagedRefusedMessage extends DofusMessage {
  public static id: number = 5200;

  public reason: number | undefined = 0;
  public subAreaId: number | undefined = 0;

  public constructor(
    reason?: number | undefined,
    subAreaId?: number | undefined,
  ) {
    super();
    this.reason = reason;
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
    this.subAreaId = reader.readVarShort();
  }
}

export class MountSetMessage extends DofusMessage {
  public static id: number = 5922;

  public mountData: MountClientData | undefined;

  public constructor(mountData?: MountClientData | undefined) {
    super();
    this.mountData = mountData;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.mountData!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mountData = new MountClientData();
    this.mountData!.deserialize(reader);
  }
}

export class PartyInvitationCancelledForGuestMessage extends AbstractPartyMessage {
  public static id = 1943;

  public cancelerId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    cancelerId?: number | undefined,
  ) {
    super(partyId);
    this.cancelerId = cancelerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.cancelerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cancelerId = reader.readVarLong();
  }
}

export class ExchangeCraftCountModifiedMessage extends DofusMessage {
  public static id: number = 2567;

  public count: number | undefined = 0;

  public constructor(count?: number | undefined) {
    super();
    this.count = count;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.count!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.count = reader.readVarInt();
  }
}

export class ExchangeSellOkMessage extends DofusMessage {
  public static id: number = 968;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GuildCreationStartedMessage extends DofusMessage {
  public static id: number = 2607;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class MimicryObjectPreviewMessage extends DofusMessage {
  public static id: number = 1198;

  public result: ObjectItem | undefined;

  public constructor(result?: ObjectItem | undefined) {
    super();
    this.result = result;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.result!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.result = new ObjectItem();
    this.result!.deserialize(reader);
  }
}

export class NotificationListMessage extends DofusMessage {
  public static id: number = 7026;

  public flags: number[] | undefined;

  public constructor(flags?: number[] | undefined) {
    super();
    this.flags = flags;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.flags!.length);
    this.flags!.forEach((current: number) => writer.writeVarInt(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.flags = [];
    const countFlags = reader.readShort();
    for (let i: number = 0; i < countFlags; i++) {
      this.flags.push(reader.readVarInt());
    }
  }
}

export class StorageObjectUpdateMessage extends DofusMessage {
  public static id: number = 728;

  public object_: ObjectItem | undefined;

  public constructor(object_?: ObjectItem | undefined) {
    super();
    this.object_ = object_;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.object_!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.object_ = new ObjectItem();
    this.object_!.deserialize(reader);
  }
}

export class CharactersListErrorMessage extends DofusMessage {
  public static id: number = 6129;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class JobCrafterDirectoryListMessage extends DofusMessage {
  public static id: number = 7620;

  public listEntries: JobCrafterDirectoryListEntry[] | undefined;

  public constructor(listEntries?: JobCrafterDirectoryListEntry[] | undefined) {
    super();
    this.listEntries = listEntries;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.listEntries!.length);
    this.listEntries!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.listEntries = [];
    const countListEntries = reader.readShort();
    for (let i: number = 0; i < countListEntries; i++) {
      const type: JobCrafterDirectoryListEntry =
        new JobCrafterDirectoryListEntry();
      type.deserialize(reader);
      this.listEntries.push(type);
    }
  }
}

export class EditHavenBagFinishedMessage extends DofusMessage {
  public static id: number = 2273;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class StatedElementUpdatedMessage extends DofusMessage {
  public static id: number = 3961;

  public statedElement: StatedElement | undefined;

  public constructor(statedElement?: StatedElement | undefined) {
    super();
    this.statedElement = statedElement;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.statedElement!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.statedElement = new StatedElement();
    this.statedElement!.deserialize(reader);
  }
}

export class IdolPartyRefreshMessage extends DofusMessage {
  public static id: number = 7517;

  public partyIdol: PartyIdol | undefined;

  public constructor(partyIdol?: PartyIdol | undefined) {
    super();
    this.partyIdol = partyIdol;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.partyIdol!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.partyIdol = new PartyIdol();
    this.partyIdol!.deserialize(reader);
  }
}

export class ClientYouAreDrunkMessage extends DebugInClientMessage {
  public static id = 159;

  public constructor(message?: string | undefined, level?: number | undefined) {
    super(message, level);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GameContextCreateErrorMessage extends DofusMessage {
  public static id: number = 5698;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ObjectQuantityMessage extends DofusMessage {
  public static id: number = 80;

  public origin: number | undefined = 0;
  public quantity: number | undefined = 0;
  public objectUID: number | undefined = 0;

  public constructor(
    origin?: number | undefined,
    quantity?: number | undefined,
    objectUID?: number | undefined,
  ) {
    super();
    this.origin = origin;
    this.quantity = quantity;
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.origin!);
    writer.writeVarInt(this.quantity!);
    writer.writeVarInt(this.objectUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.origin = reader.readByte();
    this.quantity = reader.readVarInt();
    this.objectUID = reader.readVarInt();
  }
}

export class CharacterLevelUpMessage extends DofusMessage {
  public static id: number = 6501;

  public newLevel: number | undefined = 0;

  public constructor(newLevel?: number | undefined) {
    super();
    this.newLevel = newLevel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.newLevel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.newLevel = reader.readVarShort();
  }
}

export class CharacterLevelUpInformationMessage extends CharacterLevelUpMessage {
  public static id = 2461;

  public id_: number | undefined = 0;
  public name: string | undefined;

  public constructor(
    newLevel?: number | undefined,
    id_?: number | undefined,
    name?: string | undefined,
  ) {
    super(newLevel);
    this.id_ = id_;
    this.name = name;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.id_!);
    writer.writeUTF(this.name!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readVarLong();
    this.name = reader.readUTF();
  }
}

export class GuildMemberWarnOnConnectionStateMessage extends DofusMessage {
  public static id: number = 2986;

  public enable: boolean | undefined = false;

  public constructor(enable?: boolean | undefined) {
    super();
    this.enable = enable;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
  }
}

export class FriendUpdateMessage extends DofusMessage {
  public static id: number = 2011;

  public friendUpdated: FriendInformations | undefined;

  public constructor(friendUpdated?: FriendInformations | undefined) {
    super();
    this.friendUpdated = friendUpdated;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.friendUpdated!.id);
    this.friendUpdated!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const friendUpdatedTypeId: number = reader.readShort();
    this.friendUpdated = new types[friendUpdatedTypeId]() as FriendInformations;
    this.friendUpdated!.deserialize(reader);
  }
}

export class HavenBagPermissionsUpdateMessage extends DofusMessage {
  public static id: number = 3186;

  public permissions: number | undefined = 0;

  public constructor(permissions?: number | undefined) {
    super();
    this.permissions = permissions;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.permissions!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.permissions = reader.readInt();
  }
}

export class AuthenticationTicketRefusedMessage extends DofusMessage {
  public static id: number = 2775;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class AchievementDetailsMessage extends DofusMessage {
  public static id: number = 5303;

  public achievement: Achievement | undefined;

  public constructor(achievement?: Achievement | undefined) {
    super();
    this.achievement = achievement;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.achievement!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.achievement = new Achievement();
    this.achievement!.deserialize(reader);
  }
}

export class TaxCollectorMovementMessage extends DofusMessage {
  public static id: number = 4589;

  public movementType: number | undefined = 0;
  public basicInfos: TaxCollectorBasicInformations | undefined;
  public playerId: number | undefined = 0;
  public playerName: string | undefined;

  public constructor(
    movementType?: number | undefined,
    basicInfos?: TaxCollectorBasicInformations | undefined,
    playerId?: number | undefined,
    playerName?: string | undefined,
  ) {
    super();
    this.movementType = movementType;
    this.basicInfos = basicInfos;
    this.playerId = playerId;
    this.playerName = playerName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.movementType!);
    this.basicInfos!.serialize(writer);
    writer.writeVarLong(this.playerId!);
    writer.writeUTF(this.playerName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.movementType = reader.readByte();
    this.basicInfos = new TaxCollectorBasicInformations();
    this.basicInfos!.deserialize(reader);
    this.playerId = reader.readVarLong();
    this.playerName = reader.readUTF();
  }
}

export class AlliancePrismDialogQuestionMessage extends DofusMessage {
  public static id: number = 738;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ExchangeStartOkMountWithOutPaddockMessage extends DofusMessage {
  public static id: number = 9985;

  public stabledMountsDescription: MountClientData[] | undefined;

  public constructor(stabledMountsDescription?: MountClientData[] | undefined) {
    super();
    this.stabledMountsDescription = stabledMountsDescription;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.stabledMountsDescription!.length);
    this.stabledMountsDescription!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.stabledMountsDescription = [];
    const countStabledMountsDescription = reader.readShort();
    for (let i: number = 0; i < countStabledMountsDescription; i++) {
      const type: MountClientData = new MountClientData();
      type.deserialize(reader);
      this.stabledMountsDescription.push(type);
    }
  }
}

export class TreasureHuntMessage extends DofusMessage {
  public static id: number = 4513;

  public availableRetryCount: number | undefined = 0;
  public checkPointTotal: number | undefined = 0;
  public checkPointCurrent: number | undefined = 0;
  public questType: number | undefined = 0;
  public flags: TreasureHuntFlag[] | undefined;
  public knownStepsList: TreasureHuntStep[] | undefined;
  public startMapId: number | undefined = 0;
  public totalStepCount: number | undefined = 0;

  public constructor(
    availableRetryCount?: number | undefined,
    checkPointTotal?: number | undefined,
    checkPointCurrent?: number | undefined,
    questType?: number | undefined,
    flags?: TreasureHuntFlag[] | undefined,
    knownStepsList?: TreasureHuntStep[] | undefined,
    startMapId?: number | undefined,
    totalStepCount?: number | undefined,
  ) {
    super();
    this.availableRetryCount = availableRetryCount;
    this.checkPointTotal = checkPointTotal;
    this.checkPointCurrent = checkPointCurrent;
    this.questType = questType;
    this.flags = flags;
    this.knownStepsList = knownStepsList;
    this.startMapId = startMapId;
    this.totalStepCount = totalStepCount;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.availableRetryCount!);
    writer.writeVarInt(this.checkPointTotal!);
    writer.writeVarInt(this.checkPointCurrent!);
    writer.writeByte(this.questType!);
    writer.writeShort(this.flags!.length);
    this.flags!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeShort(this.knownStepsList!.length);
    this.knownStepsList!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeDouble(this.startMapId!);
    writer.writeByte(this.totalStepCount!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.availableRetryCount = reader.readInt();
    this.checkPointTotal = reader.readVarInt();
    this.checkPointCurrent = reader.readVarInt();
    this.questType = reader.readByte();
    this.flags = [];
    const countFlags = reader.readShort();
    for (let i: number = 0; i < countFlags; i++) {
      const type: TreasureHuntFlag = new TreasureHuntFlag();
      type.deserialize(reader);
      this.flags.push(type);
    }
    this.knownStepsList = [];
    const countKnownStepsList = reader.readShort();
    for (let i: number = 0; i < countKnownStepsList; i++) {
      const knownStepsListTypeId: number = reader.readShort();
      const type: TreasureHuntStep = new types[
        knownStepsListTypeId
      ]() as TreasureHuntStep;
      type.deserialize(reader);
      this.knownStepsList.push(type);
    }
    this.startMapId = reader.readDouble();
    this.totalStepCount = reader.readByte();
  }
}

export class ExchangeStartedWithPodsMessage extends ExchangeStartedMessage {
  public static id = 2123;

  public secondCharacterMaxWeight: number | undefined = 0;
  public secondCharacterCurrentWeight: number | undefined = 0;
  public firstCharacterCurrentWeight: number | undefined = 0;
  public firstCharacterMaxWeight: number | undefined = 0;
  public firstCharacterId: number | undefined = 0;
  public secondCharacterId: number | undefined = 0;

  public constructor(
    exchangeType?: number | undefined,
    secondCharacterMaxWeight?: number | undefined,
    secondCharacterCurrentWeight?: number | undefined,
    firstCharacterCurrentWeight?: number | undefined,
    firstCharacterMaxWeight?: number | undefined,
    firstCharacterId?: number | undefined,
    secondCharacterId?: number | undefined,
  ) {
    super(exchangeType);
    this.secondCharacterMaxWeight = secondCharacterMaxWeight;
    this.secondCharacterCurrentWeight = secondCharacterCurrentWeight;
    this.firstCharacterCurrentWeight = firstCharacterCurrentWeight;
    this.firstCharacterMaxWeight = firstCharacterMaxWeight;
    this.firstCharacterId = firstCharacterId;
    this.secondCharacterId = secondCharacterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.secondCharacterMaxWeight!);
    writer.writeVarInt(this.secondCharacterCurrentWeight!);
    writer.writeVarInt(this.firstCharacterCurrentWeight!);
    writer.writeVarInt(this.firstCharacterMaxWeight!);
    writer.writeDouble(this.firstCharacterId!);
    writer.writeDouble(this.secondCharacterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.secondCharacterMaxWeight = reader.readVarInt();
    this.secondCharacterCurrentWeight = reader.readVarInt();
    this.firstCharacterCurrentWeight = reader.readVarInt();
    this.firstCharacterMaxWeight = reader.readVarInt();
    this.firstCharacterId = reader.readDouble();
    this.secondCharacterId = reader.readDouble();
  }
}

export class GameRolePlayArenaFightPropositionMessage extends DofusMessage {
  public static id: number = 2533;

  public alliesId: number[] | undefined;
  public duration: number | undefined = 0;
  public fightId: number | undefined = 0;

  public constructor(
    alliesId?: number[] | undefined,
    duration?: number | undefined,
    fightId?: number | undefined,
  ) {
    super();
    this.alliesId = alliesId;
    this.duration = duration;
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.alliesId!.length);
    this.alliesId!.forEach((current: number) => writer.writeDouble(current));
    writer.writeVarShort(this.duration!);
    writer.writeVarShort(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.alliesId = [];
    const countAlliesId = reader.readShort();
    for (let i: number = 0; i < countAlliesId; i++) {
      this.alliesId.push(reader.readDouble());
    }
    this.duration = reader.readVarShort();
    this.fightId = reader.readVarShort();
  }
}

export class StartupActionAddMessage extends DofusMessage {
  public static id: number = 1592;

  public newAction: StartupActionAddObject | undefined;

  public constructor(newAction?: StartupActionAddObject | undefined) {
    super();
    this.newAction = newAction;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.newAction!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.newAction = new StartupActionAddObject();
    this.newAction!.deserialize(reader);
  }
}

export class PrismFightRemovedMessage extends DofusMessage {
  public static id: number = 9563;

  public subAreaId: number | undefined = 0;

  public constructor(subAreaId?: number | undefined) {
    super();
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.subAreaId = reader.readVarShort();
  }
}

export class ItemNoMoreAvailableMessage extends DofusMessage {
  public static id: number = 3384;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ChatServerWithObjectMessage extends ChatServerMessage {
  public static id = 5967;

  public objects: ObjectItem[] | undefined;

  public constructor(
    fingerprint?: string | undefined,
    timestamp?: number | undefined,
    content?: string | undefined,
    channel?: number | undefined,
    senderAccountId?: number | undefined,
    prefix?: string | undefined,
    senderName?: string | undefined,
    senderId?: number | undefined,
    objects?: ObjectItem[] | undefined,
  ) {
    super(
      fingerprint,
      timestamp,
      content,
      channel,
      senderAccountId,
      prefix,
      senderName,
      senderId,
    );
    this.objects = objects;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objects!.length);
    this.objects!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objects = [];
    const countObjects = reader.readShort();
    for (let i: number = 0; i < countObjects; i++) {
      const type: ObjectItem = new ObjectItem();
      type.deserialize(reader);
      this.objects.push(type);
    }
  }
}

export class TaxCollectorMovementAddMessage extends DofusMessage {
  public static id: number = 6509;

  public informations: TaxCollectorInformations | undefined;

  public constructor(informations?: TaxCollectorInformations | undefined) {
    super();
    this.informations = informations;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.informations!.id);
    this.informations!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const informationsTypeId: number = reader.readShort();
    this.informations = new types[
      informationsTypeId
    ]() as TaxCollectorInformations;
    this.informations!.deserialize(reader);
  }
}

export class EvolutiveObjectRecycleResultMessage extends DofusMessage {
  public static id: number = 8805;

  public recycledItems: RecycledItem[] | undefined;

  public constructor(recycledItems?: RecycledItem[] | undefined) {
    super();
    this.recycledItems = recycledItems;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.recycledItems!.length);
    this.recycledItems!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.recycledItems = [];
    const countRecycledItems = reader.readShort();
    for (let i: number = 0; i < countRecycledItems; i++) {
      const type: RecycledItem = new RecycledItem();
      type.deserialize(reader);
      this.recycledItems.push(type);
    }
  }
}

export class MoodSmileyResultMessage extends DofusMessage {
  public static id: number = 6000;

  public smileyId: number | undefined = 0;
  public resultCode: number | undefined = 1;

  public constructor(
    smileyId?: number | undefined,
    resultCode?: number | undefined,
  ) {
    super();
    this.smileyId = smileyId;
    this.resultCode = resultCode;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.smileyId!);
    writer.writeByte(this.resultCode!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.smileyId = reader.readVarShort();
    this.resultCode = reader.readByte();
  }
}

export class HaapiSessionMessage extends DofusMessage {
  public static id: number = 5486;

  public type: number | undefined = 0;
  public key: string | undefined;

  public constructor(type?: number | undefined, key?: string | undefined) {
    super();
    this.type = type;
    this.key = key;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.type!);
    writer.writeUTF(this.key!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.type = reader.readByte();
    this.key = reader.readUTF();
  }
}

export class ExchangeStartOkMountMessage extends ExchangeStartOkMountWithOutPaddockMessage {
  public static id = 9690;

  public paddockedMountsDescription: MountClientData[] | undefined;

  public constructor(
    stabledMountsDescription?: MountClientData[] | undefined,
    paddockedMountsDescription?: MountClientData[] | undefined,
  ) {
    super(stabledMountsDescription);
    this.paddockedMountsDescription = paddockedMountsDescription;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.paddockedMountsDescription!.length);
    this.paddockedMountsDescription!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.paddockedMountsDescription = [];
    const countPaddockedMountsDescription = reader.readShort();
    for (let i: number = 0; i < countPaddockedMountsDescription; i++) {
      const type: MountClientData = new MountClientData();
      type.deserialize(reader);
      this.paddockedMountsDescription.push(type);
    }
  }
}

export class DocumentReadingBeginMessage extends DofusMessage {
  public static id: number = 3768;

  public documentId: number | undefined = 0;

  public constructor(documentId?: number | undefined) {
    super();
    this.documentId = documentId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.documentId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.documentId = reader.readVarShort();
  }
}

export class ServerExperienceModificatorMessage extends DofusMessage {
  public static id: number = 7180;

  public experiencePercent: number | undefined = 0;

  public constructor(experiencePercent?: number | undefined) {
    super();
    this.experiencePercent = experiencePercent;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.experiencePercent!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.experiencePercent = reader.readVarShort();
  }
}

export class ExchangeKamaModifiedMessage extends ExchangeObjectMessage {
  public static id = 1705;

  public quantity: number | undefined = 0;

  public constructor(
    remote?: boolean | undefined,
    quantity?: number | undefined,
  ) {
    super(remote);
    this.quantity = quantity;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.quantity!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarLong();
  }
}

export class IdentificationSuccessWithLoginTokenMessage extends IdentificationSuccessMessage {
  public static id = 2204;

  public loginToken: string | undefined;

  public constructor(
    havenbagAvailableRoom?: number | undefined,
    subscriptionElapsedDuration?: number | undefined,
    communityId?: number | undefined,
    accountTag?: AccountTagInformation | undefined,
    accountId?: number | undefined,
    login?: string | undefined,
    secretQuestion?: string | undefined,
    subscriptionEndDate?: number | undefined,
    accountCreation?: number | undefined,
    hasRights?: boolean | undefined,
    hasConsoleRight?: boolean | undefined,
    wasAlreadyConnected?: boolean | undefined,
    loginToken?: string | undefined,
  ) {
    super(
      havenbagAvailableRoom,
      subscriptionElapsedDuration,
      communityId,
      accountTag,
      accountId,
      login,
      secretQuestion,
      subscriptionEndDate,
      accountCreation,
      hasRights,
      hasConsoleRight,
      wasAlreadyConnected,
    );
    this.loginToken = loginToken;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.loginToken!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.loginToken = reader.readUTF();
  }
}

export class GameRolePlayDelayedObjectUseMessage extends GameRolePlayDelayedActionMessage {
  public static id = 1157;

  public objectGID: number | undefined = 0;

  public constructor(
    delayTypeId?: number | undefined,
    delayEndTime?: number | undefined,
    delayedCharacterId?: number | undefined,
    objectGID?: number | undefined,
  ) {
    super(delayTypeId, delayEndTime, delayedCharacterId);
    this.objectGID = objectGID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.objectGID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectGID = reader.readVarShort();
  }
}

export class CharacterCapabilitiesMessage extends DofusMessage {
  public static id: number = 344;

  public guildEmblemSymbolCategories: number | undefined = 0;

  public constructor(guildEmblemSymbolCategories?: number | undefined) {
    super();
    this.guildEmblemSymbolCategories = guildEmblemSymbolCategories;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.guildEmblemSymbolCategories!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildEmblemSymbolCategories = reader.readVarInt();
  }
}

export class PaddockBuyResultMessage extends DofusMessage {
  public static id: number = 6835;

  public realPrice: number | undefined = 0;
  public bought: boolean | undefined = false;
  public paddockId: number | undefined = 0;

  public constructor(
    realPrice?: number | undefined,
    bought?: boolean | undefined,
    paddockId?: number | undefined,
  ) {
    super();
    this.realPrice = realPrice;
    this.bought = bought;
    this.paddockId = paddockId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.realPrice!);
    writer.writeBoolean(this.bought!);
    writer.writeDouble(this.paddockId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.realPrice = reader.readVarLong();
    this.bought = reader.readBoolean();
    this.paddockId = reader.readDouble();
  }
}

export class AllianceCreationResultMessage extends DofusMessage {
  public static id: number = 4954;

  public result: number | undefined = 0;

  public constructor(result?: number | undefined) {
    super();
    this.result = result;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.result!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.result = reader.readByte();
  }
}

export class PartyMemberInBreachFightMessage extends AbstractPartyMemberInFightMessage {
  public static id = 9876;

  public room: number | undefined = 0;
  public floor: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    timeBeforeFightStart?: number | undefined,
    reason?: number | undefined,
    memberAccountId?: number | undefined,
    fightId?: number | undefined,
    memberId?: number | undefined,
    memberName?: string | undefined,
    room?: number | undefined,
    floor?: number | undefined,
  ) {
    super(
      partyId,
      timeBeforeFightStart,
      reason,
      memberAccountId,
      fightId,
      memberId,
      memberName,
    );
    this.room = room;
    this.floor = floor;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.room!);
    writer.writeVarInt(this.floor!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.room = reader.readByte();
    this.floor = reader.readVarInt();
  }
}

export class PartyNameUpdateMessage extends AbstractPartyMessage {
  public static id = 4910;

  public partyName: string | undefined;

  public constructor(
    partyId?: number | undefined,
    partyName?: string | undefined,
  ) {
    super(partyId);
    this.partyName = partyName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.partyName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.partyName = reader.readUTF();
  }
}

export class StartupActionFinishedMessage extends DofusMessage {
  public static id: number = 6394;

  public actionId: number | undefined = 0;
  public success: boolean | undefined = false;
  public automaticAction: boolean | undefined = false;

  public constructor(
    actionId?: number | undefined,
    success?: boolean | undefined,
    automaticAction?: boolean | undefined,
  ) {
    super();
    this.actionId = actionId;
    this.success = success;
    this.automaticAction = automaticAction;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.actionId!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.success!);
    box0 = setFlag(box0, 1, this.automaticAction!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.actionId = reader.readInt();
    const box0 = reader.readByte();
    this.success = getFlag(box0, 0);
    this.automaticAction = getFlag(box0, 1);
  }
}

export class ExchangeStartOkNpcTradeMessage extends DofusMessage {
  public static id: number = 4055;

  public npcId: number | undefined = 0;

  public constructor(npcId?: number | undefined) {
    super();
    this.npcId = npcId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.npcId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.npcId = reader.readDouble();
  }
}

export class ChatErrorMessage extends DofusMessage {
  public static id: number = 5479;

  public reason: number | undefined = 0;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class HouseGuildRightsMessage extends DofusMessage {
  public static id: number = 5258;

  public houseId: number | undefined = 0;
  public secondHand: boolean | undefined = false;
  public rights: number | undefined = 0;
  public instanceId: number | undefined = 0;
  public guildInfo: GuildInformations | undefined;

  public constructor(
    houseId?: number | undefined,
    secondHand?: boolean | undefined,
    rights?: number | undefined,
    instanceId?: number | undefined,
    guildInfo?: GuildInformations | undefined,
  ) {
    super();
    this.houseId = houseId;
    this.secondHand = secondHand;
    this.rights = rights;
    this.instanceId = instanceId;
    this.guildInfo = guildInfo;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.houseId!);
    writer.writeBoolean(this.secondHand!);
    writer.writeVarInt(this.rights!);
    writer.writeInt(this.instanceId!);
    this.guildInfo!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.houseId = reader.readVarInt();
    this.secondHand = reader.readBoolean();
    this.rights = reader.readVarInt();
    this.instanceId = reader.readInt();
    this.guildInfo = new GuildInformations();
    this.guildInfo!.deserialize(reader);
  }
}

export class DungeonKeyRingUpdateMessage extends DofusMessage {
  public static id: number = 2874;

  public available: boolean | undefined = false;
  public dungeonId: number | undefined = 0;

  public constructor(
    available?: boolean | undefined,
    dungeonId?: number | undefined,
  ) {
    super();
    this.available = available;
    this.dungeonId = dungeonId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.available!);
    writer.writeVarShort(this.dungeonId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.available = reader.readBoolean();
    this.dungeonId = reader.readVarShort();
  }
}

export class PrismFightAttackerRemoveMessage extends DofusMessage {
  public static id: number = 300;

  public fighterToRemoveId: number | undefined = 0;
  public fightId: number | undefined = 0;
  public subAreaId: number | undefined = 0;

  public constructor(
    fighterToRemoveId?: number | undefined,
    fightId?: number | undefined,
    subAreaId?: number | undefined,
  ) {
    super();
    this.fighterToRemoveId = fighterToRemoveId;
    this.fightId = fightId;
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.fighterToRemoveId!);
    writer.writeVarShort(this.fightId!);
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fighterToRemoveId = reader.readVarLong();
    this.fightId = reader.readVarShort();
    this.subAreaId = reader.readVarShort();
  }
}

export class AllianceLeftMessage extends DofusMessage {
  public static id: number = 1278;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class AllianceInvitationStateRecrutedMessage extends DofusMessage {
  public static id: number = 7918;

  public invitationState: number | undefined = 0;

  public constructor(invitationState?: number | undefined) {
    super();
    this.invitationState = invitationState;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.invitationState!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.invitationState = reader.readByte();
  }
}

export class ExchangeStartOkCraftWithInformationMessage extends ExchangeStartOkCraftMessage {
  public static id = 9154;

  public skillId: number | undefined = 0;

  public constructor(skillId?: number | undefined) {
    super();
    this.skillId = skillId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.skillId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.skillId = reader.readVarInt();
  }
}

export class MountUnSetMessage extends DofusMessage {
  public static id: number = 5361;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class MountXpRatioMessage extends DofusMessage {
  public static id: number = 1527;

  public ratio: number | undefined = 0;

  public constructor(ratio?: number | undefined) {
    super();
    this.ratio = ratio;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.ratio!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ratio = reader.readByte();
  }
}

export class JobExperienceMultiUpdateMessage extends DofusMessage {
  public static id: number = 4771;

  public experiencesUpdate: JobExperience[] | undefined;

  public constructor(experiencesUpdate?: JobExperience[] | undefined) {
    super();
    this.experiencesUpdate = experiencesUpdate;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.experiencesUpdate!.length);
    this.experiencesUpdate!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.experiencesUpdate = [];
    const countExperiencesUpdate = reader.readShort();
    for (let i: number = 0; i < countExperiencesUpdate; i++) {
      const type: JobExperience = new JobExperience();
      type.deserialize(reader);
      this.experiencesUpdate.push(type);
    }
  }
}

export class AlmanachCalendarDateMessage extends DofusMessage {
  public static id: number = 2577;

  public date: number | undefined = 0;

  public constructor(date?: number | undefined) {
    super();
    this.date = date;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.date!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.date = reader.readInt();
  }
}

export class ContactLookErrorMessage extends DofusMessage {
  public static id: number = 9873;

  public requestId: number | undefined = 0;

  public constructor(requestId?: number | undefined) {
    super();
    this.requestId = requestId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.requestId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.requestId = reader.readVarInt();
  }
}

export class ObjectModifiedMessage extends DofusMessage {
  public static id: number = 2793;

  public object_: ObjectItem | undefined;

  public constructor(object_?: ObjectItem | undefined) {
    super();
    this.object_ = object_;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.object_!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.object_ = new ObjectItem();
    this.object_!.deserialize(reader);
  }
}

export class ExchangeWeightMessage extends DofusMessage {
  public static id: number = 5653;

  public maxWeight: number | undefined = 0;
  public currentWeight: number | undefined = 0;

  public constructor(
    maxWeight?: number | undefined,
    currentWeight?: number | undefined,
  ) {
    super();
    this.maxWeight = maxWeight;
    this.currentWeight = currentWeight;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.maxWeight!);
    writer.writeVarInt(this.currentWeight!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.maxWeight = reader.readVarInt();
    this.currentWeight = reader.readVarInt();
  }
}

export class PartyNewGuestMessage extends AbstractPartyEventMessage {
  public static id = 1263;

  public guest: PartyGuestInformations | undefined;

  public constructor(
    partyId?: number | undefined,
    guest?: PartyGuestInformations | undefined,
  ) {
    super(partyId);
    this.guest = guest;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.guest!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guest = new PartyGuestInformations();
    this.guest!.deserialize(reader);
  }
}

export class HelloConnectMessage extends DofusMessage {
  public static id: number = 6739;

  public key: number[] | undefined;
  public salt: string | undefined;

  public constructor(key?: number[] | undefined, salt?: string | undefined) {
    super();
    this.key = key;
    this.salt = salt;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.salt!);
    writer.writeVarInt(this.key!.length);
    this.key!.forEach((current: number) => writer.writeByte(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.salt = reader.readUTF();
    this.key = [];
    const countKey = reader.readVarInt();
    for (let i: number = 0; i < countKey; i++) {
      this.key.push(reader.readByte());
    }
  }
}

export class FriendStatusShareStateMessage extends DofusMessage {
  public static id: number = 433;

  public share: boolean | undefined = false;

  public constructor(share?: boolean | undefined) {
    super();
    this.share = share;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.share!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.share = reader.readBoolean();
  }
}

export class HouseGuildNoneMessage extends DofusMessage {
  public static id: number = 9562;

  public instanceId: number | undefined = 0;
  public secondHand: boolean | undefined = false;
  public houseId: number | undefined = 0;

  public constructor(
    instanceId?: number | undefined,
    secondHand?: boolean | undefined,
    houseId?: number | undefined,
  ) {
    super();
    this.instanceId = instanceId;
    this.secondHand = secondHand;
    this.houseId = houseId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.instanceId!);
    writer.writeBoolean(this.secondHand!);
    writer.writeVarInt(this.houseId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.instanceId = reader.readInt();
    this.secondHand = reader.readBoolean();
    this.houseId = reader.readVarInt();
  }
}

export class ChatServerCopyWithObjectMessage extends ChatServerCopyMessage {
  public static id = 9930;

  public objects: ObjectItem[] | undefined;

  public constructor(
    fingerprint?: string | undefined,
    timestamp?: number | undefined,
    content?: string | undefined,
    channel?: number | undefined,
    receiverName?: string | undefined,
    receiverId?: number | undefined,
    objects?: ObjectItem[] | undefined,
  ) {
    super(fingerprint, timestamp, content, channel, receiverName, receiverId);
    this.objects = objects;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objects!.length);
    this.objects!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objects = [];
    const countObjects = reader.readShort();
    for (let i: number = 0; i < countObjects; i++) {
      const type: ObjectItem = new ObjectItem();
      type.deserialize(reader);
      this.objects.push(type);
    }
  }
}

export class MountRidingMessage extends DofusMessage {
  public static id: number = 6231;

  public isRiding: boolean | undefined = false;
  public isAutopilot: boolean | undefined = false;

  public constructor(
    isRiding?: boolean | undefined,
    isAutopilot?: boolean | undefined,
  ) {
    super();
    this.isRiding = isRiding;
    this.isAutopilot = isAutopilot;
  }

  public serialize(writer: BinaryDataWriter): void {
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.isRiding!);
    box0 = setFlag(box0, 1, this.isAutopilot!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    const box0 = reader.readByte();
    this.isRiding = getFlag(box0, 0);
    this.isAutopilot = getFlag(box0, 1);
  }
}

export class ShortcutBarRemoveErrorMessage extends DofusMessage {
  public static id: number = 5661;

  public error: number | undefined = 0;

  public constructor(error?: number | undefined) {
    super();
    this.error = error;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.error!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.error = reader.readByte();
  }
}

export class ChannelEnablingChangeMessage extends DofusMessage {
  public static id: number = 4041;

  public enable: boolean | undefined = false;
  public channel: number | undefined = 0;

  public constructor(
    enable?: boolean | undefined,
    channel?: number | undefined,
  ) {
    super();
    this.enable = enable;
    this.channel = channel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
    writer.writeByte(this.channel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
    this.channel = reader.readByte();
  }
}

export class PartyNameSetErrorMessage extends AbstractPartyMessage {
  public static id = 9899;

  public result: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    result?: number | undefined,
  ) {
    super(partyId);
    this.result = result;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.result!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.result = reader.readByte();
  }
}

export class GameFightPlacementSwapPositionsOfferMessage extends DofusMessage {
  public static id: number = 519;

  public requestId: number | undefined = 0;
  public requestedCellId: number | undefined = 0;
  public requestedId: number | undefined = 0;
  public requesterId: number | undefined = 0;
  public requesterCellId: number | undefined = 0;

  public constructor(
    requestId?: number | undefined,
    requestedCellId?: number | undefined,
    requestedId?: number | undefined,
    requesterId?: number | undefined,
    requesterCellId?: number | undefined,
  ) {
    super();
    this.requestId = requestId;
    this.requestedCellId = requestedCellId;
    this.requestedId = requestedId;
    this.requesterId = requesterId;
    this.requesterCellId = requesterCellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.requestId!);
    writer.writeVarShort(this.requestedCellId!);
    writer.writeDouble(this.requestedId!);
    writer.writeDouble(this.requesterId!);
    writer.writeVarShort(this.requesterCellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.requestId = reader.readInt();
    this.requestedCellId = reader.readVarShort();
    this.requestedId = reader.readDouble();
    this.requesterId = reader.readDouble();
    this.requesterCellId = reader.readVarShort();
  }
}

export class AllianceInsiderInfoMessage extends DofusMessage {
  public static id: number = 3553;

  public allianceInfos: AllianceFactSheetInformations | undefined;
  public prisms: PrismSubareaEmptyInfo[] | undefined;
  public guilds: GuildInsiderFactSheetInformations[] | undefined;

  public constructor(
    allianceInfos?: AllianceFactSheetInformations | undefined,
    prisms?: PrismSubareaEmptyInfo[] | undefined,
    guilds?: GuildInsiderFactSheetInformations[] | undefined,
  ) {
    super();
    this.allianceInfos = allianceInfos;
    this.prisms = prisms;
    this.guilds = guilds;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.allianceInfos!.serialize(writer);
    writer.writeShort(this.prisms!.length);
    this.prisms!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.guilds!.length);
    this.guilds!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceInfos = new AllianceFactSheetInformations();
    this.allianceInfos!.deserialize(reader);
    this.prisms = [];
    const countPrisms = reader.readShort();
    for (let i: number = 0; i < countPrisms; i++) {
      const prismsTypeId: number = reader.readShort();
      const type: PrismSubareaEmptyInfo = new types[
        prismsTypeId
      ]() as PrismSubareaEmptyInfo;
      type.deserialize(reader);
      this.prisms.push(type);
    }
    this.guilds = [];
    const countGuilds = reader.readShort();
    for (let i: number = 0; i < countGuilds; i++) {
      const type: GuildInsiderFactSheetInformations =
        new GuildInsiderFactSheetInformations();
      type.deserialize(reader);
      this.guilds.push(type);
    }
  }
}

export class HouseToSellListMessage extends DofusMessage {
  public static id: number = 4515;

  public houseList: HouseInformationsForSell[] | undefined;
  public totalPage: number | undefined = 0;
  public pageIndex: number | undefined = 0;

  public constructor(
    houseList?: HouseInformationsForSell[] | undefined,
    totalPage?: number | undefined,
    pageIndex?: number | undefined,
  ) {
    super();
    this.houseList = houseList;
    this.totalPage = totalPage;
    this.pageIndex = pageIndex;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.houseList!.length);
    this.houseList!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarShort(this.totalPage!);
    writer.writeVarShort(this.pageIndex!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.houseList = [];
    const countHouseList = reader.readShort();
    for (let i: number = 0; i < countHouseList; i++) {
      const type: HouseInformationsForSell = new HouseInformationsForSell();
      type.deserialize(reader);
      this.houseList.push(type);
    }
    this.totalPage = reader.readVarShort();
    this.pageIndex = reader.readVarShort();
  }
}

export class BreachRewardBoughtMessage extends DofusMessage {
  public static id: number = 3950;

  public bought: boolean | undefined = false;
  public id_: number | undefined = 0;

  public constructor(bought?: boolean | undefined, id_?: number | undefined) {
    super();
    this.bought = bought;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.bought!);
    writer.writeVarInt(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.bought = reader.readBoolean();
    this.id_ = reader.readVarInt();
  }
}

export class ExchangeMountFreeFromPaddockMessage extends DofusMessage {
  public static id: number = 4810;

  public liberator: string | undefined;
  public worldY: number | undefined = 0;
  public worldX: number | undefined = 0;
  public name: string | undefined;

  public constructor(
    liberator?: string | undefined,
    worldY?: number | undefined,
    worldX?: number | undefined,
    name?: string | undefined,
  ) {
    super();
    this.liberator = liberator;
    this.worldY = worldY;
    this.worldX = worldX;
    this.name = name;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.liberator!);
    writer.writeShort(this.worldY!);
    writer.writeShort(this.worldX!);
    writer.writeUTF(this.name!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.liberator = reader.readUTF();
    this.worldY = reader.readShort();
    this.worldX = reader.readShort();
    this.name = reader.readUTF();
  }
}

export class EnabledChannelsMessage extends DofusMessage {
  public static id: number = 9261;

  public disallowed: number[] | undefined;
  public channels: number[] | undefined;

  public constructor(
    disallowed?: number[] | undefined,
    channels?: number[] | undefined,
  ) {
    super();
    this.disallowed = disallowed;
    this.channels = channels;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.disallowed!.length);
    this.disallowed!.forEach((current: number) => writer.writeByte(current));
    writer.writeShort(this.channels!.length);
    this.channels!.forEach((current: number) => writer.writeByte(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.disallowed = [];
    const countDisallowed = reader.readShort();
    for (let i: number = 0; i < countDisallowed; i++) {
      this.disallowed.push(reader.readByte());
    }
    this.channels = [];
    const countChannels = reader.readShort();
    for (let i: number = 0; i < countChannels; i++) {
      this.channels.push(reader.readByte());
    }
  }
}

export class CinematicMessage extends DofusMessage {
  public static id: number = 5054;

  public cinematicId: number | undefined = 0;

  public constructor(cinematicId?: number | undefined) {
    super();
    this.cinematicId = cinematicId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.cinematicId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cinematicId = reader.readVarShort();
  }
}

export class ExchangeStartOkJobIndexMessage extends DofusMessage {
  public static id: number = 1146;

  public jobs: number[] | undefined;

  public constructor(jobs?: number[] | undefined) {
    super();
    this.jobs = jobs;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.jobs!.length);
    this.jobs!.forEach((current: number) => writer.writeVarInt(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.jobs = [];
    const countJobs = reader.readShort();
    for (let i: number = 0; i < countJobs; i++) {
      this.jobs.push(reader.readVarInt());
    }
  }
}

export class GameFightPlacementPossiblePositionsMessage extends DofusMessage {
  public static id: number = 3019;

  public positionsForChallengers: number[] | undefined;
  public teamNumber: number | undefined = 2;
  public positionsForDefenders: number[] | undefined;

  public constructor(
    positionsForChallengers?: number[] | undefined,
    teamNumber?: number | undefined,
    positionsForDefenders?: number[] | undefined,
  ) {
    super();
    this.positionsForChallengers = positionsForChallengers;
    this.teamNumber = teamNumber;
    this.positionsForDefenders = positionsForDefenders;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.positionsForChallengers!.length);
    this.positionsForChallengers!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
    writer.writeByte(this.teamNumber!);
    writer.writeShort(this.positionsForDefenders!.length);
    this.positionsForDefenders!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.positionsForChallengers = [];
    const countPositionsForChallengers = reader.readShort();
    for (let i: number = 0; i < countPositionsForChallengers; i++) {
      this.positionsForChallengers.push(reader.readVarShort());
    }
    this.teamNumber = reader.readByte();
    this.positionsForDefenders = [];
    const countPositionsForDefenders = reader.readShort();
    for (let i: number = 0; i < countPositionsForDefenders; i++) {
      this.positionsForDefenders.push(reader.readVarShort());
    }
  }
}

export class CharacterSelectedErrorMessage extends DofusMessage {
  public static id: number = 9221;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class AccountLinkRequiredMessage extends DofusMessage {
  public static id: number = 5437;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class AchievementRewardSuccessMessage extends DofusMessage {
  public static id: number = 2669;

  public achievementId: number | undefined = 0;

  public constructor(achievementId?: number | undefined) {
    super();
    this.achievementId = achievementId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.achievementId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.achievementId = reader.readShort();
  }
}

export class MigratedServerListMessage extends DofusMessage {
  public static id: number = 970;

  public migratedServerIds: number[] | undefined;

  public constructor(migratedServerIds?: number[] | undefined) {
    super();
    this.migratedServerIds = migratedServerIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.migratedServerIds!.length);
    this.migratedServerIds!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.migratedServerIds = [];
    const countMigratedServerIds = reader.readShort();
    for (let i: number = 0; i < countMigratedServerIds; i++) {
      this.migratedServerIds.push(reader.readVarShort());
    }
  }
}

export class CompassResetMessage extends DofusMessage {
  public static id: number = 4432;

  public type: number | undefined = 0;

  public constructor(type?: number | undefined) {
    super();
    this.type = type;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.type!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.type = reader.readByte();
  }
}

export class ExchangeObjectRemovedFromBagMessage extends ExchangeObjectMessage {
  public static id = 1851;

  public objectUID: number | undefined = 0;

  public constructor(
    remote?: boolean | undefined,
    objectUID?: number | undefined,
  ) {
    super(remote);
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.objectUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectUID = reader.readVarInt();
  }
}

export class PartyJoinMessage extends AbstractPartyMessage {
  public static id = 2536;

  public restricted: boolean | undefined = false;
  public guests: PartyGuestInformations[] | undefined;
  public partyType: number | undefined = 0;
  public partyName: string | undefined;
  public members: PartyMemberInformations[] | undefined;
  public partyLeaderId: number | undefined = 0;
  public maxParticipants: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    restricted?: boolean | undefined,
    guests?: PartyGuestInformations[] | undefined,
    partyType?: number | undefined,
    partyName?: string | undefined,
    members?: PartyMemberInformations[] | undefined,
    partyLeaderId?: number | undefined,
    maxParticipants?: number | undefined,
  ) {
    super(partyId);
    this.restricted = restricted;
    this.guests = guests;
    this.partyType = partyType;
    this.partyName = partyName;
    this.members = members;
    this.partyLeaderId = partyLeaderId;
    this.maxParticipants = maxParticipants;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.restricted!);
    writer.writeShort(this.guests!.length);
    this.guests!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeByte(this.partyType!);
    writer.writeUTF(this.partyName!);
    writer.writeShort(this.members!.length);
    this.members!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarLong(this.partyLeaderId!);
    writer.writeByte(this.maxParticipants!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.restricted = reader.readBoolean();
    this.guests = [];
    const countGuests = reader.readShort();
    for (let i: number = 0; i < countGuests; i++) {
      const type: PartyGuestInformations = new PartyGuestInformations();
      type.deserialize(reader);
      this.guests.push(type);
    }
    this.partyType = reader.readByte();
    this.partyName = reader.readUTF();
    this.members = [];
    const countMembers = reader.readShort();
    for (let i: number = 0; i < countMembers; i++) {
      const membersTypeId: number = reader.readShort();
      const type: PartyMemberInformations = new types[
        membersTypeId
      ]() as PartyMemberInformations;
      type.deserialize(reader);
      this.members.push(type);
    }
    this.partyLeaderId = reader.readVarLong();
    this.maxParticipants = reader.readByte();
  }
}

export class WatchInventoryContentMessage extends InventoryContentMessage {
  public static id = 8233;

  public constructor(
    kamas?: number | undefined,
    objects?: ObjectItem[] | undefined,
  ) {
    super(kamas, objects);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class StorageKamasUpdateMessage extends DofusMessage {
  public static id: number = 4689;

  public kamasTotal: number | undefined = 0;

  public constructor(kamasTotal?: number | undefined) {
    super();
    this.kamasTotal = kamasTotal;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.kamasTotal!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.kamasTotal = reader.readVarLong();
  }
}

export class HouseSellingUpdateMessage extends DofusMessage {
  public static id: number = 3951;

  public buyerTag: AccountTagInformation | undefined;
  public houseId: number | undefined = 0;
  public instanceId: number | undefined = 0;
  public secondHand: boolean | undefined = false;
  public realPrice: number | undefined = 0;

  public constructor(
    buyerTag?: AccountTagInformation | undefined,
    houseId?: number | undefined,
    instanceId?: number | undefined,
    secondHand?: boolean | undefined,
    realPrice?: number | undefined,
  ) {
    super();
    this.buyerTag = buyerTag;
    this.houseId = houseId;
    this.instanceId = instanceId;
    this.secondHand = secondHand;
    this.realPrice = realPrice;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.buyerTag!.serialize(writer);
    writer.writeVarInt(this.houseId!);
    writer.writeInt(this.instanceId!);
    writer.writeBoolean(this.secondHand!);
    writer.writeVarLong(this.realPrice!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.buyerTag = new AccountTagInformation();
    this.buyerTag!.deserialize(reader);
    this.houseId = reader.readVarInt();
    this.instanceId = reader.readInt();
    this.secondHand = reader.readBoolean();
    this.realPrice = reader.readVarLong();
  }
}

export class ShortcutBarReplacedMessage extends DofusMessage {
  public static id: number = 5103;

  public shortcut: Shortcut | undefined;
  public barType: number | undefined = 0;

  public constructor(
    shortcut?: Shortcut | undefined,
    barType?: number | undefined,
  ) {
    super();
    this.shortcut = shortcut;
    this.barType = barType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.shortcut!.id);
    this.shortcut!.serialize(writer);
    writer.writeByte(this.barType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    const shortcutTypeId: number = reader.readShort();
    this.shortcut = new types[shortcutTypeId]() as Shortcut;
    this.shortcut!.deserialize(reader);
    this.barType = reader.readByte();
  }
}

export class JobBookSubscriptionMessage extends DofusMessage {
  public static id: number = 8266;

  public subscriptions: JobBookSubscription[] | undefined;

  public constructor(subscriptions?: JobBookSubscription[] | undefined) {
    super();
    this.subscriptions = subscriptions;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.subscriptions!.length);
    this.subscriptions!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.subscriptions = [];
    const countSubscriptions = reader.readShort();
    for (let i: number = 0; i < countSubscriptions; i++) {
      const type: JobBookSubscription = new JobBookSubscription();
      type.deserialize(reader);
      this.subscriptions.push(type);
    }
  }
}

export class PrismSettingsErrorMessage extends DofusMessage {
  public static id: number = 2594;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ExchangeCraftResultWithObjectIdMessage extends ExchangeCraftResultMessage {
  public static id = 7556;

  public objectGenericId: number | undefined = 0;

  public constructor(
    craftResult?: number | undefined,
    objectGenericId?: number | undefined,
  ) {
    super(craftResult);
    this.objectGenericId = objectGenericId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.objectGenericId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectGenericId = reader.readVarShort();
  }
}

export class BreachKickResponseMessage extends DofusMessage {
  public static id: number = 5114;

  public kicked: boolean | undefined = false;
  public target: CharacterMinimalInformations | undefined;

  public constructor(
    kicked?: boolean | undefined,
    target?: CharacterMinimalInformations | undefined,
  ) {
    super();
    this.kicked = kicked;
    this.target = target;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.kicked!);
    this.target!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.kicked = reader.readBoolean();
    this.target = new CharacterMinimalInformations();
    this.target!.deserialize(reader);
  }
}

export class SpouseInformationsMessage extends DofusMessage {
  public static id: number = 8493;

  public spouse: FriendSpouseInformations | undefined;

  public constructor(spouse?: FriendSpouseInformations | undefined) {
    super();
    this.spouse = spouse;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.spouse!.id);
    this.spouse!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const spouseTypeId: number = reader.readShort();
    this.spouse = new types[spouseTypeId]() as FriendSpouseInformations;
    this.spouse!.deserialize(reader);
  }
}

export class HaapiBuyValidationMessage extends HaapiValidationMessage {
  public static id = 9648;

  public email: string | undefined;
  public amount: number | undefined = 0;

  public constructor(
    code?: number | undefined,
    action?: number | undefined,
    email?: string | undefined,
    amount?: number | undefined,
  ) {
    super(code, action);
    this.email = email;
    this.amount = amount;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.email!);
    writer.writeVarLong(this.amount!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.email = reader.readUTF();
    this.amount = reader.readVarLong();
  }
}

export class TitleLostMessage extends DofusMessage {
  public static id: number = 1427;

  public titleId: number | undefined = 0;

  public constructor(titleId?: number | undefined) {
    super();
    this.titleId = titleId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.titleId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.titleId = reader.readVarShort();
  }
}

export class PresetSavedMessage extends DofusMessage {
  public static id: number = 4820;

  public preset: Preset | undefined;
  public presetId: number | undefined = 0;

  public constructor(
    preset?: Preset | undefined,
    presetId?: number | undefined,
  ) {
    super();
    this.preset = preset;
    this.presetId = presetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.preset!.id);
    this.preset!.serialize(writer);
    writer.writeShort(this.presetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    const presetTypeId: number = reader.readShort();
    this.preset = new types[presetTypeId]() as Preset;
    this.preset!.deserialize(reader);
    this.presetId = reader.readShort();
  }
}

export class ExchangeStartOkRunesTradeMessage extends DofusMessage {
  public static id: number = 1847;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ShortcutBarRefreshMessage extends DofusMessage {
  public static id: number = 4458;

  public shortcut: Shortcut | undefined;
  public barType: number | undefined = 0;

  public constructor(
    shortcut?: Shortcut | undefined,
    barType?: number | undefined,
  ) {
    super();
    this.shortcut = shortcut;
    this.barType = barType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.shortcut!.id);
    this.shortcut!.serialize(writer);
    writer.writeByte(this.barType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    const shortcutTypeId: number = reader.readShort();
    this.shortcut = new types[shortcutTypeId]() as Shortcut;
    this.shortcut!.deserialize(reader);
    this.barType = reader.readByte();
  }
}

export class DungeonKeyRingMessage extends DofusMessage {
  public static id: number = 6497;

  public unavailables: number[] | undefined;
  public availables: number[] | undefined;

  public constructor(
    unavailables?: number[] | undefined,
    availables?: number[] | undefined,
  ) {
    super();
    this.unavailables = unavailables;
    this.availables = availables;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.unavailables!.length);
    this.unavailables!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
    writer.writeShort(this.availables!.length);
    this.availables!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.unavailables = [];
    const countUnavailables = reader.readShort();
    for (let i: number = 0; i < countUnavailables; i++) {
      this.unavailables.push(reader.readVarShort());
    }
    this.availables = [];
    const countAvailables = reader.readShort();
    for (let i: number = 0; i < countAvailables; i++) {
      this.availables.push(reader.readVarShort());
    }
  }
}

export class TeleportOnSameMapMessage extends DofusMessage {
  public static id: number = 9521;

  public cellId: number | undefined = 0;
  public targetId: number | undefined = 0;

  public constructor(
    cellId?: number | undefined,
    targetId?: number | undefined,
  ) {
    super();
    this.cellId = cellId;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.cellId!);
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readVarShort();
    this.targetId = reader.readDouble();
  }
}

export class GuildPlayerNoApplicationInformationMessage extends GuildPlayerApplicationAbstractMessage {
  public static id = 5345;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class TreasureHuntShowLegendaryUIMessage extends DofusMessage {
  public static id: number = 117;

  public availableLegendaryIds: number[] | undefined;

  public constructor(availableLegendaryIds?: number[] | undefined) {
    super();
    this.availableLegendaryIds = availableLegendaryIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.availableLegendaryIds!.length);
    this.availableLegendaryIds!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.availableLegendaryIds = [];
    const countAvailableLegendaryIds = reader.readShort();
    for (let i: number = 0; i < countAvailableLegendaryIds; i++) {
      this.availableLegendaryIds.push(reader.readVarShort());
    }
  }
}

export class ChatSmileyExtraPackListMessage extends DofusMessage {
  public static id: number = 8664;

  public packIds: number[] | undefined;

  public constructor(packIds?: number[] | undefined) {
    super();
    this.packIds = packIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.packIds!.length);
    this.packIds!.forEach((current: number) => writer.writeByte(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.packIds = [];
    const countPackIds = reader.readShort();
    for (let i: number = 0; i < countPackIds; i++) {
      this.packIds.push(reader.readByte());
    }
  }
}

export class ServerStatusUpdateMessage extends DofusMessage {
  public static id: number = 1411;

  public server: GameServerInformations | undefined;

  public constructor(server?: GameServerInformations | undefined) {
    super();
    this.server = server;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.server!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.server = new GameServerInformations();
    this.server!.deserialize(reader);
  }
}

export class TeleportBuddiesMessage extends DofusMessage {
  public static id: number = 9150;

  public dungeonId: number | undefined = 0;

  public constructor(dungeonId?: number | undefined) {
    super();
    this.dungeonId = dungeonId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.dungeonId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dungeonId = reader.readVarShort();
  }
}

export class AlignmentWarEffortDonatePreviewMessage extends DofusMessage {
  public static id: number = 2736;

  public xp: number | undefined = 0;

  public constructor(xp?: number | undefined) {
    super();
    this.xp = xp;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.xp!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.xp = reader.readDouble();
  }
}

export class GoldAddedMessage extends DofusMessage {
  public static id: number = 1408;

  public gold: GoldItem | undefined;

  public constructor(gold?: GoldItem | undefined) {
    super();
    this.gold = gold;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.gold!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.gold = new GoldItem();
    this.gold!.deserialize(reader);
  }
}

export class FriendWarnOnLevelGainStateMessage extends DofusMessage {
  public static id: number = 7352;

  public enable: boolean | undefined = false;

  public constructor(enable?: boolean | undefined) {
    super();
    this.enable = enable;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
  }
}

export class GuildListMessage extends DofusMessage {
  public static id: number = 5503;

  public guilds: GuildInformations[] | undefined;

  public constructor(guilds?: GuildInformations[] | undefined) {
    super();
    this.guilds = guilds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.guilds!.length);
    this.guilds!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guilds = [];
    const countGuilds = reader.readShort();
    for (let i: number = 0; i < countGuilds; i++) {
      const type: GuildInformations = new GuildInformations();
      type.deserialize(reader);
      this.guilds.push(type);
    }
  }
}

export class RecruitmentInformationMessage extends DofusMessage {
  public static id: number = 3164;

  public recruitmentData: GuildRecruitmentInformation | undefined;

  public constructor(
    recruitmentData?: GuildRecruitmentInformation | undefined,
  ) {
    super();
    this.recruitmentData = recruitmentData;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.recruitmentData!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.recruitmentData = new GuildRecruitmentInformation();
    this.recruitmentData!.deserialize(reader);
  }
}

export class PresetDeleteResultMessage extends DofusMessage {
  public static id: number = 7560;

  public code: number | undefined = 2;
  public presetId: number | undefined = 0;

  public constructor(code?: number | undefined, presetId?: number | undefined) {
    super();
    this.code = code;
    this.presetId = presetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.code!);
    writer.writeShort(this.presetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.code = reader.readByte();
    this.presetId = reader.readShort();
  }
}

export class ExchangeItemAutoCraftStopedMessage extends DofusMessage {
  public static id: number = 470;

  public reason: number | undefined = 0;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class ExchangeErrorMessage extends DofusMessage {
  public static id: number = 6446;

  public errorType: number | undefined = 0;

  public constructor(errorType?: number | undefined) {
    super();
    this.errorType = errorType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.errorType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.errorType = reader.readByte();
  }
}

export class PrismFightStateUpdateMessage extends DofusMessage {
  public static id: number = 7379;

  public state: number | undefined = 0;

  public constructor(state?: number | undefined) {
    super();
    this.state = state;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.state!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.state = reader.readByte();
  }
}

export class ExchangeMountSterilizeFromPaddockMessage extends DofusMessage {
  public static id: number = 2234;

  public sterilizator: string | undefined;
  public worldY: number | undefined = 0;
  public worldX: number | undefined = 0;
  public name: string | undefined;

  public constructor(
    sterilizator?: string | undefined,
    worldY?: number | undefined,
    worldX?: number | undefined,
    name?: string | undefined,
  ) {
    super();
    this.sterilizator = sterilizator;
    this.worldY = worldY;
    this.worldX = worldX;
    this.name = name;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.sterilizator!);
    writer.writeShort(this.worldY!);
    writer.writeShort(this.worldX!);
    writer.writeUTF(this.name!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.sterilizator = reader.readUTF();
    this.worldY = reader.readShort();
    this.worldX = reader.readShort();
    this.name = reader.readUTF();
  }
}

export class TaxCollectorAttackedMessage extends DofusMessage {
  public static id: number = 4728;

  public mapId: number | undefined = 0;
  public firstNameId: number | undefined = 0;
  public guild: BasicGuildInformations | undefined;
  public subAreaId: number | undefined = 0;
  public lastNameId: number | undefined = 0;
  public worldY: number | undefined = 0;
  public worldX: number | undefined = 0;

  public constructor(
    mapId?: number | undefined,
    firstNameId?: number | undefined,
    guild?: BasicGuildInformations | undefined,
    subAreaId?: number | undefined,
    lastNameId?: number | undefined,
    worldY?: number | undefined,
    worldX?: number | undefined,
  ) {
    super();
    this.mapId = mapId;
    this.firstNameId = firstNameId;
    this.guild = guild;
    this.subAreaId = subAreaId;
    this.lastNameId = lastNameId;
    this.worldY = worldY;
    this.worldX = worldX;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.mapId!);
    writer.writeVarShort(this.firstNameId!);
    this.guild!.serialize(writer);
    writer.writeVarShort(this.subAreaId!);
    writer.writeVarShort(this.lastNameId!);
    writer.writeShort(this.worldY!);
    writer.writeShort(this.worldX!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapId = reader.readDouble();
    this.firstNameId = reader.readVarShort();
    this.guild = new BasicGuildInformations();
    this.guild!.deserialize(reader);
    this.subAreaId = reader.readVarShort();
    this.lastNameId = reader.readVarShort();
    this.worldY = reader.readShort();
    this.worldX = reader.readShort();
  }
}

export class ServerSettingsMessage extends DofusMessage {
  public static id: number = 298;

  public lang: string | undefined;
  public itemMaxLevel: number | undefined = 0;
  public arenaLeaveBanTime: number | undefined = 0;
  public gameType: number | undefined = -1;
  public community: number | undefined = 0;
  public isMonoAccount: boolean | undefined = false;
  public hasFreeAutopilot: boolean | undefined = false;

  public constructor(
    lang?: string | undefined,
    itemMaxLevel?: number | undefined,
    arenaLeaveBanTime?: number | undefined,
    gameType?: number | undefined,
    community?: number | undefined,
    isMonoAccount?: boolean | undefined,
    hasFreeAutopilot?: boolean | undefined,
  ) {
    super();
    this.lang = lang;
    this.itemMaxLevel = itemMaxLevel;
    this.arenaLeaveBanTime = arenaLeaveBanTime;
    this.gameType = gameType;
    this.community = community;
    this.isMonoAccount = isMonoAccount;
    this.hasFreeAutopilot = hasFreeAutopilot;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.lang!);
    writer.writeInt(this.itemMaxLevel!);
    writer.writeVarShort(this.arenaLeaveBanTime!);
    writer.writeByte(this.gameType!);
    writer.writeByte(this.community!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.isMonoAccount!);
    box0 = setFlag(box0, 1, this.hasFreeAutopilot!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.lang = reader.readUTF();
    this.itemMaxLevel = reader.readInt();
    this.arenaLeaveBanTime = reader.readVarShort();
    this.gameType = reader.readByte();
    this.community = reader.readByte();
    const box0 = reader.readByte();
    this.isMonoAccount = getFlag(box0, 0);
    this.hasFreeAutopilot = getFlag(box0, 1);
  }
}

export class AcquaintanceAddedMessage extends DofusMessage {
  public static id: number = 6756;

  public acquaintanceAdded: AcquaintanceInformation | undefined;

  public constructor(acquaintanceAdded?: AcquaintanceInformation | undefined) {
    super();
    this.acquaintanceAdded = acquaintanceAdded;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.acquaintanceAdded!.id);
    this.acquaintanceAdded!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const acquaintanceAddedTypeId: number = reader.readShort();
    this.acquaintanceAdded = new types[
      acquaintanceAddedTypeId
    ]() as AcquaintanceInformation;
    this.acquaintanceAdded!.deserialize(reader);
  }
}

export class StorageObjectRemoveMessage extends DofusMessage {
  public static id: number = 4970;

  public objectUID: number | undefined = 0;

  public constructor(objectUID?: number | undefined) {
    super();
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.objectUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectUID = reader.readVarInt();
  }
}

export class FollowedQuestsMessage extends DofusMessage {
  public static id: number = 414;

  public quests: QuestActiveDetailedInformations[] | undefined;

  public constructor(quests?: QuestActiveDetailedInformations[] | undefined) {
    super();
    this.quests = quests;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.quests!.length);
    this.quests!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quests = [];
    const countQuests = reader.readShort();
    for (let i: number = 0; i < countQuests; i++) {
      const type: QuestActiveDetailedInformations =
        new QuestActiveDetailedInformations();
      type.deserialize(reader);
      this.quests.push(type);
    }
  }
}

export class ServerSessionConstantsMessage extends DofusMessage {
  public static id: number = 646;

  public variables: ServerSessionConstant[] | undefined;

  public constructor(variables?: ServerSessionConstant[] | undefined) {
    super();
    this.variables = variables;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.variables!.length);
    this.variables!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.variables = [];
    const countVariables = reader.readShort();
    for (let i: number = 0; i < countVariables; i++) {
      const variablesTypeId: number = reader.readShort();
      const type: ServerSessionConstant = new types[
        variablesTypeId
      ]() as ServerSessionConstant;
      type.deserialize(reader);
      this.variables.push(type);
    }
  }
}

export class DungeonPartyFinderAvailableDungeonsMessage extends DofusMessage {
  public static id: number = 2640;

  public dungeonIds: number[] | undefined;

  public constructor(dungeonIds?: number[] | undefined) {
    super();
    this.dungeonIds = dungeonIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.dungeonIds!.length);
    this.dungeonIds!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dungeonIds = [];
    const countDungeonIds = reader.readShort();
    for (let i: number = 0; i < countDungeonIds; i++) {
      this.dungeonIds.push(reader.readVarShort());
    }
  }
}

export class CharacterNameSuggestionSuccessMessage extends DofusMessage {
  public static id: number = 428;

  public suggestion: string | undefined;

  public constructor(suggestion?: string | undefined) {
    super();
    this.suggestion = suggestion;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.suggestion!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.suggestion = reader.readUTF();
  }
}

export class GameMapNoMovementMessage extends DofusMessage {
  public static id: number = 8791;

  public cellY: number | undefined = 0;
  public cellX: number | undefined = 0;

  public constructor(cellY?: number | undefined, cellX?: number | undefined) {
    super();
    this.cellY = cellY;
    this.cellX = cellX;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.cellY!);
    writer.writeShort(this.cellX!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellY = reader.readShort();
    this.cellX = reader.readShort();
  }
}

export class MountEmoteIconUsedOkMessage extends DofusMessage {
  public static id: number = 1654;

  public reactionType: number | undefined = 0;
  public mountId: number | undefined = 0;

  public constructor(
    reactionType?: number | undefined,
    mountId?: number | undefined,
  ) {
    super();
    this.reactionType = reactionType;
    this.mountId = mountId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reactionType!);
    writer.writeVarInt(this.mountId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reactionType = reader.readByte();
    this.mountId = reader.readVarInt();
  }
}

export class QuestStartedMessage extends DofusMessage {
  public static id: number = 475;

  public questId: number | undefined = 0;

  public constructor(questId?: number | undefined) {
    super();
    this.questId = questId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.questId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.questId = reader.readVarShort();
  }
}

export class MountRenamedMessage extends DofusMessage {
  public static id: number = 7698;

  public name: string | undefined;
  public mountId: number | undefined = 0;

  public constructor(name?: string | undefined, mountId?: number | undefined) {
    super();
    this.name = name;
    this.mountId = mountId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.name!);
    writer.writeVarInt(this.mountId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.name = reader.readUTF();
    this.mountId = reader.readVarInt();
  }
}

export class ExchangeObjectsAddedMessage extends ExchangeObjectMessage {
  public static id = 6503;

  public object_: ObjectItem[] | undefined;

  public constructor(
    remote?: boolean | undefined,
    object_?: ObjectItem[] | undefined,
  ) {
    super(remote);
    this.object_ = object_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.object_!.length);
    this.object_!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.object_ = [];
    const countObject_ = reader.readShort();
    for (let i: number = 0; i < countObject_; i++) {
      const type: ObjectItem = new ObjectItem();
      type.deserialize(reader);
      this.object_.push(type);
    }
  }
}

export class GuestLimitationMessage extends DofusMessage {
  public static id: number = 1036;

  public reason: number | undefined = 0;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class ExchangeObjectsModifiedMessage extends ExchangeObjectMessage {
  public static id = 145;

  public object_: ObjectItem[] | undefined;

  public constructor(
    remote?: boolean | undefined,
    object_?: ObjectItem[] | undefined,
  ) {
    super(remote);
    this.object_ = object_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.object_!.length);
    this.object_!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.object_ = [];
    const countObject_ = reader.readShort();
    for (let i: number = 0; i < countObject_; i++) {
      const type: ObjectItem = new ObjectItem();
      type.deserialize(reader);
      this.object_.push(type);
    }
  }
}

export class WrapperObjectErrorMessage extends SymbioticObjectErrorMessage {
  public static id = 1930;

  public constructor(
    reason?: number | undefined,
    errorCode?: number | undefined,
  ) {
    super(reason, errorCode);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ExchangeRequestedMessage extends DofusMessage {
  public static id: number = 5525;

  public exchangeType: number | undefined = 0;

  public constructor(exchangeType?: number | undefined) {
    super();
    this.exchangeType = exchangeType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.exchangeType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.exchangeType = reader.readByte();
  }
}

export class ExchangeRequestedTradeMessage extends ExchangeRequestedMessage {
  public static id = 9612;

  public target: number | undefined = 0;
  public source: number | undefined = 0;

  public constructor(
    exchangeType?: number | undefined,
    target?: number | undefined,
    source?: number | undefined,
  ) {
    super(exchangeType);
    this.target = target;
    this.source = source;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.target!);
    writer.writeVarLong(this.source!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.target = reader.readVarLong();
    this.source = reader.readVarLong();
  }
}

export class IdolFightPreparationUpdateMessage extends DofusMessage {
  public static id: number = 7338;

  public idols: Idol[] | undefined;
  public idolSource: number | undefined = 0;

  public constructor(
    idols?: Idol[] | undefined,
    idolSource?: number | undefined,
  ) {
    super();
    this.idols = idols;
    this.idolSource = idolSource;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.idols!.length);
    this.idols!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeByte(this.idolSource!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.idols = [];
    const countIdols = reader.readShort();
    for (let i: number = 0; i < countIdols; i++) {
      const idolsTypeId: number = reader.readShort();
      const type: Idol = new types[idolsTypeId]() as Idol;
      type.deserialize(reader);
      this.idols.push(type);
    }
    this.idolSource = reader.readByte();
  }
}

export class ShortcutBarAddErrorMessage extends DofusMessage {
  public static id: number = 1782;

  public error: number | undefined = 0;

  public constructor(error?: number | undefined) {
    super();
    this.error = error;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.error!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.error = reader.readByte();
  }
}

export class IdolSelectedMessage extends DofusMessage {
  public static id: number = 7348;

  public idolId: number | undefined = 0;
  public activate: boolean | undefined = false;
  public party: boolean | undefined = false;

  public constructor(
    idolId?: number | undefined,
    activate?: boolean | undefined,
    party?: boolean | undefined,
  ) {
    super();
    this.idolId = idolId;
    this.activate = activate;
    this.party = party;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.idolId!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.activate!);
    box0 = setFlag(box0, 1, this.party!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.idolId = reader.readVarShort();
    const box0 = reader.readByte();
    this.activate = getFlag(box0, 0);
    this.party = getFlag(box0, 1);
  }
}

export class ExchangeStartOkHumanVendorMessage extends DofusMessage {
  public static id: number = 9011;

  public objectsInfos: ObjectItemToSellInHumanVendorShop[] | undefined;
  public sellerId: number | undefined = 0;

  public constructor(
    objectsInfos?: ObjectItemToSellInHumanVendorShop[] | undefined,
    sellerId?: number | undefined,
  ) {
    super();
    this.objectsInfos = objectsInfos;
    this.sellerId = sellerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objectsInfos!.length);
    this.objectsInfos!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeDouble(this.sellerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectsInfos = [];
    const countObjectsInfos = reader.readShort();
    for (let i: number = 0; i < countObjectsInfos; i++) {
      const type: ObjectItemToSellInHumanVendorShop =
        new ObjectItemToSellInHumanVendorShop();
      type.deserialize(reader);
      this.objectsInfos.push(type);
    }
    this.sellerId = reader.readDouble();
  }
}

export class FriendDeleteResultMessage extends DofusMessage {
  public static id: number = 8619;

  public tag: AccountTagInformation | undefined;
  public success: boolean | undefined = false;

  public constructor(
    tag?: AccountTagInformation | undefined,
    success?: boolean | undefined,
  ) {
    super();
    this.tag = tag;
    this.success = success;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.tag!.serialize(writer);
    writer.writeBoolean(this.success!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.tag = new AccountTagInformation();
    this.tag!.deserialize(reader);
    this.success = reader.readBoolean();
  }
}

export class PresetsMessage extends DofusMessage {
  public static id: number = 1706;

  public presets: Preset[] | undefined;

  public constructor(presets?: Preset[] | undefined) {
    super();
    this.presets = presets;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.presets!.length);
    this.presets!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.presets = [];
    const countPresets = reader.readShort();
    for (let i: number = 0; i < countPresets; i++) {
      const presetsTypeId: number = reader.readShort();
      const type: Preset = new types[presetsTypeId]() as Preset;
      type.deserialize(reader);
      this.presets.push(type);
    }
  }
}

export class ObjectsQuantityMessage extends DofusMessage {
  public static id: number = 5570;

  public objectsUIDAndQty: ObjectItemQuantity[] | undefined;

  public constructor(objectsUIDAndQty?: ObjectItemQuantity[] | undefined) {
    super();
    this.objectsUIDAndQty = objectsUIDAndQty;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objectsUIDAndQty!.length);
    this.objectsUIDAndQty!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectsUIDAndQty = [];
    const countObjectsUIDAndQty = reader.readShort();
    for (let i: number = 0; i < countObjectsUIDAndQty; i++) {
      const type: ObjectItemQuantity = new ObjectItemQuantity();
      type.deserialize(reader);
      this.objectsUIDAndQty.push(type);
    }
  }
}

export class QuestObjectiveValidatedMessage extends DofusMessage {
  public static id: number = 5565;

  public objectiveId: number | undefined = 0;
  public questId: number | undefined = 0;

  public constructor(
    objectiveId?: number | undefined,
    questId?: number | undefined,
  ) {
    super();
    this.objectiveId = objectiveId;
    this.questId = questId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.objectiveId!);
    writer.writeVarShort(this.questId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectiveId = reader.readVarShort();
    this.questId = reader.readVarShort();
  }
}

export class GameRolePlayAggressionMessage extends DofusMessage {
  public static id: number = 2660;

  public defenderId: number | undefined = 0;
  public attackerId: number | undefined = 0;

  public constructor(
    defenderId?: number | undefined,
    attackerId?: number | undefined,
  ) {
    super();
    this.defenderId = defenderId;
    this.attackerId = attackerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.defenderId!);
    writer.writeVarLong(this.attackerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.defenderId = reader.readVarLong();
    this.attackerId = reader.readVarLong();
  }
}

export class GuildInformationsMembersMessage extends DofusMessage {
  public static id: number = 3627;

  public members: GuildMember[] | undefined;

  public constructor(members?: GuildMember[] | undefined) {
    super();
    this.members = members;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.members!.length);
    this.members!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.members = [];
    const countMembers = reader.readShort();
    for (let i: number = 0; i < countMembers; i++) {
      const type: GuildMember = new GuildMember();
      type.deserialize(reader);
      this.members.push(type);
    }
  }
}

export class SetUpdateMessage extends DofusMessage {
  public static id: number = 2982;

  public setId: number | undefined = 0;
  public setEffects: ObjectEffect[] | undefined;
  public setObjects: number[] | undefined;

  public constructor(
    setId?: number | undefined,
    setEffects?: ObjectEffect[] | undefined,
    setObjects?: number[] | undefined,
  ) {
    super();
    this.setId = setId;
    this.setEffects = setEffects;
    this.setObjects = setObjects;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.setId!);
    writer.writeShort(this.setEffects!.length);
    this.setEffects!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeShort(this.setObjects!.length);
    this.setObjects!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.setId = reader.readVarShort();
    this.setEffects = [];
    const countSetEffects = reader.readShort();
    for (let i: number = 0; i < countSetEffects; i++) {
      const setEffectsTypeId: number = reader.readShort();
      const type: ObjectEffect = new types[setEffectsTypeId]() as ObjectEffect;
      type.deserialize(reader);
      this.setEffects.push(type);
    }
    this.setObjects = [];
    const countSetObjects = reader.readShort();
    for (let i: number = 0; i < countSetObjects; i++) {
      this.setObjects.push(reader.readVarShort());
    }
  }
}

export class ExchangeMountsPaddockAddMessage extends DofusMessage {
  public static id: number = 3903;

  public mountDescription: MountClientData[] | undefined;

  public constructor(mountDescription?: MountClientData[] | undefined) {
    super();
    this.mountDescription = mountDescription;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.mountDescription!.length);
    this.mountDescription!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mountDescription = [];
    const countMountDescription = reader.readShort();
    for (let i: number = 0; i < countMountDescription; i++) {
      const type: MountClientData = new MountClientData();
      type.deserialize(reader);
      this.mountDescription.push(type);
    }
  }
}

export class CharacterExperienceGainMessage extends DofusMessage {
  public static id: number = 4524;

  public experienceIncarnation: number | undefined = 0;
  public experienceMount: number | undefined = 0;
  public experienceGuild: number | undefined = 0;
  public experienceCharacter: number | undefined = 0;

  public constructor(
    experienceIncarnation?: number | undefined,
    experienceMount?: number | undefined,
    experienceGuild?: number | undefined,
    experienceCharacter?: number | undefined,
  ) {
    super();
    this.experienceIncarnation = experienceIncarnation;
    this.experienceMount = experienceMount;
    this.experienceGuild = experienceGuild;
    this.experienceCharacter = experienceCharacter;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.experienceIncarnation!);
    writer.writeVarLong(this.experienceMount!);
    writer.writeVarLong(this.experienceGuild!);
    writer.writeVarLong(this.experienceCharacter!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.experienceIncarnation = reader.readVarLong();
    this.experienceMount = reader.readVarLong();
    this.experienceGuild = reader.readVarLong();
    this.experienceCharacter = reader.readVarLong();
  }
}

export class PrismsListMessage extends DofusMessage {
  public static id: number = 3236;

  public prisms: PrismSubareaEmptyInfo[] | undefined;

  public constructor(prisms?: PrismSubareaEmptyInfo[] | undefined) {
    super();
    this.prisms = prisms;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.prisms!.length);
    this.prisms!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.prisms = [];
    const countPrisms = reader.readShort();
    for (let i: number = 0; i < countPrisms; i++) {
      const prismsTypeId: number = reader.readShort();
      const type: PrismSubareaEmptyInfo = new types[
        prismsTypeId
      ]() as PrismSubareaEmptyInfo;
      type.deserialize(reader);
      this.prisms.push(type);
    }
  }
}

export class PrismsListUpdateMessage extends PrismsListMessage {
  public static id = 2634;

  public constructor(prisms?: PrismSubareaEmptyInfo[] | undefined) {
    super(prisms);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class EntitiesInformationMessage extends DofusMessage {
  public static id: number = 5147;

  public entities: EntityInformation[] | undefined;

  public constructor(entities?: EntityInformation[] | undefined) {
    super();
    this.entities = entities;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.entities!.length);
    this.entities!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.entities = [];
    const countEntities = reader.readShort();
    for (let i: number = 0; i < countEntities; i++) {
      const type: EntityInformation = new EntityInformation();
      type.deserialize(reader);
      this.entities.push(type);
    }
  }
}

export class FinishMoveListMessage extends DofusMessage {
  public static id: number = 596;

  public finishMoves: FinishMoveInformations[] | undefined;

  public constructor(finishMoves?: FinishMoveInformations[] | undefined) {
    super();
    this.finishMoves = finishMoves;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.finishMoves!.length);
    this.finishMoves!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.finishMoves = [];
    const countFinishMoves = reader.readShort();
    for (let i: number = 0; i < countFinishMoves; i++) {
      const type: FinishMoveInformations = new FinishMoveInformations();
      type.deserialize(reader);
      this.finishMoves.push(type);
    }
  }
}

export class PartyModifiableStatusMessage extends AbstractPartyMessage {
  public static id = 4439;

  public enabled: boolean | undefined = false;

  public constructor(
    partyId?: number | undefined,
    enabled?: boolean | undefined,
  ) {
    super(partyId);
    this.enabled = enabled;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enabled!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enabled = reader.readBoolean();
  }
}

export class JobExperienceOtherPlayerUpdateMessage extends JobExperienceUpdateMessage {
  public static id = 5477;

  public playerId: number | undefined = 0;

  public constructor(
    experiencesUpdate?: JobExperience | undefined,
    playerId?: number | undefined,
  ) {
    super(experiencesUpdate);
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
  }
}

export class GuildModificationStartedMessage extends DofusMessage {
  public static id: number = 310;

  public canChangeName: boolean | undefined = false;
  public canChangeEmblem: boolean | undefined = false;

  public constructor(
    canChangeName?: boolean | undefined,
    canChangeEmblem?: boolean | undefined,
  ) {
    super();
    this.canChangeName = canChangeName;
    this.canChangeEmblem = canChangeEmblem;
  }

  public serialize(writer: BinaryDataWriter): void {
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.canChangeName!);
    box0 = setFlag(box0, 1, this.canChangeEmblem!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    const box0 = reader.readByte();
    this.canChangeName = getFlag(box0, 0);
    this.canChangeEmblem = getFlag(box0, 1);
  }
}

export class PartyRestrictedMessage extends AbstractPartyMessage {
  public static id = 6433;

  public restricted: boolean | undefined = false;

  public constructor(
    partyId?: number | undefined,
    restricted?: boolean | undefined,
  ) {
    super(partyId);
    this.restricted = restricted;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.restricted!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.restricted = reader.readBoolean();
  }
}

export class NicknameRegistrationMessage extends DofusMessage {
  public static id: number = 8878;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GuildListApplicationAnswerMessage extends PaginationAnswerAbstractMessage {
  public static id = 1223;

  public applies: GuildApplicationInformation[] | undefined;

  public constructor(
    count?: number | undefined,
    total?: number | undefined,
    offset?: number | undefined,
    applies?: GuildApplicationInformation[] | undefined,
  ) {
    super(count, total, offset);
    this.applies = applies;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.applies!.length);
    this.applies!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.applies = [];
    const countApplies = reader.readShort();
    for (let i: number = 0; i < countApplies; i++) {
      const type: GuildApplicationInformation =
        new GuildApplicationInformation();
      type.deserialize(reader);
      this.applies.push(type);
    }
  }
}

export class GameContextRemoveElementWithEventMessage extends GameContextRemoveElementMessage {
  public static id = 9473;

  public elementEventId: number | undefined = 0;

  public constructor(
    id_?: number | undefined,
    elementEventId?: number | undefined,
  ) {
    super(id_);
    this.elementEventId = elementEventId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.elementEventId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.elementEventId = reader.readByte();
  }
}

export class GameRolePlayPlayerFightFriendlyRequestedMessage extends DofusMessage {
  public static id: number = 2157;

  public sourceId: number | undefined = 0;
  public targetId: number | undefined = 0;
  public fightId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    targetId?: number | undefined,
    fightId?: number | undefined,
  ) {
    super();
    this.sourceId = sourceId;
    this.targetId = targetId;
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.sourceId!);
    writer.writeVarLong(this.targetId!);
    writer.writeVarShort(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.sourceId = reader.readVarLong();
    this.targetId = reader.readVarLong();
    this.fightId = reader.readVarShort();
  }
}

export class UpdateMountCharacteristicsMessage extends DofusMessage {
  public static id: number = 9937;

  public boostToUpdateList: UpdateMountCharacteristic[] | undefined;
  public rideId: number | undefined = 0;

  public constructor(
    boostToUpdateList?: UpdateMountCharacteristic[] | undefined,
    rideId?: number | undefined,
  ) {
    super();
    this.boostToUpdateList = boostToUpdateList;
    this.rideId = rideId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.boostToUpdateList!.length);
    this.boostToUpdateList!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
    writer.writeVarInt(this.rideId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.boostToUpdateList = [];
    const countBoostToUpdateList = reader.readShort();
    for (let i: number = 0; i < countBoostToUpdateList; i++) {
      const boostToUpdateListTypeId: number = reader.readShort();
      const type: UpdateMountCharacteristic = new types[
        boostToUpdateListTypeId
      ]() as UpdateMountCharacteristic;
      type.deserialize(reader);
      this.boostToUpdateList.push(type);
    }
    this.rideId = reader.readVarInt();
  }
}

export class ShortcutBarRemovedMessage extends DofusMessage {
  public static id: number = 5087;

  public slot: number | undefined = 0;
  public barType: number | undefined = 0;

  public constructor(slot?: number | undefined, barType?: number | undefined) {
    super();
    this.slot = slot;
    this.barType = barType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.slot!);
    writer.writeByte(this.barType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.slot = reader.readByte();
    this.barType = reader.readByte();
  }
}

export class ExchangeBuyOkMessage extends DofusMessage {
  public static id: number = 1868;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class LifePointsRegenEndMessage extends UpdateLifePointsMessage {
  public static id = 5501;

  public lifePointsGained: number | undefined = 0;

  public constructor(
    maxLifePoints?: number | undefined,
    lifePoints?: number | undefined,
    lifePointsGained?: number | undefined,
  ) {
    super(maxLifePoints, lifePoints);
    this.lifePointsGained = lifePointsGained;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.lifePointsGained!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.lifePointsGained = reader.readVarInt();
  }
}

export class GameContextCreateMessage extends DofusMessage {
  public static id: number = 4950;

  public context: number | undefined = 1;

  public constructor(context?: number | undefined) {
    super();
    this.context = context;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.context!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.context = reader.readByte();
  }
}

export class PlayerStatusUpdateErrorMessage extends DofusMessage {
  public static id: number = 111;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GameFightPlacementSwapPositionsCancelledMessage extends DofusMessage {
  public static id: number = 998;

  public cancellerId: number | undefined = 0;
  public requestId: number | undefined = 0;

  public constructor(
    cancellerId?: number | undefined,
    requestId?: number | undefined,
  ) {
    super();
    this.cancellerId = cancellerId;
    this.requestId = requestId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.cancellerId!);
    writer.writeInt(this.requestId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cancellerId = reader.readDouble();
    this.requestId = reader.readInt();
  }
}

export class ConsoleCommandsListMessage extends DofusMessage {
  public static id: number = 5611;

  public aliases: string[] | undefined;
  public descriptions: string[] | undefined;
  public args: string[] | undefined;

  public constructor(
    aliases?: string[] | undefined,
    descriptions?: string[] | undefined,
    args?: string[] | undefined,
  ) {
    super();
    this.aliases = aliases;
    this.descriptions = descriptions;
    this.args = args;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.aliases!.length);
    this.aliases!.forEach((current: string) => writer.writeUTF(current));
    writer.writeShort(this.descriptions!.length);
    this.descriptions!.forEach((current: string) => writer.writeUTF(current));
    writer.writeShort(this.args!.length);
    this.args!.forEach((current: string) => writer.writeUTF(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.aliases = [];
    const countAliases = reader.readShort();
    for (let i: number = 0; i < countAliases; i++) {
      this.aliases.push(reader.readUTF());
    }
    this.descriptions = [];
    const countDescriptions = reader.readShort();
    for (let i: number = 0; i < countDescriptions; i++) {
      this.descriptions.push(reader.readUTF());
    }
    this.args = [];
    const countArgs = reader.readShort();
    for (let i: number = 0; i < countArgs; i++) {
      this.args.push(reader.readUTF());
    }
  }
}

export class StartupActionsListMessage extends DofusMessage {
  public static id: number = 798;

  public actions: StartupActionAddObject[] | undefined;

  public constructor(actions?: StartupActionAddObject[] | undefined) {
    super();
    this.actions = actions;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.actions!.length);
    this.actions!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.actions = [];
    const countActions = reader.readShort();
    for (let i: number = 0; i < countActions; i++) {
      const type: StartupActionAddObject = new StartupActionAddObject();
      type.deserialize(reader);
      this.actions.push(type);
    }
  }
}

export class TaxCollectorMovementRemoveMessage extends DofusMessage {
  public static id: number = 5927;

  public collectorId: number | undefined = 0;

  public constructor(collectorId?: number | undefined) {
    super();
    this.collectorId = collectorId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.collectorId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.collectorId = reader.readDouble();
  }
}

export class AreaFightModificatorUpdateMessage extends DofusMessage {
  public static id: number = 4779;

  public spellPairId: number | undefined = 0;

  public constructor(spellPairId?: number | undefined) {
    super();
    this.spellPairId = spellPairId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.spellPairId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.spellPairId = reader.readInt();
  }
}

export class ExchangeBidHouseInListRemovedMessage extends DofusMessage {
  public static id: number = 3610;

  public objectType: number | undefined = 0;
  public objectGID: number | undefined = 0;
  public itemUID: number | undefined = 0;

  public constructor(
    objectType?: number | undefined,
    objectGID?: number | undefined,
    itemUID?: number | undefined,
  ) {
    super();
    this.objectType = objectType;
    this.objectGID = objectGID;
    this.itemUID = itemUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.objectType!);
    writer.writeVarShort(this.objectGID!);
    writer.writeInt(this.itemUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectType = reader.readInt();
    this.objectGID = reader.readVarShort();
    this.itemUID = reader.readInt();
  }
}

export class AllianceBulletinSetErrorMessage extends SocialNoticeSetErrorMessage {
  public static id = 9529;

  public constructor(reason?: number | undefined) {
    super(reason);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ForgettableSpellDeleteMessage extends DofusMessage {
  public static id: number = 9143;

  public spells: number[] | undefined;
  public reason: number | undefined = 0;

  public constructor(
    spells?: number[] | undefined,
    reason?: number | undefined,
  ) {
    super();
    this.spells = spells;
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.spells!.length);
    this.spells!.forEach((current: number) => writer.writeInt(current));
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.spells = [];
    const countSpells = reader.readShort();
    for (let i: number = 0; i < countSpells; i++) {
      this.spells.push(reader.readInt());
    }
    this.reason = reader.readByte();
  }
}

export class DebtsDeleteMessage extends DofusMessage {
  public static id: number = 5619;

  public debts: number[] | undefined;
  public reason: number | undefined = 0;

  public constructor(
    debts?: number[] | undefined,
    reason?: number | undefined,
  ) {
    super();
    this.debts = debts;
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.debts!.length);
    this.debts!.forEach((current: number) => writer.writeDouble(current));
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.debts = [];
    const countDebts = reader.readShort();
    for (let i: number = 0; i < countDebts; i++) {
      this.debts.push(reader.readDouble());
    }
    this.reason = reader.readByte();
  }
}

export class ExchangeCraftResultMagicWithObjectDescMessage extends ExchangeCraftResultWithObjectDescMessage {
  public static id = 6242;

  public magicPoolStatus: number | undefined = 0;

  public constructor(
    craftResult?: number | undefined,
    objectInfo?: ObjectItemNotInContainer | undefined,
    magicPoolStatus?: number | undefined,
  ) {
    super(craftResult, objectInfo);
    this.magicPoolStatus = magicPoolStatus;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.magicPoolStatus!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.magicPoolStatus = reader.readByte();
  }
}

export class TitleSelectedMessage extends DofusMessage {
  public static id: number = 8922;

  public titleId: number | undefined = 0;

  public constructor(titleId?: number | undefined) {
    super();
    this.titleId = titleId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.titleId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.titleId = reader.readVarShort();
  }
}

export class AbstractGameActionWithAckMessage extends AbstractGameActionMessage {
  public static id = 3549;

  public waitAckId: number | undefined = 0;

  public constructor(
    sourceId?: number | undefined,
    actionId?: number | undefined,
    waitAckId?: number | undefined,
  ) {
    super(sourceId, actionId);
    this.waitAckId = waitAckId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.waitAckId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.waitAckId = reader.readShort();
  }
}

export class ExchangeBidHouseItemRemoveOkMessage extends DofusMessage {
  public static id: number = 5455;

  public sellerId: number | undefined = 0;

  public constructor(sellerId?: number | undefined) {
    super();
    this.sellerId = sellerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.sellerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.sellerId = reader.readInt();
  }
}

export class WatchQuestListMessage extends QuestListMessage {
  public static id = 9128;

  public playerId: number | undefined = 0;

  public constructor(
    finishedQuestsIds?: number[] | undefined,
    finishedQuestsCounts?: number[] | undefined,
    activeQuests?: QuestActiveInformations[] | undefined,
    reinitDoneQuestsIds?: number[] | undefined,
    playerId?: number | undefined,
  ) {
    super(
      finishedQuestsIds,
      finishedQuestsCounts,
      activeQuests,
      reinitDoneQuestsIds,
    );
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
  }
}

export class OrnamentSelectedMessage extends DofusMessage {
  public static id: number = 7637;

  public ornamentId: number | undefined = 0;

  public constructor(ornamentId?: number | undefined) {
    super();
    this.ornamentId = ornamentId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.ornamentId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ornamentId = reader.readVarShort();
  }
}

export class GuildSummaryMessage extends PaginationAnswerAbstractMessage {
  public static id = 4399;

  public guilds: GuildFactSheetInformations[] | undefined;

  public constructor(
    count?: number | undefined,
    total?: number | undefined,
    offset?: number | undefined,
    guilds?: GuildFactSheetInformations[] | undefined,
  ) {
    super(count, total, offset);
    this.guilds = guilds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.guilds!.length);
    this.guilds!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guilds = [];
    const countGuilds = reader.readShort();
    for (let i: number = 0; i < countGuilds; i++) {
      const type: GuildFactSheetInformations = new GuildFactSheetInformations();
      type.deserialize(reader);
      this.guilds.push(type);
    }
  }
}

export class AllianceBulletinMessage extends BulletinMessage {
  public static id = 4021;

  public constructor(
    memberName?: string | undefined,
    memberId?: number | undefined,
    timestamp?: number | undefined,
    content?: string | undefined,
    lastNotifiedTimestamp?: number | undefined,
  ) {
    super(memberName, memberId, timestamp, content, lastNotifiedTimestamp);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ObjectAveragePricesErrorMessage extends DofusMessage {
  public static id: number = 9392;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PresetUseResultWithMissingIdsMessage extends PresetUseResultMessage {
  public static id = 2217;

  public missingIds: number[] | undefined;

  public constructor(
    code?: number | undefined,
    presetId?: number | undefined,
    missingIds?: number[] | undefined,
  ) {
    super(code, presetId);
    this.missingIds = missingIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.missingIds!.length);
    this.missingIds!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.missingIds = [];
    const countMissingIds = reader.readShort();
    for (let i: number = 0; i < countMissingIds; i++) {
      this.missingIds.push(reader.readVarShort());
    }
  }
}

export class OrnamentSelectErrorMessage extends DofusMessage {
  public static id: number = 4098;

  public reason: number | undefined = 0;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class GameContextMoveElementMessage extends DofusMessage {
  public static id: number = 5628;

  public movement: EntityMovementInformations | undefined;

  public constructor(movement?: EntityMovementInformations | undefined) {
    super();
    this.movement = movement;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.movement!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.movement = new EntityMovementInformations();
    this.movement!.deserialize(reader);
  }
}

export class ExchangeTypesItemsExchangerDescriptionForUserMessage extends DofusMessage {
  public static id: number = 6681;

  public itemTypeDescriptions: BidExchangerObjectInfo[] | undefined;
  public objectType: number | undefined = 0;

  public constructor(
    itemTypeDescriptions?: BidExchangerObjectInfo[] | undefined,
    objectType?: number | undefined,
  ) {
    super();
    this.itemTypeDescriptions = itemTypeDescriptions;
    this.objectType = objectType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.itemTypeDescriptions!.length);
    this.itemTypeDescriptions!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeInt(this.objectType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.itemTypeDescriptions = [];
    const countItemTypeDescriptions = reader.readShort();
    for (let i: number = 0; i < countItemTypeDescriptions; i++) {
      const type: BidExchangerObjectInfo = new BidExchangerObjectInfo();
      type.deserialize(reader);
      this.itemTypeDescriptions.push(type);
    }
    this.objectType = reader.readInt();
  }
}

export class FriendsListMessage extends DofusMessage {
  public static id: number = 6666;

  public friendsList: FriendInformations[] | undefined;

  public constructor(friendsList?: FriendInformations[] | undefined) {
    super();
    this.friendsList = friendsList;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.friendsList!.length);
    this.friendsList!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.friendsList = [];
    const countFriendsList = reader.readShort();
    for (let i: number = 0; i < countFriendsList; i++) {
      const friendsListTypeId: number = reader.readShort();
      const type: FriendInformations = new types[
        friendsListTypeId
      ]() as FriendInformations;
      type.deserialize(reader);
      this.friendsList.push(type);
    }
  }
}

export class PrismInfoCloseMessage extends DofusMessage {
  public static id: number = 2031;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PrismFightDefenderLeaveMessage extends DofusMessage {
  public static id: number = 9481;

  public fighterToRemoveId: number | undefined = 0;
  public fightId: number | undefined = 0;
  public subAreaId: number | undefined = 0;

  public constructor(
    fighterToRemoveId?: number | undefined,
    fightId?: number | undefined,
    subAreaId?: number | undefined,
  ) {
    super();
    this.fighterToRemoveId = fighterToRemoveId;
    this.fightId = fightId;
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.fighterToRemoveId!);
    writer.writeVarShort(this.fightId!);
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fighterToRemoveId = reader.readVarLong();
    this.fightId = reader.readVarShort();
    this.subAreaId = reader.readVarShort();
  }
}

export class GameRolePlayPlayerLifeStatusMessage extends DofusMessage {
  public static id: number = 7689;

  public phenixMapId: number | undefined = 0;
  public state: number | undefined = 0;

  public constructor(
    phenixMapId?: number | undefined,
    state?: number | undefined,
  ) {
    super();
    this.phenixMapId = phenixMapId;
    this.state = state;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.phenixMapId!);
    writer.writeByte(this.state!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.phenixMapId = reader.readDouble();
    this.state = reader.readByte();
  }
}

export class FriendGuildWarnOnAchievementCompleteStateMessage extends DofusMessage {
  public static id: number = 8244;

  public enable: boolean | undefined = false;

  public constructor(enable?: boolean | undefined) {
    super();
    this.enable = enable;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
  }
}

export class WatchQuestStepInfoMessage extends QuestStepInfoMessage {
  public static id = 2727;

  public playerId: number | undefined = 0;

  public constructor(
    infos?: QuestActiveInformations | undefined,
    playerId?: number | undefined,
  ) {
    super(infos);
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
  }
}

export class BreachInvitationCloseMessage extends DofusMessage {
  public static id: number = 3262;

  public host: CharacterMinimalInformations | undefined;

  public constructor(host?: CharacterMinimalInformations | undefined) {
    super();
    this.host = host;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.host!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.host = new CharacterMinimalInformations();
    this.host!.deserialize(reader);
  }
}

export class LockableStateUpdateHouseDoorMessage extends LockableStateUpdateAbstractMessage {
  public static id = 7958;

  public instanceId: number | undefined = 0;
  public secondHand: boolean | undefined = false;
  public houseId: number | undefined = 0;

  public constructor(
    locked?: boolean | undefined,
    instanceId?: number | undefined,
    secondHand?: boolean | undefined,
    houseId?: number | undefined,
  ) {
    super(locked);
    this.instanceId = instanceId;
    this.secondHand = secondHand;
    this.houseId = houseId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.instanceId!);
    writer.writeBoolean(this.secondHand!);
    writer.writeVarInt(this.houseId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.instanceId = reader.readInt();
    this.secondHand = reader.readBoolean();
    this.houseId = reader.readVarInt();
  }
}

export class PaddockSellBuyDialogMessage extends DofusMessage {
  public static id: number = 7880;

  public ownerId: number | undefined = 0;
  public price: number | undefined = 0;
  public bsell: boolean | undefined = false;

  public constructor(
    ownerId?: number | undefined,
    price?: number | undefined,
    bsell?: boolean | undefined,
  ) {
    super();
    this.ownerId = ownerId;
    this.price = price;
    this.bsell = bsell;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.ownerId!);
    writer.writeVarLong(this.price!);
    writer.writeBoolean(this.bsell!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ownerId = reader.readVarInt();
    this.price = reader.readVarLong();
    this.bsell = reader.readBoolean();
  }
}

export class ExchangeOkMultiCraftMessage extends DofusMessage {
  public static id: number = 2595;

  public role: number | undefined = 0;
  public otherId: number | undefined = 0;
  public initiatorId: number | undefined = 0;

  public constructor(
    role?: number | undefined,
    otherId?: number | undefined,
    initiatorId?: number | undefined,
  ) {
    super();
    this.role = role;
    this.otherId = otherId;
    this.initiatorId = initiatorId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.role!);
    writer.writeVarLong(this.otherId!);
    writer.writeVarLong(this.initiatorId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.role = reader.readByte();
    this.otherId = reader.readVarLong();
    this.initiatorId = reader.readVarLong();
  }
}

export class ExchangeWaitingResultMessage extends DofusMessage {
  public static id: number = 4369;

  public bwait: boolean | undefined = false;

  public constructor(bwait?: boolean | undefined) {
    super();
    this.bwait = bwait;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.bwait!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.bwait = reader.readBoolean();
  }
}

export class GuildApplicationIsAnsweredMessage extends DofusMessage {
  public static id: number = 33;

  public guildInformation: GuildInformations | undefined;
  public accepted: boolean | undefined = false;

  public constructor(
    guildInformation?: GuildInformations | undefined,
    accepted?: boolean | undefined,
  ) {
    super();
    this.guildInformation = guildInformation;
    this.accepted = accepted;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.guildInformation!.serialize(writer);
    writer.writeBoolean(this.accepted!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildInformation = new GuildInformations();
    this.guildInformation!.deserialize(reader);
    this.accepted = reader.readBoolean();
  }
}

export class AlreadyConnectedMessage extends DofusMessage {
  public static id: number = 5949;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class NpcDialogQuestionMessage extends DofusMessage {
  public static id: number = 8384;

  public messageId: number | undefined = 0;
  public dialogParams: string[] | undefined;
  public visibleReplies: number[] | undefined;

  public constructor(
    messageId?: number | undefined,
    dialogParams?: string[] | undefined,
    visibleReplies?: number[] | undefined,
  ) {
    super();
    this.messageId = messageId;
    this.dialogParams = dialogParams;
    this.visibleReplies = visibleReplies;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.messageId!);
    writer.writeShort(this.dialogParams!.length);
    this.dialogParams!.forEach((current: string) => writer.writeUTF(current));
    writer.writeShort(this.visibleReplies!.length);
    this.visibleReplies!.forEach((current: number) =>
      writer.writeVarInt(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.messageId = reader.readVarInt();
    this.dialogParams = [];
    const countDialogParams = reader.readShort();
    for (let i: number = 0; i < countDialogParams; i++) {
      this.dialogParams.push(reader.readUTF());
    }
    this.visibleReplies = [];
    const countVisibleReplies = reader.readShort();
    for (let i: number = 0; i < countVisibleReplies; i++) {
      this.visibleReplies.push(reader.readVarInt());
    }
  }
}

export class EmotePlayErrorMessage extends DofusMessage {
  public static id: number = 9167;

  public emoteId: number | undefined = 0;

  public constructor(emoteId?: number | undefined) {
    super();
    this.emoteId = emoteId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.emoteId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.emoteId = reader.readShort();
  }
}

export class GameRolePlayDelayedActionFinishedMessage extends DofusMessage {
  public static id: number = 6062;

  public delayTypeId: number | undefined = 0;
  public delayedCharacterId: number | undefined = 0;

  public constructor(
    delayTypeId?: number | undefined,
    delayedCharacterId?: number | undefined,
  ) {
    super();
    this.delayTypeId = delayTypeId;
    this.delayedCharacterId = delayedCharacterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.delayTypeId!);
    writer.writeDouble(this.delayedCharacterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.delayTypeId = reader.readByte();
    this.delayedCharacterId = reader.readDouble();
  }
}

export class ContactAddFailureMessage extends DofusMessage {
  public static id: number = 7999;

  public reason: number | undefined = 0;

  public constructor(reason?: number | undefined) {
    super();
    this.reason = reason;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.reason!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.reason = reader.readByte();
  }
}

export class CharacterAlignmentWarEffortProgressionMessage extends DofusMessage {
  public static id: number = 7324;

  public alignmentWarEffortPersonalDonation: number | undefined = 0;
  public alignmentWarEffortDailyDonation: number | undefined = 0;
  public alignmentWarEffortDailyLimit: number | undefined = 0;

  public constructor(
    alignmentWarEffortPersonalDonation?: number | undefined,
    alignmentWarEffortDailyDonation?: number | undefined,
    alignmentWarEffortDailyLimit?: number | undefined,
  ) {
    super();
    this.alignmentWarEffortPersonalDonation =
      alignmentWarEffortPersonalDonation;
    this.alignmentWarEffortDailyDonation = alignmentWarEffortDailyDonation;
    this.alignmentWarEffortDailyLimit = alignmentWarEffortDailyLimit;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.alignmentWarEffortPersonalDonation!);
    writer.writeVarLong(this.alignmentWarEffortDailyDonation!);
    writer.writeVarLong(this.alignmentWarEffortDailyLimit!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.alignmentWarEffortPersonalDonation = reader.readVarLong();
    this.alignmentWarEffortDailyDonation = reader.readVarLong();
    this.alignmentWarEffortDailyLimit = reader.readVarLong();
  }
}

export class AtlasPointInformationsMessage extends DofusMessage {
  public static id: number = 6676;

  public type: AtlasPointsInformations | undefined;

  public constructor(type?: AtlasPointsInformations | undefined) {
    super();
    this.type = type;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.type!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.type = new AtlasPointsInformations();
    this.type!.deserialize(reader);
  }
}

export class GuestModeMessage extends DofusMessage {
  public static id: number = 9430;

  public active: boolean | undefined = false;

  public constructor(active?: boolean | undefined) {
    super();
    this.active = active;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.active!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.active = reader.readBoolean();
  }
}

export class ObjectMovementMessage extends DofusMessage {
  public static id: number = 3421;

  public position: number | undefined = 63;
  public objectUID: number | undefined = 0;

  public constructor(
    position?: number | undefined,
    objectUID?: number | undefined,
  ) {
    super();
    this.position = position;
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.position!);
    writer.writeVarInt(this.objectUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.position = reader.readShort();
    this.objectUID = reader.readVarInt();
  }
}

export class LockableCodeResultMessage extends DofusMessage {
  public static id: number = 3222;

  public result: number | undefined = 0;

  public constructor(result?: number | undefined) {
    super();
    this.result = result;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.result!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.result = reader.readByte();
  }
}

export class ExchangeMountStableErrorMessage extends DofusMessage {
  public static id: number = 9490;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GuildFightPlayersEnemyRemoveMessage extends DofusMessage {
  public static id: number = 4301;

  public playerId: number | undefined = 0;
  public fightId: number | undefined = 0;

  public constructor(
    playerId?: number | undefined,
    fightId?: number | undefined,
  ) {
    super();
    this.playerId = playerId;
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
    writer.writeDouble(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
    this.fightId = reader.readDouble();
  }
}

export class BreachStateMessage extends DofusMessage {
  public static id: number = 5776;

  public owner: CharacterMinimalInformations | undefined;
  public saved: boolean | undefined = false;
  public bonuses: ObjectEffectInteger[] | undefined;
  public bugdet: number | undefined = 0;

  public constructor(
    owner?: CharacterMinimalInformations | undefined,
    saved?: boolean | undefined,
    bonuses?: ObjectEffectInteger[] | undefined,
    bugdet?: number | undefined,
  ) {
    super();
    this.owner = owner;
    this.saved = saved;
    this.bonuses = bonuses;
    this.bugdet = bugdet;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.owner!.serialize(writer);
    writer.writeBoolean(this.saved!);
    writer.writeShort(this.bonuses!.length);
    this.bonuses!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarInt(this.bugdet!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.owner = new CharacterMinimalInformations();
    this.owner!.deserialize(reader);
    this.saved = reader.readBoolean();
    this.bonuses = [];
    const countBonuses = reader.readShort();
    for (let i: number = 0; i < countBonuses; i++) {
      const type: ObjectEffectInteger = new ObjectEffectInteger();
      type.deserialize(reader);
      this.bonuses.push(type);
    }
    this.bugdet = reader.readVarInt();
  }
}

export class GuildInformationsGeneralMessage extends DofusMessage {
  public static id: number = 8015;

  public nbConnectedMembers: number | undefined = 0;
  public nbTotalMembers: number | undefined = 0;
  public creationDate: number | undefined = 0;
  public expNextLevelFloor: number | undefined = 0;
  public experience: number | undefined = 0;
  public abandonnedPaddock: boolean | undefined = false;
  public level: number | undefined = 0;
  public expLevelFloor: number | undefined = 0;

  public constructor(
    nbConnectedMembers?: number | undefined,
    nbTotalMembers?: number | undefined,
    creationDate?: number | undefined,
    expNextLevelFloor?: number | undefined,
    experience?: number | undefined,
    abandonnedPaddock?: boolean | undefined,
    level?: number | undefined,
    expLevelFloor?: number | undefined,
  ) {
    super();
    this.nbConnectedMembers = nbConnectedMembers;
    this.nbTotalMembers = nbTotalMembers;
    this.creationDate = creationDate;
    this.expNextLevelFloor = expNextLevelFloor;
    this.experience = experience;
    this.abandonnedPaddock = abandonnedPaddock;
    this.level = level;
    this.expLevelFloor = expLevelFloor;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.nbConnectedMembers!);
    writer.writeVarShort(this.nbTotalMembers!);
    writer.writeInt(this.creationDate!);
    writer.writeVarLong(this.expNextLevelFloor!);
    writer.writeVarLong(this.experience!);
    writer.writeBoolean(this.abandonnedPaddock!);
    writer.writeByte(this.level!);
    writer.writeVarLong(this.expLevelFloor!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.nbConnectedMembers = reader.readVarShort();
    this.nbTotalMembers = reader.readVarShort();
    this.creationDate = reader.readInt();
    this.expNextLevelFloor = reader.readVarLong();
    this.experience = reader.readVarLong();
    this.abandonnedPaddock = reader.readBoolean();
    this.level = reader.readByte();
    this.expLevelFloor = reader.readVarLong();
  }
}

export class TeleportToBuddyCloseMessage extends DofusMessage {
  public static id: number = 2991;

  public buddyId: number | undefined = 0;
  public dungeonId: number | undefined = 0;

  public constructor(
    buddyId?: number | undefined,
    dungeonId?: number | undefined,
  ) {
    super();
    this.buddyId = buddyId;
    this.dungeonId = dungeonId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.buddyId!);
    writer.writeVarShort(this.dungeonId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.buddyId = reader.readVarLong();
    this.dungeonId = reader.readVarShort();
  }
}

export class BreachBonusMessage extends DofusMessage {
  public static id: number = 1689;

  public bonus: ObjectEffectInteger | undefined;

  public constructor(bonus?: ObjectEffectInteger | undefined) {
    super();
    this.bonus = bonus;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.bonus!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.bonus = new ObjectEffectInteger();
    this.bonus!.deserialize(reader);
  }
}

export class ExchangeStartOkMulticraftCrafterMessage extends DofusMessage {
  public static id: number = 282;

  public skillId: number | undefined = 0;

  public constructor(skillId?: number | undefined) {
    super();
    this.skillId = skillId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.skillId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.skillId = reader.readVarInt();
  }
}

export class ExchangeShopStockStartedMessage extends DofusMessage {
  public static id: number = 2502;

  public objectsInfos: ObjectItemToSell[] | undefined;

  public constructor(objectsInfos?: ObjectItemToSell[] | undefined) {
    super();
    this.objectsInfos = objectsInfos;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objectsInfos!.length);
    this.objectsInfos!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectsInfos = [];
    const countObjectsInfos = reader.readShort();
    for (let i: number = 0; i < countObjectsInfos; i++) {
      const type: ObjectItemToSell = new ObjectItemToSell();
      type.deserialize(reader);
      this.objectsInfos.push(type);
    }
  }
}

export class BasicTimeMessage extends DofusMessage {
  public static id: number = 7278;

  public timezoneOffset: number | undefined = 0;
  public timestamp: number | undefined = 0;

  public constructor(
    timezoneOffset?: number | undefined,
    timestamp?: number | undefined,
  ) {
    super();
    this.timezoneOffset = timezoneOffset;
    this.timestamp = timestamp;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.timezoneOffset!);
    writer.writeDouble(this.timestamp!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.timezoneOffset = reader.readShort();
    this.timestamp = reader.readDouble();
  }
}

export class ZaapDestinationsMessage extends TeleportDestinationsMessage {
  public static id = 4167;

  public spawnMapId: number | undefined = 0;

  public constructor(
    destinations?: TeleportDestination[] | undefined,
    type?: number | undefined,
    spawnMapId?: number | undefined,
  ) {
    super(destinations, type);
    this.spawnMapId = spawnMapId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.spawnMapId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.spawnMapId = reader.readDouble();
  }
}

export class GuildInfosUpgradeMessage extends DofusMessage {
  public static id: number = 2887;

  public taxCollectorPods: number | undefined = 0;
  public spellLevel: number[] | undefined;
  public taxCollectorDamagesBonuses: number | undefined = 0;
  public taxCollectorLifePoints: number | undefined = 0;
  public boostPoints: number | undefined = 0;
  public taxCollectorsCount: number | undefined = 0;
  public maxTaxCollectorsCount: number | undefined = 0;
  public taxCollectorProspecting: number | undefined = 0;
  public taxCollectorWisdom: number | undefined = 0;
  public spellId: number[] | undefined;

  public constructor(
    taxCollectorPods?: number | undefined,
    spellLevel?: number[] | undefined,
    taxCollectorDamagesBonuses?: number | undefined,
    taxCollectorLifePoints?: number | undefined,
    boostPoints?: number | undefined,
    taxCollectorsCount?: number | undefined,
    maxTaxCollectorsCount?: number | undefined,
    taxCollectorProspecting?: number | undefined,
    taxCollectorWisdom?: number | undefined,
    spellId?: number[] | undefined,
  ) {
    super();
    this.taxCollectorPods = taxCollectorPods;
    this.spellLevel = spellLevel;
    this.taxCollectorDamagesBonuses = taxCollectorDamagesBonuses;
    this.taxCollectorLifePoints = taxCollectorLifePoints;
    this.boostPoints = boostPoints;
    this.taxCollectorsCount = taxCollectorsCount;
    this.maxTaxCollectorsCount = maxTaxCollectorsCount;
    this.taxCollectorProspecting = taxCollectorProspecting;
    this.taxCollectorWisdom = taxCollectorWisdom;
    this.spellId = spellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.taxCollectorPods!);
    writer.writeShort(this.spellLevel!.length);
    this.spellLevel!.forEach((current: number) => writer.writeShort(current));
    writer.writeVarShort(this.taxCollectorDamagesBonuses!);
    writer.writeVarShort(this.taxCollectorLifePoints!);
    writer.writeVarShort(this.boostPoints!);
    writer.writeByte(this.taxCollectorsCount!);
    writer.writeByte(this.maxTaxCollectorsCount!);
    writer.writeVarShort(this.taxCollectorProspecting!);
    writer.writeVarShort(this.taxCollectorWisdom!);
    writer.writeShort(this.spellId!.length);
    this.spellId!.forEach((current: number) => writer.writeVarShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.taxCollectorPods = reader.readVarShort();
    this.spellLevel = [];
    const countSpellLevel = reader.readShort();
    for (let i: number = 0; i < countSpellLevel; i++) {
      this.spellLevel.push(reader.readShort());
    }
    this.taxCollectorDamagesBonuses = reader.readVarShort();
    this.taxCollectorLifePoints = reader.readVarShort();
    this.boostPoints = reader.readVarShort();
    this.taxCollectorsCount = reader.readByte();
    this.maxTaxCollectorsCount = reader.readByte();
    this.taxCollectorProspecting = reader.readVarShort();
    this.taxCollectorWisdom = reader.readVarShort();
    this.spellId = [];
    const countSpellId = reader.readShort();
    for (let i: number = 0; i < countSpellId; i++) {
      this.spellId.push(reader.readVarShort());
    }
  }
}

export class ExchangeBidHouseItemAddOkMessage extends DofusMessage {
  public static id: number = 7844;

  public itemInfo: ObjectItemToSellInBid | undefined;

  public constructor(itemInfo?: ObjectItemToSellInBid | undefined) {
    super();
    this.itemInfo = itemInfo;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.itemInfo!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.itemInfo = new ObjectItemToSellInBid();
    this.itemInfo!.deserialize(reader);
  }
}

export class GameRolePlayArenaRegistrationStatusMessage extends DofusMessage {
  public static id: number = 4323;

  public battleMode: number | undefined = 3;
  public step: number | undefined = 0;
  public registered: boolean | undefined = false;

  public constructor(
    battleMode?: number | undefined,
    step?: number | undefined,
    registered?: boolean | undefined,
  ) {
    super();
    this.battleMode = battleMode;
    this.step = step;
    this.registered = registered;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.battleMode!);
    writer.writeByte(this.step!);
    writer.writeBoolean(this.registered!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.battleMode = reader.readInt();
    this.step = reader.readByte();
    this.registered = reader.readBoolean();
  }
}

export class PartyEntityUpdateLightMessage extends PartyUpdateLightMessage {
  public static id = 6677;

  public indexId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    id_?: number | undefined,
    regenRate?: number | undefined,
    maxLifePoints?: number | undefined,
    lifePoints?: number | undefined,
    prospecting?: number | undefined,
    indexId?: number | undefined,
  ) {
    super(partyId, id_, regenRate, maxLifePoints, lifePoints, prospecting);
    this.indexId = indexId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.indexId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.indexId = reader.readByte();
  }
}

export class GameContextMoveMultipleElementsMessage extends DofusMessage {
  public static id: number = 2401;

  public movements: EntityMovementInformations[] | undefined;

  public constructor(movements?: EntityMovementInformations[] | undefined) {
    super();
    this.movements = movements;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.movements!.length);
    this.movements!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.movements = [];
    const countMovements = reader.readShort();
    for (let i: number = 0; i < countMovements; i++) {
      const type: EntityMovementInformations = new EntityMovementInformations();
      type.deserialize(reader);
      this.movements.push(type);
    }
  }
}

export class PartyFollowStatusUpdateMessage extends AbstractPartyMessage {
  public static id = 4806;

  public followedId: number | undefined = 0;
  public success: boolean | undefined = false;
  public isFollowed: boolean | undefined = false;

  public constructor(
    partyId?: number | undefined,
    followedId?: number | undefined,
    success?: boolean | undefined,
    isFollowed?: boolean | undefined,
  ) {
    super(partyId);
    this.followedId = followedId;
    this.success = success;
    this.isFollowed = isFollowed;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.followedId!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.success!);
    box0 = setFlag(box0, 1, this.isFollowed!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.followedId = reader.readVarLong();
    const box0 = reader.readByte();
    this.success = getFlag(box0, 0);
    this.isFollowed = getFlag(box0, 1);
  }
}

export class PrismFightAddedMessage extends DofusMessage {
  public static id: number = 5778;

  public fight: PrismFightersInformation | undefined;

  public constructor(fight?: PrismFightersInformation | undefined) {
    super();
    this.fight = fight;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.fight!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fight = new PrismFightersInformation();
    this.fight!.deserialize(reader);
  }
}

export class ItemForPresetUpdateMessage extends DofusMessage {
  public static id: number = 2377;

  public presetItem: ItemForPreset | undefined;
  public presetId: number | undefined = 0;

  public constructor(
    presetItem?: ItemForPreset | undefined,
    presetId?: number | undefined,
  ) {
    super();
    this.presetItem = presetItem;
    this.presetId = presetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.presetItem!.serialize(writer);
    writer.writeShort(this.presetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.presetItem = new ItemForPreset();
    this.presetItem!.deserialize(reader);
    this.presetId = reader.readShort();
  }
}

export class SetCharacterRestrictionsMessage extends DofusMessage {
  public static id: number = 7853;

  public restrictions: ActorRestrictionsInformations | undefined;
  public actorId: number | undefined = 0;

  public constructor(
    restrictions?: ActorRestrictionsInformations | undefined,
    actorId?: number | undefined,
  ) {
    super();
    this.restrictions = restrictions;
    this.actorId = actorId;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.restrictions!.serialize(writer);
    writer.writeDouble(this.actorId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.restrictions = new ActorRestrictionsInformations();
    this.restrictions!.deserialize(reader);
    this.actorId = reader.readDouble();
  }
}

export class PartyKickedByMessage extends AbstractPartyMessage {
  public static id = 8439;

  public kickerId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    kickerId?: number | undefined,
  ) {
    super(partyId);
    this.kickerId = kickerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.kickerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.kickerId = reader.readVarLong();
  }
}

export class QuestStepStartedMessage extends DofusMessage {
  public static id: number = 6142;

  public stepId: number | undefined = 0;
  public questId: number | undefined = 0;

  public constructor(
    stepId?: number | undefined,
    questId?: number | undefined,
  ) {
    super();
    this.stepId = stepId;
    this.questId = questId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.stepId!);
    writer.writeVarShort(this.questId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.stepId = reader.readVarShort();
    this.questId = reader.readVarShort();
  }
}

export class AllianceMembershipMessage extends AllianceJoinedMessage {
  public static id = 813;

  public constructor(
    enabled?: boolean | undefined,
    leadingGuildId?: number | undefined,
    allianceInfo?: AllianceInformations | undefined,
  ) {
    super(enabled, leadingGuildId, allianceInfo);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class InviteInHavenBagClosedMessage extends DofusMessage {
  public static id: number = 5490;

  public hostInformations: CharacterMinimalInformations | undefined;

  public constructor(
    hostInformations?: CharacterMinimalInformations | undefined,
  ) {
    super();
    this.hostInformations = hostInformations;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.hostInformations!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.hostInformations = new CharacterMinimalInformations();
    this.hostInformations!.deserialize(reader);
  }
}

export class ExchangeBidHouseGenericItemAddedMessage extends DofusMessage {
  public static id: number = 7602;

  public objGenericId: number | undefined = 0;

  public constructor(objGenericId?: number | undefined) {
    super();
    this.objGenericId = objGenericId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.objGenericId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objGenericId = reader.readVarShort();
  }
}

export class AlignmentRankUpdateMessage extends DofusMessage {
  public static id: number = 7764;

  public verbose: boolean | undefined = false;
  public alignmentRank: number | undefined = 0;

  public constructor(
    verbose?: boolean | undefined,
    alignmentRank?: number | undefined,
  ) {
    super();
    this.verbose = verbose;
    this.alignmentRank = alignmentRank;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.verbose!);
    writer.writeByte(this.alignmentRank!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.verbose = reader.readBoolean();
    this.alignmentRank = reader.readByte();
  }
}

export class AccessoryPreviewErrorMessage extends DofusMessage {
  public static id: number = 2038;

  public error: number | undefined = 0;

  public constructor(error?: number | undefined) {
    super();
    this.error = error;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.error!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.error = reader.readByte();
  }
}

export class CharacterSelectedForceMessage extends DofusMessage {
  public static id: number = 6158;

  public id_: number | undefined = 0;

  public constructor(id_?: number | undefined) {
    super();
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readInt();
  }
}

export class GuildFactsRequestMessage extends DofusMessage {
  public static id: number = 4628;

  public guildId: number | undefined = 0;

  public constructor(guildId?: number | undefined) {
    super();
    this.guildId = guildId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.guildId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildId = reader.readVarInt();
  }
}

export class ClientKeyMessage extends DofusMessage {
  public static id: number = 7137;

  public key: string | undefined;

  public constructor(key?: string | undefined) {
    super();
    this.key = key;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.key!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.key = reader.readUTF();
  }
}

export class NicknameChoiceRequestMessage extends DofusMessage {
  public static id: number = 3297;

  public nickname: string | undefined;

  public constructor(nickname?: string | undefined) {
    super();
    this.nickname = nickname;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.nickname!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.nickname = reader.readUTF();
  }
}

export class AllianceFactsRequestMessage extends DofusMessage {
  public static id: number = 8146;

  public allianceId: number | undefined = 0;

  public constructor(allianceId?: number | undefined) {
    super();
    this.allianceId = allianceId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.allianceId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceId = reader.readVarInt();
  }
}

export class TeleportHavenBagRequestMessage extends DofusMessage {
  public static id: number = 5838;

  public guestId: number | undefined = 0;

  public constructor(guestId?: number | undefined) {
    super();
    this.guestId = guestId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.guestId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guestId = reader.readVarLong();
  }
}

export class GameMapChangeOrientationRequestMessage extends DofusMessage {
  public static id: number = 4770;

  public direction: number | undefined = 1;

  public constructor(direction?: number | undefined) {
    super();
    this.direction = direction;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.direction!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.direction = reader.readByte();
  }
}

export class ExchangeRequestOnTaxCollectorMessage extends DofusMessage {
  public static id: number = 8267;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ExchangeOnHumanVendorRequestMessage extends DofusMessage {
  public static id: number = 4359;

  public humanVendorCell: number | undefined = 0;
  public humanVendorId: number | undefined = 0;

  public constructor(
    humanVendorCell?: number | undefined,
    humanVendorId?: number | undefined,
  ) {
    super();
    this.humanVendorCell = humanVendorCell;
    this.humanVendorId = humanVendorId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.humanVendorCell!);
    writer.writeVarLong(this.humanVendorId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.humanVendorCell = reader.readVarShort();
    this.humanVendorId = reader.readVarLong();
  }
}

export class ExchangeBuyMessage extends DofusMessage {
  public static id: number = 9589;

  public quantity: number | undefined = 0;
  public objectToBuyId: number | undefined = 0;

  public constructor(
    quantity?: number | undefined,
    objectToBuyId?: number | undefined,
  ) {
    super();
    this.quantity = quantity;
    this.objectToBuyId = objectToBuyId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.quantity!);
    writer.writeVarInt(this.objectToBuyId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarInt();
    this.objectToBuyId = reader.readVarInt();
  }
}

export class EnterHavenBagRequestMessage extends DofusMessage {
  public static id: number = 8214;

  public havenBagOwner: number | undefined = 0;

  public constructor(havenBagOwner?: number | undefined) {
    super();
    this.havenBagOwner = havenBagOwner;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.havenBagOwner!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.havenBagOwner = reader.readVarLong();
  }
}

export class ErrorMapNotFoundMessage extends DofusMessage {
  public static id: number = 1147;

  public mapId: number | undefined = 0;

  public constructor(mapId?: number | undefined) {
    super();
    this.mapId = mapId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.mapId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapId = reader.readDouble();
  }
}

export class ExchangeRequestMessage extends DofusMessage {
  public static id: number = 289;

  public exchangeType: number | undefined = 0;

  public constructor(exchangeType?: number | undefined) {
    super();
    this.exchangeType = exchangeType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.exchangeType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.exchangeType = reader.readByte();
  }
}

export class ExchangePlayerRequestMessage extends ExchangeRequestMessage {
  public static id = 2400;

  public target: number | undefined = 0;

  public constructor(
    exchangeType?: number | undefined,
    target?: number | undefined,
  ) {
    super(exchangeType);
    this.target = target;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.target!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.target = reader.readVarLong();
  }
}

export class GameRolePlayPlayerFightRequestMessage extends DofusMessage {
  public static id: number = 6364;

  public targetCellId: number | undefined = 0;
  public friendly: boolean | undefined = false;
  public targetId: number | undefined = 0;

  public constructor(
    targetCellId?: number | undefined,
    friendly?: boolean | undefined,
    targetId?: number | undefined,
  ) {
    super();
    this.targetCellId = targetCellId;
    this.friendly = friendly;
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.targetCellId!);
    writer.writeBoolean(this.friendly!);
    writer.writeVarLong(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetCellId = reader.readShort();
    this.friendly = reader.readBoolean();
    this.targetId = reader.readVarLong();
  }
}

export class ExchangePlayerMultiCraftRequestMessage extends ExchangeRequestMessage {
  public static id = 6947;

  public skillId: number | undefined = 0;
  public target: number | undefined = 0;

  public constructor(
    exchangeType?: number | undefined,
    skillId?: number | undefined,
    target?: number | undefined,
  ) {
    super(exchangeType);
    this.skillId = skillId;
    this.target = target;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.skillId!);
    writer.writeVarLong(this.target!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.skillId = reader.readVarInt();
    this.target = reader.readVarLong();
  }
}

export class ExchangeObjectMoveMessage extends DofusMessage {
  public static id: number = 5229;

  public quantity: number | undefined = 0;
  public objectUID: number | undefined = 0;

  public constructor(
    quantity?: number | undefined,
    objectUID?: number | undefined,
  ) {
    super();
    this.quantity = quantity;
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.quantity!);
    writer.writeVarInt(this.objectUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarInt();
    this.objectUID = reader.readVarInt();
  }
}

export class ExchangeObjectMovePricedMessage extends ExchangeObjectMoveMessage {
  public static id = 1384;

  public price: number | undefined = 0;

  public constructor(
    quantity?: number | undefined,
    objectUID?: number | undefined,
    price?: number | undefined,
  ) {
    super(quantity, objectUID);
    this.price = price;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.price!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.price = reader.readVarLong();
  }
}

export class ExchangeStartAsVendorMessage extends DofusMessage {
  public static id: number = 6819;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PortalUseRequestMessage extends DofusMessage {
  public static id: number = 1831;

  public portalId: number | undefined = 0;

  public constructor(portalId?: number | undefined) {
    super();
    this.portalId = portalId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.portalId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.portalId = reader.readVarInt();
  }
}

export class ExchangeSellMessage extends DofusMessage {
  public static id: number = 5196;

  public quantity: number | undefined = 0;
  public objectToSellId: number | undefined = 0;

  public constructor(
    quantity?: number | undefined,
    objectToSellId?: number | undefined,
  ) {
    super();
    this.quantity = quantity;
    this.objectToSellId = objectToSellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.quantity!);
    writer.writeVarInt(this.objectToSellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarInt();
    this.objectToSellId = reader.readVarInt();
  }
}

export class GameRolePlayFreeSoulRequestMessage extends DofusMessage {
  public static id: number = 2760;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class LeaveDialogRequestMessage extends DofusMessage {
  public static id: number = 6682;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class TeleportHavenBagAnswerMessage extends DofusMessage {
  public static id: number = 597;

  public accept: boolean | undefined = false;

  public constructor(accept?: boolean | undefined) {
    super();
    this.accept = accept;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.accept!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accept = reader.readBoolean();
  }
}

export class KickHavenBagRequestMessage extends DofusMessage {
  public static id: number = 188;

  public guestId: number | undefined = 0;

  public constructor(guestId?: number | undefined) {
    super();
    this.guestId = guestId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.guestId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guestId = reader.readVarLong();
  }
}

export class NpcGenericActionRequestMessage extends DofusMessage {
  public static id: number = 1598;

  public npcMapId: number | undefined = 0;
  public npcActionId: number | undefined = 0;
  public npcId: number | undefined = 0;

  public constructor(
    npcMapId?: number | undefined,
    npcActionId?: number | undefined,
    npcId?: number | undefined,
  ) {
    super();
    this.npcMapId = npcMapId;
    this.npcActionId = npcActionId;
    this.npcId = npcId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.npcMapId!);
    writer.writeByte(this.npcActionId!);
    writer.writeInt(this.npcId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.npcMapId = reader.readDouble();
    this.npcActionId = reader.readByte();
    this.npcId = reader.readInt();
  }
}

export class GameRolePlayTaxCollectorFightRequestMessage extends DofusMessage {
  public static id: number = 598;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GameRolePlayPlayerFightFriendlyAnswerMessage extends DofusMessage {
  public static id: number = 9468;

  public accept: boolean | undefined = false;
  public fightId: number | undefined = 0;

  public constructor(
    accept?: boolean | undefined,
    fightId?: number | undefined,
  ) {
    super();
    this.accept = accept;
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.accept!);
    writer.writeVarShort(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accept = reader.readBoolean();
    this.fightId = reader.readVarShort();
  }
}

export class ExchangeShowVendorTaxMessage extends DofusMessage {
  public static id: number = 673;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ExchangeRequestOnShopStockMessage extends DofusMessage {
  public static id: number = 67;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class HouseTeleportRequestMessage extends DofusMessage {
  public static id: number = 4012;

  public houseInstanceId: number | undefined = 0;
  public houseId: number | undefined = 0;

  public constructor(
    houseInstanceId?: number | undefined,
    houseId?: number | undefined,
  ) {
    super();
    this.houseInstanceId = houseInstanceId;
    this.houseId = houseId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.houseInstanceId!);
    writer.writeVarInt(this.houseId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.houseInstanceId = reader.readInt();
    this.houseId = reader.readVarInt();
  }
}

export class FriendJoinRequestMessage extends DofusMessage {
  public static id: number = 535;

  public target: AbstractPlayerSearchInformation | undefined;

  public constructor(target?: AbstractPlayerSearchInformation | undefined) {
    super();
    this.target = target;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.target!.id);
    this.target!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const targetTypeId: number = reader.readShort();
    this.target = new types[targetTypeId]() as AbstractPlayerSearchInformation;
    this.target!.deserialize(reader);
  }
}

export class FriendSpouseFollowWithCompassRequestMessage extends DofusMessage {
  public static id: number = 8825;

  public enable: boolean | undefined = false;

  public constructor(enable?: boolean | undefined) {
    super();
    this.enable = enable;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
  }
}

export class SocialNoticeSetRequestMessage extends DofusMessage {
  public static id: number = 2825;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GuildBulletinSetRequestMessage extends SocialNoticeSetRequestMessage {
  public static id = 7121;

  public notifyMembers: boolean | undefined = false;
  public content: string | undefined;

  public constructor(
    notifyMembers?: boolean | undefined,
    content?: string | undefined,
  ) {
    super();
    this.notifyMembers = notifyMembers;
    this.content = content;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.notifyMembers!);
    writer.writeUTF(this.content!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.notifyMembers = reader.readBoolean();
    this.content = reader.readUTF();
  }
}

export class GuildSpellUpgradeRequestMessage extends DofusMessage {
  public static id: number = 8207;

  public spellId: number | undefined = 0;

  public constructor(spellId?: number | undefined) {
    super();
    this.spellId = spellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.spellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.spellId = reader.readInt();
  }
}

export class GuildCharacsUpgradeRequestMessage extends DofusMessage {
  public static id: number = 3240;

  public charaTypeTarget: number | undefined = 0;

  public constructor(charaTypeTarget?: number | undefined) {
    super();
    this.charaTypeTarget = charaTypeTarget;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.charaTypeTarget!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.charaTypeTarget = reader.readByte();
  }
}

export class SpouseGetInformationsMessage extends DofusMessage {
  public static id: number = 2446;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class WarnOnPermaDeathMessage extends DofusMessage {
  public static id: number = 9760;

  public enable: boolean | undefined = false;

  public constructor(enable?: boolean | undefined) {
    super();
    this.enable = enable;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
  }
}

export class GuildGetInformationsMessage extends DofusMessage {
  public static id: number = 5805;

  public infoType: number | undefined = 0;

  public constructor(infoType?: number | undefined) {
    super();
    this.infoType = infoType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.infoType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.infoType = reader.readByte();
  }
}

export class FriendSetWarnOnConnectionMessage extends DofusMessage {
  public static id: number = 6228;

  public enable: boolean | undefined = false;

  public constructor(enable?: boolean | undefined) {
    super();
    this.enable = enable;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
  }
}

export class IgnoredGetListMessage extends DofusMessage {
  public static id: number = 4403;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PaginationRequestAbstractMessage extends DofusMessage {
  public static id: number = 789;

  public count: number | undefined = 0;
  public offset: number | undefined = 0;

  public constructor(count?: number | undefined, offset?: number | undefined) {
    super();
    this.count = count;
    this.offset = offset;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUInt(this.count!);
    writer.writeDouble(this.offset!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.count = reader.readUInt();
    this.offset = reader.readDouble();
  }
}

export class GuildListApplicationRequestMessage extends PaginationRequestAbstractMessage {
  public static id = 2316;

  public constructor(count?: number | undefined, offset?: number | undefined) {
    super(count, offset);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GuildMotdSetRequestMessage extends SocialNoticeSetRequestMessage {
  public static id = 3391;

  public content: string | undefined;

  public constructor(content?: string | undefined) {
    super();
    this.content = content;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.content!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.content = reader.readUTF();
  }
}

export class GuildMemberSetWarnOnConnectionMessage extends DofusMessage {
  public static id: number = 4147;

  public enable: boolean | undefined = false;

  public constructor(enable?: boolean | undefined) {
    super();
    this.enable = enable;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
  }
}

export class GuildApplicationAnswerMessage extends DofusMessage {
  public static id: number = 5404;

  public playerId: number | undefined = 0;
  public accepted: boolean | undefined = false;

  public constructor(
    playerId?: number | undefined,
    accepted?: boolean | undefined,
  ) {
    super();
    this.playerId = playerId;
    this.accepted = accepted;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.playerId!);
    writer.writeBoolean(this.accepted!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarInt();
    this.accepted = reader.readBoolean();
  }
}

export class IgnoredDeleteRequestMessage extends DofusMessage {
  public static id: number = 2264;

  public session: boolean | undefined = false;
  public accountId: number | undefined = 0;

  public constructor(
    session?: boolean | undefined,
    accountId?: number | undefined,
  ) {
    super();
    this.session = session;
    this.accountId = accountId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.session!);
    writer.writeInt(this.accountId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.session = reader.readBoolean();
    this.accountId = reader.readInt();
  }
}

export class GuildChangeMemberParametersMessage extends DofusMessage {
  public static id: number = 3633;

  public experienceGivenPercent: number | undefined = 0;
  public rights: number | undefined = 0;
  public rank: number | undefined = 0;
  public memberId: number | undefined = 0;

  public constructor(
    experienceGivenPercent?: number | undefined,
    rights?: number | undefined,
    rank?: number | undefined,
    memberId?: number | undefined,
  ) {
    super();
    this.experienceGivenPercent = experienceGivenPercent;
    this.rights = rights;
    this.rank = rank;
    this.memberId = memberId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.experienceGivenPercent!);
    writer.writeVarInt(this.rights!);
    writer.writeVarShort(this.rank!);
    writer.writeVarLong(this.memberId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.experienceGivenPercent = reader.readByte();
    this.rights = reader.readVarInt();
    this.rank = reader.readVarShort();
    this.memberId = reader.readVarLong();
  }
}

export class UpdateRecruitmentInformationMessage extends DofusMessage {
  public static id: number = 3169;

  public recruitmentData: GuildRecruitmentInformation | undefined;

  public constructor(
    recruitmentData?: GuildRecruitmentInformation | undefined,
  ) {
    super();
    this.recruitmentData = recruitmentData;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.recruitmentData!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.recruitmentData = new GuildRecruitmentInformation();
    this.recruitmentData!.deserialize(reader);
  }
}

export class GuildFightJoinRequestMessage extends DofusMessage {
  public static id: number = 9050;

  public taxCollectorId: number | undefined = 0;

  public constructor(taxCollectorId?: number | undefined) {
    super();
    this.taxCollectorId = taxCollectorId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.taxCollectorId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.taxCollectorId = reader.readDouble();
  }
}

export class FriendDeleteRequestMessage extends DofusMessage {
  public static id: number = 7400;

  public accountId: number | undefined = 0;

  public constructor(accountId?: number | undefined) {
    super();
    this.accountId = accountId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.accountId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accountId = reader.readInt();
  }
}

export class ContactLookRequestMessage extends DofusMessage {
  public static id: number = 9165;

  public contactType: number | undefined = 0;
  public requestId: number | undefined = 0;

  public constructor(
    contactType?: number | undefined,
    requestId?: number | undefined,
  ) {
    super();
    this.contactType = contactType;
    this.requestId = requestId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.contactType!);
    writer.writeByte(this.requestId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.contactType = reader.readByte();
    this.requestId = reader.readByte();
  }
}

export class ContactLookRequestByIdMessage extends ContactLookRequestMessage {
  public static id = 7749;

  public playerId: number | undefined = 0;

  public constructor(
    contactType?: number | undefined,
    requestId?: number | undefined,
    playerId?: number | undefined,
  ) {
    super(contactType, requestId);
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
  }
}

export class FriendAddRequestMessage extends DofusMessage {
  public static id: number = 6214;

  public target: AbstractPlayerSearchInformation | undefined;

  public constructor(target?: AbstractPlayerSearchInformation | undefined) {
    super();
    this.target = target;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.target!.id);
    this.target!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const targetTypeId: number = reader.readShort();
    this.target = new types[targetTypeId]() as AbstractPlayerSearchInformation;
    this.target!.deserialize(reader);
  }
}

export class PlayerStatusUpdateRequestMessage extends DofusMessage {
  public static id: number = 1504;

  public status: PlayerStatus | undefined;

  public constructor(status?: PlayerStatus | undefined) {
    super();
    this.status = status;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.status!.id);
    this.status!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const statusTypeId: number = reader.readShort();
    this.status = new types[statusTypeId]() as PlayerStatus;
    this.status!.deserialize(reader);
  }
}

export class GuildPaddockTeleportRequestMessage extends DofusMessage {
  public static id: number = 7914;

  public paddockId: number | undefined = 0;

  public constructor(paddockId?: number | undefined) {
    super();
    this.paddockId = paddockId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.paddockId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.paddockId = reader.readDouble();
  }
}

export class IgnoredAddRequestMessage extends DofusMessage {
  public static id: number = 2801;

  public session: boolean | undefined = false;
  public target: AbstractPlayerSearchInformation | undefined;

  public constructor(
    session?: boolean | undefined,
    target?: AbstractPlayerSearchInformation | undefined,
  ) {
    super();
    this.session = session;
    this.target = target;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.session!);
    writer.writeShort(this.target!.id);
    this.target!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.session = reader.readBoolean();
    const targetTypeId: number = reader.readShort();
    this.target = new types[targetTypeId]() as AbstractPlayerSearchInformation;
    this.target!.deserialize(reader);
  }
}

export class GuildDeleteApplicationRequestMessage extends DofusMessage {
  public static id: number = 9896;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GuildUpdateApplicationMessage extends DofusMessage {
  public static id: number = 6940;

  public guildId: number | undefined = 0;
  public applyText: string | undefined;

  public constructor(
    guildId?: number | undefined,
    applyText?: string | undefined,
  ) {
    super();
    this.guildId = guildId;
    this.applyText = applyText;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.guildId!);
    writer.writeUTF(this.applyText!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildId = reader.readVarInt();
    this.applyText = reader.readUTF();
  }
}

export class FriendSetStatusShareMessage extends DofusMessage {
  public static id: number = 1404;

  public share: boolean | undefined = false;

  public constructor(share?: boolean | undefined) {
    super();
    this.share = share;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.share!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.share = reader.readBoolean();
  }
}

export class GuildKickRequestMessage extends DofusMessage {
  public static id: number = 3965;

  public kickedId: number | undefined = 0;

  public constructor(kickedId?: number | undefined) {
    super();
    this.kickedId = kickedId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.kickedId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.kickedId = reader.readVarLong();
  }
}

export class GuildApplicationListenMessage extends DofusMessage {
  public static id: number = 9375;

  public listen: boolean | undefined = false;

  public constructor(listen?: boolean | undefined) {
    super();
    this.listen = listen;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.listen!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.listen = reader.readBoolean();
  }
}

export class GuildJoinAutomaticallyRequestMessage extends DofusMessage {
  public static id: number = 6478;

  public guildId: number | undefined = 0;

  public constructor(guildId?: number | undefined) {
    super();
    this.guildId = guildId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.guildId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildId = reader.readInt();
  }
}

export class GuildInvitationSearchMessage extends DofusMessage {
  public static id: number = 5666;

  public target: AbstractPlayerSearchInformation | undefined;

  public constructor(target?: AbstractPlayerSearchInformation | undefined) {
    super();
    this.target = target;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.target!.id);
    this.target!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const targetTypeId: number = reader.readShort();
    this.target = new types[targetTypeId]() as AbstractPlayerSearchInformation;
    this.target!.deserialize(reader);
  }
}

export class FriendGuildSetWarnOnAchievementCompleteMessage extends DofusMessage {
  public static id: number = 2644;

  public enable: boolean | undefined = false;

  public constructor(enable?: boolean | undefined) {
    super();
    this.enable = enable;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
  }
}

export class GuildSummaryRequestMessage extends PaginationRequestAbstractMessage {
  public static id = 9211;

  public sortType: number | undefined = 0;
  public maxSuccessFilter: number | undefined = 0;
  public maxPlayerLevelFilter: number | undefined = 0;
  public criterionFilter: number[] | undefined;
  public nameFilter: string | undefined;
  public languagesFilter: number[] | undefined;
  public minPlayerLevelFilter: number | undefined = 0;
  public minLevelFilter: number | undefined = 0;
  public recruitmentTypeFilter: number[] | undefined;
  public maxLevelFilter: number | undefined = 0;
  public minSuccessFilter: number | undefined = 0;
  public hideFullFilter: boolean | undefined = false;
  public sortDescending: boolean | undefined = false;

  public constructor(
    count?: number | undefined,
    offset?: number | undefined,
    sortType?: number | undefined,
    maxSuccessFilter?: number | undefined,
    maxPlayerLevelFilter?: number | undefined,
    criterionFilter?: number[] | undefined,
    nameFilter?: string | undefined,
    languagesFilter?: number[] | undefined,
    minPlayerLevelFilter?: number | undefined,
    minLevelFilter?: number | undefined,
    recruitmentTypeFilter?: number[] | undefined,
    maxLevelFilter?: number | undefined,
    minSuccessFilter?: number | undefined,
    hideFullFilter?: boolean | undefined,
    sortDescending?: boolean | undefined,
  ) {
    super(count, offset);
    this.sortType = sortType;
    this.maxSuccessFilter = maxSuccessFilter;
    this.maxPlayerLevelFilter = maxPlayerLevelFilter;
    this.criterionFilter = criterionFilter;
    this.nameFilter = nameFilter;
    this.languagesFilter = languagesFilter;
    this.minPlayerLevelFilter = minPlayerLevelFilter;
    this.minLevelFilter = minLevelFilter;
    this.recruitmentTypeFilter = recruitmentTypeFilter;
    this.maxLevelFilter = maxLevelFilter;
    this.minSuccessFilter = minSuccessFilter;
    this.hideFullFilter = hideFullFilter;
    this.sortDescending = sortDescending;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.sortType!);
    writer.writeVarInt(this.maxSuccessFilter!);
    writer.writeShort(this.maxPlayerLevelFilter!);
    writer.writeShort(this.criterionFilter!.length);
    this.criterionFilter!.forEach((current: number) =>
      writer.writeVarInt(current),
    );
    writer.writeUTF(this.nameFilter!);
    writer.writeShort(this.languagesFilter!.length);
    this.languagesFilter!.forEach((current: number) =>
      writer.writeVarInt(current),
    );
    writer.writeShort(this.minPlayerLevelFilter!);
    writer.writeShort(this.minLevelFilter!);
    writer.writeShort(this.recruitmentTypeFilter!.length);
    this.recruitmentTypeFilter!.forEach((current: number) =>
      writer.writeByte(current),
    );
    writer.writeShort(this.maxLevelFilter!);
    writer.writeVarInt(this.minSuccessFilter!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.hideFullFilter!);
    box0 = setFlag(box0, 1, this.sortDescending!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.sortType = reader.readByte();
    this.maxSuccessFilter = reader.readVarInt();
    this.maxPlayerLevelFilter = reader.readShort();
    this.criterionFilter = [];
    const countCriterionFilter = reader.readShort();
    for (let i: number = 0; i < countCriterionFilter; i++) {
      this.criterionFilter.push(reader.readVarInt());
    }
    this.nameFilter = reader.readUTF();
    this.languagesFilter = [];
    const countLanguagesFilter = reader.readShort();
    for (let i: number = 0; i < countLanguagesFilter; i++) {
      this.languagesFilter.push(reader.readVarInt());
    }
    this.minPlayerLevelFilter = reader.readShort();
    this.minLevelFilter = reader.readShort();
    this.recruitmentTypeFilter = [];
    const countRecruitmentTypeFilter = reader.readShort();
    for (let i: number = 0; i < countRecruitmentTypeFilter; i++) {
      this.recruitmentTypeFilter.push(reader.readByte());
    }
    this.maxLevelFilter = reader.readShort();
    this.minSuccessFilter = reader.readVarInt();
    const box0 = reader.readByte();
    this.hideFullFilter = getFlag(box0, 0);
    this.sortDescending = getFlag(box0, 1);
  }
}

export class GuildInvitationMessage extends DofusMessage {
  public static id: number = 2715;

  public targetId: number | undefined = 0;

  public constructor(targetId?: number | undefined) {
    super();
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetId = reader.readVarLong();
  }
}

export class GuildGetPlayerApplicationMessage extends DofusMessage {
  public static id: number = 7226;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GuildFightLeaveRequestMessage extends DofusMessage {
  public static id: number = 5074;

  public characterId: number | undefined = 0;
  public taxCollectorId: number | undefined = 0;

  public constructor(
    characterId?: number | undefined,
    taxCollectorId?: number | undefined,
  ) {
    super();
    this.characterId = characterId;
    this.taxCollectorId = taxCollectorId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.characterId!);
    writer.writeDouble(this.taxCollectorId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.characterId = reader.readVarLong();
    this.taxCollectorId = reader.readDouble();
  }
}

export class AcquaintancesGetListMessage extends DofusMessage {
  public static id: number = 4271;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class FriendSpouseJoinRequestMessage extends DofusMessage {
  public static id: number = 3542;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class FriendSetWarnOnLevelGainMessage extends DofusMessage {
  public static id: number = 4065;

  public enable: boolean | undefined = false;

  public constructor(enable?: boolean | undefined) {
    super();
    this.enable = enable;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
  }
}

export class GuildSubmitApplicationMessage extends DofusMessage {
  public static id: number = 9276;

  public filterSearchName: string | undefined;
  public timeSpent: number | undefined = 0;
  public filterLastSort: string | undefined;
  public guildId: number | undefined = 0;
  public filterMinMaxAchievement: string | undefined;
  public applyText: string | undefined;
  public filterAmbiance: string | undefined;
  public filterMinMaxCharacterLevel: string | undefined;
  public filterPlaytime: string | undefined;
  public filterInterest: string | undefined;
  public filterMinMaxGuildLevel: string | undefined;
  public filterLanguage: string | undefined;
  public filterRecruitmentType: string | undefined;

  public constructor(
    filterSearchName?: string | undefined,
    timeSpent?: number | undefined,
    filterLastSort?: string | undefined,
    guildId?: number | undefined,
    filterMinMaxAchievement?: string | undefined,
    applyText?: string | undefined,
    filterAmbiance?: string | undefined,
    filterMinMaxCharacterLevel?: string | undefined,
    filterPlaytime?: string | undefined,
    filterInterest?: string | undefined,
    filterMinMaxGuildLevel?: string | undefined,
    filterLanguage?: string | undefined,
    filterRecruitmentType?: string | undefined,
  ) {
    super();
    this.filterSearchName = filterSearchName;
    this.timeSpent = timeSpent;
    this.filterLastSort = filterLastSort;
    this.guildId = guildId;
    this.filterMinMaxAchievement = filterMinMaxAchievement;
    this.applyText = applyText;
    this.filterAmbiance = filterAmbiance;
    this.filterMinMaxCharacterLevel = filterMinMaxCharacterLevel;
    this.filterPlaytime = filterPlaytime;
    this.filterInterest = filterInterest;
    this.filterMinMaxGuildLevel = filterMinMaxGuildLevel;
    this.filterLanguage = filterLanguage;
    this.filterRecruitmentType = filterRecruitmentType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.filterSearchName!);
    writer.writeVarInt(this.timeSpent!);
    writer.writeUTF(this.filterLastSort!);
    writer.writeVarInt(this.guildId!);
    writer.writeUTF(this.filterMinMaxAchievement!);
    writer.writeUTF(this.applyText!);
    writer.writeUTF(this.filterAmbiance!);
    writer.writeUTF(this.filterMinMaxCharacterLevel!);
    writer.writeUTF(this.filterPlaytime!);
    writer.writeUTF(this.filterInterest!);
    writer.writeUTF(this.filterMinMaxGuildLevel!);
    writer.writeUTF(this.filterLanguage!);
    writer.writeUTF(this.filterRecruitmentType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.filterSearchName = reader.readUTF();
    this.timeSpent = reader.readVarInt();
    this.filterLastSort = reader.readUTF();
    this.guildId = reader.readVarInt();
    this.filterMinMaxAchievement = reader.readUTF();
    this.applyText = reader.readUTF();
    this.filterAmbiance = reader.readUTF();
    this.filterMinMaxCharacterLevel = reader.readUTF();
    this.filterPlaytime = reader.readUTF();
    this.filterInterest = reader.readUTF();
    this.filterMinMaxGuildLevel = reader.readUTF();
    this.filterLanguage = reader.readUTF();
    this.filterRecruitmentType = reader.readUTF();
  }
}

export class FriendsGetListMessage extends DofusMessage {
  public static id: number = 3044;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GuildFightTakePlaceRequestMessage extends GuildFightJoinRequestMessage {
  public static id = 1932;

  public replacedCharacterId: number | undefined = 0;

  public constructor(
    taxCollectorId?: number | undefined,
    replacedCharacterId?: number | undefined,
  ) {
    super(taxCollectorId);
    this.replacedCharacterId = replacedCharacterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.replacedCharacterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.replacedCharacterId = reader.readVarLong();
  }
}

export class PopupWarningCloseRequestMessage extends DofusMessage {
  public static id: number = 3461;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ChatAbstractClientMessage extends DofusMessage {
  public static id: number = 1037;

  public content: string | undefined;

  public constructor(content?: string | undefined) {
    super();
    this.content = content;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.content!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.content = reader.readUTF();
  }
}

export class ChatClientPrivateMessage extends ChatAbstractClientMessage {
  public static id = 1814;

  public receiver: AbstractPlayerSearchInformation | undefined;

  public constructor(
    content?: string | undefined,
    receiver?: AbstractPlayerSearchInformation | undefined,
  ) {
    super(content);
    this.receiver = receiver;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.receiver!.id);
    this.receiver!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const receiverTypeId: number = reader.readShort();
    this.receiver = new types[
      receiverTypeId
    ]() as AbstractPlayerSearchInformation;
    this.receiver!.deserialize(reader);
  }
}

export class ChatClientPrivateWithObjectMessage extends ChatClientPrivateMessage {
  public static id = 1043;

  public objects: ObjectItem[] | undefined;

  public constructor(
    content?: string | undefined,
    receiver?: AbstractPlayerSearchInformation | undefined,
    objects?: ObjectItem[] | undefined,
  ) {
    super(content, receiver);
    this.objects = objects;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objects!.length);
    this.objects!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objects = [];
    const countObjects = reader.readShort();
    for (let i: number = 0; i < countObjects; i++) {
      const type: ObjectItem = new ObjectItem();
      type.deserialize(reader);
      this.objects.push(type);
    }
  }
}

export class MoodSmileyRequestMessage extends DofusMessage {
  public static id: number = 610;

  public smileyId: number | undefined = 0;

  public constructor(smileyId?: number | undefined) {
    super();
    this.smileyId = smileyId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.smileyId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.smileyId = reader.readVarShort();
  }
}

export class ChatSmileyRequestMessage extends DofusMessage {
  public static id: number = 9062;

  public smileyId: number | undefined = 0;

  public constructor(smileyId?: number | undefined) {
    super();
    this.smileyId = smileyId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.smileyId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.smileyId = reader.readVarShort();
  }
}

export class ChatCommunityChannelSetCommunityRequestMessage extends DofusMessage {
  public static id: number = 9201;

  public communityId: number | undefined = 0;

  public constructor(communityId?: number | undefined) {
    super();
    this.communityId = communityId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.communityId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.communityId = reader.readShort();
  }
}

export class BasicWhoIsRequestMessage extends DofusMessage {
  public static id: number = 1784;

  public target: AbstractPlayerSearchInformation | undefined;
  public verbose: boolean | undefined = false;

  public constructor(
    target?: AbstractPlayerSearchInformation | undefined,
    verbose?: boolean | undefined,
  ) {
    super();
    this.target = target;
    this.verbose = verbose;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.target!.id);
    this.target!.serialize(writer);
    writer.writeBoolean(this.verbose!);
  }

  public deserialize(reader: BinaryDataReader): void {
    const targetTypeId: number = reader.readShort();
    this.target = new types[targetTypeId]() as AbstractPlayerSearchInformation;
    this.target!.deserialize(reader);
    this.verbose = reader.readBoolean();
  }
}

export class ChatClientMultiMessage extends ChatAbstractClientMessage {
  public static id = 1382;

  public channel: number | undefined = 0;

  public constructor(
    content?: string | undefined,
    channel?: number | undefined,
  ) {
    super(content);
    this.channel = channel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.channel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.channel = reader.readByte();
  }
}

export class ChatClientMultiWithObjectMessage extends ChatClientMultiMessage {
  public static id = 1682;

  public objects: ObjectItem[] | undefined;

  public constructor(
    content?: string | undefined,
    channel?: number | undefined,
    objects?: ObjectItem[] | undefined,
  ) {
    super(content, channel);
    this.objects = objects;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objects!.length);
    this.objects!.forEach((current) => {
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objects = [];
    const countObjects = reader.readShort();
    for (let i: number = 0; i < countObjects; i++) {
      const type: ObjectItem = new ObjectItem();
      type.deserialize(reader);
      this.objects.push(type);
    }
  }
}

export class ChannelEnablingMessage extends DofusMessage {
  public static id: number = 499;

  public enable: boolean | undefined = false;
  public channel: number | undefined = 0;

  public constructor(
    enable?: boolean | undefined,
    channel?: number | undefined,
  ) {
    super();
    this.enable = enable;
    this.channel = channel;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
    writer.writeByte(this.channel!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
    this.channel = reader.readByte();
  }
}

export class NumericWhoIsRequestMessage extends DofusMessage {
  public static id: number = 4159;

  public playerId: number | undefined = 0;

  public constructor(playerId?: number | undefined) {
    super();
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
  }
}

export class PartyPledgeLoyaltyRequestMessage extends AbstractPartyMessage {
  public static id = 8034;

  public loyal: boolean | undefined = false;

  public constructor(
    partyId?: number | undefined,
    loyal?: boolean | undefined,
  ) {
    super(partyId);
    this.loyal = loyal;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.loyal!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.loyal = reader.readBoolean();
  }
}

export class PartyFollowMemberRequestMessage extends AbstractPartyMessage {
  public static id = 8603;

  public playerId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    playerId?: number | undefined,
  ) {
    super(partyId);
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
  }
}

export class PartyFollowThisMemberRequestMessage extends PartyFollowMemberRequestMessage {
  public static id = 4755;

  public enabled: boolean | undefined = false;

  public constructor(
    partyId?: number | undefined,
    playerId?: number | undefined,
    enabled?: boolean | undefined,
  ) {
    super(partyId, playerId);
    this.enabled = enabled;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enabled!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enabled = reader.readBoolean();
  }
}

export class DungeonPartyFinderAvailableDungeonsRequestMessage extends DofusMessage {
  public static id: number = 9701;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PartyRefuseInvitationMessage extends AbstractPartyMessage {
  public static id = 1520;

  public constructor(partyId?: number | undefined) {
    super(partyId);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PartyNameSetRequestMessage extends AbstractPartyMessage {
  public static id = 3956;

  public partyName: string | undefined;

  public constructor(
    partyId?: number | undefined,
    partyName?: string | undefined,
  ) {
    super(partyId);
    this.partyName = partyName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.partyName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.partyName = reader.readUTF();
  }
}

export class PartyLeaveRequestMessage extends AbstractPartyMessage {
  public static id = 1964;

  public constructor(partyId?: number | undefined) {
    super(partyId);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class TeleportToBuddyAnswerMessage extends DofusMessage {
  public static id: number = 5687;

  public buddyId: number | undefined = 0;
  public accept: boolean | undefined = false;
  public dungeonId: number | undefined = 0;

  public constructor(
    buddyId?: number | undefined,
    accept?: boolean | undefined,
    dungeonId?: number | undefined,
  ) {
    super();
    this.buddyId = buddyId;
    this.accept = accept;
    this.dungeonId = dungeonId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.buddyId!);
    writer.writeBoolean(this.accept!);
    writer.writeVarShort(this.dungeonId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.buddyId = reader.readVarLong();
    this.accept = reader.readBoolean();
    this.dungeonId = reader.readVarShort();
  }
}

export class GameRolePlayArenaFightAnswerMessage extends DofusMessage {
  public static id: number = 5799;

  public accept: boolean | undefined = false;
  public fightId: number | undefined = 0;

  public constructor(
    accept?: boolean | undefined,
    fightId?: number | undefined,
  ) {
    super();
    this.accept = accept;
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.accept!);
    writer.writeVarShort(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accept = reader.readBoolean();
    this.fightId = reader.readVarShort();
  }
}

export class PartyAbdicateThroneMessage extends AbstractPartyMessage {
  public static id = 6752;

  public playerId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    playerId?: number | undefined,
  ) {
    super(partyId);
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
  }
}

export class BreachInvitationAnswerMessage extends DofusMessage {
  public static id: number = 5975;

  public accept: boolean | undefined = false;

  public constructor(accept?: boolean | undefined) {
    super();
    this.accept = accept;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.accept!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accept = reader.readBoolean();
  }
}

export class GameRolePlayArenaRegisterMessage extends DofusMessage {
  public static id: number = 5010;

  public battleMode: number | undefined = 3;

  public constructor(battleMode?: number | undefined) {
    super();
    this.battleMode = battleMode;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.battleMode!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.battleMode = reader.readInt();
  }
}

export class PartyInvitationRequestMessage extends DofusMessage {
  public static id: number = 6419;

  public target: AbstractPlayerSearchInformation | undefined;

  public constructor(target?: AbstractPlayerSearchInformation | undefined) {
    super();
    this.target = target;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.target!.id);
    this.target!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    const targetTypeId: number = reader.readShort();
    this.target = new types[targetTypeId]() as AbstractPlayerSearchInformation;
    this.target!.deserialize(reader);
  }
}

export class PartyInvitationArenaRequestMessage extends PartyInvitationRequestMessage {
  public static id = 8528;

  public constructor(target?: AbstractPlayerSearchInformation | undefined) {
    super(target);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class DungeonPartyFinderListenRequestMessage extends DofusMessage {
  public static id: number = 1266;

  public dungeonId: number | undefined = 0;

  public constructor(dungeonId?: number | undefined) {
    super();
    this.dungeonId = dungeonId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.dungeonId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dungeonId = reader.readVarShort();
  }
}

export class PartyInvitationDetailsRequestMessage extends AbstractPartyMessage {
  public static id = 474;

  public constructor(partyId?: number | undefined) {
    super(partyId);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PartyCancelInvitationMessage extends AbstractPartyMessage {
  public static id = 7066;

  public guestId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    guestId?: number | undefined,
  ) {
    super(partyId);
    this.guestId = guestId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.guestId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guestId = reader.readVarLong();
  }
}

export class PartyInvitationDungeonRequestMessage extends PartyInvitationRequestMessage {
  public static id = 8333;

  public dungeonId: number | undefined = 0;

  public constructor(
    target?: AbstractPlayerSearchInformation | undefined,
    dungeonId?: number | undefined,
  ) {
    super(target);
    this.dungeonId = dungeonId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.dungeonId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dungeonId = reader.readVarShort();
  }
}

export class DungeonPartyFinderRegisterRequestMessage extends DofusMessage {
  public static id: number = 2723;

  public dungeonIds: number[] | undefined;

  public constructor(dungeonIds?: number[] | undefined) {
    super();
    this.dungeonIds = dungeonIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.dungeonIds!.length);
    this.dungeonIds!.forEach((current: number) =>
      writer.writeVarShort(current),
    );
  }

  public deserialize(reader: BinaryDataReader): void {
    this.dungeonIds = [];
    const countDungeonIds = reader.readShort();
    for (let i: number = 0; i < countDungeonIds; i++) {
      this.dungeonIds.push(reader.readVarShort());
    }
  }
}

export class GameRolePlayArenaUnregisterMessage extends DofusMessage {
  public static id: number = 3857;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PartyAcceptInvitationMessage extends AbstractPartyMessage {
  public static id = 866;

  public constructor(partyId?: number | undefined) {
    super(partyId);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PartyStopFollowRequestMessage extends AbstractPartyMessage {
  public static id = 9834;

  public playerId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    playerId?: number | undefined,
  ) {
    super(partyId);
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
  }
}

export class PartyKickRequestMessage extends AbstractPartyMessage {
  public static id = 6075;

  public playerId: number | undefined = 0;

  public constructor(
    partyId?: number | undefined,
    playerId?: number | undefined,
  ) {
    super(partyId);
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
  }
}

export class PrismFightJoinLeaveRequestMessage extends DofusMessage {
  public static id: number = 7653;

  public join: boolean | undefined = false;
  public subAreaId: number | undefined = 0;

  public constructor(
    join?: boolean | undefined,
    subAreaId?: number | undefined,
  ) {
    super();
    this.join = join;
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.join!);
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.join = reader.readBoolean();
    this.subAreaId = reader.readVarShort();
  }
}

export class PrismSettingsRequestMessage extends DofusMessage {
  public static id: number = 8342;

  public startDefenseTime: number | undefined = 0;
  public subAreaId: number | undefined = 0;

  public constructor(
    startDefenseTime?: number | undefined,
    subAreaId?: number | undefined,
  ) {
    super();
    this.startDefenseTime = startDefenseTime;
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.startDefenseTime!);
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.startDefenseTime = reader.readByte();
    this.subAreaId = reader.readVarShort();
  }
}

export class AllianceKickRequestMessage extends DofusMessage {
  public static id: number = 1648;

  public kickedId: number | undefined = 0;

  public constructor(kickedId?: number | undefined) {
    super();
    this.kickedId = kickedId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.kickedId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.kickedId = reader.readVarInt();
  }
}

export class PrismInfoJoinLeaveRequestMessage extends DofusMessage {
  public static id: number = 6247;

  public join: boolean | undefined = false;

  public constructor(join?: boolean | undefined) {
    super();
    this.join = join;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.join!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.join = reader.readBoolean();
  }
}

export class PrismFightSwapRequestMessage extends DofusMessage {
  public static id: number = 4070;

  public targetId: number | undefined = 0;
  public subAreaId: number | undefined = 0;

  public constructor(
    targetId?: number | undefined,
    subAreaId?: number | undefined,
  ) {
    super();
    this.targetId = targetId;
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.targetId!);
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetId = reader.readVarLong();
    this.subAreaId = reader.readVarShort();
  }
}

export class PrismSetSabotagedRequestMessage extends DofusMessage {
  public static id: number = 1746;

  public subAreaId: number | undefined = 0;

  public constructor(subAreaId?: number | undefined) {
    super();
    this.subAreaId = subAreaId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.subAreaId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.subAreaId = reader.readVarShort();
  }
}

export class PrismUseRequestMessage extends DofusMessage {
  public static id: number = 8164;

  public moduleToUse: number | undefined = 0;

  public constructor(moduleToUse?: number | undefined) {
    super();
    this.moduleToUse = moduleToUse;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.moduleToUse!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.moduleToUse = reader.readByte();
  }
}

export class PrismModuleExchangeRequestMessage extends DofusMessage {
  public static id: number = 7195;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class SetEnableAVARequestMessage extends DofusMessage {
  public static id: number = 3626;

  public enable: boolean | undefined = false;

  public constructor(enable?: boolean | undefined) {
    super();
    this.enable = enable;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
  }
}

export class PrismsListRegisterMessage extends DofusMessage {
  public static id: number = 4105;

  public listen: number | undefined = 0;

  public constructor(listen?: number | undefined) {
    super();
    this.listen = listen;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.listen!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.listen = reader.readByte();
  }
}

export class AllianceMotdSetRequestMessage extends SocialNoticeSetRequestMessage {
  public static id = 3707;

  public content: string | undefined;

  public constructor(content?: string | undefined) {
    super();
    this.content = content;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.content!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.content = reader.readUTF();
  }
}

export class PrismAttackRequestMessage extends DofusMessage {
  public static id: number = 2686;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class AllianceChangeGuildRightsMessage extends DofusMessage {
  public static id: number = 8453;

  public rights: number | undefined = 0;
  public guildId: number | undefined = 0;

  public constructor(
    rights?: number | undefined,
    guildId?: number | undefined,
  ) {
    super();
    this.rights = rights;
    this.guildId = guildId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.rights!);
    writer.writeVarInt(this.guildId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.rights = reader.readByte();
    this.guildId = reader.readVarInt();
  }
}

export class AllianceBulletinSetRequestMessage extends SocialNoticeSetRequestMessage {
  public static id = 645;

  public notifyMembers: boolean | undefined = false;
  public content: string | undefined;

  public constructor(
    notifyMembers?: boolean | undefined,
    content?: string | undefined,
  ) {
    super();
    this.notifyMembers = notifyMembers;
    this.content = content;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.notifyMembers!);
    writer.writeUTF(this.content!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.notifyMembers = reader.readBoolean();
    this.content = reader.readUTF();
  }
}

export class AllianceInsiderInfoRequestMessage extends DofusMessage {
  public static id: number = 9591;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class AllianceInvitationMessage extends DofusMessage {
  public static id: number = 235;

  public targetId: number | undefined = 0;

  public constructor(targetId?: number | undefined) {
    super();
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetId = reader.readVarLong();
  }
}

export class ShowCellRequestMessage extends DofusMessage {
  public static id: number = 4305;

  public cellId: number | undefined = 0;

  public constructor(cellId?: number | undefined) {
    super();
    this.cellId = cellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.cellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readVarShort();
  }
}

export class GameFightTurnFinishMessage extends DofusMessage {
  public static id: number = 6692;

  public isAfk: boolean | undefined = false;

  public constructor(isAfk?: boolean | undefined) {
    super();
    this.isAfk = isAfk;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.isAfk!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.isAfk = reader.readBoolean();
  }
}

export class GameMapMovementRequestMessage extends DofusMessage {
  public static id: number = 685;

  public mapId: number | undefined = 0;
  public keyMovements: number[] | undefined;

  public constructor(
    mapId?: number | undefined,
    keyMovements?: number[] | undefined,
  ) {
    super();
    this.mapId = mapId;
    this.keyMovements = keyMovements;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.mapId!);
    writer.writeShort(this.keyMovements!.length);
    this.keyMovements!.forEach((current: number) => writer.writeShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapId = reader.readDouble();
    this.keyMovements = [];
    const countKeyMovements = reader.readShort();
    for (let i: number = 0; i < countKeyMovements; i++) {
      this.keyMovements.push(reader.readShort());
    }
  }
}

export class GameActionFightCastOnTargetRequestMessage extends DofusMessage {
  public static id: number = 8001;

  public targetId: number | undefined = 0;
  public spellId: number | undefined = 0;

  public constructor(
    targetId?: number | undefined,
    spellId?: number | undefined,
  ) {
    super();
    this.targetId = targetId;
    this.spellId = spellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.targetId!);
    writer.writeVarShort(this.spellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetId = reader.readDouble();
    this.spellId = reader.readVarShort();
  }
}

export class GameActionFightCastRequestMessage extends DofusMessage {
  public static id: number = 4946;

  public cellId: number | undefined = 0;
  public spellId: number | undefined = 0;

  public constructor(
    cellId?: number | undefined,
    spellId?: number | undefined,
  ) {
    super();
    this.cellId = cellId;
    this.spellId = spellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.cellId!);
    writer.writeVarShort(this.spellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readShort();
    this.spellId = reader.readVarShort();
  }
}

export class FinishMoveSetRequestMessage extends DofusMessage {
  public static id: number = 2738;

  public finishMoveState: boolean | undefined = false;
  public finishMoveId: number | undefined = 0;

  public constructor(
    finishMoveState?: boolean | undefined,
    finishMoveId?: number | undefined,
  ) {
    super();
    this.finishMoveState = finishMoveState;
    this.finishMoveId = finishMoveId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.finishMoveState!);
    writer.writeInt(this.finishMoveId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.finishMoveState = reader.readBoolean();
    this.finishMoveId = reader.readInt();
  }
}

export class FinishMoveListRequestMessage extends DofusMessage {
  public static id: number = 2551;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class SpellVariantActivationRequestMessage extends DofusMessage {
  public static id: number = 4887;

  public spellId: number | undefined = 0;

  public constructor(spellId?: number | undefined) {
    super();
    this.spellId = spellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.spellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.spellId = reader.readVarShort();
  }
}

export class GameContextQuitMessage extends DofusMessage {
  public static id: number = 644;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class BreachRoomUnlockRequestMessage extends DofusMessage {
  public static id: number = 8276;

  public roomId: number | undefined = 0;

  public constructor(roomId?: number | undefined) {
    super();
    this.roomId = roomId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.roomId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.roomId = reader.readByte();
  }
}

export class BreachRewardBuyMessage extends DofusMessage {
  public static id: number = 2995;

  public id_: number | undefined = 0;

  public constructor(id_?: number | undefined) {
    super();
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readVarInt();
  }
}

export class BreachExitRequestMessage extends DofusMessage {
  public static id: number = 4948;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class BreachKickRequestMessage extends DofusMessage {
  public static id: number = 2909;

  public target: number | undefined = 0;

  public constructor(target?: number | undefined) {
    super();
    this.target = target;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.target!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.target = reader.readVarLong();
  }
}

export class BreachInvitationRequestMessage extends DofusMessage {
  public static id: number = 7544;

  public guests: number[] | undefined;

  public constructor(guests?: number[] | undefined) {
    super();
    this.guests = guests;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.guests!.length);
    this.guests!.forEach((current: number) => writer.writeVarLong(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guests = [];
    const countGuests = reader.readShort();
    for (let i: number = 0; i < countGuests; i++) {
      this.guests.push(reader.readVarLong());
    }
  }
}

export class EditHavenBagRequestMessage extends DofusMessage {
  public static id: number = 8749;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ChangeHavenBagRoomRequestMessage extends DofusMessage {
  public static id: number = 7038;

  public roomId: number | undefined = 0;

  public constructor(roomId?: number | undefined) {
    super();
    this.roomId = roomId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.roomId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.roomId = reader.readByte();
  }
}

export class EditHavenBagCancelRequestMessage extends DofusMessage {
  public static id: number = 5731;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class HavenBagFurnituresRequestMessage extends DofusMessage {
  public static id: number = 8486;

  public cellIds: number[] | undefined;
  public funitureIds: number[] | undefined;
  public orientations: number[] | undefined;

  public constructor(
    cellIds?: number[] | undefined,
    funitureIds?: number[] | undefined,
    orientations?: number[] | undefined,
  ) {
    super();
    this.cellIds = cellIds;
    this.funitureIds = funitureIds;
    this.orientations = orientations;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.cellIds!.length);
    this.cellIds!.forEach((current: number) => writer.writeVarShort(current));
    writer.writeShort(this.funitureIds!.length);
    this.funitureIds!.forEach((current: number) => writer.writeInt(current));
    writer.writeShort(this.orientations!.length);
    this.orientations!.forEach((current: number) => writer.writeByte(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellIds = [];
    const countCellIds = reader.readShort();
    for (let i: number = 0; i < countCellIds; i++) {
      this.cellIds.push(reader.readVarShort());
    }
    this.funitureIds = [];
    const countFunitureIds = reader.readShort();
    for (let i: number = 0; i < countFunitureIds; i++) {
      this.funitureIds.push(reader.readInt());
    }
    this.orientations = [];
    const countOrientations = reader.readShort();
    for (let i: number = 0; i < countOrientations; i++) {
      this.orientations.push(reader.readByte());
    }
  }
}

export class HavenBagPermissionsUpdateRequestMessage extends DofusMessage {
  public static id: number = 2106;

  public permissions: number | undefined = 0;

  public constructor(permissions?: number | undefined) {
    super();
    this.permissions = permissions;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.permissions!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.permissions = reader.readInt();
  }
}

export class OpenHavenBagFurnitureSequenceRequestMessage extends DofusMessage {
  public static id: number = 3811;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class CloseHavenBagFurnitureSequenceRequestMessage extends DofusMessage {
  public static id: number = 3890;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ChangeThemeRequestMessage extends DofusMessage {
  public static id: number = 8958;

  public theme: number | undefined = 0;

  public constructor(theme?: number | undefined) {
    super();
    this.theme = theme;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.theme!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.theme = reader.readByte();
  }
}

export class ExitHavenBagRequestMessage extends DofusMessage {
  public static id: number = 9491;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class HouseKickIndoorMerchantRequestMessage extends DofusMessage {
  public static id: number = 8862;

  public cellId: number | undefined = 0;

  public constructor(cellId?: number | undefined) {
    super();
    this.cellId = cellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.cellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readVarShort();
  }
}

export class GameFightJoinRequestMessage extends DofusMessage {
  public static id: number = 6519;

  public fightId: number | undefined = 0;
  public fighterId: number | undefined = 0;

  public constructor(
    fightId?: number | undefined,
    fighterId?: number | undefined,
  ) {
    super();
    this.fightId = fightId;
    this.fighterId = fighterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.fightId!);
    writer.writeDouble(this.fighterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fightId = reader.readVarShort();
    this.fighterId = reader.readDouble();
  }
}

export class GameFightPlacementPositionRequestMessage extends DofusMessage {
  public static id: number = 5499;

  public cellId: number | undefined = 0;

  public constructor(cellId?: number | undefined) {
    super();
    this.cellId = cellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.cellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readVarShort();
  }
}

export class GameFightPlacementSwapPositionsRequestMessage extends GameFightPlacementPositionRequestMessage {
  public static id = 7699;

  public requestedId: number | undefined = 0;

  public constructor(
    cellId?: number | undefined,
    requestedId?: number | undefined,
  ) {
    super(cellId);
    this.requestedId = requestedId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.requestedId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.requestedId = reader.readDouble();
  }
}

export class GameContextKickMessage extends DofusMessage {
  public static id: number = 2712;

  public targetId: number | undefined = 0;

  public constructor(targetId?: number | undefined) {
    super();
    this.targetId = targetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.targetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.targetId = reader.readDouble();
  }
}

export class GameFightPlacementSwapPositionsCancelMessage extends DofusMessage {
  public static id: number = 7054;

  public requestId: number | undefined = 0;

  public constructor(requestId?: number | undefined) {
    super();
    this.requestId = requestId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.requestId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.requestId = reader.readInt();
  }
}

export class GameFightReadyMessage extends DofusMessage {
  public static id: number = 3480;

  public isReady: boolean | undefined = false;

  public constructor(isReady?: boolean | undefined) {
    super();
    this.isReady = isReady;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.isReady!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.isReady = reader.readBoolean();
  }
}

export class GameFightPlacementSwapPositionsAcceptMessage extends DofusMessage {
  public static id: number = 2140;

  public requestId: number | undefined = 0;

  public constructor(requestId?: number | undefined) {
    super();
    this.requestId = requestId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.requestId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.requestId = reader.readInt();
  }
}

export class NotificationResetMessage extends DofusMessage {
  public static id: number = 1;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class QuestStepInfoRequestMessage extends DofusMessage {
  public static id: number = 5562;

  public questId: number | undefined = 0;

  public constructor(questId?: number | undefined) {
    super();
    this.questId = questId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.questId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.questId = reader.readVarShort();
  }
}

export class WatchQuestStepInfoRequestMessage extends QuestStepInfoRequestMessage {
  public static id = 8640;

  public playerId: number | undefined = 0;

  public constructor(
    questId?: number | undefined,
    playerId?: number | undefined,
  ) {
    super(questId);
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
  }
}

export class UnfollowQuestObjectiveRequestMessage extends DofusMessage {
  public static id: number = 3466;

  public objectiveId: number | undefined = 0;
  public questId: number | undefined = 0;

  public constructor(
    objectiveId?: number | undefined,
    questId?: number | undefined,
  ) {
    super();
    this.objectiveId = objectiveId;
    this.questId = questId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objectiveId!);
    writer.writeVarShort(this.questId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectiveId = reader.readShort();
    this.questId = reader.readVarShort();
  }
}

export class TreasureHuntFlagRemoveRequestMessage extends DofusMessage {
  public static id: number = 6823;

  public index: number | undefined = 0;
  public questType: number | undefined = 0;

  public constructor(
    index?: number | undefined,
    questType?: number | undefined,
  ) {
    super();
    this.index = index;
    this.questType = questType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.index!);
    writer.writeByte(this.questType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.index = reader.readByte();
    this.questType = reader.readByte();
  }
}

export class TreasureHuntFlagRequestMessage extends DofusMessage {
  public static id: number = 9576;

  public index: number | undefined = 0;
  public questType: number | undefined = 0;

  public constructor(
    index?: number | undefined,
    questType?: number | undefined,
  ) {
    super();
    this.index = index;
    this.questType = questType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.index!);
    writer.writeByte(this.questType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.index = reader.readByte();
    this.questType = reader.readByte();
  }
}

export class GuidedModeReturnRequestMessage extends DofusMessage {
  public static id: number = 2230;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class TreasureHuntLegendaryRequestMessage extends DofusMessage {
  public static id: number = 6283;

  public legendaryId: number | undefined = 0;

  public constructor(legendaryId?: number | undefined) {
    super();
    this.legendaryId = legendaryId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.legendaryId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.legendaryId = reader.readVarShort();
  }
}

export class GuidedModeQuitRequestMessage extends DofusMessage {
  public static id: number = 6012;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class TreasureHuntGiveUpRequestMessage extends DofusMessage {
  public static id: number = 2962;

  public questType: number | undefined = 0;

  public constructor(questType?: number | undefined) {
    super();
    this.questType = questType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.questType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.questType = reader.readByte();
  }
}

export class QuestListRequestMessage extends DofusMessage {
  public static id: number = 6533;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class FollowQuestObjectiveRequestMessage extends DofusMessage {
  public static id: number = 8182;

  public objectiveId: number | undefined = 0;
  public questId: number | undefined = 0;

  public constructor(
    objectiveId?: number | undefined,
    questId?: number | undefined,
  ) {
    super();
    this.objectiveId = objectiveId;
    this.questId = questId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.objectiveId!);
    writer.writeVarShort(this.questId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectiveId = reader.readShort();
    this.questId = reader.readVarShort();
  }
}

export class AchievementRewardRequestMessage extends DofusMessage {
  public static id: number = 3165;

  public achievementId: number | undefined = 0;

  public constructor(achievementId?: number | undefined) {
    super();
    this.achievementId = achievementId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.achievementId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.achievementId = reader.readShort();
  }
}

export class NotificationUpdateFlagMessage extends DofusMessage {
  public static id: number = 8604;

  public index: number | undefined = 0;

  public constructor(index?: number | undefined) {
    super();
    this.index = index;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.index!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.index = reader.readVarShort();
  }
}

export class QuestObjectiveValidationMessage extends DofusMessage {
  public static id: number = 7368;

  public objectiveId: number | undefined = 0;
  public questId: number | undefined = 0;

  public constructor(
    objectiveId?: number | undefined,
    questId?: number | undefined,
  ) {
    super();
    this.objectiveId = objectiveId;
    this.questId = questId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.objectiveId!);
    writer.writeVarShort(this.questId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectiveId = reader.readVarShort();
    this.questId = reader.readVarShort();
  }
}

export class AchievementDetailsRequestMessage extends DofusMessage {
  public static id: number = 5136;

  public achievementId: number | undefined = 0;

  public constructor(achievementId?: number | undefined) {
    super();
    this.achievementId = achievementId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.achievementId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.achievementId = reader.readVarShort();
  }
}

export class RefreshFollowedQuestsOrderRequestMessage extends DofusMessage {
  public static id: number = 1088;

  public quests: number[] | undefined;

  public constructor(quests?: number[] | undefined) {
    super();
    this.quests = quests;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.quests!.length);
    this.quests!.forEach((current: number) => writer.writeVarShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quests = [];
    const countQuests = reader.readShort();
    for (let i: number = 0; i < countQuests; i++) {
      this.quests.push(reader.readVarShort());
    }
  }
}

export class QuestStartRequestMessage extends DofusMessage {
  public static id: number = 6071;

  public questId: number | undefined = 0;

  public constructor(questId?: number | undefined) {
    super();
    this.questId = questId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.questId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.questId = reader.readVarShort();
  }
}

export class AchievementDetailedListRequestMessage extends DofusMessage {
  public static id: number = 5957;

  public categoryId: number | undefined = 0;

  public constructor(categoryId?: number | undefined) {
    super();
    this.categoryId = categoryId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.categoryId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.categoryId = reader.readVarShort();
  }
}

export class AchievementAlmostFinishedDetailedListRequestMessage extends DofusMessage {
  public static id: number = 3810;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class TreasureHuntDigRequestMessage extends DofusMessage {
  public static id: number = 6219;

  public questType: number | undefined = 0;

  public constructor(questType?: number | undefined) {
    super();
    this.questType = questType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.questType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.questType = reader.readByte();
  }
}

export class AuthenticationTicketMessage extends DofusMessage {
  public static id: number = 9517;

  public ticket: string | undefined;
  public lang: string | undefined;

  public constructor(ticket?: string | undefined, lang?: string | undefined) {
    super();
    this.ticket = ticket;
    this.lang = lang;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.ticket!);
    writer.writeUTF(this.lang!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ticket = reader.readUTF();
    this.lang = reader.readUTF();
  }
}

export class CharacterSelectionMessage extends DofusMessage {
  public static id: number = 3123;

  public id_: number | undefined = 0;

  public constructor(id_?: number | undefined) {
    super();
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readVarLong();
  }
}

export class CharacterSelectionWithRemodelMessage extends CharacterSelectionMessage {
  public static id = 2652;

  public remodel: RemodelingInformation | undefined;

  public constructor(
    id_?: number | undefined,
    remodel?: RemodelingInformation | undefined,
  ) {
    super(id_);
    this.remodel = remodel;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.remodel!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.remodel = new RemodelingInformation();
    this.remodel!.deserialize(reader);
  }
}

export class CharacterNameSuggestionRequestMessage extends DofusMessage {
  public static id: number = 1828;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class CharacterSelectedForceReadyMessage extends DofusMessage {
  public static id: number = 6390;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class CharactersListRequestMessage extends DofusMessage {
  public static id: number = 1501;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class CharacterCreationRequestMessage extends DofusMessage {
  public static id: number = 5026;

  public cosmeticId: number | undefined = 0;
  public name: string | undefined;
  public colors: number[] | undefined;
  public breed: number | undefined = 0;
  public sex: boolean | undefined = false;

  public constructor(
    cosmeticId?: number | undefined,
    name?: string | undefined,
    colors?: number[] | undefined,
    breed?: number | undefined,
    sex?: boolean | undefined,
  ) {
    super();
    this.cosmeticId = cosmeticId;
    this.name = name;
    this.colors = colors;
    this.breed = breed;
    this.sex = sex;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.cosmeticId!);
    writer.writeUTF(this.name!);
    this.colors!.forEach((current: number) => writer.writeInt(current));
    writer.writeByte(this.breed!);
    writer.writeBoolean(this.sex!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cosmeticId = reader.readVarShort();
    this.name = reader.readUTF();
    this.colors = [];
    for (let i: number = 0; i < 5; i++) {
      this.colors.push(reader.readInt());
    }
    this.breed = reader.readByte();
    this.sex = reader.readBoolean();
  }
}

export class CharacterCanBeCreatedRequestMessage extends DofusMessage {
  public static id: number = 6208;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class CharacterReplayRequestMessage extends DofusMessage {
  public static id: number = 9614;

  public characterId: number | undefined = 0;

  public constructor(characterId?: number | undefined) {
    super();
    this.characterId = characterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.characterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.characterId = reader.readVarLong();
  }
}

export class CharacterReplayWithRemodelRequestMessage extends CharacterReplayRequestMessage {
  public static id = 3832;

  public remodel: RemodelingInformation | undefined;

  public constructor(
    characterId?: number | undefined,
    remodel?: RemodelingInformation | undefined,
  ) {
    super(characterId);
    this.remodel = remodel;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.remodel!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.remodel = new RemodelingInformation();
    this.remodel!.deserialize(reader);
  }
}

export class StartupActionsObjetAttributionMessage extends DofusMessage {
  public static id: number = 8408;

  public characterId: number | undefined = 0;
  public actionId: number | undefined = 0;

  public constructor(
    characterId?: number | undefined,
    actionId?: number | undefined,
  ) {
    super();
    this.characterId = characterId;
    this.actionId = actionId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.characterId!);
    writer.writeInt(this.actionId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.characterId = reader.readVarLong();
    this.actionId = reader.readInt();
  }
}

export class StartupActionsExecuteMessage extends DofusMessage {
  public static id: number = 8834;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class CharacterFirstSelectionMessage extends CharacterSelectionMessage {
  public static id = 3196;

  public doTutorial: boolean | undefined = false;

  public constructor(
    id_?: number | undefined,
    doTutorial?: boolean | undefined,
  ) {
    super(id_);
    this.doTutorial = doTutorial;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.doTutorial!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.doTutorial = reader.readBoolean();
  }
}

export class GameContextCreateRequestMessage extends DofusMessage {
  public static id: number = 5310;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class CharacterDeletionRequestMessage extends DofusMessage {
  public static id: number = 8394;

  public secretAnswerHash: string | undefined;
  public characterId: number | undefined = 0;

  public constructor(
    secretAnswerHash?: string | undefined,
    characterId?: number | undefined,
  ) {
    super();
    this.secretAnswerHash = secretAnswerHash;
    this.characterId = characterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.secretAnswerHash!);
    writer.writeVarLong(this.characterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.secretAnswerHash = reader.readUTF();
    this.characterId = reader.readVarLong();
  }
}

export class AcquaintanceSearchMessage extends DofusMessage {
  public static id: number = 9528;

  public tag: AccountTagInformation | undefined;

  public constructor(tag?: AccountTagInformation | undefined) {
    super();
    this.tag = tag;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.tag!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.tag = new AccountTagInformation();
    this.tag!.deserialize(reader);
  }
}

export class ServerSelectionMessage extends DofusMessage {
  public static id: number = 214;

  public serverId: number | undefined = 0;

  public constructor(serverId?: number | undefined) {
    super();
    this.serverId = serverId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.serverId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.serverId = reader.readVarShort();
  }
}

export class CheckFileMessage extends DofusMessage {
  public static id: number = 6281;

  public value: string | undefined;
  public type: number | undefined = 0;
  public filenameHash: string | undefined;

  public constructor(
    value?: string | undefined,
    type?: number | undefined,
    filenameHash?: string | undefined,
  ) {
    super();
    this.value = value;
    this.type = type;
    this.filenameHash = filenameHash;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.value!);
    writer.writeByte(this.type!);
    writer.writeUTF(this.filenameHash!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.value = reader.readUTF();
    this.type = reader.readByte();
    this.filenameHash = reader.readUTF();
  }
}

export class ResetCharacterStatsRequestMessage extends DofusMessage {
  public static id: number = 9708;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class StatsUpgradeRequestMessage extends DofusMessage {
  public static id: number = 327;

  public statId: number | undefined = 11;
  public boostPoint: number | undefined = 0;
  public useAdditionnal: boolean | undefined = false;

  public constructor(
    statId?: number | undefined,
    boostPoint?: number | undefined,
    useAdditionnal?: boolean | undefined,
  ) {
    super();
    this.statId = statId;
    this.boostPoint = boostPoint;
    this.useAdditionnal = useAdditionnal;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.statId!);
    writer.writeVarShort(this.boostPoint!);
    writer.writeBoolean(this.useAdditionnal!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.statId = reader.readByte();
    this.boostPoint = reader.readVarShort();
    this.useAdditionnal = reader.readBoolean();
  }
}

export class StartupActionsAllAttributionMessage extends DofusMessage {
  public static id: number = 2956;

  public characterId: number | undefined = 0;

  public constructor(characterId?: number | undefined) {
    super();
    this.characterId = characterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.characterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.characterId = reader.readVarLong();
  }
}

export class PaddockToSellListRequestMessage extends DofusMessage {
  public static id: number = 456;

  public pageIndex: number | undefined = 0;

  public constructor(pageIndex?: number | undefined) {
    super();
    this.pageIndex = pageIndex;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.pageIndex!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.pageIndex = reader.readVarShort();
  }
}

export class PaddockToSellFilterMessage extends DofusMessage {
  public static id: number = 8388;

  public orderBy: number | undefined = 0;
  public areaId: number | undefined = 0;
  public atLeastNbMount: number | undefined = 0;
  public maxPrice: number | undefined = 0;
  public atLeastNbMachine: number | undefined = 0;

  public constructor(
    orderBy?: number | undefined,
    areaId?: number | undefined,
    atLeastNbMount?: number | undefined,
    maxPrice?: number | undefined,
    atLeastNbMachine?: number | undefined,
  ) {
    super();
    this.orderBy = orderBy;
    this.areaId = areaId;
    this.atLeastNbMount = atLeastNbMount;
    this.maxPrice = maxPrice;
    this.atLeastNbMachine = atLeastNbMachine;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.orderBy!);
    writer.writeInt(this.areaId!);
    writer.writeByte(this.atLeastNbMount!);
    writer.writeVarLong(this.maxPrice!);
    writer.writeByte(this.atLeastNbMachine!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.orderBy = reader.readByte();
    this.areaId = reader.readInt();
    this.atLeastNbMount = reader.readByte();
    this.maxPrice = reader.readVarLong();
    this.atLeastNbMachine = reader.readByte();
  }
}

export class HouseToSellListRequestMessage extends DofusMessage {
  public static id: number = 1679;

  public pageIndex: number | undefined = 0;

  public constructor(pageIndex?: number | undefined) {
    super();
    this.pageIndex = pageIndex;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.pageIndex!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.pageIndex = reader.readVarShort();
  }
}

export class HouseToSellFilterMessage extends DofusMessage {
  public static id: number = 3571;

  public orderBy: number | undefined = 0;
  public maxPrice: number | undefined = 0;
  public areaId: number | undefined = 0;
  public atLeastNbChest: number | undefined = 0;
  public atLeastNbRoom: number | undefined = 0;
  public skillRequested: number | undefined = 0;

  public constructor(
    orderBy?: number | undefined,
    maxPrice?: number | undefined,
    areaId?: number | undefined,
    atLeastNbChest?: number | undefined,
    atLeastNbRoom?: number | undefined,
    skillRequested?: number | undefined,
  ) {
    super();
    this.orderBy = orderBy;
    this.maxPrice = maxPrice;
    this.areaId = areaId;
    this.atLeastNbChest = atLeastNbChest;
    this.atLeastNbRoom = atLeastNbRoom;
    this.skillRequested = skillRequested;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.orderBy!);
    writer.writeVarLong(this.maxPrice!);
    writer.writeInt(this.areaId!);
    writer.writeByte(this.atLeastNbChest!);
    writer.writeByte(this.atLeastNbRoom!);
    writer.writeVarShort(this.skillRequested!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.orderBy = reader.readByte();
    this.maxPrice = reader.readVarLong();
    this.areaId = reader.readInt();
    this.atLeastNbChest = reader.readByte();
    this.atLeastNbRoom = reader.readByte();
    this.skillRequested = reader.readVarShort();
  }
}

export class AdminQuietCommandMessage extends AdminCommandMessage {
  public static id = 400;

  public constructor(content?: string | undefined) {
    super(content);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class SetEnablePVPRequestMessage extends DofusMessage {
  public static id: number = 4228;

  public enable: boolean | undefined = false;

  public constructor(enable?: boolean | undefined) {
    super();
    this.enable = enable;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
  }
}

export class CharacterAlignmentWarEffortProgressionRequestMessage extends DofusMessage {
  public static id: number = 9582;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class AlignmentWarEffortDonateRequestMessage extends DofusMessage {
  public static id: number = 5249;

  public donation: number | undefined = 0;

  public constructor(donation?: number | undefined) {
    super();
    this.donation = donation;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.donation!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.donation = reader.readVarLong();
  }
}

export class AlignmentWarEffortProgressionRequestMessage extends DofusMessage {
  public static id: number = 5727;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ObjectAveragePricesGetMessage extends DofusMessage {
  public static id: number = 1653;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ReloginTokenRequestMessage extends DofusMessage {
  public static id: number = 2403;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class AnomalySubareaInformationRequestMessage extends DofusMessage {
  public static id: number = 5877;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ZaapRespawnSaveRequestMessage extends DofusMessage {
  public static id: number = 4572;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class TeleportRequestMessage extends DofusMessage {
  public static id: number = 1539;

  public mapId: number | undefined = 0;
  public destinationType: number | undefined = 0;
  public sourceType: number | undefined = 0;

  public constructor(
    mapId?: number | undefined,
    destinationType?: number | undefined,
    sourceType?: number | undefined,
  ) {
    super();
    this.mapId = mapId;
    this.destinationType = destinationType;
    this.sourceType = sourceType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.mapId!);
    writer.writeByte(this.destinationType!);
    writer.writeByte(this.sourceType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapId = reader.readDouble();
    this.destinationType = reader.readByte();
    this.sourceType = reader.readByte();
  }
}

export class JobCrafterDirectoryDefineSettingsMessage extends DofusMessage {
  public static id: number = 6260;

  public settings: JobCrafterDirectorySettings | undefined;

  public constructor(settings?: JobCrafterDirectorySettings | undefined) {
    super();
    this.settings = settings;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.settings!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.settings = new JobCrafterDirectorySettings();
    this.settings!.deserialize(reader);
  }
}

export class JobBookSubscribeRequestMessage extends DofusMessage {
  public static id: number = 4809;

  public jobIds: number[] | undefined;

  public constructor(jobIds?: number[] | undefined) {
    super();
    this.jobIds = jobIds;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.jobIds!.length);
    this.jobIds!.forEach((current: number) => writer.writeByte(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.jobIds = [];
    const countJobIds = reader.readShort();
    for (let i: number = 0; i < countJobIds; i++) {
      this.jobIds.push(reader.readByte());
    }
  }
}

export class JobCrafterDirectoryListRequestMessage extends DofusMessage {
  public static id: number = 5786;

  public jobId: number | undefined = 0;

  public constructor(jobId?: number | undefined) {
    super();
    this.jobId = jobId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.jobId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.jobId = reader.readByte();
  }
}

export class ExchangeObjectUseInWorkshopMessage extends DofusMessage {
  public static id: number = 5412;

  public quantity: number | undefined = 0;
  public objectUID: number | undefined = 0;

  public constructor(
    quantity?: number | undefined,
    objectUID?: number | undefined,
  ) {
    super();
    this.quantity = quantity;
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.quantity!);
    writer.writeVarInt(this.objectUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarInt();
    this.objectUID = reader.readVarInt();
  }
}

export class ExchangeReplayStopMessage extends DofusMessage {
  public static id: number = 6235;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ExchangeCraftCountRequestMessage extends DofusMessage {
  public static id: number = 7316;

  public count: number | undefined = 0;

  public constructor(count?: number | undefined) {
    super();
    this.count = count;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.count!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.count = reader.readVarInt();
  }
}

export class ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage extends DofusMessage {
  public static id: number = 4258;

  public allow: boolean | undefined = false;

  public constructor(allow?: boolean | undefined) {
    super();
    this.allow = allow;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.allow!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allow = reader.readBoolean();
  }
}

export class ExchangeCraftPaymentModificationRequestMessage extends DofusMessage {
  public static id: number = 5785;

  public quantity: number | undefined = 0;

  public constructor(quantity?: number | undefined) {
    super();
    this.quantity = quantity;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.quantity!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarLong();
  }
}

export class ExchangeSetCraftRecipeMessage extends DofusMessage {
  public static id: number = 1333;

  public objectGID: number | undefined = 0;

  public constructor(objectGID?: number | undefined) {
    super();
    this.objectGID = objectGID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.objectGID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectGID = reader.readVarShort();
  }
}

export class MountSetXpRatioRequestMessage extends DofusMessage {
  public static id: number = 9275;

  public xpRatio: number | undefined = 0;

  public constructor(xpRatio?: number | undefined) {
    super();
    this.xpRatio = xpRatio;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.xpRatio!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.xpRatio = reader.readByte();
  }
}

export class MountHarnessDissociateRequestMessage extends DofusMessage {
  public static id: number = 9897;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class MountInformationInPaddockRequestMessage extends DofusMessage {
  public static id: number = 6636;

  public mapRideId: number | undefined = 0;

  public constructor(mapRideId?: number | undefined) {
    super();
    this.mapRideId = mapRideId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.mapRideId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mapRideId = reader.readVarInt();
  }
}

export class MountReleaseRequestMessage extends DofusMessage {
  public static id: number = 5543;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class MountHarnessColorsUpdateRequestMessage extends DofusMessage {
  public static id: number = 7947;

  public useHarnessColors: boolean | undefined = false;

  public constructor(useHarnessColors?: boolean | undefined) {
    super();
    this.useHarnessColors = useHarnessColors;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.useHarnessColors!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.useHarnessColors = reader.readBoolean();
  }
}

export class MountRenameRequestMessage extends DofusMessage {
  public static id: number = 8042;

  public mountId: number | undefined = 0;
  public name: string | undefined;

  public constructor(mountId?: number | undefined, name?: string | undefined) {
    super();
    this.mountId = mountId;
    this.name = name;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.mountId!);
    writer.writeUTF(this.name!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.mountId = reader.readVarInt();
    this.name = reader.readUTF();
  }
}

export class MountFeedRequestMessage extends DofusMessage {
  public static id: number = 8131;

  public quantity: number | undefined = 0;
  public mountFoodUid: number | undefined = 0;
  public mountLocation: number | undefined = 0;
  public mountUid: number | undefined = 0;

  public constructor(
    quantity?: number | undefined,
    mountFoodUid?: number | undefined,
    mountLocation?: number | undefined,
    mountUid?: number | undefined,
  ) {
    super();
    this.quantity = quantity;
    this.mountFoodUid = mountFoodUid;
    this.mountLocation = mountLocation;
    this.mountUid = mountUid;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.quantity!);
    writer.writeVarInt(this.mountFoodUid!);
    writer.writeByte(this.mountLocation!);
    writer.writeVarInt(this.mountUid!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarInt();
    this.mountFoodUid = reader.readVarInt();
    this.mountLocation = reader.readByte();
    this.mountUid = reader.readVarInt();
  }
}

export class ExchangeHandleMountsMessage extends DofusMessage {
  public static id: number = 9421;

  public ridesId: number[] | undefined;
  public actionType: number | undefined = 0;

  public constructor(
    ridesId?: number[] | undefined,
    actionType?: number | undefined,
  ) {
    super();
    this.ridesId = ridesId;
    this.actionType = actionType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.ridesId!.length);
    this.ridesId!.forEach((current: number) => writer.writeVarInt(current));
    writer.writeByte(this.actionType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ridesId = [];
    const countRidesId = reader.readShort();
    for (let i: number = 0; i < countRidesId; i++) {
      this.ridesId.push(reader.readVarInt());
    }
    this.actionType = reader.readByte();
  }
}

export class ExchangeRequestOnMountStockMessage extends DofusMessage {
  public static id: number = 8145;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class MountInformationRequestMessage extends DofusMessage {
  public static id: number = 2112;

  public time: number | undefined = 0;
  public id_: number | undefined = 0;

  public constructor(time?: number | undefined, id_?: number | undefined) {
    super();
    this.time = time;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.time!);
    writer.writeDouble(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.time = reader.readDouble();
    this.id_ = reader.readDouble();
  }
}

export class MountToggleRidingRequestMessage extends DofusMessage {
  public static id: number = 8445;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class MountSterilizeRequestMessage extends DofusMessage {
  public static id: number = 590;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class HouseGuildShareRequestMessage extends DofusMessage {
  public static id: number = 5595;

  public enable: boolean | undefined = false;
  public instanceId: number | undefined = 0;
  public rights: number | undefined = 0;
  public houseId: number | undefined = 0;

  public constructor(
    enable?: boolean | undefined,
    instanceId?: number | undefined,
    rights?: number | undefined,
    houseId?: number | undefined,
  ) {
    super();
    this.enable = enable;
    this.instanceId = instanceId;
    this.rights = rights;
    this.houseId = houseId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.enable!);
    writer.writeInt(this.instanceId!);
    writer.writeVarInt(this.rights!);
    writer.writeVarInt(this.houseId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.enable = reader.readBoolean();
    this.instanceId = reader.readInt();
    this.rights = reader.readVarInt();
    this.houseId = reader.readVarInt();
  }
}

export class HouseKickRequestMessage extends DofusMessage {
  public static id: number = 8499;

  public id_: number | undefined = 0;

  public constructor(id_?: number | undefined) {
    super();
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readVarLong();
  }
}

export class HouseSellRequestMessage extends DofusMessage {
  public static id: number = 9330;

  public amount: number | undefined = 0;
  public forSale: boolean | undefined = false;
  public instanceId: number | undefined = 0;

  public constructor(
    amount?: number | undefined,
    forSale?: boolean | undefined,
    instanceId?: number | undefined,
  ) {
    super();
    this.amount = amount;
    this.forSale = forSale;
    this.instanceId = instanceId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.amount!);
    writer.writeBoolean(this.forSale!);
    writer.writeInt(this.instanceId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.amount = reader.readVarLong();
    this.forSale = reader.readBoolean();
    this.instanceId = reader.readInt();
  }
}

export class LockableChangeCodeMessage extends DofusMessage {
  public static id: number = 768;

  public code: string | undefined;

  public constructor(code?: string | undefined) {
    super();
    this.code = code;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.code!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.code = reader.readUTF();
  }
}

export class HouseLockFromInsideRequestMessage extends LockableChangeCodeMessage {
  public static id = 3448;

  public constructor(code?: string | undefined) {
    super(code);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class HouseBuyRequestMessage extends DofusMessage {
  public static id: number = 4286;

  public proposedPrice: number | undefined = 0;

  public constructor(proposedPrice?: number | undefined) {
    super();
    this.proposedPrice = proposedPrice;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.proposedPrice!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.proposedPrice = reader.readVarLong();
  }
}

export class HouseSellFromInsideRequestMessage extends HouseSellRequestMessage {
  public static id = 5075;

  public constructor(
    amount?: number | undefined,
    forSale?: boolean | undefined,
    instanceId?: number | undefined,
  ) {
    super(amount, forSale, instanceId);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class HouseGuildRightsViewMessage extends DofusMessage {
  public static id: number = 7124;

  public instanceId: number | undefined = 0;
  public houseId: number | undefined = 0;

  public constructor(
    instanceId?: number | undefined,
    houseId?: number | undefined,
  ) {
    super();
    this.instanceId = instanceId;
    this.houseId = houseId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.instanceId!);
    writer.writeVarInt(this.houseId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.instanceId = reader.readInt();
    this.houseId = reader.readVarInt();
  }
}

export class OrnamentSelectRequestMessage extends DofusMessage {
  public static id: number = 4149;

  public ornamentId: number | undefined = 0;

  public constructor(ornamentId?: number | undefined) {
    super();
    this.ornamentId = ornamentId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.ornamentId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ornamentId = reader.readVarShort();
  }
}

export class TitlesAndOrnamentsListRequestMessage extends DofusMessage {
  public static id: number = 350;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class TitleSelectRequestMessage extends DofusMessage {
  public static id: number = 8025;

  public titleId: number | undefined = 0;

  public constructor(titleId?: number | undefined) {
    super();
    this.titleId = titleId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.titleId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.titleId = reader.readVarShort();
  }
}

export class PresetDeleteRequestMessage extends DofusMessage {
  public static id: number = 3688;

  public presetId: number | undefined = 0;

  public constructor(presetId?: number | undefined) {
    super();
    this.presetId = presetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.presetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.presetId = reader.readShort();
  }
}

export class ObjectUseMessage extends DofusMessage {
  public static id: number = 3065;

  public objectUID: number | undefined = 0;

  public constructor(objectUID?: number | undefined) {
    super();
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.objectUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.objectUID = reader.readVarInt();
  }
}

export class ObjectUseMultipleMessage extends ObjectUseMessage {
  public static id = 1126;

  public quantity: number | undefined = 0;

  public constructor(
    objectUID?: number | undefined,
    quantity?: number | undefined,
  ) {
    super(objectUID);
    this.quantity = quantity;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.quantity!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarInt();
  }
}

export class ObjectDropMessage extends DofusMessage {
  public static id: number = 5971;

  public quantity: number | undefined = 0;
  public objectUID: number | undefined = 0;

  public constructor(
    quantity?: number | undefined,
    objectUID?: number | undefined,
  ) {
    super();
    this.quantity = quantity;
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.quantity!);
    writer.writeVarInt(this.objectUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarInt();
    this.objectUID = reader.readVarInt();
  }
}

export class IconPresetSaveRequestMessage extends DofusMessage {
  public static id: number = 4898;

  public updateData: boolean | undefined = false;
  public symbolId: number | undefined = 0;
  public presetId: number | undefined = 0;

  public constructor(
    updateData?: boolean | undefined,
    symbolId?: number | undefined,
    presetId?: number | undefined,
  ) {
    super();
    this.updateData = updateData;
    this.symbolId = symbolId;
    this.presetId = presetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.updateData!);
    writer.writeByte(this.symbolId!);
    writer.writeShort(this.presetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.updateData = reader.readBoolean();
    this.symbolId = reader.readByte();
    this.presetId = reader.readShort();
  }
}

export class IconNamedPresetSaveRequestMessage extends IconPresetSaveRequestMessage {
  public static id = 8129;

  public type: number | undefined = 0;
  public name: string | undefined;

  public constructor(
    updateData?: boolean | undefined,
    symbolId?: number | undefined,
    presetId?: number | undefined,
    type?: number | undefined,
    name?: string | undefined,
  ) {
    super(updateData, symbolId, presetId);
    this.type = type;
    this.name = name;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.type!);
    writer.writeUTF(this.name!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.type = reader.readByte();
    this.name = reader.readUTF();
  }
}

export class ObjectDeleteMessage extends DofusMessage {
  public static id: number = 8147;

  public quantity: number | undefined = 0;
  public objectUID: number | undefined = 0;

  public constructor(
    quantity?: number | undefined,
    objectUID?: number | undefined,
  ) {
    super();
    this.quantity = quantity;
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.quantity!);
    writer.writeVarInt(this.objectUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarInt();
    this.objectUID = reader.readVarInt();
  }
}

export class AccessoryPreviewRequestMessage extends DofusMessage {
  public static id: number = 35;

  public genericId: number[] | undefined;

  public constructor(genericId?: number[] | undefined) {
    super();
    this.genericId = genericId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.genericId!.length);
    this.genericId!.forEach((current: number) => writer.writeVarShort(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.genericId = [];
    const countGenericId = reader.readShort();
    for (let i: number = 0; i < countGenericId; i++) {
      this.genericId.push(reader.readVarShort());
    }
  }
}

export class ShortcutBarRemoveRequestMessage extends DofusMessage {
  public static id: number = 906;

  public slot: number | undefined = 0;
  public barType: number | undefined = 0;

  public constructor(slot?: number | undefined, barType?: number | undefined) {
    super();
    this.slot = slot;
    this.barType = barType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.slot!);
    writer.writeByte(this.barType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.slot = reader.readByte();
    this.barType = reader.readByte();
  }
}

export class ObjectUseOnCharacterMessage extends ObjectUseMessage {
  public static id = 8768;

  public characterId: number | undefined = 0;

  public constructor(
    objectUID?: number | undefined,
    characterId?: number | undefined,
  ) {
    super(objectUID);
    this.characterId = characterId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.characterId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.characterId = reader.readVarLong();
  }
}

export class ShortcutBarSwapRequestMessage extends DofusMessage {
  public static id: number = 709;

  public secondSlot: number | undefined = 0;
  public firstSlot: number | undefined = 0;
  public barType: number | undefined = 0;

  public constructor(
    secondSlot?: number | undefined,
    firstSlot?: number | undefined,
    barType?: number | undefined,
  ) {
    super();
    this.secondSlot = secondSlot;
    this.firstSlot = firstSlot;
    this.barType = barType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.secondSlot!);
    writer.writeByte(this.firstSlot!);
    writer.writeByte(this.barType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.secondSlot = reader.readByte();
    this.firstSlot = reader.readByte();
    this.barType = reader.readByte();
  }
}

export class ObjectUseOnCellMessage extends ObjectUseMessage {
  public static id = 5623;

  public cells: number | undefined = 0;

  public constructor(
    objectUID?: number | undefined,
    cells?: number | undefined,
  ) {
    super(objectUID);
    this.cells = cells;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.cells!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cells = reader.readVarShort();
  }
}

export class ShortcutBarAddRequestMessage extends DofusMessage {
  public static id: number = 9513;

  public shortcut: Shortcut | undefined;
  public barType: number | undefined = 0;

  public constructor(
    shortcut?: Shortcut | undefined,
    barType?: number | undefined,
  ) {
    super();
    this.shortcut = shortcut;
    this.barType = barType;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.shortcut!.id);
    this.shortcut!.serialize(writer);
    writer.writeByte(this.barType!);
  }

  public deserialize(reader: BinaryDataReader): void {
    const shortcutTypeId: number = reader.readShort();
    this.shortcut = new types[shortcutTypeId]() as Shortcut;
    this.shortcut!.deserialize(reader);
    this.barType = reader.readByte();
  }
}

export class IdolsPresetSaveRequestMessage extends IconPresetSaveRequestMessage {
  public static id = 478;

  public constructor(
    updateData?: boolean | undefined,
    symbolId?: number | undefined,
    presetId?: number | undefined,
  ) {
    super(updateData, symbolId, presetId);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class PresetUseRequestMessage extends DofusMessage {
  public static id: number = 1855;

  public presetId: number | undefined = 0;

  public constructor(presetId?: number | undefined) {
    super();
    this.presetId = presetId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.presetId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.presetId = reader.readShort();
  }
}

export class ObjectSetPositionMessage extends DofusMessage {
  public static id: number = 5107;

  public quantity: number | undefined = 0;
  public position: number | undefined = 63;
  public objectUID: number | undefined = 0;

  public constructor(
    quantity?: number | undefined,
    position?: number | undefined,
    objectUID?: number | undefined,
  ) {
    super();
    this.quantity = quantity;
    this.position = position;
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.quantity!);
    writer.writeShort(this.position!);
    writer.writeVarInt(this.objectUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarInt();
    this.position = reader.readShort();
    this.objectUID = reader.readVarInt();
  }
}

export class ExchangeBidHouseBuyMessage extends DofusMessage {
  public static id: number = 3195;

  public price: number | undefined = 0;
  public qty: number | undefined = 0;
  public uid: number | undefined = 0;

  public constructor(
    price?: number | undefined,
    qty?: number | undefined,
    uid?: number | undefined,
  ) {
    super();
    this.price = price;
    this.qty = qty;
    this.uid = uid;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.price!);
    writer.writeVarInt(this.qty!);
    writer.writeVarInt(this.uid!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.price = reader.readVarLong();
    this.qty = reader.readVarInt();
    this.uid = reader.readVarInt();
  }
}

export class ExchangeBidHousePriceMessage extends DofusMessage {
  public static id: number = 8992;

  public genId: number | undefined = 0;

  public constructor(genId?: number | undefined) {
    super();
    this.genId = genId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.genId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.genId = reader.readVarShort();
  }
}

export class ExchangeBidHouseSearchMessage extends DofusMessage {
  public static id: number = 6250;

  public follow: boolean | undefined = false;
  public genId: number | undefined = 0;

  public constructor(follow?: boolean | undefined, genId?: number | undefined) {
    super();
    this.follow = follow;
    this.genId = genId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.follow!);
    writer.writeVarShort(this.genId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.follow = reader.readBoolean();
    this.genId = reader.readVarShort();
  }
}

export class ExchangeBidHouseListMessage extends DofusMessage {
  public static id: number = 2675;

  public follow: boolean | undefined = false;
  public id_: number | undefined = 0;

  public constructor(follow?: boolean | undefined, id_?: number | undefined) {
    super();
    this.follow = follow;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.follow!);
    writer.writeVarShort(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.follow = reader.readBoolean();
    this.id_ = reader.readVarShort();
  }
}

export class ExchangeBidHouseTypeMessage extends DofusMessage {
  public static id: number = 4445;

  public follow: boolean | undefined = false;
  public type: number | undefined = 0;

  public constructor(follow?: boolean | undefined, type?: number | undefined) {
    super();
    this.follow = follow;
    this.type = type;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.follow!);
    writer.writeVarInt(this.type!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.follow = reader.readBoolean();
    this.type = reader.readVarInt();
  }
}

export class ExchangeObjectModifyPricedMessage extends ExchangeObjectMovePricedMessage {
  public static id = 3929;

  public constructor(
    quantity?: number | undefined,
    objectUID?: number | undefined,
    price?: number | undefined,
  ) {
    super(quantity, objectUID, price);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class StopToListenRunningFightRequestMessage extends DofusMessage {
  public static id: number = 4030;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class GameFightSpectatePlayerRequestMessage extends DofusMessage {
  public static id: number = 9098;

  public playerId: number | undefined = 0;

  public constructor(playerId?: number | undefined) {
    super();
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
  }
}

export class MapRunningFightDetailsRequestMessage extends DofusMessage {
  public static id: number = 8028;

  public fightId: number | undefined = 0;

  public constructor(fightId?: number | undefined) {
    super();
    this.fightId = fightId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.fightId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.fightId = reader.readVarShort();
  }
}

export class MapRunningFightListRequestMessage extends DofusMessage {
  public static id: number = 1407;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ExchangeAcceptMessage extends DofusMessage {
  public static id: number = 3024;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ExchangeReadyMessage extends DofusMessage {
  public static id: number = 5849;

  public step: number | undefined = 0;
  public ready: boolean | undefined = false;

  public constructor(step?: number | undefined, ready?: boolean | undefined) {
    super();
    this.step = step;
    this.ready = ready;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.step!);
    writer.writeBoolean(this.ready!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.step = reader.readVarShort();
    this.ready = reader.readBoolean();
  }
}

export class FocusedExchangeReadyMessage extends ExchangeReadyMessage {
  public static id = 2904;

  public focusActionId: number | undefined = 0;

  public constructor(
    step?: number | undefined,
    ready?: boolean | undefined,
    focusActionId?: number | undefined,
  ) {
    super(step, ready);
    this.focusActionId = focusActionId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.focusActionId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.focusActionId = reader.readVarInt();
  }
}

export class GameMapMovementCancelMessage extends DofusMessage {
  public static id: number = 4409;

  public cellId: number | undefined = 0;

  public constructor(cellId?: number | undefined) {
    super();
    this.cellId = cellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.cellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.cellId = reader.readVarShort();
  }
}

export class ChangeMapMessage extends DofusMessage {
  public static id: number = 3431;

  public autopilot: boolean | undefined = false;
  public mapId: number | undefined = 0;

  public constructor(
    autopilot?: boolean | undefined,
    mapId?: number | undefined,
  ) {
    super();
    this.autopilot = autopilot;
    this.mapId = mapId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.autopilot!);
    writer.writeDouble(this.mapId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.autopilot = reader.readBoolean();
    this.mapId = reader.readDouble();
  }
}

export class GameCautiousMapMovementRequestMessage extends GameMapMovementRequestMessage {
  public static id = 1760;

  public constructor(
    mapId?: number | undefined,
    keyMovements?: number[] | undefined,
  ) {
    super(mapId, keyMovements);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class InteractiveUseRequestMessage extends DofusMessage {
  public static id: number = 9714;

  public skillInstanceUid: number | undefined = 0;
  public elemId: number | undefined = 0;

  public constructor(
    skillInstanceUid?: number | undefined,
    elemId?: number | undefined,
  ) {
    super();
    this.skillInstanceUid = skillInstanceUid;
    this.elemId = elemId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.skillInstanceUid!);
    writer.writeVarInt(this.elemId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.skillInstanceUid = reader.readVarInt();
    this.elemId = reader.readVarInt();
  }
}

export class InteractiveUseWithParamRequestMessage extends InteractiveUseRequestMessage {
  public static id = 6220;

  public id_: number | undefined = 0;

  public constructor(
    skillInstanceUid?: number | undefined,
    elemId?: number | undefined,
    id_?: number | undefined,
  ) {
    super(skillInstanceUid, elemId);
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeInt(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.id_ = reader.readInt();
  }
}

export class GameRolePlayAttackMonsterRequestMessage extends DofusMessage {
  public static id: number = 3767;

  public monsterGroupId: number | undefined = 0;

  public constructor(monsterGroupId?: number | undefined) {
    super();
    this.monsterGroupId = monsterGroupId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeDouble(this.monsterGroupId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.monsterGroupId = reader.readDouble();
  }
}

export class GameMapMovementConfirmMessage extends DofusMessage {
  public static id: number = 8420;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ExchangeObjectMoveKamaMessage extends DofusMessage {
  public static id: number = 427;

  public quantity: number | undefined = 0;

  public constructor(quantity?: number | undefined) {
    super();
    this.quantity = quantity;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.quantity!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.quantity = reader.readVarLong();
  }
}

export class ExchangeObjectTransfertExistingToInvMessage extends DofusMessage {
  public static id: number = 7123;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ExchangeObjectTransfertListFromInvMessage extends DofusMessage {
  public static id: number = 3871;

  public ids: number[] | undefined;

  public constructor(ids?: number[] | undefined) {
    super();
    this.ids = ids;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.ids!.length);
    this.ids!.forEach((current: number) => writer.writeVarInt(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ids = [];
    const countIds = reader.readShort();
    for (let i: number = 0; i < countIds; i++) {
      this.ids.push(reader.readVarInt());
    }
  }
}

export class ExchangeObjectTransfertAllToInvMessage extends DofusMessage {
  public static id: number = 8392;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ExchangeObjectTransfertListToInvMessage extends DofusMessage {
  public static id: number = 1721;

  public ids: number[] | undefined;

  public constructor(ids?: number[] | undefined) {
    super();
    this.ids = ids;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.ids!.length);
    this.ids!.forEach((current: number) => writer.writeVarInt(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.ids = [];
    const countIds = reader.readShort();
    for (let i: number = 0; i < countIds; i++) {
      this.ids.push(reader.readVarInt());
    }
  }
}

export class ExchangeObjectTransfertListWithQuantityToInvMessage extends DofusMessage {
  public static id: number = 5493;

  public qtys: number[] | undefined;
  public ids: number[] | undefined;

  public constructor(qtys?: number[] | undefined, ids?: number[] | undefined) {
    super();
    this.qtys = qtys;
    this.ids = ids;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.qtys!.length);
    this.qtys!.forEach((current: number) => writer.writeVarInt(current));
    writer.writeShort(this.ids!.length);
    this.ids!.forEach((current: number) => writer.writeVarInt(current));
  }

  public deserialize(reader: BinaryDataReader): void {
    this.qtys = [];
    const countQtys = reader.readShort();
    for (let i: number = 0; i < countQtys; i++) {
      this.qtys.push(reader.readVarInt());
    }
    this.ids = [];
    const countIds = reader.readShort();
    for (let i: number = 0; i < countIds; i++) {
      this.ids.push(reader.readVarInt());
    }
  }
}

export class ExchangeObjectTransfertAllFromInvMessage extends DofusMessage {
  public static id: number = 9957;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ExchangeObjectTransfertExistingFromInvMessage extends DofusMessage {
  public static id: number = 8876;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class NpcDialogReplyMessage extends DofusMessage {
  public static id: number = 398;

  public replyId: number | undefined = 0;

  public constructor(replyId?: number | undefined) {
    super();
    this.replyId = replyId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.replyId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.replyId = reader.readVarInt();
  }
}

export class PaddockBuyRequestMessage extends DofusMessage {
  public static id: number = 8638;

  public proposedPrice: number | undefined = 0;

  public constructor(proposedPrice?: number | undefined) {
    super();
    this.proposedPrice = proposedPrice;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.proposedPrice!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.proposedPrice = reader.readVarLong();
  }
}

export class PaddockSellRequestMessage extends DofusMessage {
  public static id: number = 2370;

  public forSale: boolean | undefined = false;
  public price: number | undefined = 0;

  public constructor(
    forSale?: boolean | undefined,
    price?: number | undefined,
  ) {
    super();
    this.forSale = forSale;
    this.price = price;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.forSale!);
    writer.writeVarLong(this.price!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.forSale = reader.readBoolean();
    this.price = reader.readVarLong();
  }
}

export class GuildInvitationAnswerMessage extends DofusMessage {
  public static id: number = 8895;

  public accept: boolean | undefined = false;

  public constructor(accept?: boolean | undefined) {
    super();
    this.accept = accept;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.accept!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accept = reader.readBoolean();
  }
}

export class GuildModificationEmblemValidMessage extends DofusMessage {
  public static id: number = 3249;

  public guildEmblem: GuildEmblem | undefined;

  public constructor(guildEmblem?: GuildEmblem | undefined) {
    super();
    this.guildEmblem = guildEmblem;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.guildEmblem!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildEmblem = new GuildEmblem();
    this.guildEmblem!.deserialize(reader);
  }
}

export class GuildModificationValidMessage extends DofusMessage {
  public static id: number = 7329;

  public guildEmblem: GuildEmblem | undefined;
  public guildName: string | undefined;

  public constructor(
    guildEmblem?: GuildEmblem | undefined,
    guildName?: string | undefined,
  ) {
    super();
    this.guildEmblem = guildEmblem;
    this.guildName = guildName;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.guildEmblem!.serialize(writer);
    writer.writeUTF(this.guildName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildEmblem = new GuildEmblem();
    this.guildEmblem!.deserialize(reader);
    this.guildName = reader.readUTF();
  }
}

export class GuildModificationNameValidMessage extends DofusMessage {
  public static id: number = 5982;

  public guildName: string | undefined;

  public constructor(guildName?: string | undefined) {
    super();
    this.guildName = guildName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.guildName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildName = reader.readUTF();
  }
}

export class GuildCreationValidMessage extends DofusMessage {
  public static id: number = 1395;

  public guildEmblem: GuildEmblem | undefined;
  public guildName: string | undefined;

  public constructor(
    guildEmblem?: GuildEmblem | undefined,
    guildName?: string | undefined,
  ) {
    super();
    this.guildEmblem = guildEmblem;
    this.guildName = guildName;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.guildEmblem!.serialize(writer);
    writer.writeUTF(this.guildName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.guildEmblem = new GuildEmblem();
    this.guildEmblem!.deserialize(reader);
    this.guildName = reader.readUTF();
  }
}

export class DiceRollRequestMessage extends DofusMessage {
  public static id: number = 932;

  public channel: number | undefined = 0;
  public faces: number | undefined = 0;
  public dice: number | undefined = 0;

  public constructor(
    channel?: number | undefined,
    faces?: number | undefined,
    dice?: number | undefined,
  ) {
    super();
    this.channel = channel;
    this.faces = faces;
    this.dice = dice;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.channel!);
    writer.writeVarInt(this.faces!);
    writer.writeVarInt(this.dice!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.channel = reader.readByte();
    this.faces = reader.readVarInt();
    this.dice = reader.readVarInt();
  }
}

export class TeleportBuddiesAnswerMessage extends DofusMessage {
  public static id: number = 3499;

  public accept: boolean | undefined = false;

  public constructor(accept?: boolean | undefined) {
    super();
    this.accept = accept;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.accept!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accept = reader.readBoolean();
  }
}

export class AllianceInvitationAnswerMessage extends DofusMessage {
  public static id: number = 6962;

  public accept: boolean | undefined = false;

  public constructor(accept?: boolean | undefined) {
    super();
    this.accept = accept;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.accept!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.accept = reader.readBoolean();
  }
}

export class AllianceModificationNameAndTagValidMessage extends DofusMessage {
  public static id: number = 8950;

  public allianceTag: string | undefined;
  public allianceName: string | undefined;

  public constructor(
    allianceTag?: string | undefined,
    allianceName?: string | undefined,
  ) {
    super();
    this.allianceTag = allianceTag;
    this.allianceName = allianceName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.allianceTag!);
    writer.writeUTF(this.allianceName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceTag = reader.readUTF();
    this.allianceName = reader.readUTF();
  }
}

export class AllianceCreationValidMessage extends DofusMessage {
  public static id: number = 5504;

  public allianceEmblem: GuildEmblem | undefined;
  public allianceTag: string | undefined;
  public allianceName: string | undefined;

  public constructor(
    allianceEmblem?: GuildEmblem | undefined,
    allianceTag?: string | undefined,
    allianceName?: string | undefined,
  ) {
    super();
    this.allianceEmblem = allianceEmblem;
    this.allianceTag = allianceTag;
    this.allianceName = allianceName;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.allianceEmblem!.serialize(writer);
    writer.writeUTF(this.allianceTag!);
    writer.writeUTF(this.allianceName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.allianceEmblem = new GuildEmblem();
    this.allianceEmblem!.deserialize(reader);
    this.allianceTag = reader.readUTF();
    this.allianceName = reader.readUTF();
  }
}

export class AllianceModificationValidMessage extends DofusMessage {
  public static id: number = 4144;

  public Alliancemblem: GuildEmblem | undefined;
  public allianceTag: string | undefined;
  public allianceName: string | undefined;

  public constructor(
    Alliancemblem?: GuildEmblem | undefined,
    allianceTag?: string | undefined,
    allianceName?: string | undefined,
  ) {
    super();
    this.Alliancemblem = Alliancemblem;
    this.allianceTag = allianceTag;
    this.allianceName = allianceName;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.Alliancemblem!.serialize(writer);
    writer.writeUTF(this.allianceTag!);
    writer.writeUTF(this.allianceName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.Alliancemblem = new GuildEmblem();
    this.Alliancemblem!.deserialize(reader);
    this.allianceTag = reader.readUTF();
    this.allianceName = reader.readUTF();
  }
}

export class AllianceModificationEmblemValidMessage extends DofusMessage {
  public static id: number = 8937;

  public Alliancemblem: GuildEmblem | undefined;

  public constructor(Alliancemblem?: GuildEmblem | undefined) {
    super();
    this.Alliancemblem = Alliancemblem;
  }

  public serialize(writer: BinaryDataWriter): void {
    this.Alliancemblem!.serialize(writer);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.Alliancemblem = new GuildEmblem();
    this.Alliancemblem!.deserialize(reader);
  }
}

export class IdolSelectRequestMessage extends DofusMessage {
  public static id: number = 5093;

  public idolId: number | undefined = 0;
  public activate: boolean | undefined = false;
  public party: boolean | undefined = false;

  public constructor(
    idolId?: number | undefined,
    activate?: boolean | undefined,
    party?: boolean | undefined,
  ) {
    super();
    this.idolId = idolId;
    this.activate = activate;
    this.party = party;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.idolId!);
    let box0: number = 0;
    box0 = setFlag(box0, 0, this.activate!);
    box0 = setFlag(box0, 1, this.party!);
    writer.writeByte(box0);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.idolId = reader.readVarShort();
    const box0 = reader.readByte();
    this.activate = getFlag(box0, 0);
    this.party = getFlag(box0, 1);
  }
}

export class IdolPartyRegisterRequestMessage extends DofusMessage {
  public static id: number = 868;

  public register: boolean | undefined = false;

  public constructor(register?: boolean | undefined) {
    super();
    this.register = register;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.register!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.register = reader.readBoolean();
  }
}

export class ForgettableSpellClientActionMessage extends DofusMessage {
  public static id: number = 6523;

  public action: number | undefined = 0;
  public spellId: number | undefined = 0;

  public constructor(
    action?: number | undefined,
    spellId?: number | undefined,
  ) {
    super();
    this.action = action;
    this.spellId = spellId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.action!);
    writer.writeInt(this.spellId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.action = reader.readByte();
    this.spellId = reader.readInt();
  }
}

export class ActivityHideRequestMessage extends DofusMessage {
  public static id: number = 9127;

  public activityId: number | undefined = 0;

  public constructor(activityId?: number | undefined) {
    super();
    this.activityId = activityId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.activityId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.activityId = reader.readVarShort();
  }
}

export class ActivitySuggestionsRequestMessage extends DofusMessage {
  public static id: number = 2540;

  public nbCards: number | undefined = 0;
  public minLevel: number | undefined = 0;
  public maxLevel: number | undefined = 0;
  public areaId: number | undefined = 0;
  public activityCategoryId: number | undefined = 0;

  public constructor(
    nbCards?: number | undefined,
    minLevel?: number | undefined,
    maxLevel?: number | undefined,
    areaId?: number | undefined,
    activityCategoryId?: number | undefined,
  ) {
    super();
    this.nbCards = nbCards;
    this.minLevel = minLevel;
    this.maxLevel = maxLevel;
    this.areaId = areaId;
    this.activityCategoryId = activityCategoryId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.nbCards!);
    writer.writeVarShort(this.minLevel!);
    writer.writeVarShort(this.maxLevel!);
    writer.writeVarShort(this.areaId!);
    writer.writeVarShort(this.activityCategoryId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.nbCards = reader.readShort();
    this.minLevel = reader.readVarShort();
    this.maxLevel = reader.readVarShort();
    this.areaId = reader.readVarShort();
    this.activityCategoryId = reader.readVarShort();
  }
}

export class ActivityLockRequestMessage extends DofusMessage {
  public static id: number = 579;

  public lock: boolean | undefined = false;
  public activityId: number | undefined = 0;

  public constructor(
    lock?: boolean | undefined,
    activityId?: number | undefined,
  ) {
    super();
    this.lock = lock;
    this.activityId = activityId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.lock!);
    writer.writeVarShort(this.activityId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.lock = reader.readBoolean();
    this.activityId = reader.readVarShort();
  }
}

export class HaapiBufferListRequestMessage extends DofusMessage {
  public static id: number = 9520;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class HaapiConfirmationRequestMessage extends DofusMessage {
  public static id: number = 5599;

  public action: number | undefined = 0;
  public rate: number | undefined = 0;
  public ogrines: number | undefined = 0;
  public kamas: number | undefined = 0;

  public constructor(
    action?: number | undefined,
    rate?: number | undefined,
    ogrines?: number | undefined,
    kamas?: number | undefined,
  ) {
    super();
    this.action = action;
    this.rate = rate;
    this.ogrines = ogrines;
    this.kamas = kamas;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.action!);
    writer.writeVarShort(this.rate!);
    writer.writeVarLong(this.ogrines!);
    writer.writeVarLong(this.kamas!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.action = reader.readByte();
    this.rate = reader.readVarShort();
    this.ogrines = reader.readVarLong();
    this.kamas = reader.readVarLong();
  }
}

export class HaapiCancelBidRequestMessage extends DofusMessage {
  public static id: number = 3479;

  public type: number | undefined = 0;
  public id_: number | undefined = 0;

  public constructor(type?: number | undefined, id_?: number | undefined) {
    super();
    this.type = type;
    this.id_ = id_;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.type!);
    writer.writeVarLong(this.id_!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.type = reader.readByte();
    this.id_ = reader.readVarLong();
  }
}

export class HaapiShopApiKeyRequestMessage extends DofusMessage {
  public static id: number = 4578;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class HaapiValidationRequestMessage extends DofusMessage {
  public static id: number = 3931;

  public transaction: string | undefined;

  public constructor(transaction?: string | undefined) {
    super();
    this.transaction = transaction;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.transaction!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.transaction = reader.readUTF();
  }
}

export class HaapiTokenRequestMessage extends DofusMessage {
  public static id: number = 7220;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class HaapiConsumeBufferRequestMessage extends DofusMessage {
  public static id: number = 7621;

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class SequenceNumberMessage extends DofusMessage {
  public static id: number = 1059;

  public number: number | undefined = 0;

  public constructor(number?: number | undefined) {
    super();
    this.number = number;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.number!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.number = reader.readShort();
  }
}

export class LivingObjectChangeSkinRequestMessage extends DofusMessage {
  public static id: number = 7679;

  public skinId: number | undefined = 0;
  public livingPosition: number | undefined = 0;
  public livingUID: number | undefined = 0;

  public constructor(
    skinId?: number | undefined,
    livingPosition?: number | undefined,
    livingUID?: number | undefined,
  ) {
    super();
    this.skinId = skinId;
    this.livingPosition = livingPosition;
    this.livingUID = livingUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarInt(this.skinId!);
    writer.writeByte(this.livingPosition!);
    writer.writeVarInt(this.livingUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.skinId = reader.readVarInt();
    this.livingPosition = reader.readByte();
    this.livingUID = reader.readVarInt();
  }
}

export class SymbioticObjectAssociateRequestMessage extends DofusMessage {
  public static id: number = 7604;

  public hostPos: number | undefined = 0;
  public hostUID: number | undefined = 0;
  public symbiotePos: number | undefined = 0;
  public symbioteUID: number | undefined = 0;

  public constructor(
    hostPos?: number | undefined,
    hostUID?: number | undefined,
    symbiotePos?: number | undefined,
    symbioteUID?: number | undefined,
  ) {
    super();
    this.hostPos = hostPos;
    this.hostUID = hostUID;
    this.symbiotePos = symbiotePos;
    this.symbioteUID = symbioteUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.hostPos!);
    writer.writeVarInt(this.hostUID!);
    writer.writeByte(this.symbiotePos!);
    writer.writeVarInt(this.symbioteUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.hostPos = reader.readByte();
    this.hostUID = reader.readVarInt();
    this.symbiotePos = reader.readByte();
    this.symbioteUID = reader.readVarInt();
  }
}

export class MimicryObjectFeedAndAssociateRequestMessage extends SymbioticObjectAssociateRequestMessage {
  public static id = 2549;

  public foodPos: number | undefined = 0;
  public preview: boolean | undefined = false;
  public foodUID: number | undefined = 0;

  public constructor(
    hostPos?: number | undefined,
    hostUID?: number | undefined,
    symbiotePos?: number | undefined,
    symbioteUID?: number | undefined,
    foodPos?: number | undefined,
    preview?: boolean | undefined,
    foodUID?: number | undefined,
  ) {
    super(hostPos, hostUID, symbiotePos, symbioteUID);
    this.foodPos = foodPos;
    this.preview = preview;
    this.foodUID = foodUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.foodPos!);
    writer.writeBoolean(this.preview!);
    writer.writeVarInt(this.foodUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.foodPos = reader.readByte();
    this.preview = reader.readBoolean();
    this.foodUID = reader.readVarInt();
  }
}

export class WrapperObjectDissociateRequestMessage extends DofusMessage {
  public static id: number = 9634;

  public hostPos: number | undefined = 0;
  public hostUID: number | undefined = 0;

  public constructor(
    hostPos?: number | undefined,
    hostUID?: number | undefined,
  ) {
    super();
    this.hostPos = hostPos;
    this.hostUID = hostUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.hostPos!);
    writer.writeVarInt(this.hostUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.hostPos = reader.readByte();
    this.hostUID = reader.readVarInt();
  }
}

export class MimicryObjectEraseRequestMessage extends DofusMessage {
  public static id: number = 3575;

  public hostPos: number | undefined = 0;
  public hostUID: number | undefined = 0;

  public constructor(
    hostPos?: number | undefined,
    hostUID?: number | undefined,
  ) {
    super();
    this.hostPos = hostPos;
    this.hostUID = hostUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.hostPos!);
    writer.writeVarInt(this.hostUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.hostPos = reader.readByte();
    this.hostUID = reader.readVarInt();
  }
}

export class LivingObjectDissociateMessage extends DofusMessage {
  public static id: number = 9254;

  public livingPosition: number | undefined = 0;
  public livingUID: number | undefined = 0;

  public constructor(
    livingPosition?: number | undefined,
    livingUID?: number | undefined,
  ) {
    super();
    this.livingPosition = livingPosition;
    this.livingUID = livingUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.livingPosition!);
    writer.writeVarInt(this.livingUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.livingPosition = reader.readByte();
    this.livingUID = reader.readVarInt();
  }
}

export class ObjectFeedMessage extends DofusMessage {
  public static id: number = 5845;

  public meal: ObjectItemQuantity[] | undefined;
  public objectUID: number | undefined = 0;

  public constructor(
    meal?: ObjectItemQuantity[] | undefined,
    objectUID?: number | undefined,
  ) {
    super();
    this.meal = meal;
    this.objectUID = objectUID;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.meal!.length);
    this.meal!.forEach((current) => {
      current.serialize(writer);
    });
    writer.writeVarInt(this.objectUID!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.meal = [];
    const countMeal = reader.readShort();
    for (let i: number = 0; i < countMeal; i++) {
      const type: ObjectItemQuantity = new ObjectItemQuantity();
      type.deserialize(reader);
      this.meal.push(type);
    }
    this.objectUID = reader.readVarInt();
  }
}

export class GameFightOptionToggleMessage extends DofusMessage {
  public static id: number = 2382;

  public option: number | undefined = 3;

  public constructor(option?: number | undefined) {
    super();
    this.option = option;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeByte(this.option!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.option = reader.readByte();
  }
}

export class LockableUseCodeMessage extends DofusMessage {
  public static id: number = 5618;

  public code: string | undefined;

  public constructor(code?: string | undefined) {
    super();
    this.code = code;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.code!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.code = reader.readUTF();
  }
}

export class BasicWhoAmIRequestMessage extends DofusMessage {
  public static id: number = 1281;

  public verbose: boolean | undefined = false;

  public constructor(verbose?: boolean | undefined) {
    super();
    this.verbose = verbose;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeBoolean(this.verbose!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.verbose = reader.readBoolean();
  }
}

export class BasicStatMessage extends DofusMessage {
  public static id: number = 514;

  public statId: number | undefined = 0;
  public timeSpent: number | undefined = 0;

  public constructor(
    statId?: number | undefined,
    timeSpent?: number | undefined,
  ) {
    super();
    this.statId = statId;
    this.timeSpent = timeSpent;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarShort(this.statId!);
    writer.writeDouble(this.timeSpent!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.statId = reader.readVarShort();
    this.timeSpent = reader.readDouble();
  }
}

export class BasicStatWithDataMessage extends BasicStatMessage {
  public static id = 1144;

  public datas: StatisticData[] | undefined;

  public constructor(
    statId?: number | undefined,
    timeSpent?: number | undefined,
    datas?: StatisticData[] | undefined,
  ) {
    super(statId, timeSpent);
    this.datas = datas;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeShort(this.datas!.length);
    this.datas!.forEach((current) => {
      writer.writeShort(current.id);
      current.serialize(writer);
    });
  }

  public deserialize(reader: BinaryDataReader): void {
    this.datas = [];
    const countDatas = reader.readShort();
    for (let i: number = 0; i < countDatas; i++) {
      const datasTypeId: number = reader.readShort();
      const type: StatisticData = new types[datasTypeId]() as StatisticData;
      type.deserialize(reader);
      this.datas.push(type);
    }
  }
}

export class PartyLocateMembersRequestMessage extends AbstractPartyMessage {
  public static id = 6564;

  public constructor(partyId?: number | undefined) {
    super(partyId);
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public serialize(writer: BinaryDataWriter): void {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars
  public deserialize(reader: BinaryDataReader): void {}
}

export class ContactLookRequestByNameMessage extends ContactLookRequestMessage {
  public static id = 4808;

  public playerName: string | undefined;

  public constructor(
    contactType?: number | undefined,
    requestId?: number | undefined,
    playerName?: string | undefined,
  ) {
    super(contactType, requestId);
    this.playerName = playerName;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeUTF(this.playerName!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerName = reader.readUTF();
  }
}

export class JobCrafterDirectoryEntryRequestMessage extends DofusMessage {
  public static id: number = 3858;

  public playerId: number | undefined = 0;

  public constructor(playerId?: number | undefined) {
    super();
    this.playerId = playerId;
  }

  public serialize(writer: BinaryDataWriter): void {
    writer.writeVarLong(this.playerId!);
  }

  public deserialize(reader: BinaryDataReader): void {
    this.playerId = reader.readVarLong();
  }
}

export const types: { [key: number]: typeof DofusType } = {
  1244: GameContextActorPositionInformations,
  801: GameContextActorInformations,
  102: GameRolePlayActorInformations,
  3148: GameRolePlayGroupMonsterInformations,
  8913: HavenBagRoomPreviewInformation,
  4768: InteractiveElement,
  5068: GameFightFighterInformations,
  5544: GameFightEntityInformation,
  6265: GameRolePlayPrismInformations,
  858: GameFightAIInformations,
  1922: GameFightMonsterInformations,
  5382: GameRolePlayGroupMonsterWaveInformations,
  5071: GameRolePlayTaxCollectorInformations,
  6660: GameRolePlayNamedActorInformations,
  9304: GameRolePlayMountInformations,
  7419: GameRolePlayNpcInformations,
  3824: GameRolePlayNpcWithQuestInformations,
  3425: GameRolePlayMerchantInformations,
  345: GameRolePlayHumanoidInformations,
  9532: GameRolePlayCharacterInformations,
  8125: GameRolePlayPortalInformations,
  4120: GameRolePlayMutantInformations,
  7293: GameFightFighterNamedInformations,
  2405: GameFightCharacterInformations,
  5235: GameFightTaxCollectorInformations,
  9546: EntityLook,
  8670: SubEntity,
  1657: AbstractFightDispellableEffect,
  253: GameContextSummonsInformation,
  7366: FightTemporaryBoostEffect,
  5149: SpawnInformation,
  8892: SpawnCompanionInformation,
  736: BaseSpawnMonsterInformation,
  6368: SpawnScaledMonsterInformation,
  2015: GameContextBasicSpawnInformation,
  5389: GameFightSpellCooldown,
  457: SpawnCharacterInformation,
  3120: SpawnMonsterInformation,
  7424: EntityDispositionInformations,
  693: HumanOption,
  3939: HumanOptionAlliance,
  77: HumanOptionFollowers,
  6459: ActorOrientation,
  9226: GroupMonsterStaticInformations,
  7547: HumanInformations,
  5640: FightTeamMemberInformations,
  3346: HouseInformations,
  8890: HouseOnMapInformations,
  1192: HumanOptionObjectUse,
  3243: HouseInstanceInformations,
  3456: HumanOptionEmote,
  4848: ObjectItemInRolePlay,
  5575: PaddockItem,
  3071: AbstractFightTeamInformations,
  4654: FightTeamInformations,
  1904: IndexedEntityLook,
  2427: HumanOptionSkillUse,
  1183: AlternativeMonstersInGroupLightInformations,
  5008: FightCommonInformations,
  7429: MapNpcQuestInfo,
  4246: MonsterInGroupLightInformations,
  2614: MonsterInGroupInformations,
  5512: MapObstacle,
  1240: GroupMonsterStaticInformationsWithAlternatives,
  7794: FightEntityDispositionInformations,
  5320: BreachBranch,
  8490: IdentifiedEntityDispositionInformations,
  7058: StatedElement,
  8982: ActorRestrictionsInformations,
  1918: CharacterCharacteristicsInformations,
  7662: GuildApplicationInformation,
  6359: AbstractSocialGroupInfos,
  4374: BasicGuildInformations,
  1201: GuildInformations,
  2714: AbstractCharacterInformation,
  4480: CharacterBasicMinimalInformations,
  6674: CharacterMinimalInformations,
  9551: CharacterMinimalPlusLookInformations,
  8097: CharacterBaseInformations,
  8005: FightDispellableEffectExtendedInformations,
  2389: GameActionMarkedCell,
  6627: FightResultListEntry,
  4819: FightResultFighterListEntry,
  8117: GameFightResumeSlaveInfo,
  5095: NamedPartyTeamWithOutcome,
  158: GameActionMark,
  6995: NamedPartyTeam,
  960: Idol,
  2861: GameFightMutantInformations,
  9771: FightResultPlayerListEntry,
  1517: FightResultTaxCollectorListEntry,
  3026: GameFightEffectTriggerCount,
  4565: CharacterCharacteristic,
  9089: CharacterCharacteristicDetailed,
  9575: CharacterUsableCharacteristicDetailed,
  1995: CharacterCharacteristicValue,
  842: Item,
  2916: ObjectItem,
  5685: ObjectEffect,
  2163: ObjectEffectInteger,
  8866: TrustCertificate,
  4425: CharacterSpellModification,
  6784: InteractiveElementSkill,
  1975: QuestActiveInformations,
  7425: GameFightCharacteristics,
  6060: PrismInformation,
  4022: TaxCollectorStaticInformations,
  2262: SkillActionDescription,
  6151: SkillActionDescriptionCraft,
  2005: JobDescription,
  9286: SkillActionDescriptionTimed,
  5191: SkillActionDescriptionCollect,
  5238: GameServerInformations,
  1965: PaddockInformations,
  3435: PaddockInstancesInformations,
  3536: PaddockBuyableInformations,
  3944: GameRolePlayNpcQuestFlag,
  2055: ItemDurability,
  1836: AchievementAchieved,
  4851: AchievementAchievedRewardable,
  5510: HumanOptionOrnament,
  1813: HumanOptionTitle,
  3170: AccountHouseInformations,
  2517: HouseInformationsInside,
  3635: ActorAlignmentInformations,
  2145: PortalInformation,
  1469: AlliancePrismInformation,
  8201: AllianceInsiderPrismInformation,
  8051: PaddockContentInformations,
  5491: GuildMember,
  1179: SpellItem,
  2497: ForgettableSpellItem,
  3077: PlayerStatus,
  1437: HumanOptionGuild,
  3781: Version,
  4244: ObjectItemToSell,
  3500: ObjectItemToSellInBid,
  5475: SellerBuyerDescriptor,
  7149: FightExternalInformations,
  1294: AbstractPlayerSearchInformation,
  3556: PlayerSearchTagInformation,
  6775: TaxCollectorMovement,
  3219: HouseInformationsForGuild,
  6684: AbstractContactInformations,
  8035: FriendInformations,
  3896: FriendOnlineInformations,
  1176: PlayerStatusExtended,
  6223: AcquaintanceInformation,
  4750: AcquaintanceOnlineInformation,
  7873: ObjectItemGenericQuantity,
  7636: AccountTagInformation,
  1909: IgnoredInformations,
  7223: IgnoredOnlineInformations,
  3820: TaxCollectorInformations,
  6431: PlayerSearchCharacterNameInformation,
  7387: GuildFactSheetInformations,
  183: BasicAllianceInformations,
  7217: ObjectItemQuantityPriceDateEffects,
  5806: DungeonPartyFinderPlayer,
  8492: PartyMemberInformations,
  2694: PartyMemberArenaInformations,
  8087: PartyEntityBaseInformation,
  436: PartyInvitationMemberInformations,
  1057: PartyGuestInformations,
  2136: PartyEntityMemberInformation,
  8343: GuildInAllianceInformations,
  6884: PrismSubareaEmptyInfo,
  2406: PrismGeolocalizedInformation,
  8132: GuildInsiderFactSheetInformations,
  1349: FightTriggeredEffect,
  4141: FightTemporarySpellImmunityEffect,
  15: FightTemporaryBoostWeaponDamagesEffect,
  8281: FightTemporaryBoostStateEffect,
  540: FightTemporarySpellBoostEffect,
  2972: FinishMoveInformations,
  9707: FightStartingPositions,
  949: BasicNamedAllianceInformations,
  5338: AllianceInformations,
  6593: FightTeamMemberCharacterInformations,
  2689: FightTeamMemberWithAllianceCharacterInformations,
  9376: ExtendedBreachBranch,
  2317: BreachReward,
  856: HouseGuildedInformations,
  5639: FightOptionsInformations,
  9850: FightTeamMemberTaxCollectorInformations,
  6505: TaxCollectorStaticExtendedInformations,
  8741: GameRolePlayTreasureHintInformations,
  815: FightResultMutantListEntry,
  7141: TreasureHuntStep,
  4747: TreasureHuntStepFight,
  3568: MapCoordinates,
  9956: FriendSpouseInformations,
  1910: FriendSpouseOnlineInformations,
  7522: CharacterMinimalPlusLookAndGradeInformations,
  9162: StatisticData,
  5872: StatisticDataShort,
  6654: FightResultAdditionalData,
  9530: FightResultExperienceData,
  576: ObjectEffectString,
  6024: Preset,
  6343: IdolsPreset,
  1714: AlliancedGuildFactSheetInformations,
  8231: ForgettableSpellsPreset,
  5511: Shortcut,
  445: ShortcutSpell,
  6844: StatisticDataByte,
  199: TreasureHuntStepDig,
  9471: FullStatsPreset,
  3340: InteractiveElementNamedSkill,
  9919: FightResultPvpData,
  4752: TreasureHuntStepFollowDirectionToHint,
  4170: GuildVersatileInformations,
  9740: GuildInAllianceVersatileInformations,
  8583: ShortcutObject,
  1048: ObjectEffectDice,
  5415: ObjectEffectDate,
  826: UpdateMountCharacteristic,
  305: UpdateMountIntegerCharacteristic,
  6510: ShortcutObjectItem,
  4677: QuestObjectiveInformations,
  5115: QuestObjectiveInformationsWithCompletion,
  5487: FightTeamMemberEntityInformation,
  1756: UpdateMountBooleanCharacteristic,
  4548: CharacterMinimalGuildInformations,
  4354: CharacterMinimalAllianceInformations,
  5400: ItemsPreset,
  7504: ServerSessionConstant,
  6620: ServerSessionConstantInteger,
  3292: ShortcutEmote,
  9875: TaxCollectorComplementaryInformations,
  8142: TaxCollectorLootInformations,
  1741: MapCoordinatesAndId,
  1197: EntitiesPreset,
  9735: DebtInformation,
  6908: PaddockGuildedInformations,
  2979: KamaDebtInformation,
  6983: StatisticDataString,
  4853: PresetsContainerPreset,
  876: IconNamedPreset,
  8535: ServerSessionConstantString,
  2409: QuestActiveDetailedInformations,
  3590: ShortcutEntitiesPreset,
  8829: ObjectEffectCreature,
  7384: ObjectEffectLadder,
  6386: FightTeamMemberMonsterInformations,
  83: ShortcutObjectIdolsPreset,
  5044: ShortcutObjectPreset,
  2529: TaxCollectorGuildInformations,
  3199: TaxCollectorWaitingForHelpInformations,
  6559: StatsPreset,
  5502: ObjectEffectDuration,
  6482: GameFightFighterLightInformations,
  4254: GameFightFighterMonsterLightInformations,
  6139: GameFightFighterTaxCollectorLightInformations,
  2398: FightAllianceTeamInformations,
  7850: CharacterHardcoreOrEpicInformations,
  4268: GameFightFighterEntityLightInformation,
  4492: ServerSessionConstantLong,
  2510: InteractiveElementWithAgeBonus,
  4720: StatisticDataInt,
  9654: AllianceFactSheetInformations,
  2754: GameFightFighterNamedLightInformations,
  2093: TreasureHuntStepFollowDirectionToPOI,
  8397: StatisticDataBoolean,
  169: ExtendedLockedBreachBranch,
  563: PartyIdol,
  108: GameFightMonsterWithAlignmentInformations,
  3550: MapCoordinatesExtended,
  5753: TreasureHuntStepFollowDirection,
  4590: ShortcutSmiley,
  5720: ObjectEffectMinMax,
  1337: SpellsPreset,
  4916: ObjectEffectMount,
  4107: ItemForPreset,
  4302: ActorExtendedAlignmentInformations,
  3872: ApplicationPlayerInformation,
  2994: GuildEmblem,
  9874: MountClientData,
  7224: FightLoot,
  4191: TreasureHuntFlag,
  4918: ObjectItemMinimalInformation,
  4715: ObjectItemInformationWithQuantity,
  6157: StartupActionAddObject,
  5402: CharacterRemodelingInformation,
  2646: CharacterToRemodelInformations,
  8002: RemodelingInformation,
  5368: CharacterCharacteristics,
  7495: SimpleCharacterCharacteristicForPreset,
  4303: CharacterCharacteristicForPreset,
  7500: SpellForPreset,
  8621: Achievement,
  8362: ObjectItemNotInContainer,
  9650: TaxCollectorFightersInformation,
  9066: TeleportDestination,
  7719: MonsterBoosts,
  8215: DecraftedItemStackInfo,
  1488: TaxCollectorBasicInformations,
  6723: PartyMemberGeoPosition,
  6097: ObjectItemToSellInNpcShop,
  4905: JobCrafterDirectoryEntryPlayerInfo,
  5220: JobCrafterDirectoryEntryJobInfo,
  3897: JobCrafterDirectoryListEntry,
  6079: JobCrafterDirectorySettings,
  107: LeagueFriendInformations,
  750: ArenaRankInfos,
  1579: JobExperience,
  1207: AllianceVersatileInformations,
  8909: PrismFightersInformation,
  3647: HavenBagFurnitureInformation,
  3684: BufferInformation,
  8338: AnomalySubareaInformation,
  1249: PaddockInformationsForSell,
  393: CharacterMinimalGuildPublicInformations,
  6041: EntityInformation,
  3356: AlignmentWarEffortInformation,
  161: RecycledItem,
  1011: HouseInformationsForSell,
  6658: JobBookSubscription,
  396: GoldItem,
  4584: GuildRecruitmentInformation,
  3057: ObjectItemToSellInHumanVendorShop,
  3674: ObjectItemQuantity,
  7283: EntityMovementInformations,
  461: BidExchangerObjectInfo,
  4410: AtlasPointsInformations,
  9432: AdditionalTaxCollectorInformations,
  2847: ProtectedEntityWaitingForHelpInfo,
  1513: MountInformationsForPaddock,
  68: FightTeamLightInformations,
  5613: ObjectEffects,
  8917: AchievementObjective,
  5823: AchievementStartedObjective,
  6311: ArenaRanking,
  2820: ArenaLeagueRanking,
};

export const messages: { [key: number]: typeof DofusMessage } = {
  8161: BasicPingMessage,
  5037: AbstractGameActionMessage,
  8860: AbstractGameActionFightTargetedAbilityMessage,
  9973: GameActionFightCloseCombatMessage,
  3304: GameActionFightReduceDamagesMessage,
  6777: GameActionFightLifePointsGainMessage,
  7980: GameActionFightModifyEffectsDurationMessage,
  5294: GameActionFightInvisibleDetectedMessage,
  4560: GameActionFightDispellMessage,
  1560: GameActionFightDispellEffectMessage,
  7238: GameFightTurnListMessage,
  8598: SequenceStartMessage,
  5414: GameActionFightVanishMessage,
  710: GameActionFightMultipleSummonMessage,
  914: GameActionFightSlideMessage,
  8091: GameActionFightKillMessage,
  2288: GameActionFightSpellCooldownVariationMessage,
  534: FighterStatsListMessage,
  1972: GameMapMovementMessage,
  2160: GameActionFightDropCharacterMessage,
  1777: GameActionFightTriggerGlyphTrapMessage,
  7694: GameActionFightPointsVariationMessage,
  8272: GameActionFightReflectSpellMessage,
  7663: GameActionFightDeathMessage,
  9234: GameActionFightActivateGlyphTrapMessage,
  3028: GameFightSynchronizeMessage,
  2648: GameActionFightSpellCastMessage,
  6409: GameActionFightTriggerEffectMessage,
  4448: GameActionFightTackledMessage,
  7441: GameActionFightInvisibilityMessage,
  2781: GameFightShowFighterMessage,
  7534: GameFightShowFighterRandomStaticPoseMessage,
  7589: GameActionFightTeleportOnSameMapMessage,
  6878: GameActionFightDispellSpellMessage,
  4039: GameActionFightChangeLookMessage,
  7629: GameActionFightDodgePointLossMessage,
  7640: GameActionFightSpellImmunityMessage,
  154: RefreshCharacterStatsMessage,
  9416: GameActionFightDispellableEffectMessage,
  1069: GameActionFightThrowCharacterMessage,
  6738: GameFightRefreshFighterMessage,
  1180: GameActionFightMarkCellsMessage,
  2879: GameActionFightSummonMessage,
  8847: GameActionFightStealKamaMessage,
  5912: SequenceEndMessage,
  4520: GameActionFightLifePointsLostMessage,
  6816: GameActionFightLifeAndShieldPointsLostMessage,
  5643: GameActionFightCarryCharacterMessage,
  302: GameActionFightUnmarkCellsMessage,
  140: GameActionFightReflectDamagesMessage,
  8844: GameActionFightExchangePositionsMessage,
  1182: MapComplementaryInformationsDataMessage,
  6414: MapComplementaryInformationsAnomalyMessage,
  9785: GameFightUpdateTeamMessage,
  7808: GameDataPaddockObjectRemoveMessage,
  6993: ObjectGroundRemovedMultipleMessage,
  6697: GameFightRemoveTeamMemberMessage,
  5775: EmotePlayRequestMessage,
  3658: UpdateMapPlayersAgressableStatusMessage,
  8484: PaddockMoveItemRequestMessage,
  6617: ObjectGroundListAddedMessage,
  4140: UpdateSelfAgressableStatusMessage,
  5440: MapComplementaryInformationsWithCoordsMessage,
  5261: GameContextRefreshEntityLookMessage,
  5996: ListMapNpcsQuestStatusUpdateMessage,
  3738: MapComplementaryInformationsDataInHavenBagMessage,
  7143: BreachExitResponseMessage,
  9863: PaddockRemoveItemRequestMessage,
  595: GameMapChangeOrientationMessage,
  3936: ObjectGroundAddedMessage,
  6485: BreachEnterMessage,
  503: GameRolePlayShowActorMessage,
  7212: GameDataPlayFarmObjectAnimationMessage,
  5734: GameRolePlayShowChallengeMessage,
  5911: GameRolePlayRemoveChallengeMessage,
  1514: MapRewardRateMessage,
  465: GameRolePlayMonsterAngryAtPlayerMessage,
  8122: GameDataPaddockObjectAddMessage,
  2024: MapComplementaryInformationsDataInHouseMessage,
  8689: StatedMapUpdateMessage,
  5656: GameMapChangeOrientationsMessage,
  2286: ShowCellMessage,
  3830: HousePropertiesMessage,
  7726: GameRolePlayMonsterNotAngryAtPlayerMessage,
  4766: BreachTeleportResponseMessage,
  9667: GameContextRemoveMultipleElementsMessage,
  1377: GameRolePlayShowMultipleActorsMessage,
  7554: ObjectGroundRemovedMessage,
  6584: GameDataPaddockObjectListAddMessage,
  4879: AnomalyStateMessage,
  2396: MapInformationsRequestMessage,
  4971: InteractiveUsedMessage,
  9018: MapFightCountMessage,
  8375: InteractiveMapUpdateMessage,
  5284: GameContextRemoveElementMessage,
  4608: GameFightOptionStateUpdateMessage,
  2818: BreachTeleportRequestMessage,
  6429: MapComplementaryInformationsBreachMessage,
  853: GameEntitiesDispositionMessage,
  6320: ShowCellSpectatorMessage,
  995: GameFightPlacementSwapPositionsMessage,
  8701: GameEntityDispositionMessage,
  4318: GameFightHumanReadyStateMessage,
  120: PlayerStatusUpdateMessage,
  5098: GameFightEndMessage,
  7323: BreachGameFightEndMessage,
  1613: ChallengeTargetUpdateMessage,
  4663: GameFightLeaveMessage,
  8991: GameFightSpectateMessage,
  4566: GameFightResumeMessage,
  6205: GameFightResumeWithSlavesMessage,
  9325: CurrentMapMessage,
  7422: CurrentMapInstanceMessage,
  2951: GameFightStartingMessage,
  1185: GameFightJoinMessage,
  1425: ArenaFighterIdleMessage,
  8411: ChallengeTargetsListRequestMessage,
  5357: GameFightStartMessage,
  8111: GameActionFightNoSpellCastMessage,
  7855: GameContextDestroyMessage,
  6927: GameFightSpectatorJoinMessage,
  638: ChallengeInfoMessage,
  7386: ChallengeTargetsListMessage,
  9984: MapObstacleUpdateMessage,
  1880: ArenaFighterLeaveMessage,
  912: GameContextReadyMessage,
  7757: ChallengeResultMessage,
  1312: GameFightNewWaveMessage,
  8818: GameFightPauseMessage,
  1672: UpdateSpellModifierMessage,
  3772: GameFightTurnStartMessage,
  4389: GameFightTurnReadyRequestMessage,
  4443: GameFightTurnEndMessage,
  1656: GameFightNewRoundMessage,
  6013: SlaveSwitchContextMessage,
  3275: GameFightTurnStartPlayingMessage,
  4540: SlaveNoLongerControledMessage,
  2227: CharacterStatsListMessage,
  3561: GameActionAcknowledgementMessage,
  9827: GameFightTurnResumeMessage,
  4043: GameFightTurnReadyMessage,
  6461: GameActionUpdateEffectTriggerCountMessage,
  6036: HaapiApiKeyRequestMessage,
  1639: DebugClearHighlightCellsMessage,
  307: DebugHighlightCellsMessage,
  3665: DumpedEntityStatsMessage,
  6517: DebugInClientMessage,
  4337: IdentificationMessage,
  2449: IdentificationAccountForceMessage,
  45: BasicAckMessage,
  2522: BasicNoOperationMessage,
  4834: CredentialsAcknowledgementMessage,
  4485: OnConnectionEventMessage,
  5325: ObjectJobAddedMessage,
  3223: LivingObjectMessageRequestMessage,
  331: IdentificationSuccessMessage,
  6253: RawDataMessage,
  8156: TrustStatusMessage,
  786: ServersListMessage,
  2330: BasicPongMessage,
  1245: BasicLatencyStatsRequestMessage,
  3831: BasicLatencyStatsMessage,
  1296: CheckIntegrityMessage,
  4583: AdminCommandMessage,
  3282: ConsoleMessage,
  5774: QuestListMessage,
  1984: QuestValidatedMessage,
  110: CharacterCreationResultMessage,
  2705: NicknameRefusedMessage,
  9067: NicknameAcceptedMessage,
  5237: HelloGameMessage,
  9196: GuildFactsErrorMessage,
  9855: AchievementDetailedListMessage,
  6407: AuthenticationTicketAcceptedMessage,
  621: GuildInvitationStateRecrutedMessage,
  3393: ChatAbstractServerMessage,
  8853: ChatServerMessage,
  4380: ChatKolizeumServerMessage,
  4096: KnownZaapListMessage,
  4370: KamasUpdateMessage,
  7209: StorageObjectsUpdateMessage,
  7582: GuildInvitedMessage,
  5931: ActivitySuggestionsMessage,
  7910: ShortcutBarContentMessage,
  1568: ObjectsAddedMessage,
  9833: CharacterSelectedSuccessMessage,
  8524: ExchangeCraftResultMessage,
  118: ExchangeCraftResultWithObjectDescMessage,
  3299: AbstractPartyMessage,
  2544: AbstractPartyEventMessage,
  9078: PartyMemberRemoveMessage,
  5417: GameRolePlayPlayerFightFriendlyAnsweredMessage,
  7631: BasicWhoIsNoMatchMessage,
  778: InteractiveUseErrorMessage,
  2042: GameRolePlayGameOverMessage,
  2613: NotificationByServerMessage,
  4570: GuildMemberOnlineStatusMessage,
  2113: ExchangeMountsPaddockRemoveMessage,
  8560: SocialNoticeMessage,
  8430: GameRolePlaySpellAnimMessage,
  4497: EmotePlayAbstractMessage,
  3920: OrnamentGainedMessage,
  5576: ExchangeBidHouseUnsoldItemsMessage,
  7025: ExchangeShopStockMovementRemovedMessage,
  4378: IdolSelectErrorMessage,
  4986: SymbioticObjectAssociatedMessage,
  8169: MimicryObjectAssociatedMessage,
  8228: BasicCharactersListMessage,
  3416: TreasureHuntAvailableRetryCountUpdateMessage,
  2063: LoginQueueStatusMessage,
  1489: PartyCancelInvitationNotificationMessage,
  2864: PaginationAnswerAbstractMessage,
  7331: DungeonPartyFinderListenErrorMessage,
  1966: ExchangeObjectMessage,
  4841: ExchangeObjectsRemovedMessage,
  3712: TextInformationMessage,
  8629: WarnOnPermaDeathStateMessage,
  5671: ExchangeOfflineSoldItemsMessage,
  4001: PartyLeaveMessage,
  2197: QueueStatusMessage,
  2329: ExchangeObjectAddedMessage,
  9932: ExchangeShopStockMovementUpdatedMessage,
  6496: AbstractTaxCollectorListMessage,
  4811: TaxCollectorListMessage,
  1161: GameRolePlayDelayedActionMessage,
  8906: PauseDialogMessage,
  5651: TeleportDestinationsMessage,
  9626: LifePointsRegenBeginMessage,
  2907: BreachBranchesMessage,
  5546: GuildApplicationDeletedMessage,
  7075: CheckFileRequestMessage,
  9946: ForgettableSpellListUpdateMessage,
  269: CharactersListMessage,
  3532: CharactersListWithRemodelingMessage,
  7321: InteractiveElementUpdatedMessage,
  4478: GameRolePlayFightRequestCanceledMessage,
  4537: BreachSavedMessage,
  5749: GuildFightPlayersHelpersLeaveMessage,
  9970: HaapiApiKeyMessage,
  3617: TopTaxCollectorListMessage,
  5125: GameRolePlayArenaFighterStatusMessage,
  5344: ChatServerCopyMessage,
  5518: ChatSmileyMessage,
  5134: LocalizedChatSmileyMessage,
  3316: GameRolePlayArenaSwitchToFightServerMessage,
  5716: ProtocolRequired,
  8716: CompassUpdateMessage,
  2110: GameRefreshMonsterBoostsMessage,
  5896: GuildPlayerApplicationAbstractMessage,
  9380: GuildPlayerApplicationInformationMessage,
  2385: DungeonPartyFinderRegisterSuccessMessage,
  8666: SpellVariantActivationMessage,
  7044: StorageObjectsRemoveMessage,
  843: MountReleasedMessage,
  7257: DecraftResultMessage,
  5408: MapFightStartPositionsUpdateMessage,
  94: OrnamentLostMessage,
  2: NetworkDataContainerMessage,
  6217: GuildPaddockBoughtMessage,
  1888: AbstractPartyMemberInFightMessage,
  6653: PartyMemberInStandardFightMessage,
  8540: ExchangeStartedMessage,
  5406: SpouseStatusMessage,
  969: SubscriptionLimitationMessage,
  8533: ExchangeBidPriceMessage,
  8645: ExchangeBidPriceForSellerMessage,
  3045: LockableShowCodeDialogMessage,
  4751: GuildFightPlayersHelpersJoinMessage,
  3016: TaxCollectorMovementsOfflineMessage,
  1857: UpdateLifePointsMessage,
  3172: ReloginTokenStatusMessage,
  3386: TitleGainedMessage,
  4197: InventoryContentMessage,
  561: StorageInventoryContentMessage,
  3309: ExchangeShopStockMultiMovementRemovedMessage,
  7270: TaxCollectorAttackedResultMessage,
  7006: ExchangeObjectRemovedMessage,
  3086: PrismFightAttackerAddMessage,
  2593: LivingObjectMessageMessage,
  1660: PartyInvitationMessage,
  1019: TreasureHuntRequestAnswerMessage,
  9063: CharacterLoadingCompleteMessage,
  92: GameRolePlayArenaPlayerBehavioursMessage,
  8784: TreasureHuntFlagRequestAnswerMessage,
  6263: ExchangeIsReadyMessage,
  6475: AchievementAlmostFinishedDetailedListMessage,
  8954: AllianceFactsErrorMessage,
  4234: InteractiveUseEndedMessage,
  6009: AllianceInvitedMessage,
  3864: ExchangeStartOkCraftMessage,
  3205: PartyLocateMembersMessage,
  9871: ObjectsDeletedMessage,
  3194: PaddockPropertiesMessage,
  7428: GameContextRemoveMultipleElementsWithEventsMessage,
  3514: ExchangeStartOkMulticraftCustomerMessage,
  3378: SocialNoticeSetErrorMessage,
  1255: GuildBulletinSetErrorMessage,
  5355: AccessoryPreviewMessage,
  8584: ExchangeStartOkNpcShopMessage,
  1769: PartyUpdateMessage,
  7610: PartyNewMemberMessage,
  2929: InviteInHavenBagMessage,
  2498: AllianceInvitationStateRecruterMessage,
  6591: ExchangeCrafterJobLevelupMessage,
  4052: IgnoredAddFailureMessage,
  7532: ExchangeStartedBidSellerMessage,
  7780: EmotePlayMassiveMessage,
  8710: HaapiValidationMessage,
  9652: IgnoredDeleteResultMessage,
  9272: CompassUpdatePartyMemberMessage,
  9901: ExchangeObjectPutInBagMessage,
  9360: GuildFightPlayersEnemiesListMessage,
  431: GameCautiousMapMovementMessage,
  8970: AchievementFinishedMessage,
  9768: AchievementFinishedInformationMessage,
  4321: EntityTalkMessage,
  5676: LockableStateUpdateAbstractMessage,
  5127: LockableStateUpdateStorageMessage,
  9037: ExchangeStartedBidBuyerMessage,
  3861: AllianceListMessage,
  3827: JobCrafterDirectoryEntryMessage,
  4201: ObtainedItemMessage,
  7390: ObtainedItemWithBonusMessage,
  4091: SpellListMessage,
  9960: GuildPaddockRemovedMessage,
  6585: BreachInvitationResponseMessage,
  2770: GuildLeftMessage,
  7113: EditHavenBagStartMessage,
  349: PartyRefuseInvitationNotificationMessage,
  3074: CharacterNameSuggestionFailureMessage,
  8116: SelectedServerRefusedMessage,
  7307: PrismInfoInValidMessage,
  3743: ExchangeBidHouseBuyResultMessage,
  9671: ChatCommunityChannelCommunityMessage,
  7502: IdolPartyLostMessage,
  7130: ExchangePodsModifiedMessage,
  1694: TaxCollectorDialogQuestionBasicMessage,
  625: TaxCollectorDialogQuestionExtendedMessage,
  7917: AllianceTaxCollectorDialogQuestionExtendedMessage,
  7095: TaxCollectorStateUpdateMessage,
  9780: ExchangeBidHouseGenericItemRemovedMessage,
  7690: QuestStepInfoMessage,
  189: ServerOptionalFeaturesMessage,
  3212: BreachRoomUnlockResultMessage,
  6719: DungeonPartyFinderRoomContentUpdateMessage,
  6173: QuestStepValidatedMessage,
  5714: CompassUpdatePvpSeekMessage,
  6820: AllianceFactsMessage,
  58: PrismFightDefenderAddMessage,
  1829: JobCrafterDirectoryAddMessage,
  3330: ShortcutBarSwapErrorMessage,
  9837: PartyInvitationDungeonMessage,
  1903: BreachBudgetMessage,
  5111: JobAllowMultiCraftRequestMessage,
  1246: JobMultiCraftAvailableSkillsMessage,
  8697: ExchangeMountsStableAddMessage,
  9476: FriendAddedMessage,
  9527: CharacterCanBeCreatedResultMessage,
  1901: NpcGenericActionFailureMessage,
  7236: AccountHouseMessage,
  6994: AcquaintanceSearchErrorMessage,
  9169: ExchangeStartOkRecycleTradeMessage,
  4083: StatsUpgradeResultMessage,
  1018: MapRunningFightListMessage,
  8200: SequenceNumberRequestMessage,
  3615: PartyInvitationDetailsMessage,
  7340: PartyInvitationDungeonDetailsMessage,
  8522: ExchangeTypesExchangerDescriptionForUserMessage,
  8518: JobCrafterDirectorySettingsMessage,
  8249: MoodSmileyUpdateMessage,
  4913: GameRolePlayArenaInvitationCandidatesAnswerMessage,
  9462: EmotePlayMessage,
  3966: SelectedServerDataMessage,
  2850: SelectedServerDataExtendedMessage,
  6412: FriendWarnOnConnectionStateMessage,
  5100: DungeonPartyFinderRoomContentMessage,
  4911: BasicDateMessage,
  3891: GuildApplicationReceivedMessage,
  1340: ExchangeMountsStableBornAddMessage,
  8838: JobDescriptionMessage,
  7661: AccountLoggingKickedMessage,
  1456: ExchangeObjectModifiedInBagMessage,
  2524: DebtsUpdateMessage,
  8202: GameRolePlayArenaUpdatePlayerInfosMessage,
  6540: GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage,
  42: GuildCreationResultMessage,
  8743: ExchangeStoppedMessage,
  8646: ExchangeShopStockMultiMovementUpdatedMessage,
  3664: AccountInformationsUpdateMessage,
  2014: TitleSelectErrorMessage,
  8644: AccountCapabilitiesMessage,
  8845: TreasureHuntDigRequestAnswerMessage,
  862: TreasureHuntDigRequestAnswerFailedMessage,
  209: GameEntityDispositionErrorMessage,
  8736: EmoteAddMessage,
  4202: GuildMotdMessage,
  4003: PartyLeaderUpdateMessage,
  6581: ChatAdminServerMessage,
  3777: MountSterilizedMessage,
  7169: BasicWhoIsMessage,
  9659: ObjectAddedMessage,
  8877: GameActionNoopMessage,
  941: PopupWarningMessage,
  3940: JobExperienceUpdateMessage,
  178: GuildInformationsPaddocksMessage,
  211: GuildVersatileInfoListMessage,
  7135: IdentificationFailedMessage,
  7294: IdentificationFailedForBadVersionMessage,
  8401: JobLevelUpMessage,
  213: ExchangeBidHouseInListAddedMessage,
  5729: ExchangeStartedMountStockMessage,
  6300: BreachCharactersMessage,
  9853: AllianceVersatileInfoListMessage,
  6787: HaapiShopApiKeyMessage,
  9603: ObjectErrorMessage,
  8441: SymbioticObjectErrorMessage,
  5767: MimicryObjectErrorMessage,
  6530: KohUpdateMessage,
  7354: ClientUIOpenedMessage,
  8823: ClientUIOpenedByObjectMessage,
  9435: TeleportBuddiesRequestedMessage,
  7744: ExchangeStartOkEvolutiveObjectRecycleTradeMessage,
  8641: ExchangeCraftPaymentModifiedMessage,
  9723: AllianceMotdSetErrorMessage,
  2209: LeaveDialogMessage,
  8813: ExchangeLeaveMessage,
  4836: TaxCollectorErrorMessage,
  7221: BreachRoomLockedMessage,
  9410: IdolListMessage,
  8124: EmoteRemoveMessage,
  962: ExchangeGuildTaxCollectorGetMessage,
  1049: GuildMotdSetErrorMessage,
  651: GameRolePlayArenaSwitchToGameServerMessage,
  6590: ContactLookMessage,
  2592: AlliancePartialListMessage,
  3380: MapRunningFightDetailsMessage,
  9456: MapRunningFightDetailsExtendedMessage,
  8752: AcquaintanceServerListMessage,
  5482: DungeonPartyFinderRegisterErrorMessage,
  9032: EmoteListMessage,
  6204: TitlesAndOrnamentsListMessage,
  5733: HaapiConfirmationMessage,
  9294: PrismsInfoValidMessage,
  2440: InviteInHavenBagOfferMessage,
  268: HavenBagPackListMessage,
  4473: CharacterDeletionErrorMessage,
  6373: HavenBagFurnituresMessage,
  2842: AcquaintancesListMessage,
  2236: ExchangeStartedTaxCollectorShopMessage,
  1802: GuildHouseRemoveMessage,
  5016: TreasureHuntFinishedMessage,
  518: HaapiBufferListMessage,
  3987: WrapperObjectAssociatedMessage,
  7574: ObjectDeletedMessage,
  7777: PartyMemberEjectedMessage,
  9668: ExchangeMountsStableRemoveMessage,
  389: AllianceCreationStartedMessage,
  3751: InventoryWeightMessage,
  24: MountDataErrorMessage,
  6336: ExchangeMoneyMovementInformationMessage,
  2988: ZaapRespawnUpdatedMessage,
  264: ExchangeMultiCraftCrafterCanUseHisRessourcesMessage,
  5030: InvalidPresetsMessage,
  2325: PresetSaveErrorMessage,
  6301: GuildInformationsMemberUpdateMessage,
  7302: ExchangeStartedWithStorageMessage,
  4009: TeleportToBuddyOfferMessage,
  5410: PartyLoyaltyStatusMessage,
  863: PopupWarningClosedMessage,
  890: JobCrafterDirectoryRemoveMessage,
  3598: ExchangeObjectModifiedMessage,
  6030: AnomalySubareaInformationResponseMessage,
  4074: FriendAddFailureMessage,
  8105: GuildListApplicationModifiedMessage,
  1606: HavenBagRoomUpdateMessage,
  9541: BulletinMessage,
  981: GuildBulletinMessage,
  585: PartyUpdateLightMessage,
  6717: BreachInvitationOfferMessage,
  1218: GuildJoinedMessage,
  6499: GuildMembershipMessage,
  3082: SubscriptionZoneMessage,
  3778: GameFightPlacementSwapPositionsErrorMessage,
  7870: ExchangeReplyTaxVendorMessage,
  8808: PresetUseResultMessage,
  4124: IdentificationFailedBannedMessage,
  3565: BreachRewardsMessage,
  5921: ObjectAveragePricesMessage,
  9308: GuildHousesInformationMessage,
  5348: DisplayNumericalValuePaddockMessage,
  1774: MountEquipedErrorMessage,
  8883: AchievementRewardErrorMessage,
  2066: ChallengeFightJoinRefusedMessage,
  419: GuildMemberLeavingMessage,
  7772: ForgettableSpellEquipmentSlotsMessage,
  6276: GameActionSpamMessage,
  7669: GuildLevelUpMessage,
  1981: AllianceJoinedMessage,
  7592: NumericWhoIsMessage,
  2955: ExchangeBidSearchOkMessage,
  3451: PaddockToSellListMessage,
  2198: HavenBagDailyLoteryMessage,
  5759: GuildRecruitmentInvalidateMessage,
  582: PurchasableDialogMessage,
  6010: AlignmentWarEffortDonationResultMessage,
  4427: AllianceMotdMessage,
  2090: GameRolePlayArenaLeagueRewardsMessage,
  2684: GameRolePlayShowActorWithEventMessage,
  5003: HaapiAuthErrorMessage,
  1436: PartyDeletedMessage,
  2464: GuildFactsMessage,
  6925: GuildInAllianceFactsMessage,
  9533: HouseBuyResultMessage,
  4698: SystemMessageDisplayMessage,
  8414: GameMapSpeedMovementMessage,
  5031: ExchangeBidHouseInListUpdatedMessage,
  6240: AllianceModificationStartedMessage,
  1528: GameRolePlayArenaRegistrationWarningMessage,
  2526: ExchangeMountsTakenFromPaddockMessage,
  2853: RecycleResultMessage,
  8938: HaapiTokenMessage,
  547: CurrentServerStatusUpdateMessage,
  8807: PartyCannotJoinErrorMessage,
  129: AllianceGuildLeavingMessage,
  5086: GuildInvitationStateRecruterMessage,
  1938: IgnoredListMessage,
  6480: IgnoredAddedMessage,
  7474: EntityInformationMessage,
  4607: AchievementListMessage,
  2084: AlignmentWarEffortProgressionMessage,
  6703: GuildHouseUpdateInformationMessage,
  5244: MountDataMessage,
  5848: NpcDialogCreationMessage,
  2919: PortalDialogCreationMessage,
  5200: PrismSetSabotagedRefusedMessage,
  5922: MountSetMessage,
  1943: PartyInvitationCancelledForGuestMessage,
  2567: ExchangeCraftCountModifiedMessage,
  968: ExchangeSellOkMessage,
  2607: GuildCreationStartedMessage,
  1198: MimicryObjectPreviewMessage,
  7026: NotificationListMessage,
  728: StorageObjectUpdateMessage,
  6129: CharactersListErrorMessage,
  7620: JobCrafterDirectoryListMessage,
  2273: EditHavenBagFinishedMessage,
  3961: StatedElementUpdatedMessage,
  7517: IdolPartyRefreshMessage,
  159: ClientYouAreDrunkMessage,
  5698: GameContextCreateErrorMessage,
  80: ObjectQuantityMessage,
  6501: CharacterLevelUpMessage,
  2461: CharacterLevelUpInformationMessage,
  2986: GuildMemberWarnOnConnectionStateMessage,
  2011: FriendUpdateMessage,
  3186: HavenBagPermissionsUpdateMessage,
  2775: AuthenticationTicketRefusedMessage,
  5303: AchievementDetailsMessage,
  4589: TaxCollectorMovementMessage,
  738: AlliancePrismDialogQuestionMessage,
  9985: ExchangeStartOkMountWithOutPaddockMessage,
  4513: TreasureHuntMessage,
  2123: ExchangeStartedWithPodsMessage,
  2533: GameRolePlayArenaFightPropositionMessage,
  1592: StartupActionAddMessage,
  9563: PrismFightRemovedMessage,
  3384: ItemNoMoreAvailableMessage,
  5967: ChatServerWithObjectMessage,
  6509: TaxCollectorMovementAddMessage,
  8805: EvolutiveObjectRecycleResultMessage,
  6000: MoodSmileyResultMessage,
  5486: HaapiSessionMessage,
  9690: ExchangeStartOkMountMessage,
  3768: DocumentReadingBeginMessage,
  7180: ServerExperienceModificatorMessage,
  1705: ExchangeKamaModifiedMessage,
  2204: IdentificationSuccessWithLoginTokenMessage,
  1157: GameRolePlayDelayedObjectUseMessage,
  344: CharacterCapabilitiesMessage,
  6835: PaddockBuyResultMessage,
  4954: AllianceCreationResultMessage,
  9876: PartyMemberInBreachFightMessage,
  4910: PartyNameUpdateMessage,
  6394: StartupActionFinishedMessage,
  4055: ExchangeStartOkNpcTradeMessage,
  5479: ChatErrorMessage,
  5258: HouseGuildRightsMessage,
  2874: DungeonKeyRingUpdateMessage,
  300: PrismFightAttackerRemoveMessage,
  1278: AllianceLeftMessage,
  7918: AllianceInvitationStateRecrutedMessage,
  9154: ExchangeStartOkCraftWithInformationMessage,
  5361: MountUnSetMessage,
  1527: MountXpRatioMessage,
  4771: JobExperienceMultiUpdateMessage,
  2577: AlmanachCalendarDateMessage,
  9873: ContactLookErrorMessage,
  2793: ObjectModifiedMessage,
  5653: ExchangeWeightMessage,
  1263: PartyNewGuestMessage,
  6739: HelloConnectMessage,
  433: FriendStatusShareStateMessage,
  9562: HouseGuildNoneMessage,
  9930: ChatServerCopyWithObjectMessage,
  6231: MountRidingMessage,
  5661: ShortcutBarRemoveErrorMessage,
  4041: ChannelEnablingChangeMessage,
  9899: PartyNameSetErrorMessage,
  519: GameFightPlacementSwapPositionsOfferMessage,
  3553: AllianceInsiderInfoMessage,
  4515: HouseToSellListMessage,
  3950: BreachRewardBoughtMessage,
  4810: ExchangeMountFreeFromPaddockMessage,
  9261: EnabledChannelsMessage,
  5054: CinematicMessage,
  1146: ExchangeStartOkJobIndexMessage,
  3019: GameFightPlacementPossiblePositionsMessage,
  9221: CharacterSelectedErrorMessage,
  5437: AccountLinkRequiredMessage,
  2669: AchievementRewardSuccessMessage,
  970: MigratedServerListMessage,
  4432: CompassResetMessage,
  1851: ExchangeObjectRemovedFromBagMessage,
  2536: PartyJoinMessage,
  8233: WatchInventoryContentMessage,
  4689: StorageKamasUpdateMessage,
  3951: HouseSellingUpdateMessage,
  5103: ShortcutBarReplacedMessage,
  8266: JobBookSubscriptionMessage,
  2594: PrismSettingsErrorMessage,
  7556: ExchangeCraftResultWithObjectIdMessage,
  5114: BreachKickResponseMessage,
  8493: SpouseInformationsMessage,
  9648: HaapiBuyValidationMessage,
  1427: TitleLostMessage,
  4820: PresetSavedMessage,
  1847: ExchangeStartOkRunesTradeMessage,
  4458: ShortcutBarRefreshMessage,
  6497: DungeonKeyRingMessage,
  9521: TeleportOnSameMapMessage,
  5345: GuildPlayerNoApplicationInformationMessage,
  117: TreasureHuntShowLegendaryUIMessage,
  8664: ChatSmileyExtraPackListMessage,
  1411: ServerStatusUpdateMessage,
  9150: TeleportBuddiesMessage,
  2736: AlignmentWarEffortDonatePreviewMessage,
  1408: GoldAddedMessage,
  7352: FriendWarnOnLevelGainStateMessage,
  5503: GuildListMessage,
  3164: RecruitmentInformationMessage,
  7560: PresetDeleteResultMessage,
  470: ExchangeItemAutoCraftStopedMessage,
  6446: ExchangeErrorMessage,
  7379: PrismFightStateUpdateMessage,
  2234: ExchangeMountSterilizeFromPaddockMessage,
  4728: TaxCollectorAttackedMessage,
  298: ServerSettingsMessage,
  6756: AcquaintanceAddedMessage,
  4970: StorageObjectRemoveMessage,
  414: FollowedQuestsMessage,
  646: ServerSessionConstantsMessage,
  2640: DungeonPartyFinderAvailableDungeonsMessage,
  428: CharacterNameSuggestionSuccessMessage,
  8791: GameMapNoMovementMessage,
  1654: MountEmoteIconUsedOkMessage,
  475: QuestStartedMessage,
  7698: MountRenamedMessage,
  6503: ExchangeObjectsAddedMessage,
  1036: GuestLimitationMessage,
  145: ExchangeObjectsModifiedMessage,
  1930: WrapperObjectErrorMessage,
  5525: ExchangeRequestedMessage,
  9612: ExchangeRequestedTradeMessage,
  7338: IdolFightPreparationUpdateMessage,
  1782: ShortcutBarAddErrorMessage,
  7348: IdolSelectedMessage,
  9011: ExchangeStartOkHumanVendorMessage,
  8619: FriendDeleteResultMessage,
  1706: PresetsMessage,
  5570: ObjectsQuantityMessage,
  5565: QuestObjectiveValidatedMessage,
  2660: GameRolePlayAggressionMessage,
  3627: GuildInformationsMembersMessage,
  2982: SetUpdateMessage,
  3903: ExchangeMountsPaddockAddMessage,
  4524: CharacterExperienceGainMessage,
  3236: PrismsListMessage,
  2634: PrismsListUpdateMessage,
  5147: EntitiesInformationMessage,
  596: FinishMoveListMessage,
  4439: PartyModifiableStatusMessage,
  5477: JobExperienceOtherPlayerUpdateMessage,
  310: GuildModificationStartedMessage,
  6433: PartyRestrictedMessage,
  8878: NicknameRegistrationMessage,
  1223: GuildListApplicationAnswerMessage,
  9473: GameContextRemoveElementWithEventMessage,
  2157: GameRolePlayPlayerFightFriendlyRequestedMessage,
  9937: UpdateMountCharacteristicsMessage,
  5087: ShortcutBarRemovedMessage,
  1868: ExchangeBuyOkMessage,
  5501: LifePointsRegenEndMessage,
  4950: GameContextCreateMessage,
  111: PlayerStatusUpdateErrorMessage,
  998: GameFightPlacementSwapPositionsCancelledMessage,
  5611: ConsoleCommandsListMessage,
  798: StartupActionsListMessage,
  5927: TaxCollectorMovementRemoveMessage,
  4779: AreaFightModificatorUpdateMessage,
  3610: ExchangeBidHouseInListRemovedMessage,
  9529: AllianceBulletinSetErrorMessage,
  9143: ForgettableSpellDeleteMessage,
  5619: DebtsDeleteMessage,
  6242: ExchangeCraftResultMagicWithObjectDescMessage,
  8922: TitleSelectedMessage,
  3549: AbstractGameActionWithAckMessage,
  5455: ExchangeBidHouseItemRemoveOkMessage,
  9128: WatchQuestListMessage,
  7637: OrnamentSelectedMessage,
  4399: GuildSummaryMessage,
  4021: AllianceBulletinMessage,
  9392: ObjectAveragePricesErrorMessage,
  2217: PresetUseResultWithMissingIdsMessage,
  4098: OrnamentSelectErrorMessage,
  5628: GameContextMoveElementMessage,
  6681: ExchangeTypesItemsExchangerDescriptionForUserMessage,
  6666: FriendsListMessage,
  2031: PrismInfoCloseMessage,
  9481: PrismFightDefenderLeaveMessage,
  7689: GameRolePlayPlayerLifeStatusMessage,
  8244: FriendGuildWarnOnAchievementCompleteStateMessage,
  2727: WatchQuestStepInfoMessage,
  3262: BreachInvitationCloseMessage,
  7958: LockableStateUpdateHouseDoorMessage,
  7880: PaddockSellBuyDialogMessage,
  2595: ExchangeOkMultiCraftMessage,
  4369: ExchangeWaitingResultMessage,
  33: GuildApplicationIsAnsweredMessage,
  5949: AlreadyConnectedMessage,
  8384: NpcDialogQuestionMessage,
  9167: EmotePlayErrorMessage,
  6062: GameRolePlayDelayedActionFinishedMessage,
  7999: ContactAddFailureMessage,
  7324: CharacterAlignmentWarEffortProgressionMessage,
  6676: AtlasPointInformationsMessage,
  9430: GuestModeMessage,
  3421: ObjectMovementMessage,
  3222: LockableCodeResultMessage,
  9490: ExchangeMountStableErrorMessage,
  4301: GuildFightPlayersEnemyRemoveMessage,
  5776: BreachStateMessage,
  8015: GuildInformationsGeneralMessage,
  2991: TeleportToBuddyCloseMessage,
  1689: BreachBonusMessage,
  282: ExchangeStartOkMulticraftCrafterMessage,
  2502: ExchangeShopStockStartedMessage,
  7278: BasicTimeMessage,
  4167: ZaapDestinationsMessage,
  2887: GuildInfosUpgradeMessage,
  7844: ExchangeBidHouseItemAddOkMessage,
  4323: GameRolePlayArenaRegistrationStatusMessage,
  6677: PartyEntityUpdateLightMessage,
  2401: GameContextMoveMultipleElementsMessage,
  4806: PartyFollowStatusUpdateMessage,
  5778: PrismFightAddedMessage,
  2377: ItemForPresetUpdateMessage,
  7853: SetCharacterRestrictionsMessage,
  8439: PartyKickedByMessage,
  6142: QuestStepStartedMessage,
  813: AllianceMembershipMessage,
  5490: InviteInHavenBagClosedMessage,
  7602: ExchangeBidHouseGenericItemAddedMessage,
  7764: AlignmentRankUpdateMessage,
  2038: AccessoryPreviewErrorMessage,
  6158: CharacterSelectedForceMessage,
  4628: GuildFactsRequestMessage,
  7137: ClientKeyMessage,
  3297: NicknameChoiceRequestMessage,
  8146: AllianceFactsRequestMessage,
  5838: TeleportHavenBagRequestMessage,
  4770: GameMapChangeOrientationRequestMessage,
  8267: ExchangeRequestOnTaxCollectorMessage,
  4359: ExchangeOnHumanVendorRequestMessage,
  9589: ExchangeBuyMessage,
  8214: EnterHavenBagRequestMessage,
  1147: ErrorMapNotFoundMessage,
  289: ExchangeRequestMessage,
  2400: ExchangePlayerRequestMessage,
  6364: GameRolePlayPlayerFightRequestMessage,
  6947: ExchangePlayerMultiCraftRequestMessage,
  5229: ExchangeObjectMoveMessage,
  1384: ExchangeObjectMovePricedMessage,
  6819: ExchangeStartAsVendorMessage,
  1831: PortalUseRequestMessage,
  5196: ExchangeSellMessage,
  2760: GameRolePlayFreeSoulRequestMessage,
  6682: LeaveDialogRequestMessage,
  597: TeleportHavenBagAnswerMessage,
  188: KickHavenBagRequestMessage,
  1598: NpcGenericActionRequestMessage,
  598: GameRolePlayTaxCollectorFightRequestMessage,
  9468: GameRolePlayPlayerFightFriendlyAnswerMessage,
  673: ExchangeShowVendorTaxMessage,
  67: ExchangeRequestOnShopStockMessage,
  4012: HouseTeleportRequestMessage,
  535: FriendJoinRequestMessage,
  8825: FriendSpouseFollowWithCompassRequestMessage,
  2825: SocialNoticeSetRequestMessage,
  7121: GuildBulletinSetRequestMessage,
  8207: GuildSpellUpgradeRequestMessage,
  3240: GuildCharacsUpgradeRequestMessage,
  2446: SpouseGetInformationsMessage,
  9760: WarnOnPermaDeathMessage,
  5805: GuildGetInformationsMessage,
  6228: FriendSetWarnOnConnectionMessage,
  4403: IgnoredGetListMessage,
  789: PaginationRequestAbstractMessage,
  2316: GuildListApplicationRequestMessage,
  3391: GuildMotdSetRequestMessage,
  4147: GuildMemberSetWarnOnConnectionMessage,
  5404: GuildApplicationAnswerMessage,
  2264: IgnoredDeleteRequestMessage,
  3633: GuildChangeMemberParametersMessage,
  3169: UpdateRecruitmentInformationMessage,
  9050: GuildFightJoinRequestMessage,
  7400: FriendDeleteRequestMessage,
  9165: ContactLookRequestMessage,
  7749: ContactLookRequestByIdMessage,
  6214: FriendAddRequestMessage,
  1504: PlayerStatusUpdateRequestMessage,
  7914: GuildPaddockTeleportRequestMessage,
  2801: IgnoredAddRequestMessage,
  9896: GuildDeleteApplicationRequestMessage,
  6940: GuildUpdateApplicationMessage,
  1404: FriendSetStatusShareMessage,
  3965: GuildKickRequestMessage,
  9375: GuildApplicationListenMessage,
  6478: GuildJoinAutomaticallyRequestMessage,
  5666: GuildInvitationSearchMessage,
  2644: FriendGuildSetWarnOnAchievementCompleteMessage,
  9211: GuildSummaryRequestMessage,
  2715: GuildInvitationMessage,
  7226: GuildGetPlayerApplicationMessage,
  5074: GuildFightLeaveRequestMessage,
  4271: AcquaintancesGetListMessage,
  3542: FriendSpouseJoinRequestMessage,
  4065: FriendSetWarnOnLevelGainMessage,
  9276: GuildSubmitApplicationMessage,
  3044: FriendsGetListMessage,
  1932: GuildFightTakePlaceRequestMessage,
  3461: PopupWarningCloseRequestMessage,
  1037: ChatAbstractClientMessage,
  1814: ChatClientPrivateMessage,
  1043: ChatClientPrivateWithObjectMessage,
  610: MoodSmileyRequestMessage,
  9062: ChatSmileyRequestMessage,
  9201: ChatCommunityChannelSetCommunityRequestMessage,
  1784: BasicWhoIsRequestMessage,
  1382: ChatClientMultiMessage,
  1682: ChatClientMultiWithObjectMessage,
  499: ChannelEnablingMessage,
  4159: NumericWhoIsRequestMessage,
  8034: PartyPledgeLoyaltyRequestMessage,
  8603: PartyFollowMemberRequestMessage,
  4755: PartyFollowThisMemberRequestMessage,
  9701: DungeonPartyFinderAvailableDungeonsRequestMessage,
  1520: PartyRefuseInvitationMessage,
  3956: PartyNameSetRequestMessage,
  1964: PartyLeaveRequestMessage,
  5687: TeleportToBuddyAnswerMessage,
  5799: GameRolePlayArenaFightAnswerMessage,
  6752: PartyAbdicateThroneMessage,
  5975: BreachInvitationAnswerMessage,
  5010: GameRolePlayArenaRegisterMessage,
  6419: PartyInvitationRequestMessage,
  8528: PartyInvitationArenaRequestMessage,
  1266: DungeonPartyFinderListenRequestMessage,
  474: PartyInvitationDetailsRequestMessage,
  7066: PartyCancelInvitationMessage,
  8333: PartyInvitationDungeonRequestMessage,
  2723: DungeonPartyFinderRegisterRequestMessage,
  3857: GameRolePlayArenaUnregisterMessage,
  866: PartyAcceptInvitationMessage,
  9834: PartyStopFollowRequestMessage,
  6075: PartyKickRequestMessage,
  7653: PrismFightJoinLeaveRequestMessage,
  8342: PrismSettingsRequestMessage,
  1648: AllianceKickRequestMessage,
  6247: PrismInfoJoinLeaveRequestMessage,
  4070: PrismFightSwapRequestMessage,
  1746: PrismSetSabotagedRequestMessage,
  8164: PrismUseRequestMessage,
  7195: PrismModuleExchangeRequestMessage,
  3626: SetEnableAVARequestMessage,
  4105: PrismsListRegisterMessage,
  3707: AllianceMotdSetRequestMessage,
  2686: PrismAttackRequestMessage,
  8453: AllianceChangeGuildRightsMessage,
  645: AllianceBulletinSetRequestMessage,
  9591: AllianceInsiderInfoRequestMessage,
  235: AllianceInvitationMessage,
  4305: ShowCellRequestMessage,
  6692: GameFightTurnFinishMessage,
  685: GameMapMovementRequestMessage,
  8001: GameActionFightCastOnTargetRequestMessage,
  4946: GameActionFightCastRequestMessage,
  2738: FinishMoveSetRequestMessage,
  2551: FinishMoveListRequestMessage,
  4887: SpellVariantActivationRequestMessage,
  644: GameContextQuitMessage,
  8276: BreachRoomUnlockRequestMessage,
  2995: BreachRewardBuyMessage,
  4948: BreachExitRequestMessage,
  2909: BreachKickRequestMessage,
  7544: BreachInvitationRequestMessage,
  8749: EditHavenBagRequestMessage,
  7038: ChangeHavenBagRoomRequestMessage,
  5731: EditHavenBagCancelRequestMessage,
  8486: HavenBagFurnituresRequestMessage,
  2106: HavenBagPermissionsUpdateRequestMessage,
  3811: OpenHavenBagFurnitureSequenceRequestMessage,
  3890: CloseHavenBagFurnitureSequenceRequestMessage,
  8958: ChangeThemeRequestMessage,
  9491: ExitHavenBagRequestMessage,
  8862: HouseKickIndoorMerchantRequestMessage,
  6519: GameFightJoinRequestMessage,
  5499: GameFightPlacementPositionRequestMessage,
  7699: GameFightPlacementSwapPositionsRequestMessage,
  2712: GameContextKickMessage,
  7054: GameFightPlacementSwapPositionsCancelMessage,
  3480: GameFightReadyMessage,
  2140: GameFightPlacementSwapPositionsAcceptMessage,
  1: NotificationResetMessage,
  5562: QuestStepInfoRequestMessage,
  8640: WatchQuestStepInfoRequestMessage,
  3466: UnfollowQuestObjectiveRequestMessage,
  6823: TreasureHuntFlagRemoveRequestMessage,
  9576: TreasureHuntFlagRequestMessage,
  2230: GuidedModeReturnRequestMessage,
  6283: TreasureHuntLegendaryRequestMessage,
  6012: GuidedModeQuitRequestMessage,
  2962: TreasureHuntGiveUpRequestMessage,
  6533: QuestListRequestMessage,
  8182: FollowQuestObjectiveRequestMessage,
  3165: AchievementRewardRequestMessage,
  8604: NotificationUpdateFlagMessage,
  7368: QuestObjectiveValidationMessage,
  5136: AchievementDetailsRequestMessage,
  1088: RefreshFollowedQuestsOrderRequestMessage,
  6071: QuestStartRequestMessage,
  5957: AchievementDetailedListRequestMessage,
  3810: AchievementAlmostFinishedDetailedListRequestMessage,
  6219: TreasureHuntDigRequestMessage,
  9517: AuthenticationTicketMessage,
  3123: CharacterSelectionMessage,
  2652: CharacterSelectionWithRemodelMessage,
  1828: CharacterNameSuggestionRequestMessage,
  6390: CharacterSelectedForceReadyMessage,
  1501: CharactersListRequestMessage,
  5026: CharacterCreationRequestMessage,
  6208: CharacterCanBeCreatedRequestMessage,
  9614: CharacterReplayRequestMessage,
  3832: CharacterReplayWithRemodelRequestMessage,
  8408: StartupActionsObjetAttributionMessage,
  8834: StartupActionsExecuteMessage,
  3196: CharacterFirstSelectionMessage,
  5310: GameContextCreateRequestMessage,
  8394: CharacterDeletionRequestMessage,
  9528: AcquaintanceSearchMessage,
  214: ServerSelectionMessage,
  6281: CheckFileMessage,
  9708: ResetCharacterStatsRequestMessage,
  327: StatsUpgradeRequestMessage,
  2956: StartupActionsAllAttributionMessage,
  456: PaddockToSellListRequestMessage,
  8388: PaddockToSellFilterMessage,
  1679: HouseToSellListRequestMessage,
  3571: HouseToSellFilterMessage,
  400: AdminQuietCommandMessage,
  4228: SetEnablePVPRequestMessage,
  9582: CharacterAlignmentWarEffortProgressionRequestMessage,
  5249: AlignmentWarEffortDonateRequestMessage,
  5727: AlignmentWarEffortProgressionRequestMessage,
  1653: ObjectAveragePricesGetMessage,
  2403: ReloginTokenRequestMessage,
  5877: AnomalySubareaInformationRequestMessage,
  4572: ZaapRespawnSaveRequestMessage,
  1539: TeleportRequestMessage,
  6260: JobCrafterDirectoryDefineSettingsMessage,
  4809: JobBookSubscribeRequestMessage,
  5786: JobCrafterDirectoryListRequestMessage,
  5412: ExchangeObjectUseInWorkshopMessage,
  6235: ExchangeReplayStopMessage,
  7316: ExchangeCraftCountRequestMessage,
  4258: ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage,
  5785: ExchangeCraftPaymentModificationRequestMessage,
  1333: ExchangeSetCraftRecipeMessage,
  9275: MountSetXpRatioRequestMessage,
  9897: MountHarnessDissociateRequestMessage,
  6636: MountInformationInPaddockRequestMessage,
  5543: MountReleaseRequestMessage,
  7947: MountHarnessColorsUpdateRequestMessage,
  8042: MountRenameRequestMessage,
  8131: MountFeedRequestMessage,
  9421: ExchangeHandleMountsMessage,
  8145: ExchangeRequestOnMountStockMessage,
  2112: MountInformationRequestMessage,
  8445: MountToggleRidingRequestMessage,
  590: MountSterilizeRequestMessage,
  5595: HouseGuildShareRequestMessage,
  8499: HouseKickRequestMessage,
  9330: HouseSellRequestMessage,
  768: LockableChangeCodeMessage,
  3448: HouseLockFromInsideRequestMessage,
  4286: HouseBuyRequestMessage,
  5075: HouseSellFromInsideRequestMessage,
  7124: HouseGuildRightsViewMessage,
  4149: OrnamentSelectRequestMessage,
  350: TitlesAndOrnamentsListRequestMessage,
  8025: TitleSelectRequestMessage,
  3688: PresetDeleteRequestMessage,
  3065: ObjectUseMessage,
  1126: ObjectUseMultipleMessage,
  5971: ObjectDropMessage,
  4898: IconPresetSaveRequestMessage,
  8129: IconNamedPresetSaveRequestMessage,
  8147: ObjectDeleteMessage,
  35: AccessoryPreviewRequestMessage,
  906: ShortcutBarRemoveRequestMessage,
  8768: ObjectUseOnCharacterMessage,
  709: ShortcutBarSwapRequestMessage,
  5623: ObjectUseOnCellMessage,
  9513: ShortcutBarAddRequestMessage,
  478: IdolsPresetSaveRequestMessage,
  1855: PresetUseRequestMessage,
  5107: ObjectSetPositionMessage,
  3195: ExchangeBidHouseBuyMessage,
  8992: ExchangeBidHousePriceMessage,
  6250: ExchangeBidHouseSearchMessage,
  2675: ExchangeBidHouseListMessage,
  4445: ExchangeBidHouseTypeMessage,
  3929: ExchangeObjectModifyPricedMessage,
  4030: StopToListenRunningFightRequestMessage,
  9098: GameFightSpectatePlayerRequestMessage,
  8028: MapRunningFightDetailsRequestMessage,
  1407: MapRunningFightListRequestMessage,
  3024: ExchangeAcceptMessage,
  5849: ExchangeReadyMessage,
  2904: FocusedExchangeReadyMessage,
  4409: GameMapMovementCancelMessage,
  3431: ChangeMapMessage,
  1760: GameCautiousMapMovementRequestMessage,
  9714: InteractiveUseRequestMessage,
  6220: InteractiveUseWithParamRequestMessage,
  3767: GameRolePlayAttackMonsterRequestMessage,
  8420: GameMapMovementConfirmMessage,
  427: ExchangeObjectMoveKamaMessage,
  7123: ExchangeObjectTransfertExistingToInvMessage,
  3871: ExchangeObjectTransfertListFromInvMessage,
  8392: ExchangeObjectTransfertAllToInvMessage,
  1721: ExchangeObjectTransfertListToInvMessage,
  5493: ExchangeObjectTransfertListWithQuantityToInvMessage,
  9957: ExchangeObjectTransfertAllFromInvMessage,
  8876: ExchangeObjectTransfertExistingFromInvMessage,
  398: NpcDialogReplyMessage,
  8638: PaddockBuyRequestMessage,
  2370: PaddockSellRequestMessage,
  8895: GuildInvitationAnswerMessage,
  3249: GuildModificationEmblemValidMessage,
  7329: GuildModificationValidMessage,
  5982: GuildModificationNameValidMessage,
  1395: GuildCreationValidMessage,
  932: DiceRollRequestMessage,
  3499: TeleportBuddiesAnswerMessage,
  6962: AllianceInvitationAnswerMessage,
  8950: AllianceModificationNameAndTagValidMessage,
  5504: AllianceCreationValidMessage,
  4144: AllianceModificationValidMessage,
  8937: AllianceModificationEmblemValidMessage,
  5093: IdolSelectRequestMessage,
  868: IdolPartyRegisterRequestMessage,
  6523: ForgettableSpellClientActionMessage,
  9127: ActivityHideRequestMessage,
  2540: ActivitySuggestionsRequestMessage,
  579: ActivityLockRequestMessage,
  9520: HaapiBufferListRequestMessage,
  5599: HaapiConfirmationRequestMessage,
  3479: HaapiCancelBidRequestMessage,
  4578: HaapiShopApiKeyRequestMessage,
  3931: HaapiValidationRequestMessage,
  7220: HaapiTokenRequestMessage,
  7621: HaapiConsumeBufferRequestMessage,
  1059: SequenceNumberMessage,
  7679: LivingObjectChangeSkinRequestMessage,
  7604: SymbioticObjectAssociateRequestMessage,
  2549: MimicryObjectFeedAndAssociateRequestMessage,
  9634: WrapperObjectDissociateRequestMessage,
  3575: MimicryObjectEraseRequestMessage,
  9254: LivingObjectDissociateMessage,
  5845: ObjectFeedMessage,
  2382: GameFightOptionToggleMessage,
  5618: LockableUseCodeMessage,
  1281: BasicWhoAmIRequestMessage,
  514: BasicStatMessage,
  1144: BasicStatWithDataMessage,
  6564: PartyLocateMembersRequestMessage,
  4808: ContactLookRequestByNameMessage,
  3858: JobCrafterDirectoryEntryRequestMessage,
};
